#+TITLE: 97 Thigns Every Programmer Should Know
#+SUBTITLE: Collective Wisdom from the Experts
#+EDITOR: Kevlin Henney
#+YEAR: 2010
#+STARTUP: overview
#+STARTUP: entitiespretty

* Contributions by Category - xv
* Preface - xxiii
* Act with Prudence _by_ Seb Rose - 2
* Apply Functional Programming Principles _by_ Edward Garson - 4
* Ask, “What Would the User Do?” (You Are Not the User) _by_ Giles Colborne - 6
* Automate Your Coding Standard _by_ Filip van Laenen - 8
* Beauty Is in Simplicity _by_ Jørn Ølmheim - 10
* Before You Refactor _by_ Rajith Attapattu - 12
* Beware the Share _by_ Udi Dahan - 14
* The Boy Scout Rule _by_ Robert C. Martin (Uncle Bob) - 16
* Check Your Code First Before Looking to Blame Others _by_ Allan Kelly - 18
* Choose Your Tools with Care _by_ Giovanni Asproni - 20
* Code in the Language of the Domain _by_ Dan North - 22
* Code Is Design _by_ Ryan Brush - 24
* Code Layout Matters _by_ Steve Freeman - 26
* Code Reviews _by_ Mattias Karlsson - 28
* Coding with Reason _by_ Yechiel Kimchi - 30
* A Comment on Comments _by_ Cal Evans - 32
* Comment Only What the Code Cannot Say _by_ Kevlin Henney - 34
* Continuous Learning _by_ Clint Shank - 36
* Convenience Is Not an -ility _by_ Gregor Hohpe - 38
* Deploy Early and Often _by_ Steve Berczuk - 40
* Distinguish Business Exceptions from Technical _by_ Dan Bergh Johnsson - 42
* Do Lots of Deliberate Practice _by_ Jon Jagger - 44
* Domain-Specific Languages _by_ Michael Hunger - 46
* Don't Be Afraid to Break Things _by_ Mike Lewis - 48
* Don't Be Cute with Your Test Data _by_ Rod Begbie - 50
* Don't Ignore That Error! _by_ Pete Goodliffe - 52
* Don't Just Learn the Language, Understand Its Culture _by_ Anders Norås - 54
* Don't Nail Your Program into the Upright Position _by_ Verity Stob - 56
* Don't Rely on "Magic Happens Here" _by_ Alan Griffiths - 58
* Don't Repeat Yourself _by_ Steve Smith - 60
* Don't Touch That Code! _by_ Cal Evans - 62
* Encapsulate Behavior, Not Just State _by_ Einar Landre - 64
* Floating-Point Numbers Aren't Real _by_ Chuck Allison - 66
* Fulfill Your Ambitions with Open Source _by_ Richard Monson-Haefel - 68
* The Golden Rule of API Design _by_ Michael Feathers - 70
* The Guru Myth _by_ Ryan Brush - 72
* Hard Work Does Not Pay Off _by_ Olve Maudal - 74
* How to Use a Bug Tracker _by_ Matt Doar - 76
* Improve Code by Removing It _by_ Pete Goodliffe - 78
* Install Me _by_ Marcus Baker - 80
* Interprocess Communication Affects Application Response Time _by_ Randy Stafford - 82
* Keep the Build Clean _by_ Johannes Brodwall - 84
* Know How to Use Command-Line Tools _by_ Carroll Robinson - 86
* Know Well More Than Two Programming Languages _by_ Russel Winder - 88
* Know Your IDE _by_ Heinz Kabutz - 90
* Know Your Limits _by_ Greg Colvin - 92
* Know Your Next Commit _by_ Dan Bergh Johnsson - 94
* Large, Interconnected Data Belongs to a Database _by_ Diomidis Spinellis - 96
* Learn Foreign Languages _by_ Klaus Marquardt - 98
* Learn to Estimate _by_ Giovanni Asproni - 100
* Learn to Say, "Hello, World" _by_ Thomas Guest - 102
* Let Your Project Speak for Itself _by_ Daniel Lindner - 104
* The Linker Is Not a Magical Program _by_ Walter Bright - 106
* The Longevity of Interim Solutions _by_ Klaus Marquardt - 108
* Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly _by_ Scott Meyers - 110
* Make the Invisible More Visible _by_ Jon Jagger - 112
* Message Passing Leads to Better Scalability in Parallel Systems _by_ Russel Winder - 114
* A Message to the Future _by_ Linda Rising - 116
* Missing Opportunities for Polymorphism _by_ Kirk Pepperdine - 118
* News of the Weird: Testers Are Your Friends _by_ Burk Hufnagel - 120
* One Binary _by_ Steve Freeman - 122
* Only the Code Tells the Truth _by_ Peter Sommerlad - 124
* Own (and Refactor) the Build _by_ Steve Berczuk - 126
* Pair Program and Feel the Flow _by_ Gudny Hauknes, Kari Røssland, and Ann Katrin Gagnat - 128
* Prefer Domain-Specific Types to Primitive Types _by_ Einar Landre - 130
* Prevent Errors _by_ Giles Colborne - 132
* The Professional Programmer _by_ Robert C. Martin (Uncle Bob) - 134
* Put Everything Under Version Control _by_ Diomidis Spinellis - 136
* Put the Mouse Down and Step Away from the Keyboard _by_ Burk Hufnagel - 138
* Read Code _by_ Karianne Berg - 140
* Read the Humanities _by_ Keith Braithwaite - 142
* Reinvent the Wheel Often _by_ Jason P. Sage - 144
* Resist the Temptation of the Singleton Pattern _by_ Sam Saariste - 146
* The Road to Performance Is Littered with Dirty Code Bombs _by_ Kirk Pepperdine - 148
* Simplicity Comes from Reduction _by_ Paul W. Homer - 150
* The Single Responsibility Principle _by_ Robert C. Martin (Uncle Bob) - 152
* Start from Yes _by_ Alex Miller - 154
* Step Back and Automate, Automate, Automate _by_ Cay Horstmann - 156
* Take Advantage of Code Analysis Tools _by_ Sarah Mount - 158
* Test for Required Behavior, Not Incidental Behavior _by_ Kevlin Henney - 160
* Test Precisely and Concretely _by_ Kevlin Henney - 162
* Test While You Sleep (and over Weekends) _by_ Rajith Attapattu - 164
* Testing Is the Engineering Rigor of Software Development _by_ Neal Ford - 166
* Thinking in States _by_ Niclas Nilsson - 168
* Two Heads Are Often Better Than One _by_ Adrian Wible - 170
* Two Wrongs Can Make a Right (and Are Difficult to Fix) _by_ Allan Kelly - 172
* Ubuntu Coding for Your Friends _by_ Aslam Khan - 174
* The Unix Tools Are Your Friends _by_ Diomidis Spinellis - 176
* Use the Right Algorithm and Data Structure _by_ Jan Christiaan "JC" van Winkel - 178
* Verbose Logging Will Disturb Your Sleep _by_ Johannes Brodwall - 180
* WET Dilutes Performance Bottlenecks _by_ Kirk Pepperdine - 182
* When Programmers and Testers Collaborate _by_ Janet Gregory - 184
* Write Code As If You Had to Support It for the Rest of Your Life _by_ Yuriy Zubarev - 186
* Write Small Functions Using Examples _by_ Keith Braithwaite - 188
* Write Tests for People _by_ Gerard Meszaros - 190
* You Gotta Care About the Code _by_ Pete Goodliffe - 192
* Your Customers Do Not Mean What They Say _by_ Nate Jackson - 194
* Contributors - 196
* Index - 221
