#+TITLE: Mastering Bitcoin
#+SUBTITLE: Programming the Open Blockchain
#+AUTHOR: Andreas M. Antonopoulos & David A. Harding
#+VERSION: 3rd, 2024
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Preface - xiii
* 1. Introduction - 1
** History of Bitcoin - 4
** Getting Started - 5
*** Choosing a Bitcoin Wallet - 5
*** Quick Start - 7
*** Recovery Codes - 8
*** Bitcoin Addresses - 9
*** Receiving Bitcoin - 10
*** Getting Your First Bitcoin - 11
*** Finding the Current Price of Bitcoin - 12
*** Sending and Receiving Bitcoin - 12

* 2. How Bitcoin Works - 15
** Bitcoin Overview - 15
** Buying from an Online Store - 16
** Bitcoin Transactions - 18
*** Transaction Inputs and Outputs - 18
*** Transaction Chains - 19
*** Making Change - 20
*** Coin Selection - 20
*** Common Transaction Forms - 21

** Constructing a Transaction - 22
*** Getting the Right Inputs - 22
*** Creating the Outputs - 23
*** Adding the Transaction to the Blockchain - 23

** Bitcoin Mining - 24
** Spending the Transaction - 28

* 3. Bitcoin Core: The Reference Implementation - 29
** From Bitcoin to Bitcoin Core - 29
** Bitcoin Development Environment - 31
** Compiling Bitcoin Core from the Source Code - 31
*** Selecting a Bitcoin Core Release - 32
*** Configuring the Bitcoin Core Build - 33
*** Building the Bitcoin Core Executables - 35

** Running a Bitcoin Core Node - 36
** Configuring the Bitcoin Core Node - 37
** Bitcoin Core API - 41
*** Getting Information on Bitcoin Core’s Status - 42
*** Exploring and Decoding Transactions - 43
*** Exploring Blocks - 45
*** Using Bitcoin Core’s Programmatic Interface - 46

** Alternative Clients, Libraries, and Toolkits - 50
*** C/C++ - 50
*** JavaScript - 50
*** Java - 51
*** Python - 51
*** Go - 51
*** Rust - 51
*** Scala - 51
*** C# - 51

* 4. Keys and Addresses - 53
** Public Key Cryptography - 54
*** Private Keys - 55
*** Elliptic Curve Cryptography Explained - 56
*** Public Keys - 59

** Output and Input Scripts - 61
** IP Addresses: The Original Address for Bitcoin (P2PK) - 62
** Legacy Addresses for P2PKH - 63
** Base58check Encoding - 66
** Compressed Public Keys - 69
** Legacy Pay to Script Hash (P2SH) - 71
** Bech32 Addresses - 74
*** Problems with Bech32 Addresses - 76
*** Bech32m - 77
*** Private Key Formats - 81
*** Compressed Private Keys - 82

** Advanced Keys and Addresses - 83
*** Vanity Addresses - 83
*** Paper Wallets - 86

* 5. Wallet Recovery - 89
** Independent Key Generation - 89
*** Deterministic Key Generation - 90
*** Public Child Key Derivation - 92
*** Hierarchical Deterministic (HD) Key Generation (BIP32) - 93
*** Seeds and Recovery Codes - 94
*** Backing Up Nonkey Data - 97
*** Backing Up Key Derivation Paths - 99

** A Wallet Technology Stack in Detail - 101
*** BIP39 Recovery Codes - 101
*** Creating an HD Wallet from the Seed - 108
*** Using an Extended Public Key on a Web Store - 114

* 6. Transactions - 119
** A Serialized Bitcoin Transaction - 119
** Version - 121
** Extended Marker and Flag - 122
** Inputs - 123
*** Length of Transaction Input List - 123
*** Outpoint - 124
*** Input Script - 127
*** Sequence - 127

** Outputs - 130
*** Outputs Count - 131
*** Amount - 131
*** Output Scripts - 132

** Witness Structure - 133
*** Circular Dependencies - 134
*** Third-Party Transaction Malleability - 135
*** Second-Party Transaction Malleability - 136
*** Segregated Witness - 137
*** Witness Structure Serialization - 138

** Lock Time - 139
** Coinbase Transactions - 139
** Weight and Vbytes - 141
** Legacy Serialization - 142

* 7. Authorization and Authentication - 143
** Transaction Scripts and Script Language - 143
*** Turing Incompleteness - 144
*** Stateless Verification - 144
*** Script Construction - 145
*** Pay to Public Key Hash - 148

** Scripted Multisignatures - 150
*** An Oddity in CHECKMULTISIG Execution - 152

** Pay to Script Hash - 153
*** P2SH Addresses - 155
*** Benefits of P2SH - 155
*** Redeem Script and Validation - 156

** Data Recording Output (~OP_RETURN~) - 156
*** Transaction Lock Time Limitations - 158
*** Check Lock Time Verify (~OP_CLTV~) - 158
*** Relative Timelocks - 160
*** Relative Timelocks with ~OP_CSV~ - 161

** Scripts with Flow Control (Conditional Clauses) - 162
*** Conditional Clauses with VERIFY Opcodes - 163
*** Using Flow Control in Scripts - 164

** Complex Script Example - 165
*** Segregated Witness Output and Transaction Examples - 166
*** Upgrading to Segregated Witness - 170

** Merklized Alternative Script Trees (MAST) - 172
** Pay to Contract (P2C) - 176
** Scriptless Multisignatures and Threshold Signatures - 177
** Taproot - 178
** Tapscript - 180

* 8. Digital Signatures - 183
** How Digital Signatures Work - 184
*** Creating a Digital Signature - 184
*** Verifying the Signature - 184
*** Signature Hash Types (SIGHASH) - 185

** Schnorr Signatures - 187
*** Serialization of Schnorr Signatures - 193
*** Schnorr-based Scriptless Multisignatures - 193
*** Schnorr-based Scriptless Threshold Signatures - 195

** ECDSA Signatures - 197
*** ECDSA Algorithm - 198
*** Serialization of ECDSA Signatures (DER) - 199

** The Importance of Randomness in Signatures - 200
** Segregated Witness’s New Signing Algorithm - 201

* 9. Transaction Fees - 203
** Who Pays the Transaction Fee? - 204
** Fees and Fee Rates - 205
** Estimating Appropriate Fee Rates - 206
** Replace By Fee (RBF) Fee Bumping - 207
** Child Pays for Parent (CPFP) Fee Bumping - 210
** Package Relay - 211
** Transaction Pinning - 212
** CPFP Carve Out and Anchor Outputs - 213
** Adding Fees to Transactions - 214
** Timelock Defense Against Fee Sniping - 215

* 10. The Bitcoin Network - 217
** Node Types and Roles - 218
** The Network - 218
** Compact Block Relay - 219
** Private Block Relay Networks - 221
** Network Discovery - 223
** Full Nodes - 227
** Exchanging "Inventory" - 227
** Lightweight Clients - 228
** Bloom Filters - 231
*** How Bloom Filters Work - 231
*** How Lightweight Clients Use Bloom Filters - 235

** Compact Block Filters - 237
*** Golomb-Rice Coded Sets (GCS) - 237
*** What Data to Include in a Block Filter - 239
*** Downloading Block Filters from Multiple Peers - 240
*** Reducing Bandwidth with Lossy Encoding - 241
*** Using Compact Block Filters - 242

** Lightweight Clients and Privacy - 243
** Encrypted and Authenticated Connections - 243
** Mempools and Orphan Pools - 244

* 11. The Blockchain - 245
** Structure of a Block - 246
** Block Header - 247
** Block Identifiers: Block Header Hash and Block Height - 247
** The Genesis Block - 248
** Linking Blocks in the Blockchain - 249
** Merkle Trees - 252
** Merkle Trees and Lightweight Clients - 256
** Bitcoin's Test Blockchains - 257
*** Testnet: Bitcoin's Testing Playground - 257
*** Signet: The Proof of Authority Testnet - 259
*** Regtest: The Local Blockchain - 260

** Using Test Blockchains for Development - 261

* 12. Mining and Consensus - 263
** Bitcoin Economics and Currency Creation - 265
** Decentralized Consensus - 267
** Independent Verification of Transactions - 268
** Mining Nodes - 269
*** The Coinbase Transaction - 270
*** Coinbase Reward and Fees - 270
*** Structure of the Coinbase Transaction - 271
*** Coinbase Data - 272

** Constructing the Block Header - 273
** Mining the Block - 275
*** Proof-of-Work Algorithm - 275
*** Target Representation - 277
*** Retargeting to Adjust Difficulty - 278

** Median Time Past (MTP) - 280
** Successfully Mining the Block - 281
** Validating a New Block - 281
** Assembling and Selecting Chains of Blocks - 282
** Mining and the Hash Lottery - 284
*** The Extra Nonce Solution - 284
*** Mining Pools - 285

** Hashrate Attacks - 288
** Changing the Consensus Rules - 291
*** Hard Forks - 291
*** Soft Forks - 295
*** Consensus Software Development - 301

* 13. Bitcoin Security - 303
** Security Principles - 303
*** Developing Bitcoin Systems Securely - 304
*** The Root of Trust - 305

** User Security Best Practices - 306
*** Physical Bitcoin Storage - 307
*** Hardware Signing Devices - 307
*** Ensuring Your Access - 307
*** Diversifying Risk - 308
*** Multisig and Governance - 308
*** Survivability - 308

* 14. Second-Layer Applications - 311
** Building Blocks (Primitives) - 311
** Applications from Building Blocks - 313
** Colored Coins - 314
*** Single-Use Seals - 315
*** Pay to Contract (P2C) - 315
*** Client-Side Validation - 316
*** RGB - 316
*** Taproot Assets - 317

** Payment Channels and State Channels - 318
*** State Channels—Basic Concepts and Terminology - 319
*** Simple Payment Channel Example - 321
*** Making Trustless Channels - 323
*** Asymmetric Revocable Commitments - 327
*** Hash Time Lock Contracts (HTLC) - 331

** Routed Payment Channels (Lightning Network) - 332
*** Basic Lightning Network Example - 333
*** Lightning Network Transport and Pathfinding - 336
*** Lightning Network Benefits - 337

* A. The Bitcoin Whitepaper by Satoshi Nakamoto - 339
* B. Errata to the Bitcoin Whitepaper - 351
* C. Bitcoin Improvement Proposals - 357
* Index - 363
