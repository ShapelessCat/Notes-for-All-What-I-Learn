#+TITLE: PostgreSQL Bootcamp
#+SUBTITLE: Go From Beginner to Advanced, 60+hours
#+VERSION: Last updated November 2022
#+AUTHOR: Adnan Waheed
#+STARTUP: overview
#+STARTUP: entitiespretty

* Section 1: Welcome
** 1. Course Introduction
** 2. Sample Data Files

* Section 2: Introduction to PostgreSQL
** 3. Installing PostgreSQL on Mac
** 4. Installing PostgreSQL on Windows
** 5. Conffigure pgAdmin 4 Client
** 6. Creating A Database User
** 7. Creating a Database
** 8. Running A Query in pgAdmin Tool
** 9. Install Sample Data Files on Server
** 10. Install Human Resource (hr) Database
** 11. Install Sample Stocks Market Data
** 12. Install Northwind Database
** 13. Drop A Database

* Section 3: Creating and Modifying Tables
** 14. Movie Database Structure
** 15. Creating the /movie/ Database and An /actors/ Table
** 16. Creating The /directors/ Table
** 17. Creating The /movies/ Table with A Foreign Key
** 18. Creating The /movies_revenues/ table
** 19. Creating A Junction Table with /movies/ and /actors/ Tables
** 20. Install Sample Data for "movies" Database
** 21. Create A Sample Database "mydata"
** 22. Using pgAdmin - Create and Modify A Table
** 23. Using pgAdmin - View Table Structure, and Create Column
** 24. Using pgAdmin - Rename, Delete and Change The Data Type of A Column
** 25. Deleting Tables from A Database

* Section 4: Modifying Data in The Tables
** 26. Insert A Data into Table
** 27. Insert Multiple Records into A Table
** 28. Insert A Data that Had Quotes
** 29. Use ~RETURNING~ to Get Info on Added Rows
** 30. Update Data in A Table
** 31. Updating A Row and ~RETURNING~ the Updated Row
** 32. Updating All Records in A Table
** 33. Delete Data from A Table
** 34. Using ~UPSERT~

* Section 5: Querying Data
** 35. Selecting All Data from A Table
** 36. Selecting Specific Columns from A Table
** 37. Adding Aliases to Columns in A Table
** 38. Using ~SELECT~ Statement for Expressions
** 39. Using ~ORDER BY~ to Sort Records
** 40. Using ~ORDER BY~ with Alias Column Name
** 41. Using ~ORDER BY~ to Sort Rows by Expressions
** 42. Using ~ORDER BY~ with Column Name or Column Number
** 43. Using ~ORDER BY~ with ~NULL~ values
** 44. Using ~DISTINCT~ for Selecting Distinct Values

* Section 6: Filtering Data
** 45. Comparison, Logical and Arithmetic Operators
** 46. ~AND~ Operator
** 47. ~OR~ Operator
** 48. Combining ~AND~, ~OR~ Operators
** 49. What Goes Before and After ~WHERE~ Clause
** 50. Execution Order with ~AND~, ~OR~ Operators
** 51. Can We Use Column Aliases with ~WHERE~?
** 52. Order of Execution of ~WHERE~, ~SELECT~ and ~ORDER~ BY Clauses
** 53. Using Logical Operators
** 54. Using ~LIMIT and OFFSET~
** 55. Using ~FETCH~
   - ~FETCH~ was introduced in SQL 2008.
     *PRERFER ~FETCH~ than ~LIMIT~.*

   - Syntax:
     #+begin_src text
       OFFSET start { ROW | ROWS }
       FETCH { FIRST | NEXT } [ row_count ] { ROW | ROWS } ONLY
     #+end_src

   - ~OFFSET~ can be before/after ~FETCH~

** 56. Using ~IN~, ~NOT IN~
** 57. Using ~BETWEEN~ and ~NOT BETWEEN~
** 58. Using ~LIKE~ and ~ILIKE~
** 59. Using ~IS NULL~ and ~IS NOT NULL~ Keywords
** 60. Concatenation Techniques
** 61. Concatenation with ~||~, ~CONCAT~ and ~CONCAT_WS~
   - ~CONCAT_WS~ *IGNORES all* ~NULL~ values, and for this ~NULL~ handling it
     doesn't have the behavior as ~CONCAT~, whose behavior is straightforward
     and naive when handling ~NULL~.

* Section 7: PostgreSQL Data Types
** DONE 62. BOOLEAN
   CLOSED: [2023-04-16 Sun 16:47]
   1. PostgreSQL ~BOOLEAN~ can have three values:
      - ~TRUE~
      - ~FALSE~
      - ~NULL~

   2. Valid literals for ~BOOLEAN~ values in PostgreSQL:
      |-------------------+--------------------|
      | literals for TRUE | literals for FALSE |
      |-------------------+--------------------|
      | ~TRUE~            | ~FALSE~            |
      | ~'true'~          | ~'false'~          |
      | ~'t'~             | ~'f'~              |
      | ~'y'~             | ~'n'~              |
      | ~'yes'~           | ~'no'~             |
      | ~'1'~             | ~'0'~              |
      |-------------------+--------------------|

** DONE 63. CHAR, VARCHAR and TEXT
   CLOSED: [2023-04-16 Sun 17:19]
   1. Characters strings types are genernal-purpose types suitable for:
      - text
      - numbers
      - symbols

   2. Three main types of ~CHARACTER~ data:
      |-----------+---------------------------------------+-----------------------------------|
      |           | Character Types                       | Notes                             |
      |-----------+---------------------------------------+-----------------------------------|
      | Preferred | ~CHARACTER VARYING(n)~ , ~VARCHAR(n)~ | variable-length with length limit |
      | Preferred | ~TEXT~, ~VARCHAR~                     | variable unlimited length         |
      |-----------+---------------------------------------+-----------------------------------|
      |           | ~CHARACTER(n)~, ~CHAR(n)~             | fixed-length, blank padded        |
      |-----------+---------------------------------------+-----------------------------------|

      - Where ~n~ is the number of characters.
        * For ~CHARACTER(n)~ and ~CHAR(n)~, if no value specified, the default value ~1~ will be used.
        * For ~CHARACTER VARYING(n)~ and ~VARCHAR(n)~, if no value specified, the default value ~1~ will be used.

** TODO 64. NUMERIC
** TODO 65. DECIMALS
** DONE 66. Selecting Numbers Data Types
   CLOSED: [2023-04-16 Sun 17:46]
   1. Use integers whenever possible
   2. Decimal data and calculations need to be exact, then use nuumeric or decimal.
      Float can save space, but be careful about inexactness.
   3. Choose a big enough number type by looking at your data.
   4. With big whole numbers, use ~BIGINT~ only if column values constrained to fit
      into either smaller integer or ~smallint~ types.

** DONE 67. Date/Time Data Types
   CLOSED: [2023-04-16 Sun 17:46]
   |-------------+----------------------------+-------------+-------------|
   |             | Stores                     | lower bound | upper bound |
   |-------------+----------------------------+-------------+-------------|
   | Date        | date only                  | 4713 BC     | 294276 AD   |
   | Time        | time only                  | 4713 BC     | 5874897 AD  |
   | Timestamp   | date and time              | 4713 BC     | 294276 AD   |
   | Timestamptz | date, time, and ttimestamp | 4713 BC     | 294276 AD   |
   |-------------+----------------------------+-------------+-------------|
   | Interval    | values              ???    |             |             |
   |-------------+----------------------------+-------------+-------------|

** DONE 68. DATE
   CLOSED: [2023-04-16 Sun 18:04]
   1. ~DATE~, 4 bytes
   2. By default YYYY-MM-DD
   3. ~CURRENT_DATE~
   4. ~NOW()~ -- timestamptz

   Example:
   #+begin_src sql
     CREATE TABLE table_dates(
            id serial primary key,
            employee_name VARCHAR(100) NOT NULL,
            hire_date DATE NOT NULL,
            add_date DATE DEFAULT CURRENT_DATE
     )
   #+end_src

** DONE 69. TIME
   CLOSED: [2023-04-16 Sun 18:20]
   - Tips:
     1. Store the time of day values.
     2. Take 8 bytes to store time.
     3. ~<column_name> TIME(precision~)
     4. precision: number of fractional digits placed in the second field.
        precision uup to 6 digits =TODO= =???=
     5. Common formats:
        * HH:MM
        * HH:MM:SS
        * HHMMSS
        * MM:SS.pppppp
        * HH:MM:SS.pppppp
        * HHMMSS.pppppp
     6. ~CURRENT_TIME~ and ~CURRENT_TIME(n)~ (still 6 digits, but the last 6 - ~n~ digits are ~0~'s)
     7. ~LOCALTIME~ and  ~LOCALTIME(n)~
     8. ~SELECT time '12:00' - time '04:00' AS RESULT;~
     9. ~SELECT CURRENT_TIME '12:00' - interval '-2 hours' AS RESULT;~

** DONE 70. TIMESTAMP and TIMESTAMPTZ
   CLOSED: [2023-04-16 Sun 18:41]
   - Tips:
     * ~SHOW TIMEZONE;~
     * ~SET TIMEZONE = 'America/New_York';~
     * ~SELECT CURRENT_TIMESTAMP;~
       (Time zone info is included, and this is why there is *no* ~CURRENT_TIMESTAMPTZ~)
     * ~SELECT TIMEOFFDAY();~
     * ~SELECT TIMEZONE();~
     * ~SELECT TIMEZONE('Asia/Singapore', '2020-01-01 00:00:00');~ shows 2020-01-01 13:00:00

** DONE 71. UUID
   CLOSED: [2023-04-16 Sun 19:12]
   - Tips:
     * ~CREATE EXTENSION IF NOT EXISTS "uuid-ossp";~
     * ~SELECT uuid_generate_v1();~ -- This involves the MAC address of the computer and a timestamp.
     * ~SELECT uuid_generate_v4();~ -- purely random.
     * Create a table use ~uuid_generate_v1()~, and switch to use ~uuid_generate_v4()~:
       #+begin_src sql
         CREATE TABLE table_uuid(
           product_id UUID DEFAULT uuid_generate_v1(),
           product_name VARCHAR(100) NOT NULL
         )

         ALTER TABLE table_uuid
         ALTER COLUMN product_id
         SET DEFAULT uuid_generate_v4();
       #+end_src

   - Example:
** DONE 72. Array
   CLOSED: [2023-04-16 Sun 19:22]
   - Tips:
     #+begin_src sql
       CREATE TABLE table_array(
              id SERIAL,
              name VARCHAR(100),
              phones TEXT []
       )

       INSERT INTO table_array (name, phones) VALUES
       ('Adam', ARRAY [ '(801)-123-4567', '(819)-555-2222' ]),
       ('Linda', ARRAY [ '(201)-123-4567', '(214)-222-3333' ]);


       SELECT
         name,
         phones [1]
       FROM
         table_array;
     #+end_src

** DONE 73. hstore
   CLOSED: [2023-04-16 Sun 19:32]
   - Introduction:
     1. ~hstore~ is a data type that store data into key-value pairs;
     2. The ~hstore~ module implements the ~hstore~ data type;
     3. The keys and values are just text strings only.

   - Installation:
     #+begin_src sql
       CREATE EXTENSION IF NOT EXISTS hstore;
     #+end_src

   - Usage:
     #+begin_src sql
       INSERT INTO table_hstore (title, book_info) VALUES
       (
         'TITLE 1',
         '
           "publisher" => "ABC publisher",
           "paper_cost" => "10.00",
           "e_cost" => "5.85",
         '
       ),
       (
       'TITLE 2',
       '
       "publisher" => "ABC publisher2",
       "paper_cost" => "20.00",
       "e_cost" => "10.85",
       '
       );

       SELECT
         book_info -> 'publisher' as "Publisher",
         book_info -> 'e_cost' as "Electronic Cost"
       FROM table_hstore;
     #+end_src

** DONE 74. JSON
   CLOSED: [2023-04-16 Sun 19:41]
   - Usage:
     #+begin_src sql
       CREATE TABLE table_json(
         id SERIAL PRIMARY KEY,
         docs JSON
       )

       INSERT INTO table_json (docs) VALUES
       ('[1,2,3,4,5,6]'),
       ('[2,3,4,5,6,7]'),
       ('{"key":"value"}');

       -- Without this, the below @> can't work
       ALTER TABLE table_json
       ALTER COLUMN docs TYPE JSONB;

       -- TODO: ???
       CREATE INDEX ON table_json USING GIN (docs->'Publisher' jsonb_path_ops);

       -- TODO: ???
       SELECT * FROM table_json
       WHERE docs @> '2';
     #+end_src

** DONE 75. Network Addresses
   CLOSED: [2023-04-16 Sun 20:02]
   - PostgreSQL offers data types to store IPv4, IPv5, and MAC addresses.
     * Network Address Types
       |----------+---------------+----------------------------------|
       | Name     | Storage size  | Notes                            |
       |----------+---------------+----------------------------------|
       | cidr     | 7 or 19 bytes | IPv4 and IPv6 networks           |
       | inet     | 7 or 19 bytes | IPv4 and IPv6 hosts and networks |
       | macaddr  | 6 bytes       | MAC addresses                    |
       | macaddr8 | 8 bytes       | MAC addresses (EUI-64 format)    |
       |----------+---------------+----------------------------------|

     * Use the above types to adopt the input error checking and special operations and functions support.
       + ~set_masklen~

     * Sepcial sorting mechanism
       After sorting, IPv4 is always before IPv6.

     * These types are bundled with indexing support and advanced functions and operator support.

   - Usages:
     #+begin_src sql
       SELECT
         ip,
         set_masklen(ip, 24) AS inet_24,
         set_masklen(ip::cidr, 24) AS cidr_24,
       FROM table_netaddr;
     #+end_src

* DONE Section 8: Modifying Tables Structures, Add Constraints
  CLOSED: [2023-04-16 Sun 20:22]
** DONE 76. Creating Sample Database 'myddata', adding Columns
   CLOSED: [2023-04-16 Sun 20:06]
   #+begin_src sql
     -- ...

     CREATE TABLE persons(
            person_id SERIAL PRIMARY KEY,
            first_name VARCHAR(20) NOT NULL,
            last_name VARCHAR(20) NOT NULL
     );

     ALTER TABLE persons
     ADD COLUMN age INT NOT NULL,
     ADD COLUMN nationality VARCHAR(20) NOT NULL,
     ADD COLUMN email VARCHAR(100) UNIQUE;
   #+end_src

** DONE 77. Modify Table Structures, Add/Modify Columns
   CLOSED: [2023-04-16 Sun 20:14]
   #+begin_src sql
     -- Change table name
     ALTER TABLE users;
     RENAME TO persons;

     -- Change column name
     ALTER TABLE persons
     RENAME COLUMN age TO person_age;

     -- Drop a column
     ALTER TABLE persons
     DROP COLUMN person_age;

     -- Change data type of a column
     ALTER TABLE persons
     ALTER COLUMN age TYPE INT
     USING age::INTEGER;


     ALTER TABLE persons
     ALTER COLUMN age TYPE VARCHAR(20);

     -- Set a default value for a existing column
     ALTER TABLE persons
     ALTER COLUMN is_enable VARCHAR(1);

     ALTER TABLE persons
     ALTER COLUMN is_enable SET DEFAULT 'Y';
   #+end_src
** DONE 78. Add Constraints to Columns
   CLOSED: [2023-04-16 Sun 20:22]
   #+begin_src sql
     CREATE TABLE web_linksss (
            link_id SERIAL PRIMARY KEY,
            link_url VARCHAR(255) NOT NULL,
            link_target VARCHAR(20)
     );

     INSERT INTO web_links (link_url, link_target) VALUES
     ('https://www.google.com', '_blank');

     -- Add a UNIQUE constraint to a column
     ALTER TABLE web_links
     ADD CONSTRAINT unique_web_url UNIQUE (link_url);

     -- To set a column to accept only defined allowed/acceptable values
     ALTER TABLE web_links
     ADD COLUMN is_enable VARCHAR(2);

     INSERT INTO web_links (link_url, link_target, is_enable) VALUES
     ('https://www.netflex.com', '_blank', 'Y');

     ALTER TABLE web_links
     ADD CHECK (is_enable IN ('Y', 'N'));     -- ONLY affect the future inserted rows or updated rows
   #+end_src

* DONE Section 9: Data Type Conversions
  CLOSED: [2023-04-16 Sun 20:43]
** DONE 79. What is A Data Type Conversion
   CLOSED: [2023-04-16 Sun 20:28]
   - Two types of conversions:
     * Implicit: done automatically by PostgreSQL
     * Explicit: done via conversion functions e.g. ~CAST~ or ~::~

   - Examples:
     #+begin_src sql
       SELECT * FROM movies
       WHERE movie_id = 1;

       -- implicit conversion
       SELECT * FROM movies
       WHERE movie_id = '1';

       -- explicit conversion
       SELECT * FROM movies
       WHERE movie_id = integer '1';
     #+end_src

** DONE 80. Using CAST for Data Conversions
   CLOSED: [2023-04-16 Sun 20:37]
   - Syntax:
     * ~CAST (expreession AS target_data_type)~
     * ~expression::type~

   - Target types:
     * BOOLEAN
     * character
     * numeric
     * array
     * JSON
     * UUID
     * hstore
     * Temporal type
     * Special type

** DONE 81. Implicit to Explicit Conversions
   CLOSED: [2023-04-16 Sun 20:37]
** DONE 82. Table Data Conversion
   CLOSED: [2023-04-16 Sun 20:43]
   #+begin_src sql
     SELECT
       rating_id,
       CASE
         WHEN rating~E'^\\d+$' THEN
           CAST (rating AS INTEGER)
         ELSE
           0
         END AS rating
     FROM
       ratings;
   #+end_src

* DONE Section 10: Conversion Functions - =TODO: Need Revisit=
  CLOSED: [2023-04-16 Sun 20:55]
** 83. ~to_char~
** 84. ~to_number~
** 85. ~to_dater~
** 86. ~to_timestamp~

* TODO Section 11: User-defined Data Types
** 87. ~CREATE DOMAIN~ - Create a DOMAIN data type, create an address
** 88. ~CREATE DOMAIN~ - Create a data type for a positive number
** 89. ~CREATE DOMAIN~ - Create a postal code validation data type
** 90. ~CREATE DOMAIN~ - Create a domain data type for an email validation
** 91. ~CREATE DOMAIN~ - Create a Enum or Set of values domain data type
** 92. ~CREATE DOMAIN~ - Get the list of all DOMAIN data types
** 93. ~CREATE DOMAIN~ - How to drop a domain data type
** 94. ~CREATE TYPE~ - Create a composite address object
** 95. ~CREATE TYPE~ - Create a composite ~inventory_item~ data type
** 96. ~CREATE TYPE~ - Create an ENUM data type and see how to drop a data type
** 97. ~ALTER TYPE~ - Alter a composite data type, change schema and more
** 98. ~ALTER TYPE~ - Alter an ENUM data type
** 99. Update an ~ENUM~ data in production server
** 100. An ~ENUM~ with a DEFAULT value in a table
** 101. Create a type if not exists using a PL/pgSQL function

* TODO Section 12: Explore PostgreSQL Constraints
** 102. Introduction to constraints
** 103. ~NOT NULL~ constraint
** 104. ~UNIQUE~ constraint
** 105. ~DEFAULT~ constraint
** 106. ~PRIMARY KEY~ Constraints
** 107. ~PRIMARY KEY~ Constraints on multiple columns
** 108. ~FOREIGN KEY~ Constraints
** 109. Tables without foreign key constraints
** 110. Creating foreign key constraints
** 111. Foreign keys maintains referential data integrity
** 112. ~DROP~ a constraint
** 113. Add or update foreign key constraint on existing table
** 114. ~CHECK~ constraint - An Introduction
** 115. ~CHECK~ constraint - Add to new table
** 116. ~CHECK~ constraint - Add, Rename, Drop on existing table

* TODO Section 13: PostgreSQL Sequences
** 117. Create a sequence, advance a sequence, get current value, set value
** 118. Restart, rename a sequence, and use pgAdmin to alter a sequence
** 119. Create a sequence with ~START WITH~, ~INCREMENT~, ~MINVALUE~ and ~MAXVALUE~
** 120. Create a sequence using a specific data type
** 121. Creating a descending sequence, and ~CYCLE~ sequence
** 122. Delete a sequence
** 123. Attach a sequence to a table column
** 124. List all sequences in a database
** 125. Share one sequence between two tables
** 126. Create an alphanumeric sequence

* TODO Section 14: String Functions
** 127. ~UPPER~, ~LOWER~ and ~INITCAP~
** 128. ~LEFT~ and ~RIGHT~
** 129. ~REVERSE~
** 130. ~SPLIT_PART~
** 131. ~TRIM~, ~BTRIM~, ~LTRIM~ and ~RTRIM~
** 132. ~LPAD~ and ~RPAD~
** 133. ~LENGTH~
** 134. ~POSITION~
** 135. ~STRPOS~
** 136. ~SUBSTRING~
** 137. ~REPEAT~
** 138. ~REPLACE~

* TODO Section 15: Aggregate Functions
** 139. Counting results via ~COUNT~ function
** 140. ~COUNT()~, ~COUNT(*)~ and ~COUNT(1)~
** 141. Sum with ~SUM~ function
** 142. ~MIN~ and ~MAX~ functions
** 143. ~GREATEST~ and ~LEAST~ functions
** 144. ~GREATEST~ vs. ~MAX()~
** 145. Average with ~AVG~ function
** 146. Combining Columns using Mathematical operators

* TODO Section 16: Using DATE/TIME Functions
** 147. Datetimes data types
** 148. System Month Date settings
** 149. Time of day formats and inputs
** 150. Strings to Dates conversions
** 151. Using ~TO_TIMESTAMP~ function
** 152. Formatting Dates
** 153. Date construction functions
** 154. Using ~MAKE_INTERVAL~ function
** 155. Using ~MAKE_TIMESTAMPTZ~ function
** 156. Date Value Extractors functions
** 157. Using math operators with dates
** 158. ~OVERLAPS~ Operator
** 159. Date / Time Functions
** 160. PostgreSQL Date / Time Functions
** 161. AGE function
** 162. ~CURRENT_DATE~ function
** 163. ~CURRENT_TIME~ function
** 164. Date accuracy with ~EPOCH~
** 165. Using Date, time, timestamp in tables
** 166. View and set timezones
** 167. How to handle timezones
** 168. ~date_part~ function
** 169. ~date_trunc~ function

* TODO Section 17: Grouping Data
** 170. Using ~GROUP BY~
** 171. Using ~GROUP BY~ with multiple columns, ~ORDER BY~
** 172. Order of execution in ~GROUP BY~ clause
** 173. Using ~HAVING~
** 174. Order of execution in ~HAVING~ clause
** 175. ~HAVING~ vs ~WHERE~
** 176. Handling ~NULL~ values with ~GROUP BY~

* TODO Section 18: Joining Multiple Tables
** 177. ~INNER~ joins
** 178. ~INNER~ joins with ~USING~
** 179. ~INNER~ joins with filter data Part 1
** 180. ~INNER~ joins with filter data Part 2
** 181. ~INNER~ joins with filter data Part 3
** 182. ~INNER~ joins with different data type columns
** 183. ~LEFT~ joins Part 1
** 184. ~LEFT~ joins Part 2
** 185. ~LEFT~ joins Part 3
** 186. ~LEFT~ joins Part 4
** 187. ~RIGHT~ joins
** 188. ~RIGHT~ joins Part 2
** 189. ~FULL~ Joins
** 190. Joining multiple tables
** 191. Self Joins Part 1
** 192. Self Joins Part 2
** 193. ~CROSS~ Joins
** 194. Natural Joins Part 1
** 195. Natural Joins Part 2
** 196. Append tables with different columns
** 197. ~ON~ versus ~WHERE~

* TODO Section 19: Combining Queries Together
** 198. Combine results sets with ~UNION~
** 199. ~UNION~ with filters and conditions
** 200. ~UNION~ tables with different number of columns
** 201. ~INTERSECT~ with tables
** 202. ~EXCEPT~ with tables

* TODO Section 20: PostgreSQL Schemas
** 203. What is a Schema?
** 204. Schema Operations (Add/Alter/Delete schemas)
** 205. Schema Hierarchy
** 206. Move a table to a new schema
** 207. Schema search path
** 208. Alter a schema ownership
** 209. Duplicate a schema along with all data
** 210. What is a system catalog schema?
** 211. Compare tables and columns in two schemas
** 212. Schemas and Privileges

* Section 21: Exploring Array Functions
* Section 22: JSON with PostgreSQL
* Section 23: Indexes and Performance Optimization
* Section 24: All about Views
* Section 25: Fun with Subqueries
* Section 26: Common Table Expressions (CTE)
* Section 27: Grouping Sets
* Section 28: Window Functions
* Section 29: Using Regular Expressions for Text Patterns
* Section 30: Powerful Text Searches in PostgreSQL
* Section 31: Table Partitions
* Section 32: Server Programming
* Section 33: Functions with SQL Language
* Section 34: Functions with PL/pgSQL Language
* Section 35: Exploring Stored Procedures
* Section 36: PostgreSQL Triggers
* Section 37: Using Cursors
* Section 38: Creating Crosstab Reports
* Section 39: Internationalization
* Section 40: PostgreSQL Transactions
* Section 41: Using Northwind Database
* Section 42: Using Human Resource (hr) Database
* Section 43: Exploring Stock Markets Data
* Section 44: Managing PostgreSQL Security
* Section 45: PostgreSQL Utilities - psql
* TODO Section 46: PostgreSQL Internals
** 600. List database users, and database sizes with and without indexes
** 601. List all database and schemas
** 602. List all tables and views
** 603. List all columns from a table
** 604. View system metadata via system information functions
** 605. View privileges information across tables
** 606. Using system Administration functions
** 607. Show all running queries
** 608. Terminate running and IDLE process
** 609. How to check live and dead rows in tables
** 610. File layout of PostgreSQL Tables

* TODO Section 47: Managing Tables
** 611. Using SELECT INTO to create a new table with joins
** 612. Duplicate a table with or without data
** 613. Import data from CSV files
** 614. Export Data to CSV files
** 615. Deleting duplicate records
** 616. Backup your databases regularly
** 617. Test queries on a test database
** 618. Not documenting your process?
** 619. Database operations and table size
** 620. Tracking table size
** 621. PostgreSQL autovacuum proces
** 622. Recovering unused space with ~VACUUM~
** 623. Generated Columns

* TODO Section 48: Extended PostgreSQL
** 624. Create a custom index method
** 625. Create a user-defined aggregate function

* TODO Section 49: Thank You!
** 626. Your feedback is very valuable
** 627. Upcoming course - Advanced Time Series Analysis
** 628. Bonus Courses
** 629. Thank You!
