#+TITLE: grokking Streaming Systems
#+SUBTITLE: Real-time event processing
#+AUTHOR: Josh Fischer, Ning Wang
#+STARTUP: overview
#+STARTUP: entitiespretty

* preface - xv
* acknowledgments - xvii
* about this book - xix
* about the authors - xxiii
* Part 1 GettinG started with streaming - 1
** 1 Welcome to Grokking Streaming Systems - 3
*** What is stream processing? - - 4
*** Streaming system examples - 5
*** Streaming systems and real time - 6
*** How a streaming system works - 7
*** Applications - 8
*** Backend services - 9
*** Inside a backend service - 10
*** Batch processing systems - 11
*** Inside a batch processing system - 12
*** Stream processing systems - 13
*** Inside a stream processing system - 14
*** The advantages of multi-stage architecture - 15
*** The multi-stage architecture in batch and stream processing systems - 16
*** Compare the systems - 17
*** A model stream processing system - 18

** 2 Hello, streaming systems! - 21
*** The chief needs a fancy tollbooth - 22
*** It started as HTTP requests, and it failed - 23
*** AJ and Miranda take time to reflect - 24
*** AJ ponders about streaming systems - 25
*** Comparing backend service and streaming - 26
*** How a streaming system could fit - 27
*** Queues: A foundational concept - 28
*** Data transfer via queues - 29
*** Our streaming framework (the start of it) - 30
*** The Streamwork framework overview - 31
*** Zooming in on the Streamwork engine - 32
*** Core streaming concepts - 33
*** More details of the concepts - 34
*** The streaming job execution flow - 35
*** Your first streaming job - 36
*** Executing the job - 42
*** Inspecting the job execution - 43
*** Look inside the engine - 44
*** Keep events moving - 48
*** The life of a data element - 49
*** Reviewing streaming concepts - 50
** 3 Parallelization and data grouping - 53
*** The sensor is emitting more events - 54
*** Even in streaming, real time is hard - 55
*** New concepts: Parallelism is important - 56
*** New concepts: Data parallelism - 57
*** New concepts: Data execution independence - 58
*** New concepts: Task parallelism - 59
*** Data parallelism vs. task parallelism - 60
*** Parallelism and concurrency - 61
*** Parallelizing the job - 62
*** Parallelizing components - 63
*** Parallelizing sources - 64
*** Viewing job output - 65
*** Parallelizing operators - 66
*** Viewing job output - 67
*** Events and instances - 68
*** Event ordering - 69
*** Event grouping - 70
*** Shuffle grouping - 71
*** Shuffle grouping: Under the hood - 72
*** Fields grouping - 73
*** Fields grouping: Under the hood - 74
*** Event grouping execution - 75
*** Look inside the engine: Event dispatcher - 76
*** Applying fields grouping in your job - 77
*** Event ordering - 78
*** Comparing grouping behaviors - 79

** 4 Stream graph - 81
*** A credit card fraud detection system - 82
*** More about the credit card fraud detection system - 83
*** The fraud detection business - 84
*** Streaming isn’t always a straight line - 85
*** Zoom into the system - 86
*** The fraud detection job in detail - 87
*** New concepts - 88
*** Upstream and downstream components - 89
*** Stream fan-out and fan-in - 90
*** Graph, directed graph, and DAG - 91
*** DAG in stream processing systems - 92
*** All new concepts in one page - 93
*** Stream fan-out to the analyzers - 94
*** Look inside the engine - 95
*** There is a problem: Efficiency - 96
*** Stream fan-out with different streams - 97
*** Look inside the engine again - 98
*** Communication between the components via channels - 99
*** Multiple channels - 100
*** Stream fan-in to the score aggregator - 101
*** Stream fan-in in the engine - 102
*** A brief introduction to another stream fan-in: Join - 103
*** Look at the whole system - 104
*** Graph and streaming jobs - 105
*** The example systems - 106

** 5 Delivery semantics - 109
*** The latency requirement of the fraud detection system - 110
*** Revisit the fraud detection job - 111
*** About accuracy - 112
*** Partial result - 113
*** A new streaming job to monitor system usage - 114
*** The new system usage job - 115
*** The requirements of the new system usage job - 116
*** New concepts: (The number of) times delivered and times processed - 117
*** New concept: Delivery semantics - 118
*** Choosing the right semantics - 119
*** At-most-once - 120
*** The fraud detection job - 121
*** At-least-once - 122
*** At-least-once with acknowledging - 123
*** Track events - 124
*** Handle event processing failures - 125
*** Track early out events - 126
*** Acknowledging code in components - 127
*** New concept: Checkpointing - 128
*** New concept: State - 129
*** Checkpointing in the system usage job for the at-least-once semantic - 130
*** Checkpointing and state manipulation functions - 131
*** State handling code in the transaction source component - 132
*** Exactly-once or effectively-once? - 133
*** Bonus concept: Idempotent operation - 134
*** Exactly-once, finally - 135
*** State handling code in the system usage analyzer component - 136
*** Comparing the delivery semantics again - 137
*** Up next... - 139

** 6 Streaming systems review and a glimpse ahead - 141
*** Streaming system pieces - 142
*** Parallelization and event grouping - 143
*** DAGs and streaming jobs - 144
*** Delivery semantics (guarantees) - 145
*** Delivery semantics used in the credit card fraud detection system - 146
*** Which way to go from here - 147
*** Windowed computations - 148
*** Joining data in real time - 149
*** Backpressure - 150
*** Stateless and stateful computations - 151
* Part 2 Stepping up - 153
** 7 Windowed computations - 155
*** Slicing up real-time data - 156
*** Breaking down the problem in detail - 157
*** Breaking down the problem in detail (continued) - 158
*** Two different contexts - 159
*** Windowing in the fraud detection job - 160
*** What exactly are windows? - 161
*** Looking closer into the window - 162
*** New concept: Windowing strategy - 163
*** Fixed windows - 164
*** Fixed windows in the windowed proximity analyzer - 165
*** Detecting fraud with a fixed time window - 166
*** Fixed windows: Time vs. count - 167
*** Sliding windows - 168
*** Sliding windows: Windowed proximity analyzer - 169
*** Detecting fraud with a sliding window - 170
*** Session windows - 171
*** Session windows (continued) - 172
*** Detecting fraud with session windows - 173
*** Summary of windowing strategies - 174
*** Slicing an event stream into data sets - 175
*** Windowing: Concept or implementation - 176
*** Another look - 177
*** Key–value store 101 - 178
*** Implement the windowed proximity analyzer - 179
*** Event time and other times for events - 180
*** Windowing watermark - 181
*** Late events - 182
** 8 Join operations - 185
*** Joining emission data on the fly - 186
*** The emissions job version 1 - 187
*** The emission resolver - 188
*** Accuracy becomes an issue - 189
*** The enhanced emissions job - 190
*** Focusing on the join - 191
*** What is a join again? - 192
*** How the stream join works - 193
*** Stream join is a different kind of fan-in - 194
*** Vehicle events vs. temperature events - 195
*** Table: A materialized view of streaming - 196
*** Vehicle events are less efficient to be materialized - 197
*** Data integrity quickly became an issue - 198
*** What’s the problem with this join operator? - 199
*** Inner join - 200
*** Outer join - 201
*** The inner join vs. outer join - 202
*** Different types of joins - 203
*** Outer joins in streaming systems - 204
*** A new issue: Weak connection - 205
*** Windowed joins - 206
*** Joining two tables instead of joining a stream and table - 207
*** Revisiting the materialized view - 208

** 9 Backpressure - 211
*** Reliability is critical - 212
*** Review the system - 213
*** Streamlining streaming jobs - 214
*** New concepts: Capacity, utilization, and headroom - 215
*** More about utilization and headroom - 216
*** New concept: Backpressure - 217
*** Measure capacity utilization - 218
*** Backpressure in the Streamwork engine - 219
*** Backpressure in the Streamwork engine: Propagation - 220
*** Our streaming job during a backpressure - 221
*** Backpressure in distributed systems - 222
*** New concept: Backpressure watermarks - 227
*** Another approach to handle lagging instances: Dropping events - 228
*** Why do we want to drop events? - 229
*** Backpressure could be a symptom when the underlying issue is permanent - 230
*** Stopping and resuming may lead to thrashing if the issue is permanent - 231
*** Handle thrashing - 232

** 10 Statefulcomputation - 235
*** The migration of the streaming jobs - 236
*** Stateful components in the system usage job - 237
*** Revisit: State - 238
*** The states in different components - 239
*** State data vs. temporary data - 240
*** Stateful vs. stateless components: The code - 241
*** The stateful source and operator in the system usage job - 242
*** States and checkpoints - 243
*** Checkpoint creation: Timing is hard - 244
*** Event-based timing - 245
*** Creating checkpoints with checkpoint events - 246
*** A checkpoint event is handled by instance executors - 247
*** A checkpoint event flowing through a job - 248
*** Creating checkpoints with checkpoint events at the instance level - 249
*** Checkpoint event synchronization - 250
*** Checkpoint loading and backward compatibility - 251
*** Checkpoint storage - 252
*** Stateful vs. stateless components - 253
*** Manually managed instance states - 254
*** Lambda architecture - 255

** 11 Wrap-up: Advanced concepts in streaming systems - 259
*** Is this really the end? - 260
*** Windowed computations - 261
*** The major window types - 262
*** Joining data in real time - 263
*** SQL vs. stream joins - 264
*** Inner joins vs. outer joins - 265
*** Unexpected things can happen in streaming systems - 266
*** Backpressure: Slow down sources or upstream components - 267
*** Another approach to handle lagging instances: Dropping events - 268
*** Backpressure can be a symptom when the underlying issue is permanent - 269
*** Stateful components with checkpoints - 270
*** Event-based timing - 271
*** Stateful vs. stateless components - 272
*** You did it! - 273

* Key concepts covered in this book - 275
* index - 279
