#+TITLE: Maven Essentials
#+VERSION: 2015
#+AUTHOR: Prabath Siriwardena
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - v
  - Maven stands out among other build tools due to its extremely extensible
    architecture, which is built on top of the concept *convention over
    configuration*.

  - =TODO=
    Following the book, readers will be able to gain a thorough understanding of
    the following key areas:
    - How to get started with Apache Maven, applying Maven best practices in
      order to design a build system to improve a developer's productivity

    - How to customize the build process to suit it exactly to your enterprise's
      needs by using appropriate Maven plugins, lifecycles, and archetypes

    - How to troubleshoot build issues with greater confidence

    - How to design the build in a way that avoids any maintenance nightmares
      with proper dependency management

    - How to optimize Maven configuration settings

    - How to build your own distribution archive using Maven assemblies

** What this book covers - vi
** What you need for this book - vii
   - Apache Maven 3.3.x
   - Java 1.7+ SDK
   - OS: Windows, Linux, or Mac OS X

** Who this book is for - vii
** Conventions - vii

* Chapter 1: Apache Maven Quick Start - 1
** Installing Apache Maven - 1
*** Installing Apache Maven on Ubuntu 2
*** Installing Apache Maven on Mac OS X 3
*** Installing Apache Maven on Microsoft Windows 4

** TODO Configuring the heap size - 5
   - In \star{}nix, ~export MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=128m"~

   - In Windows, ~set MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=128m"~

   - The ="-XX:MaxPermSize=128m"= is ONLY useful for Java piror to version 8.

** Hello Maven! - 6
   The easiest way to get started with a Maven project is to
   _use the ~generate~ /goal/ of the ~archetype~ /plugin/ to generate a simple
   Maven project_.

   - =TODO= Maven /archetypes/ are discussed in detail in _Chapter 3 Maven Archetypes_

   - =TODO= plugins are covered in _Chapter 4 Maven Plugins_.

   - Shell command:
     #+BEGIN_SRC bash
       mvn archetype:generate
                -DgroupId=com.packt.samples
                -DartifactId=com.packt.samples.archetype
                -Dversion=1.0.0
                -DinteractiveMode=false
     #+END_SRC

   - =TODO= =???=
     ~mvn clean install~

** Convention over configuration - 7
   - Apache Maven design philosophy: *convention OVER configuration*

   - A complete Maven project can be created using the =pom.xml=:
     #+BEGIN_SRC xml
       <project>
         <modelVersion>4.0.0</modelVersion>
         <groupId>com.packt</groupId>
         <artifactId>sample-one</artifactId>
         <version>1.0.0</version>
       </project>
     #+END_SRC

     However, some tools CANNOT validate the file without:
     #+BEGIN_SRC xml
       <project xmlns=http://maven.apache.org/POM/4.0.0
                xmlns:xsi=...
                xsi:schemaLocation="...">
     #+END_SRC
     Always use this pattern.

   - =TODO= Chapter 2 POM

   - 

** Maven repositories - 9
   
** IDE integration - 9
*** NetBeans integration 9
*** IntelliJ IDEA integration 10
*** Eclipse integration 10

** Troubleshooting - 10
*** DONE Enabling Maven debug level logs - 10
    CLOSED: [2018-01-05 Fri 20:16]
    Enable the Maven debug level logging, and it will print all the actions that
    it takes during the build process. To enable debug level logging, use
    ~$ mvn clean install â€“X~

*** DONE Building a dependency tree - 10
    CLOSED: [2018-01-05 Fri 20:18]
    ~$ mvn dependency:tree~

*** DONE Viewing all the environment variables and system properties - 11
    CLOSED: [2018-01-05 Fri 20:24]
    Display all the /environment variables/ and /system properties/ set for a
    /given Maven project/:
    ~$ mvn help:system~

*** DONE Viewing the effective POM file - 12
    CLOSED: [2018-01-05 Fri 20:24]
    ~$ mvn help:effective-pom~

    - =TODO=
      More details about the ~effective-pom~ command are discussed in Chapter 2,
      Understanding the /Project Object Model (POM)/.

*** DONE Viewing the dependency classpath - 13
    CLOSED: [2018-01-05 Fri 20:24]
    List all the JAR files and directories in the build ~classpath~:
    ~$ mvn dependency:build-classpath~

** Summary - 13

* TODO Chapter 2: Understanding the Project Object Model (POM) - 15
  - /POM/ is at the heart of any Maven project.

  - This chapter focuses on the *core concepts* and *best practices* related to
    /POM/ in *building a large-scale, multi-module Maven project*.

  - As we proceed with this chapter, the following topics will be covered in detail:
    + The POM _HIERARCHY_, super POM, and parent POM
    + _Extending_ and _overriding_ POM files
    + Maven /coordinates/
    + Managing dependencies
    + _Transitive_ dependencies
    + _Dependency scopes_ and optional dependencies

** Project Object Model (POM) 15
   The following code lists out all the key elements in a Maven =pom.xml= file.
   =TODO=
   As we proceed with the book, we will discuss how to use each element in the
   most effective manner: =TODO=
   #+BEGIN_SRC xml
     <project>
       <parent>...</parent>
       <modelVersion>4.0.0</modelVersion>
       <groupId>...</groupId>
       <artifactId>...</artifactId>
       <version>...</version>
       <packaging>...</packaging>

       <name>...</name>
       <description>...</description>
       <url>...</url>
       <inceptionYear>...</inceptionYear>
       <licenses>...</licenses>
       <organization>...</organization>
       <developers>...</developers>
       <contributors>...</contributors>

       <dependencies>...</dependencies>
       <dependencyManagement>...</dependencyManagement>
       <modules>...</modules>
       <properties>...</properties>

       <build>...</build>
       <reporting>...</reporting>

       <issueManagement>...</issueManagement>
       <ciManagement>...</ciManagement>
       <mailingLists>...</mailingLists>
       <scm>...</scm>
       <prerequisites>...</prerequisites>

       <repositories>...</repositories>
       <pluginRepositories>...</pluginRepositories>

       <distributionManagement>...</distributionManagement>

       <profiles>...</profiles>
     </project>
   #+END_SRC

** DONE POM hierarchy - 17
   CLOSED: [2018-01-05 Fri 23:17]
   POM files maintain a parent-child relationship between them.

   A /child POM/ file *inherits* all the configuration elements from its
   /parent POM/.

** DONE Super POM - 18
   CLOSED: [2018-01-05 Fri 23:16]
   - *ANY* /POM/ file can point to its /parent POM/.
     In case the /parent POM/ element is missing, there is a /system wide POM
     file/ that is AUTOMATICALLY treated as the /parent POM/.

     This POM file is well known as the /super POM/.

   - Ultimately, all the /application POM/ files *get extended from* the
     /super POM/.

   - The /super POM/ file is at the top of the POM hierarchy and is bundled inside
     + For Maven 3:
       =MAVEN_HOME/lib/maven-model-builder- 3.3.3.jar= ---
       =org/apache/maven/model/pom-4.0.0.xml=.

     + *Maven 2*, the jar file is =maven-2.X.X-uber.jar=.

   - =Jian= paste the super pom here:
     #+BEGIN_SRC xml
       <!-- START SNIPPET: superpom -->
       <project>
         <modelVersion>4.0.0</modelVersion>

         <repositories>
           <repository>
             <id>central</id>
             <name>Central Repository</name>
             <url>https://repo.maven.apache.org/maven2</url>
             <layout>default</layout>
             <snapshots>
               <enabled>false</enabled>
             </snapshots>
           </repository>
         </repositories>

         <pluginRepositories>
           <pluginRepository>
             <id>central</id>
             <name>Central Repository</name>
             <url>https://repo.maven.apache.org/maven2</url>
             <layout>default</layout>
             <snapshots>
               <enabled>false</enabled>
             </snapshots>
             <releases>
               <updatePolicy>never</updatePolicy>
             </releases>
           </pluginRepository>
         </pluginRepositories>

         <build>
           <directory>${project.basedir}/target</directory>
           <outputDirectory>${project.build.directory}/classes</outputDirectory>
           <finalName>${project.artifactId}-${project.version}</finalName>
           <testOutputDirectory>${project.build.directory}/test-classes</testOutputDirectory>
           <sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
           <scriptSourceDirectory>${project.basedir}/src/main/scripts</scriptSourceDirectory>
           <testSourceDirectory>${project.basedir}/src/test/java</testSourceDirectory>
           <resources>
             <resource>
               <directory>${project.basedir}/src/main/resources</directory>
             </resource>
           </resources>
           <testResources>
             <testResource>
               <directory>${project.basedir}/src/test/resources</directory>
             </testResource>
           </testResources>
           <pluginManagement>
             <!-- NOTE: These plugins will be removed from future versions of the super POM -->
             <!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) -->
             <plugins>
               <plugin>
                 <artifactId>maven-antrun-plugin</artifactId>
                 <version>1.7</version>
               </plugin>
               <plugin>
                 <artifactId>maven-assembly-plugin</artifactId>
                 <version>2.4.1</version>
               </plugin>
               <plugin>
                 <artifactId>maven-dependency-plugin</artifactId>
                 <version>2.8</version>
               </plugin>
               <plugin>
                 <artifactId>maven-release-plugin</artifactId>
                 <version>2.3.2</version>
               </plugin>
             </plugins>
           </pluginManagement>
         </build>

         <reporting>
           <outputDirectory>${project.build.directory}/site</outputDirectory>
         </reporting>

         <profiles>
           <!-- NOTE: The release profile will be removed from future versions of the super POM -->
           <profile>
             <id>release-profile</id>

             <activation>
               <property>
                 <name>performRelease</name>
                 <value>true</value>
               </property>
             </activation>

             <build>
               <plugins>
                 <plugin>
                   <inherited>true</inherited>
                   <artifactId>maven-source-plugin</artifactId>
                   <executions>
                     <execution>
                       <id>attach-sources</id>
                       <goals>
                         <goal>jar</goal>
                       </goals>
                     </execution>
                   </executions>
                 </plugin>
                 <plugin>
                   <inherited>true</inherited>
                   <artifactId>maven-javadoc-plugin</artifactId>
                   <executions>
                     <execution>
                       <id>attach-javadocs</id>
                       <goals>
                         <goal>jar</goal>
                       </goals>
                     </execution>
                   </executions>
                 </plugin>
                 <plugin>
                   <inherited>true</inherited>
                   <artifactId>maven-deploy-plugin</artifactId>
                   <configuration>
                     <updateReleaseInfo>true</updateReleaseInfo>
                   </configuration>
                 </plugin>
               </plugins>
             </build>
           </profile>
         </profiles>

       </project>
       <!-- END SNIPPET: superpom -->
     #+END_SRC


   - All the default configurations are defined in the /super POM file/.

     *Even the SIMPLEST form of a POM file* will *inherit* all the
     configurations defined in the /super POM file/.

     Whatever configuration you need to *override*, you can do it by *redefining*
     the same section in your /application POM file/. The following lines of code
     show the /super POM file/ configuration, which comes with Maven 3.3.3:
     ~<modelVersion>4.0.0</modelVersion>~, which is, of course, inside the
     ~<project></project>~ block.

   - The Maven central is the only ~<repository>~ defined under the
     ~<repositories>~ section. 
       It will be *inherited* by *ALL* the Maven application modules.  The following code
     snippet shows the configuration block in =pom.xml=, which is used to define
     repositories:

   - The ~<repositories>~ section
     Maven downloads all the dependent /artifacts/ from the given /repositories/
     (ONLY one in the /super pom/) _during_ a Maven /build/.
     #+BEGIN_SRC xml
       <repositories>
         <repository>
           <id>central</id>
           <name>Central Repository</name>
           <url>http://repo.maven.apache.org/maven2</url>
           <layout>default</layout>
           <snapshots>
             <enabled>false</enabled>
           </snapshots>
         </repository>
       </repositories>
     #+END_SRC

     + There are *TWO* types of /repositories/ in Maven:
       * local ::
         1. by default at =USER_HOME/.m2/repository=, anything that you build
            locally with ~mvn install~ will get deployed into the /local
            repository/.

         2. The Maven /local repository/ location can be changed to a preferred
            location by editing =MAVEN_HOME/conf/settings.xml= to update the
            value of the ~<localRepository>~ element:
            ~<localRepository>/path/to/local/repo</localRepository>~

       * remote :: given in the ~<repositories>~ section

     + When you start with a fresh Maven repository, it will be empty. You need to
       download everything -- from the simplest ~maven-compiler-plugin~ to all
       your project /dependencies/.

     + A Maven /build/ can either be
       * an *online* build, which is the _DEFAULT_.

         Download the /artifacts/ from /remote repositories/ and store them in the
         /local repository/

       * an *offline* build, when add ~-o~ into your Maven ~build~ command.

        _ASSUMES_ that ALL the related /artifacts/ are readily available in the
         /local repository/. if NOT, it will complain.

   - The ~<pluginRepositories>~ section (=TODO= Chapter 4 Maven Plugins)
     #+BEGIN_SRC xml
       <pluginRepositories>
         <pluginRepository>
           <id>central</id>
           <name>Central Repository</name>
           <url>http://repo.maven.apache.org/maven2</url>
           <layout>default</layout>
           <snapshots>
             <enabled>false</enabled>
           </snapshots>
           <releases>
             <updatePolicy>never</updatePolicy>
           </releases>
         </pluginRepository>
       </pluginRepositories>
     #+END_SRC

   - The ~<build>~ section includes all the information required to /build/ a
     project:
     #+BEGIN_SRC xml
       <build>

         <directory>${project.basedir}/target</directory>
         <outputDirectory>${project.build.directory}/classes</outputDirectory>
         <finalName>${project.artifactId}-${project.version}</finalName>
         <testOutputDirectory>${project.build.directory}/test-classes</testOutputDirectory>
         <sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
         <scriptSourceDirectory>${project.basedir}/src/main/scripts</scriptSourceDirectory>
         <testSourceDirectory>${project.basedir}/src/test/java</testSourceDirectory>

         <resources>
           <resource>
             <directory>${project.basedir}/src/main/resources</directory>
           </resource>
         </resources>

         <testResources>
           <testResource>
             <directory>${project.basedir}/src/test/resources</directory>
           </testResource>
         </testResources>

         <pluginManagement>
           <plugins>
             <plugin>
               <artifactId>maven-antrun-plugin</artifactId>
               <version>1.3</version>
             </plugin>

             <plugin>
               <artifactId>maven-assembly-plugin</artifactId>
               <version>2.2-beta-5</version>
             </plugin>

             <plugin>
               <artifactId>maven-dependency-plugin</artifactId>
               <version>2.8</version>
             </plugin>

             <plugin>
               <artifactId>maven-release-plugin</artifactId>
               <version>2.3.2</version>
             </plugin>
           </plugins>
         </pluginManagement>

       </build>
     #+END_SRC

   - The ~<reporting>~ section includes the details of /report plugins/, which
     are used to generate reports and are later displayed on the site generated
     by Maven. The /super POM/ only provides a _default value_ for the _output
     directory_:
     #+BEGIN_SRC xml
       <reporting>
         <outputDirectory>${project.build.directory}/site</outputDirectory>
       </reporting>
     #+END_SRC

   - The following code snippet defines the /default build profile/.
     When *NO* profiles are defined at the application level, the default build
     profile will get executed.

     =TODO=
     We will be talking about profiles in Chapter 7, Best Practices:

     #+BEGIN_SRC xml
         <profiles>
           <!-- NOTE: The release profile will be removed from future versions of the super POM -->
           <profile>
             <id>release-profile</id>

             <activation>
               <property>
                 <name>performRelease</name>
                 <value>true</value>
               </property>
             </activation>

             <build>
               <plugins>
                 <plugin>
                   <inherited>true</inherited>
                   <artifactId>maven-source-plugin</artifactId>
                   <executions>
                     <execution>
                       <id>attach-sources</id>
                       <goals>
                         <goal>jar</goal>
                       </goals>
                     </execution>
                   </executions>
                 </plugin>
                 <plugin>
                   <inherited>true</inherited>
                   <artifactId>maven-javadoc-plugin</artifactId>
                   <executions>
                     <execution>
                       <id>attach-javadocs</id>
                       <goals>
                         <goal>jar</goal>
                       </goals>
                     </execution>
                   </executions>
                 </plugin>
                 <plugin>
                   <inherited>true</inherited>
                   <artifactId>maven-deploy-plugin</artifactId>
                   <configuration>
                     <updateReleaseInfo>true</updateReleaseInfo>
                   </configuration>
                 </plugin>
               </plugins>
             </build>
           </profile>
         </profiles>

     #+END_SRC

** DONE POM extending and overriding - 23
   CLOSED: [2018-01-05 Fri 23:34]
   - For example,
     + *ADD*
       #+BEGIN_SRC xml
         <repositories>
           <repository>
             <id>wso2-nexus</id>
             <name>WSO2 internal Repository</name>
             <url>http://maven.wso2.org/nexus/content/groups/wso2-public/</url>
             <releases>
               <enabled>true</enabled>
               <updatePolicy>daily</updatePolicy>
               <checksumPolicy>ignore</checksumPolicy>
             </releases>
           </repository>
         </repositories>
       #+END_SRC

       Then in the project folder that include POM file excute
       ~$ mvn help:effective-pom~, and you can see two /repository/'s in the

     + *OVERRIDE* a configuration elements (for example ~<repository>~):
         Use the same ~<id>~

     + *OVERRIDE* the configuration of a given element or an /artifact/ in the
       /POM hierarchy/:
       #+BEGIN_SRC xml
         <build>
           <pluginManagement>
             <plugins>
               <plugin>
                 <artifactId>maven-release-plugin</artifactId>
                 <--! ========================= -->
                 <--! change the version number -->
                 <--! ========================= -->
                 <version>2.5</version> 
               </plugin>
             </plugins>
           </pluginManagement>
         </build>
       #+END_SRC
         Maven should be able to uniquely identify the corresponding /artifact/.
       In the preceding scenario, the plugin was identified by its /artifactId/.

       In Chapter 4, Maven Plugins we will further discuss how Maven locates
       plugins. =TODO=

** DONE Maven coordinates - 25
   CLOSED: [2018-01-06 Sat 13:23]
   - Maven coordinates uniquely identify a project, dependency, or plugin defined
     in a POM.

   - Each entity is uniquely identified by the combination of a
     + /group identifier/
         The /group identifier/ is a way of grouping different Maven
       /artifacts/. For example, a set of /artifacts/ produced by a company can
       be grouped under the *SAME* /group identifier/.

     + /artifact identifier/

     + /version/ (and, of course, with the packaging and the classifier =TODO=).
         lets you keep the same artifact in _different_ versions in the _same_
       repository.

   - A *valid* Maven POM file must have ~<groupId>~, ~<artifactId>~, and
     ~<version>~. The ~<groupId>~ and ~<version>~ elements can also be
     *inherited* from the /parent POM/.

   - =IMPORTANT=
     /super POM/ does *NOT* always have the required previously mentioned
     /coordinate elements/ -- ~groupId~, ~artifactId~, or ~version~.

     + Q :: Does this mean that the /super POM file/ is NOT a valid POM?

     + A :: _The super POM file is similar to an abstract class in Java_.
            It does not work by itself; it must be inherited by a child POM.

            Another way to look at the super POM file is that it's the Maven's
            way of sharing default configurations.

   - Once again, if you look at the ~<pluginManagement>~ section of the
     /super POM/, as shown in the following code snippet, you will notice that a
     given plugin artifact is only identified by its /artifactId/ and /version/
     elements.

     This is an exception (ONLY for /plugins/).
     By default, Maven uses ~org.apache.maven.plugins~ or ~org.condehaus.mojo~ as
     ~groupId~.

   - If you want to add the additional ~<groupId>~ elements for plugin lookup,
     you will have to *uncomment* the ~<pluginGroups>~ and add a ~<pluginGroup>~
     there.

   - If you want to keep a /super POM/ configuration at user level (NOT system
     level), you can copy the =settings.xml= from =MAVEN_HOME/conf= to
     =USER_HOME/.m2=.


** DONE The parent POM - 27
   CLOSED: [2018-01-06 Sat 13:54]
   - parent POM :: the POM used to aggregate submodules.

   - Use the _WSO2 Carbon Turing_ project
     (https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing)
     as a example:

     + In the /parent POM/ (the =pom.xml= in the root folder), you have a section
       like: 
       #+BEGIN_SRC xml
         <modules>
           <module>parent</module>
           <module>dependencies</module>
           <module>service-stubs</module>
           <module>components</module>
           <module>platform-integration/clarity-framework</module>
           <module>features</module>
           <module>samples/shopping-cart</module>
           <module>samples/shopping-cart-global</module>
         </modules>
       #+END_SRC

     + This /parent POM/ file has the following coordinates:
       #+BEGIN_SRC xml
         <groupId>org.wso2.carbon</groupId>
         <artifactId>platform-parent</artifactId>
         <version>4.2.0</version>
         <packaging>pom</packaging>
       #+END_SRC

     + Lookk at the POM file inside the ~components~ module, it refers to
       =parent/pom.xml= as the /parent Maven module/.
       #+BEGIN_SRC xml
         <groupId>org.wso2.carbon</groupId>
         <artifactId>carbon-components</artifactId>
         <version>4.2.0</version>
         <parent>
           <groupId>org.wso2.carbon</groupId>
           <artifactId>platform-parent</artifactId>
           <version>4.2.0</version>
           <relativePath>../parent/pom.xml</relativePath>
         </parent>
       #+END_SRC
       The ~<relativePath>~ has a default value =../pom.xml=. Since here the
       default value is NOT applicable, we need to override it.

     + If you go *inside* the ~components~ module and run
       ~mvn help:effective-pom~, you will notice that an /effective POM/
       aggregates both the configurations defined in =parent/pom.xml= and
       =components/pom.xml=.

     + The =components/pom.xml= file acts as the /parent POM/ for Maven modules
       below its level. For example, let's have a look at the following
       =components/ identity/pom.xml= file.
       #+BEGIN_SRC xml
         <groupId>org.wso2.carbon</groupId>
         <artifactId>identity</artifactId>
         <version>4.2.0</version>
         <parent>
           <groupId>org.wso2.carbon</groupId>
           <artifactId>carbon-components</artifactId>
           <version>4.2.0</version>
         </parent>
       #+END_SRC
       Use the default value of ~<relativePath>~

** TODO Managing POM dependencies - 29
   - There are *TWO* effective ways to manage dependencies:
     + POM inheritance
     + dependency grouping

   - POM inheritance:
     The /parent POM/ has to define all the /common dependencies/ used by its
     child modules under the ~<dependencyManagement>~ section. Just avoid all the
     duplicate dependencies.

      


*** Transitive dependencies - 33
*** Dependency scopes - 35
*** Optional dependencies - 38
**** Dependency exclusion 39

** TODO Summary - 42

* Chapter 3: Maven Archetypes - 43
  - *archetype* means means _original patterns_ (template), and it has its roots
    in Greek literature. It's derived from TWO Greek words:
    + *archein* means original or old
    + *typos* means patterns.

  - In this chapter, we will discuss the following topics:
    + The Maven /archetype plugin/
    + The _most used_ /archetypes/

** DONE Archetype quickstart - 44
   CLOSED: [2018-01-06 Sat 19:40]
   #+BEGIN_SRC bash
     mvn archetype:generate
               -DgroupId=com.packt.samples
               -DartifactId=com.packt.samples.archetype
               -Dversion=1.0.0
               -DinteractiveMode=false
   #+END_SRC

   - The Maven ~archetype~ is a plugin in itself.
     =TODO= Discuss plugins in details in Chapter 4 Maven Plugins.

   - The ~generate~ goal of the /archetype/ plugin has been used to generate a
     Maven project from an /archetype/.

   - You will see that the following project structure has been created with a
     /sample POM file/. =TODO= =???=

   - The name of the /base directory/ is _derived from_ the value of the
     ~artifactId~ parameter:
     #+BEGIN_SRC text
       com.packt.samples.archetype
                      |-pom.xml
                      |-src
                      |-main/java/com/packt/samples/App.java
                      |-test/java/com/packt/samples/AppTest.java
     #+END_SRC

   - The /sample POM file/ will ONLY have A dependency to the ~junit~ JAR file,
     with ~test~ as the scope:
     #+BEGIN_SRC xml
       <project>
         <modelVersion>4.0.0</modelVersion>
         <groupId>com.packt.samples</groupId>
         <artifactId>com.packt.samples.archetype</artifactId>
         <packaging>jar</packaging>
         <version>1.0.0</version>
         <name>com.packt.samples.archetype</name>
         <url>http://maven.apache.org</url>

         <dependencies>
           <dependency>
             <groupId>junit</groupId>
             <artifactId>junit</artifactId>
             <version>3.8.1</version>
             <--! ============================== -->
             <--! `test` scope -->
             <scope>test</scope>
           </dependency>
         </dependencies>
       </project>
     #+END_SRC

   - The _name of the package_ is derived from the provided ~groupId~ parameter.
     #+BEGIN_SRC java
       // App.java
       package com.packt.samples;

       /**
         ,* Hello world!
         ,*
         ,*/
       public class App
       {
           public static void main(String[] args)
           {
               System.out.println("Hello World!");
           }
       }
     #+END_SRC

     If we want a different value as the package name,
     then we need to pass this value in the command itself as
     ~-Dpackage=com.packt.samples.application~.

   - This is the simplest way to get started with a Maven project.

     In the previous example, we used the /non-interactive mode/ by setting
     ~interactiveMode=false~. This will force the plugin to use whatever values
     we passed in the command itself, along with the default values.

** DONE Batch mode - 47
   CLOSED: [2018-01-06 Sat 18:27]
   - The ~archetype~ plugin can operate in the /batch mode/ either by
     + setting the ~<interactiveMode>~ argument to ~false~
       or
     + passing ~-B~ as an argument.

   - When operating in the /batch mode/, you need to clearly specify which
     /archetype/ you are going to use with the arguments ~archetypeGroupId~,
     ~archetypeArtifactId~, and ~archetypeVersion~. You also need to clearly
     identify the resultant artifact with the ~groupId~, ~artifactId~,
     ~version~, and ~package~ arguments, shown as follows:
     #+BEGIN_SRC bash
       # Example command pattern
       mvn archetype:generate -B
                          -DarchetypeGroupId=org.apache.maven.archetypes
                          -DarchetypeArtifactId=maven-archetype-quickstart
                          -DarchetypeVersion=1.0
                          -DgroupId=com.packt.samples
                          -DartifactId=com.packt.samples.archetype
                          -Dversion=1.0.0
                          -Dpackage=1.5
     #+END_SRC
     Any inquisitive mind should be asking a very valid question by now.

   - In the /non-interactive mode/, we did *NOT* type any /filter/ or provide any
     Maven /coordinates/ for the /archetype/ in the very first example.

     + Q:
       So, how does the plugin know about the /archetype/?

     + A:
       When no /archetype/ is specified,
       the plugin goes with the default one, which is
       ~org.apache.maven.archetypes:maven-archetype-quickstart~.

** TODO Archetype catalogues - 47
   - Type ~$ mvn archetype:generate~ command and excute it.
     Then a list of archetypes is displayed by the plugin for the user
     selection. The complete list is around 1100.

   - The *archetype plugin* maintains the details about different archetypes in
     an _internal catalogue_, which comes with the plugin itself.

   - The archetype catalogue is simply an XML file.
     The following shows the _internal catalogue_ of the *archetype plugin*:
     #+BEGIN_SRC xml
       <archetype-catalog>
       <!-- Internal archetype catalog listing archetypes from the Apache
       Maven project. -->
         <archetypes>

           <archetype>
             <groupId>org.apache.maven.archetypes</groupId>
             <artifactId>maven-archetype-archetype</artifactId>
             <version>1.0</version>
             <description>An archetype which contains a sample archetype.</description>
           </archetype>

           <!-- MANY MANY archetypes ... -->

           <archetype>
             <groupId>org.apache.maven.archetypes</groupId>
             <artifactId>maven-archetype-webapp</artifactId>
             <version>1.0</version>
             <description>An archetype which contains a sample Maven Webapp project.</description>
           </archetype>

         </archetypes>
       <archetype-catalog>
     #+END_SRC

   - In addition to the *internal catalogue*, you can also maintain a *local
     archetype catalogue*. This is available at
     =USER_HOME/.m2/archetype-catalog.xml=, and by default, it's an empty file.

   - There is also a *remote catalogue* available at
     http://repo1.maven.org/maven2/archetype-catalog.xml.

   - The output is in the pattern of
     #+BEGIN_SRC text
       1: remote -> br.com.ingenieux:elasticbeanstalk-service-webapparchetype
         (A Maven Archetype Encompassing RestAssured, Jetty,
         Jackson, Guice and Jersey for Publishing JAX-RS-based Services on
         AWS' Elastic Beanstalk Service)
     #+END_SRC
     You can see this is *remote*

   - How to list /archetypes/ of specific /catalogues/:
     + _By default_, list all the *local and remote catalogues*.

     + List all the /archetypes/ from the *internal catalogue* ONLY
       ~$ mvn archetype:generate -DarchetypeCatalog=internal~

     + List all the /archetypes/ from the *local catalogue* ONLY
       ~$ mvn archetype:generate -DarchetypeCatalog=local~

     + List all the /archetypes/ from the *internal, local, and remote catalogues*
       ~$ mvn archetype:generate -DarchetypeCatalog=internal,local,remote~

*** TODO Building an archetype catalogue 51
    - x

    - ~$ mvn archetype:crawl -Dcatalog=my-catalog.xml~

*** TODO Public archetype catalogues 51
    - x

*** TODO The anatomy of archetype â€“ =catalog.xml= 53
    - x

** TODO The archetype plugin goals - 54
** Java EE web applications with the archetype plugin - 55
*** Deploying web applications to a remote Apache Tomcat server 57

** TODO Android mobile applications with the archetype plugin - 59
** EJB archives with the archetype plugin - 61
** TODO JIRA plugins with the archetype plugin - 64
** TODO Spring MVC applications with the archetype plugin - 65
** DONE Summary - 66
   CLOSED: [2018-01-06 Sat 18:59]
   Maven /archetypes/ provide a way of *reducing repetitive work* in *building*
   Maven projects.

* Chapter 4: Maven Plugins - 67
  - A Maven plugin can be executed on its own or can be executed as a part of a
    Maven lifecycle. =TODO= =???=

    =TODO= We will discuss Maven lifecycles in Chapter 5, Build Lifecycles.

  - A Maven /build lifecycle/ consists of a set of well-defined /phases/.

    Each /phase/ groups a set of /goals/ defined by Maven /plugins/
    and
    the /lifecycle/ defines the *order* of execution.

    Maven comes with THREE standard lifecycles:
    + default
    + clean
    + site

    Each /lifecycle/ defines its own set of /phases/.

    Each /plugin/ has its own set of /goals/, and each /goal/ is responsible for
    performing a specific /action/.

  - The command pattern is ~$mvn <plugin-prefix-name>:<goal-name>~

  - Example:
    Let's see how to execute the /clean goal/ of the Maven /clean plugin/.
    The /clean goal/ will attempt to *clean* the working directory and the
    associated files created during the build:
    ~$ mvn clean:clean~

  - The same /clean plugin/ can be executed via the /clean lifecycle/, as shown
    in the following command: ~$ mvn clean~

  - The /clean goal/ of the Maven /clean plugin/ is associated with the /clean
    phase/ of the /clean lifecycle/.

    The /clean lifecycle/ defines three phases:
    + pre-clean
    + clean
    + post-clean

  - =TODO= =todo= =TODO=
    NOTE --- 

  - In this chapter, we will be talking about the following topics:
    + Commonly used /Maven plugins/ and their usage
    + /Plugin discovery/ and /execution process/

** TODO Common Maven plugins 69
   /Maven plugins/ are
   - _MOSTLY_ developed under the *Apache Maven project* itself;
   - under the *Codehaus projects*;
   - under the *Google Code projects*.

   The following sections list out a set of _commonly used_ /Maven plugins/ and
   their usages.

*** DONE The clean plugin 69
    CLOSED: [2018-01-06 Sat 20:54]
    - The /clean plugin/ executes the /clean goal/ of the Maven /clean plugin/ to
      remove any of the working directories and other resources created during
      the build, as follows: ~$ mvn clean:clean~

    - =TODO=
      The Maven /clean plugin/ is also associated with the /clean lifecycle/.

      If you just execute ~$ mvn clean~, the /clean goal/ of the /clean plugin/
      will get executed.

    - You POM will inherit the /clean plugin/ from the /super POM/.
      In the /super POM/:
      #+BEGIN_SRC xml
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>2.5</version>
          <executions>
            <execution>
              <id>default-clean</id>
              <phase>clean</phase>
              <goals>
                <goal>clean</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      #+END_SRC

    - =IMPORTANT=
      The /Maven default lifecycle/ includes the /phases/:
      1. validate,
      2. initialize
      3. generate-sources
      4. process-sources
      5. generateresources
      6. process-resources
      7. compile
      8. process-classes
      9. generate-test-sources
      10. process-test-sources
      11. generate-testresources
      12. process-test-resources
      13. test-compile
      14. process-testclasses
      15. test
      16. prepare-package
      17. package
      18. pre-integration-test
      19. integration-test
      20. post-integration-test
      21. verify
      22. install
      23. deploy

    - By default, the /clean goal/ of the /clean plugin/ runs under the /clean
      phase/ of the /Maven clean lifecycle/.

      If your project wants the /clean plugin/ to run *by default*, then you can
      associate it with the /initialize phase/ of the /Maven default lifecycle/.
      You can add the following configuration to your /application POM file/:
      #+BEGIN_SRC xml
        <project>
          [...]
            <build>
              <plugins>
                <plugin>
                  <artifactId>maven-clean-plugin</artifactId>
                  <version>2.5</version>
                  <executions>
                    <execution>
                      <id>auto-clean</id>
                      <phase>initialize</phase>
                      <goals>
                        <goal>clean</goal>
                      </goals>
                    </execution>
                  </executions>
                </plugin>
              </plugins>
            </build>
          [...]
        </project>
      #+END_SRC

      Now, the /clean goal/ of the /clean plugin/ will get executed WHEN you
      execute _ANY of the phases_ in the /Maven default lifecycle/; there is no
      need to explicitly execute the /clean phase/ of the /clean lifecycle/. For
      example, ~$ mvn install~ will run the /clean goal/ in its /initialize
      phase/.
        This way, you can _override the default behavior_ of the /Maven clean
      plugin/. A complete Maven sample project with the previous plugin
      configuration is available at
      https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter04/jose.

*** TODO The compiler plugin 70
    - The /compiler plugin/ is _used to *compile* the source code_.

      This has two /goals/
      + compile
      + testCompile

    - The /compile goal/ is bound to the /compile phase/ of the /Maven default
      lifecycle/.

*** TODO The install plugin 73
*** TODO The deploy plugin 73
*** TODO The surefire plugin 75
*** TODO The site plugin 77
*** TODO The jar plugin 80
*** TODO The source plugin 81
*** TODO The resources plugin 82
*** TODO The release plugin 83

** TODO Plugin discovery and execution 84
*** TODO Plugin management 87
*** TODO Plugin repositories 87
*** TODO Plugin as an extension 89

** TODO Summary 89

* Chapter 5: Build Lifecycles - 91
** Standard lifecycles in Maven 92
*** The clean lifecycle 92
*** The default lifecycle 95
*** The site lifecycle 100

** Lifecycle bindings 101
** Lifecycle extensions 105
** Summary 108

* Chapter 6: Maven Assemblies - 109
** The assembly plugin 110
** The assembly descriptor 112
** Artifact/resource filtering 125
** Assembly help 125
** A runnable standalone Maven project 126
** Summary 131

* Chapter 7: Best Practices - 133
** Dependency management 134
** Defining a parent module 136
** POM properties 137
** Avoiding repetitive groupIds and versions, and inheriting from
** the parent POM 141
** Following naming conventions 141
** Think twice before you write your own plugin. You may not need it! 143
** The Maven release plugin 144
** The Maven enforcer plugin 145
** Avoiding the use of unversioned plugins 147
** Descriptive parent POM files 149
** Documentation is your friend 150
** Avoid overriding the default directory structure 151
** Using SNAPSHOT versioning during the development 152
** Get rid of unused dependencies 152
** Avoiding keeping credentials in application POM files 153
** Avoiding using deprecated references 154
** Avoiding repetition â€“ use archetypes 155
** Avoiding using maven.test.skip 155
** Summary 157

* Index - 159
