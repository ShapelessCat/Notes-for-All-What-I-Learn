#+TITLE: .NET IL Assembler
#+SUBTITLE: Understand the inner workings of the Common Language Runtime cross all versions of .NET
#+AUTHOR: Serge Lidin
#+Publisher: Apress; 1st ed. edition (June 25, 2014)
#+STARTUP: overview
#+STARTUP: entitiespretty

* About the Author - xxi
* About the Technical Reviewer - xxiii
* Acknowledgments - xxv
* Introduction - xxvii
* TODO Chapter 1: Simple Sample - 1
** Basics of the Common Language Runtime - 1
** Simple Sample: The Code - 5
*** Program Header - 6
*** Class Declaration - 7
*** Field Declaration - 8
*** Method Declaration - 9
*** Global Items - 13
*** Mapped Fields - 14
*** Data Declaration - 14
*** Value Type As PlaceHolder - 15
*** Calling Unmanaged Code - 15

** Forward Declaration of Classes - 16
** Summary - 18

* TODO Chapter 2: Enhancing the Code - 19
** Compacting the Code - 19
** Protecting the Code - 21
** Summary - 25

* TODO Chapter 3: Making the Coding Easier - 27
** Aliasing - 27
** Compilation Control Directives - 29
** Referencing the Current Class and Its Relatives - 32
** Summary - 33

* TODO Chapter 4: The Structure of a Managed Executable File - 35
** PE/COFF Headers - 36
*** MS-DOS Header/Stub and PE Signature - 37
*** COFF Header - 38
*** PE Header - 41
**** Data Dictionary Table - 45

*** Section Headers - 46

** Common Language Runtime Header - 49
*** Header Structure - 49
*** Flags Field - 51
*** EntryPointToken Field - 52
*** VTableFixups Field - 52
*** StrongNameSignature Field - 53
*** Relocation Section - 53
*** Text Section - 55
*** Data Sections - 56
*** Data Constants - 56
*** V-Table - 57
*** Unmanaged Export Table - 57
*** Thread Local Storage - 59
*** Resources - 60
*** Unmanaged Resources - 60
*** Managed Resources - 62

** Summary - 62
*** Phase 1: Initialization - 62
*** Phase 2: Source Code Parsing - 62
*** Phase 3: Image Generation - 62
*** Phase 4: Completion - 63

* TODO Chapter 5: Metadata Tables Organization - 65
** What Is Metadata? - 65
** Heaps and Tables - 67
*** Heaps - 67
*** General Metadata Header - 68
*** Metadata Table Streams - 71

** RIDs and Tokens - 75
*** RIDs - 75
*** Tokens - 76

** Coded Tokens - 77
** Metadata Validation - 80
** Summary - 81

* TODO Chapter 6: Modules and Assemblies - 83
** What Is an Assembly? - 83
** Private and Shared Assemblies - 83
** Application Domains AS Logical Units of Execution - 84
** Manifest - 86
** Assembly Metadata Table and Declaration - 87
** AssemblyRef Metadata Table and Declaration - 89
*** Autodetection of Referenced Assemblies - 91

** The Loader in Search of Assemblies - 92
** Module Metadata Table and Declaration - 96
** ModuleRef Metadata Table and Declaration - 96
** File Metadata Table and Declaration - 97
** Managed Resource Metadata and Declaration - 98
** ExportedType Metadata Table and Declaration - 101
** Order of Manifest Declarations in ILAsm - 102
** Single-Module and Multimodule Assemblies - 103
** Summary of Metadata Validity Rules - 104
*** Assembly Table Validity Rules - 104
*** AssemblyRef Table Validity Rules - 104
*** Module Table Validity Rules - 105
*** ModuleRef Table Validity Rules - 105
*** File Table Validity Rules - 105
*** ManifestResource Table Validity Rules - 106
*** ExportedType Table Validity Rules - 106

* TODO Chapter 7: Namespaces and Classes - 107
** Class Metadata - 108
*** TypeDef Metadata Table - 110
*** TypeRef Metadata Table - 110
*** InterfaceImpl Metadata Table - 111
*** NestedClass Metadata Table - 111
*** ClassLayout Metadata Table - 111

** Namespace and Full Class Name - 11
*** ILAsm Naming Conventions - 112
*** Namespaces - 113
*** Full Class Names - 114

** Class Attributes - 115
*** Flags - 115
*** Class Visibility and Friend Assemblies - 117
*** Class References - 118
*** Parent of the Type - 118
*** Interface Implementations - 119
*** Class Layout Information - 119

** Interfaces - 120
** Value Types - 121
*** Boxed and Unboxed Values - 121
*** Instance Members of Value Types - 122
*** Derivation of Value Types - 122

** Enumerations - 123
** Delegates - 123
** Nested Types - 125
** Class Augmentation - 127
** Summary of the Metadata Validity Rules - 128
*** TypeDef Table Validity Rules - 129
*** Enumeration-Specific Validity Rules - 130
*** TypeRef Table Validity Rules - 130
*** InterfaceImpl Table Validity Rules - 130
*** NestedClass Table Validity Rules - 131
*** ClassLayout Table Validity Rules - 131

* TODO Chapter 8: Primitive Types and Signatures - 133
** Primitive Types in the Common Language Runtime - 133
*** Primitive Data Types - 133
*** Data Pointer Types - 134
*** Function Pointer Types - 136
*** Vectors and Arrays - 136
*** Modifiers - 138
*** Native Types - 140
*** Variant Types - 143

** Representing Classes in Signatures - 145
** Signatures - 145
*** Calling Conventions - 146
*** Field Signatures - 147
*** Method and Property Signatures - 147
*** MemberRef Signatures - 148
*** Indirect Call Signatures - 148
*** Local Variables Signatures - 149
*** Type Specifications - 149

** Summary of Signature Validity Rules - 150

* TODO Chapter 9: Fields and Data Constants - 153
** Field Metadata - 153
*** Defining a Field - 154
*** Referencing a Field - 156

** Instance and Static Fields - 156
** Default Values - 157
** Mapped Fields - 159
** Data Constants Declaration - 160
** Explicit Layouts and Union Declaration - 162
** Global Fields - 164
** Constructors vs. Data Constants - 165
** Summary of Metadata Validity Rules - 167
*** Field Table Validity Rules - 168
*** FieldLayout Table Validity Rules - 168
*** FieldRVA Table Validity Rules - 168
*** FieldMarshal Table Validity Rules - 169
*** Constant Table Validity Rules - 169
*** MemberRef Table Validity Rules - 169

* TODO Chapter 10: Methods - 171
** Method Metadata - 171
*** Method Table Record Entries - 172
*** Method Flags - 173
*** Method Name - 175
*** Method Implementation Flags - 176
*** Method Parameters - 177
*** Referencing the Methods - 178
*** Method Implementation Metadata - 179

** Static, Instance, Virtual Methods - 179
** Explicit Method Overriding - 184
** Method Overriding and Accessibility - 189
** Method Header Attributes - 190
** Local Variables - 192
** Class Constructors - 194
*** Class Constructors and the beforefieldinit Flag - 194
*** Module Constructors - 197

** Instance Constructors - 197
** Instance Finalizers - 199
** Variable Argument Lists - 200
** Method Overloading - 202
** Global Methods - 204
** Summary of Metadata Validity Rules - 204
*** Method Table Validity Rules - 205
*** Param Table Validity Rules - 206
*** MethodImpl Table Validity Rules - 207

* TODO Chapter 11: Generic Types - 209
** Generic Type Metadata - 210
*** GenericParam Metadata Table - 212
*** GenericParamConstraint Metadata Table - 212
*** TypeSpec Metadata Table - 213

** Constraint Flags - 213
** Defining Generic Types in ILAsm - 214
** Addressing the Type Parameters - 215
** Generic Type Instantiations - 215
** Defining Generic Types: Inheritance, Implementation, Constraints - 217
** Defining Generic Types: Cyclic Dependencies - 218
** The Members of Generic Types - 220
*** Virtual Methods in Generic Types - 222

** Nested Generic Types - 225
** Summary of the Metadata Validity Rules - 228

* TODO Chapter 12: Generic Methods - 229
** Generic Method Metadata - 229
*** MethodSpec Metadata Table - 230

** Signatures of Generic Methods - 231
** Defining Generic Methods in ILAsm - 232
** Calling Generic Methods - 232
** Overriding Virtual Generic Methods - 234
** Summary of the Metadata Validity Rules - 238

* TODO Chapter 13: IL Instructions - 241
** Long-Parameter and Short-Parameter Instructions - 242
** Labels and Flow Control Instructions - 242
*** Unconditional Branching Instructions - 243
*** Conditional Branching Instructions - 243
*** Comparative Branching Instructions - 243
*** The ~switch~ Instruction - 245
*** The ~break~ Instruction - 245
*** Managed EH Block Exiting Instructions - 245
*** EH Block Ending Instructions - 246
*** The ~ret~ Instruction - 246

** Arithmetical Instructions - 246
*** Stack Manipulation - 246
*** Constant Loading - 247
*** Indirect Loading - 248
*** Indirect Storing - 248
*** Arithmetical Operations - 249
*** Overflow Arithmetical Operations - 251
*** Bitwise Operations - 251
*** Shift Operations - 252
*** Conversion Operations - 253
*** Overflow Conversion Operations - 254
*** Logical Condition Check Instructions - 254
*** Block Operations - 255

** Addressing Arguments and Local Variables - 255
*** Method Argument Loading - 256
*** Method Argument Address Loading - 256
*** Method Argument Storing - 256
*** Method Argument List - 256
*** Local Variable Loading - 257
*** Local Variable Reference Loading - 257
*** Local Variable Storing - 257
*** Local Block Allocation - 258
*** Prefix Instructions - 258

** Addressing Fields - 259
** Calling Methods - 259
*** Direct Calls - 260
*** Indirect Calls - 261
*** Tail Calls - 262
*** Constrained Virtual Calls - 262

** Addressing Classes and Value Types - 264
** Vector Instructions - 267
*** Vector Creation - 267
*** Element Address Loading - 268
*** Element Loading - 268
*** Element Storing - 269

** Code Verifiability - 269

* TODO Chapter 14: Managed Exception Handling - 273
** EH Clause Internal Representation - 273
** Types of EH Caluses - 274
** Label Form of EH Clause Declaration - 277
** Scope Form of EH Clause Declaration - 279
** Processing the Exceptions - 282
** Exception Types - 283
*** Loader Exceptions - 283
*** JIT Compiler Exceptions - 284
*** Execution Engine Exceptions - 284
*** Interoperability Services Exceptions - 286
*** Subclassing the Exceptions - 286
*** Unmanaged Exception Mapping - 287

** Summary of EH Clause Structuring Rules - 287

* TODO Chapter 15: Events and Properties - 289
** Events and Delegates - 289
** Event Metadata - 292
*** The Event Table - 293
*** The EventMap Table - 293
*** The MethodSemantics Table - 293

** Event Declaration - 294
** Property Metadata - 297
*** The Property Table - 297
*** The PropertyMap Table - 298

** Property Declaration - 298
** Summary of Metadata Validity Rules - 300
*** Event Table Validity Rules - 300
*** EventMap Table Validity Rules - 300
*** Property Table Validity Rules - 300
*** PropertyMap Table Validity Rules - 301
*** MethodSemantics Table Validity Rules - 301

* TODO Chapter 16: Custom Attributes - 303
** Concept of a Custom Attribute - 303
** CustomAttribute Metadata Table - 304
** Custom Attribute Value Encoding - 305
** Verbal Description of Custom Attribute Value - 306
** Custom Attribute Declaration - 307
** Classification of Custom Attributes - 310
*** Execution Engine and JIT Compiler - 312
*** Interoperation Subsystem - 312
*** Security - 314
*** Remoting Subsystem - 315
*** Visual Studio Debugger - 316
*** Assembly Linker - 317
*** Common Language Specification (CLS) Compliance - 318
*** Pseudocustom Attributes - 318

** Summary of Metadata Validity Rules - 320
* TODO Chapter 17: Security Attributes - 321
** Declarative Security - 321
** Declarative Actions - 322
** Security Permissions - 323
*** Access Permissions - 324
*** Identity Permissions - 327
*** Custom Permissions - 329
*** Permission Sets - 330

** Changes in Declarative Security in v4.0 - 331
** Declarative Security Metadata - 331
** Permission Set Blob Encoding - 332
** Security Attribute Declaration - 333
** Summary of Metadata Validity Rules - 334
* TODO Chapter 18: Managed and Unmanaged Code Interoperation - 335
** Thunks and Wrappers - 336
*** P/Invoke Thunks - 336
*** Implementation Map Metadata
*** IJW Thunks - 338
*** COM Callable Wrappers - 339
*** Runtime Callable Wrappers - 340

** Data Marshaling - 341
*** Blittable Types - 341
*** In/Out Parameters - 342
*** String Marshaling - 343
*** Object Marshaling - 344
*** More Object Marshaling - 345
*** Array Marshaling - 346
*** Delegate Marshaling - 346

** Interoperation with Windows Runtime - 347
** Providing Managed Methods as Callbacks for Unmanaged Code - 347
** Managed Methods as Unmanaged Exports - 350
*** Export Table Group - 351

** Summary - 356

* TODO Chapter 19: Multilanguage Projects - 357
** IL DIsassembler - 357
** Principles of Round-Tripping - 362
** Creative Round-Tripping - 363
** Using Class Augmentation - 364
** Module Linking Through Round-Tripping - 365
** ASMMETA: Resolving Circular Dependencies - 366
** IL Inlining in High-Level Languages - 368
** Compiling in Debug Mode - 370
** Summary - 375

* TODO Appendix A: ILAsm Grammar Reference - 377
** Lexical Tokens - 377
*** Auxiliary Lexical Tokens - 377

** Data Type Nonterminals - 377
** Identifier Nonterminals - 378
** Class Referencing - 378
** Module-Level Declarations - 378
** Compilation Control Directives - 378
** Module Parameter Declaration - 379
*** V-Table Fixup Table Declaration - 379

** Manifest Declarations - 379
** Managed Types in Signatures - 379
** Native Types in Marshaling Signatures - 382
** Method and Field Referencing - 384
** Class Declaration - 385
*** Generic Type Parameters Declaration - 386
*** Class Body Declarations - 387

** Field Declaration - 387
** Method Declaration - 388
*** Method Body Declarations - 389
*** External Source Directives - 390
*** Managed Exception Handling Directives - 390
*** IL Instructions - 390

** Event Declaration - 391
** Property Declaration - 391
** Constant Declarations - 392
** Custom Attribute Declarations - 394
*** Verbal Description of Custom Attribute Initialization Blob - 394

** Security Declarations - 394
** Aliasing of Types, Methods, Fields, and Custom Attributes - 395
** Data Declaration - 396

* TODO Appendix B: Metadata Tables Reference - 397
* TODO Appendix C: IL Instruction Set Reference - 409
* TODO Appendix D: IL Assembler and Disassembler Command-Line Options - 417
** IL Assembler - 417
** IL Disassembler - 420
*** Output Redirection Options - 420
*** ILAsm Code-Formatting Options (PE Files Only) - 420
*** File Output Options (PE Files Only) - 421
*** File or Console Output Options (PE Files Only) - 421
*** Metadata Summary Option - 422

* TODO Appendix E: Offline Verification Tool Reference - 423
** Error Codes and Messages - 425

* Index  - 443
