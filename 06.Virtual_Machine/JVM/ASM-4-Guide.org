#+TITLE: ASM 4.0
#+SUBTITLE: A Java bytecode engineering library
#+VERSION: 2011
#+AUTHOR: Eric Bruneton
#+STARTUP: overview
#+STARTUP: entitiespretty

* 1. Introduction - 1
** 1.1. Motivations - 1
   - Footnote 1:
     the ASM name does not mean anything: it is just a reference to the
     ~__asm__~ keyword in C, which allows some functions to be implemented in
     assembly language.

** 1.2. Overview - 2
*** 1.2.1. Scope - 2
    - The scope of the ASM library is strictly limited to
      + reading classes
      + writing classes
      + transforming classes
      + analyzing classes.

      In particular the _class loading process_ is *OUT* of scope.

*** 1.2.2. Model - 3
    - The ASM library provides *TWO* APIs for generating and transforming
      compiled classes:
      + the core API provides an *event based* representation of classes
        * =TODO=

      + the tree API provides an *object based* representation of classes
        * =TODO=

    - 

*** 1.2.3. Architecture - 4

** 1.3. Organization - 4
   - x
** 1.4. Acknowledgments - 6

* I. Core API - 7
* 2. Classes - 9
** 2.1. Structure - 9
*** 2.1.1. Overview - 9
*** 2.1.2. Internal names - 11
*** 2.1.3. Type descriptors - 11
*** 2.1.4. Method descriptors - 12

** 2.2. Interfaces and components - 12
*** 2.2.1. Presentation - 12
*** 2.2.2. Parsing classes - 14
*** 2.2.3. Generating classes - 16
*** 2.2.4. Transforming classes - 18
*** 2.2.5. Removing class members - 22
*** 2.2.6. Adding class members - 23
*** 2.2.7. Transformation chains - 25

** 2.3. Tools - 25
*** 2.3.1. Type - 26
*** 2.3.2. TraceClassVisitor - 27
*** 2.3.3. CheckClassAdapter - 28
*** 2.3.4. ASMifier - 28

* 3. Methods - 31
** 3.1. Structure - 31
*** 3.1.1. Execution model - 31
*** 3.1.2. Bytecode instructions - 33
*** 3.1.3. Examples - 35
*** 3.1.4. Exception handlers - 38
*** 3.1.5. Frames - 39

** 3.2. Interfaces and components - 41
*** 3.2.1. Presentation - 41
*** 3.2.2. Generating methods - 45
*** 3.2.3. Transforming methods - 46
*** 3.2.4. Stateless transformations - 48
*** 3.2.5. Statefull transformations - 52

** 3.3. Tools - 58
*** 3.3.1. Basic tools - 58
*** 3.3.2. AnalyzerAdapter - 61
*** 3.3.3. LocalVariablesSorter - 63
*** 3.3.4. AdviceAdapter - 65

* 4. Metadata - 67
** 4.1. Generics - 67
*** 4.1.1. Structure - 67
*** 4.1.2. Interfaces and components - 69
*** 4.1.3. Tools - 72

** 4.2. Annotations - 72
*** 4.2.1. Structure - 73
*** 4.2.2. Interfaces and components - 73
*** 4.2.3. Tools - 76

** 4.3. Debug - 77
*** 4.3.1. Structure - 77
*** 4.3.2. Interfaces and components - 78
*** 4.3.3. Tools - 80

* 5. Backward compatibility - 81
** 5.1. Introduction - 81
*** 5.1.1. Backward compatibility contract - 82
*** 5.1.2. An example - 83

** 5.2. Guidelines - 84
*** 5.2.1. Basic rule - 84
*** 5.2.2. Inheritance rule - 87

* II. Tree API - 89
* 6. Classes - 91
** 6.1. Interfaces and components - 91
*** 6.1.1. Presentation - 91
*** 6.1.2. Generating classes - 92
*** 6.1.3. Adding and removing class members - 93

** 6.2. Components composition - 95
*** 6.2.1. Presentation - 96
*** 6.2.2. Patterns - 97

* 7. Methods - 101
** 7.1. Interfaces and components - 101
*** 7.1.1. Presentation - 101
*** 7.1.2. Generating methods - 103
*** 7.1.3. Transforming methods - 105
*** 7.1.4. Stateless and statefull transformations - 106
*** 7.1.5. Global transformations - 109

** 7.2. Components composition - 112
*** 7.2.1. Presentation - 112
*** 7.2.2. Patterns - 112

* 8. Method Analysis - 115
** 8.1. Presentation - 115
*** 8.1.1. Data flow analyses - 115
*** 8.1.2. Control flow analyses - 117

** 8.2. Interfaces and components - 117
*** 8.2.1. Basic data flow analysis - 118
*** 8.2.2. Basic data flow verifier - 120
*** 8.2.3. Simple data flow verifier - 120
*** 8.2.4. User defined data flow analysis - 122
*** 8.2.5. Control flow analysis - 125

* 9. Metadata - 127
** 9.1. Generics - 127
** 9.2. Annotations - 127
** 9.3. Debug - 128

* 10.Backward compatibility - 129
** 10.1. Introduction - 129
** 10.2. Guidelines - 129
*** 10.2.1. Basic rules - 129
*** 10.2.2. Inheritance rules - 132
*** 10.2.3. Other packages - 133

* A. Appendix - 135
** A.1. Bytecode instructions - 135
** A.2. Subroutines - 139
** A.3. Attributes - 141
** A.4. Guidelines - 143
** A.5. Performances - 145

* Index - 147
