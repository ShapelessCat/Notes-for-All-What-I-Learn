#+TITLE: Understanding the JVM
#+SUBTITLE: Advanced Features and Best Practices
#+VERSION: 3rd, 2019
#+AUTHOR: Zhiming Zhou
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - ??
* Acknowledgement - ??
* PART One. Approach Java
** Chapter 1. Approach Java - 2
*** TODO 1.1 Introduction - 2
*** 1.2 Java Technology TODO ??? Tixi - 3
*** TODO 1.3 Java History - 4
*** 1.4 Java Virtual Machine Family - 12
**** 1.4.1  - 12
**** 1.4.2  - 13
**** 1.4.3  - 14
**** 1.4.4  - 15
**** 1.4.5  - 16
**** 1.4.6  - 17
**** 1.4.7  - 18
**** 1.4.8  - 19

*** TODO 1.5 Looking Forward the Future of Java Technology - 21
**** 1.5.1 Looking Forward the Future of Java Technology - 21
**** 1.5.2 New Generation Just in Time Compiler - 21
**** 1.5.3 Toward ~Native~ - 24
**** 1.5.4 Flexible Fatty - 26
**** 1.5.5 Continuously Enhancement of Language and Syntax - 27

*** TODO 1.6 Practice: Manually Compile JDK - 29
**** 1.6.1 Get The Source Code - 29
**** 1.6.2 System Requirement - 31
**** 1.6.3 Construct Compilation Environment - 33
**** 1.6.4 Compilation - 34
**** 1.6.5 Debug Source Code with IDE tools - 36

*** TODO 1.7 Summary - 39

* PART Two. Automatic Memory Management
** Chapter 2. Java Memory Layout and Memory Leak Exception - 42
*** TODO 2.1 Introduction - 42
*** TODO 2.2 Runtime Data Area - 42
**** 2.2.1 Program Counter - 43
**** 2.2.2 Java Virtual Machine Stack - 43
**** 2.2.3 Local Method Stack - 44
**** 2.2.4 Java Heap - 44
**** 2.2.5 Method Area - 46
**** 2.2.6 Runtime Constant Pool - 47
**** 2.2.7 Direct Memory - 47

*** 2.3 Explore HotSpot Virtual Machine Object - 48
**** 2.3.1 Object Construction - 48
**** 2.3.2 Object Memory Layout - 51
**** 2.3.3 Object Access Location TODO ??? - 52

*** TODO 2.4 Practice: ~OutOfMemoryError~ Exception - 53
**** 2.4.1 Java Heap Overflow - 54
**** 2.4.2 Overflow of Virtual Machine Stack and Local Method Stack - 56
**** 2.4.3 Overflow of Method Area and Runtime Constant Pool - 61
**** 2.4.4 Host Machine Memory Overflow - 65

*** TODO 2.5 Summary - 66

** Chapter 3. Garbage Collection and Memory Allocation Strategy - 67
*** TODO 3.1 Introduction - 67
*** 3.2 Already Dead Object? - 68
**** 3.2.1 Reference Count Method - 68
**** 3.2.2 Reachability Analysis Algorithm - 70
**** 3.2.3 Discuss Reference Again - 71
**** 3.2.4 To Be or Not To Be? - 72
**** 3.2.5 ??? - 74

*** 3.3 Garbage Collection Algorithms - 75
**** 3.3.1 TODO ??? - 75
**** 3.3.2 Mark and Sweep Algorithm - 77
**** 3.3.3 Mark and Copy Algorithm - 78
**** 3.3.4 Mark and TODO ??? Re-Orgnize Algorithm - 79

*** 3.4 HotSpot Algorithm Implementation in Details - 81
**** 3.4.1 Root Node Enumeration - 81
**** 3.4.2 Safe Node - 82
**** 3.4.3 Safe Area - 83
**** 3.4.4 Memory Set TODO and Card Table - 84
**** 3.4.5 Write Barrier - 85
**** 3.4.6 Concurrency Reachability Analysis - 87

*** TODO 3.5 Classical Garbage Collector - 89
**** 3.5.1 Serial Collector - 90
**** 3.5.2 ParNew Collector - 92
**** 3.5.3 Parallel Scavenge Collector - 93
**** 3.5.4 Serial Old Collector - 94
**** 3.5.5 Parallel Old Collector - 95
**** 3.5.6 CMS Collector - 96
**** 3.5.7 Garbage First Collector - 98

*** TODO 3.6 Low Latency Garbage Collector - 104
**** 3.6.1 Shenandoah Collector - 105
**** 3.6.2 ZGC Collector - 112

*** TODO 3.7 Pick Suitable Garbage Collectors - 121
**** 3.7.1 Epsilon Collectors - 121
**** 3.7.2 Trade off of Collectors - 121
**** 3.7.3 The Log of Virtual Machine and Garbage Collectors - 121
**** TODO 3.7.4 Summary to The Parameters (TODO Options ???) of Garbage Collectors - 121

*** 3.8 Practice: Memory Allocation and Recycling Strategy - 129
**** 3.8.1  - 130
**** 3.8.2 Allocate Huge Objects directly to Old Generation - 131
**** 3.8.3  - 132
**** 3.8.4 Decide The Age of Dynamic Object - 134
**** 3.8.5  - 135

*** TODO 3.9 Summary - 137

** Chapter 4. Virtual Machine Monitoring and Troubleshooting Tools - 138
*** TODO 4.1 Introduction - 138
*** TODO 4.2 Basic Troubleshooting Tools - 138
**** 4.2.1 jps: Java Virtual Machine Process Status Tool - 141
**** 4.2.2 jstat: Java Virtual Machine Statistics Monitoring Tool - 142
**** 4.2.3 jinfo: Java Configuration Info Tool - 143
**** 4.2.4 jmap: Java Memory Map Tool - 144
**** 4.2.5 jhat: Java Heap Analysis Tool - 145
**** 4.2.6 jstack: Java Stack Trace Tool - 146
**** 4.2.7 Basic Tools Summary - 148

*** 4.3 Visualizable Troubleshooting Tools - 151
**** 4.3.1 JHSDB: TODO - 152
**** 4.3.2 JConsole: TODO - 157
**** 4.3.3 VisualVM: TODO - 164
**** 4.3.4 Java Mission Control: TODO - 171

*** TODO 4.4 HotSpot Virtual Machine Plugins and Tools - 175
*** TODO 4.5 Summary - 180

** Chapter 5. Optimization Case Analysis and Practice - 181
*** TODO 5.1 Introduction - 181
*** 5.2 Case Analysis - 181
**** 5.2.1 The Stragegy of Deploying A Program on A Large Memory Hardware - 182
**** 5.2.2 The Memory Overflow Due to The Synchronization Among Clusters - 184
**** 5.2.3  - 185
**** 5.2.4  - 187
**** 5.2.5  - 187
**** 5.2.6  - 188
**** 5.2.7  - 189
**** 5.2.8  - 190

*** 5.3 Practice: Eclipse Running Performance Optimization - 192
**** 5.3.1 ??? - 193
**** 5.3.2 ??? - 196
**** 5.3.3 ??? - 200
**** 5.3.4 ??? - 203
**** 5.3.5 ??? - 206

*** TODO 5.4 Summary - 209

* PART Three. Virtual Machine Execution Subsystem
** Chapter 6. Class File Structure - 212
*** 6.1 Introduction - 212
*** 6.2 ??? - 212
*** 6.3 Class File Structure - 214
*** 6.4 Bytecode Instructions Introduction - 251
*** 6.5 Public Design, Private Implementation - 259
*** 6.6 Class File Structure Evolution - 260
*** 6.7 Summary - 261

** Chapter 7. Virtual Machine Class Loading Mechanism - 262
*** TODO 7.1 Introduction - 262
*** 7.2 Class Loading Time (TODO Shi Ji) - 262
*** 7.3 The Process of Class Loading - 267 - TODO
**** 7.3.1 Load - 267
**** 7.3.2 Validate - 268
**** 7.3.3 Prepare - 271
**** 7.3.4 Analysis - 272
**** 7.3.5 Initialize - 277

*** 7.4 Class Loader - 279
**** 7.4.1 Class and Class Loader - 280
**** 7.4.2 Parent Delegation Model - 279
**** 7.4.3 Destroy (TODO break???) Parent Delegation Model - 285

*** TODO 7.5 Java Module System - 287
**** 7.5.1 The Compatibility of Modules - 287
**** 7.5.2 Class Loader with Modules - 290

*** TODO 7.6 Summary - 292

** Chapter 8. Virtual Machine Execution Engine - 293
*** 8.1 Introduction - 293
*** 8.2 Runtime Stack Frame Structure - 294
*** 8.3 Method Invocation - 301
*** 8.4 Dynamic Languages Support - 315
*** 8.5 Stack-Based Bytecode Interpretation and Execution Engine - 326
*** 8.6 Summary - 334

** Chapter 9. Case Analysis and Practice of Class Loading and Execution Subsystem - 335
*** 9.1 Introduction - 335
*** 9.2 Case Analysis - 335
*** 9.3 Practice: Manually Implement Remote Execution Functionality - 348
*** 9.4 Summary - 356

* PART Four. Program Compilation and Optimization
** Chapter 10. Frontend Compilation and Optimization - 358
*** 10.1 Introduction - 358
*** 10.2 Javac - 359
*** 10.3 The Taste of Java Syntatic Sugar - 367
*** 10.4 Practice: TODO charushi ??? Annotation Processor - 378
*** 10.5 Summary - 356

** Chapter 11. Backend Compilation and Optimization - 388
*** 11.1 Introduction - 388
*** 11.2 Just in Time Compiler - 389
*** 11.3 Ahead of Time Compiler - 404
*** 11.4 Compilation Optimization Technique - 411
*** 11.5 Practice: Understanding the Graal Compiler - 423
*** 11.6 Summary - 436

* PART Five. High Performance Concurrency
** Chapter 12. Java Memory Model and Thread - 438
*** 12.1 Introduction - 438
*** 12.2 Hardare Efficiency and Consistency - 439
*** 12.3 Java Memory Model - 440
*** 12.4 Java and Threads - 455
*** 12.5 Java and Coroutine - 461
*** 12.6 Summary - 465

** Chapter 13. Thread Safty and Lock Optimization - 466
*** 13.1 Introduction - 466
*** 13.2 Thread Safty - 466
*** 13.3 Lock Optimization - 479
*** 13.4 Summary  - 485

* Appendix A. Compile OpenJDK 6 in Windows
* Appendix B. ?? ZhangWang ?? Java Technology and Its Future (2013 Version) - 493
* Appendix C. Virtual Machine Bytecode Table - 499
* Appendix D. Object Query Language (OQL) Introduction - 506
* Appendix E. History of JDK Versions - 512
