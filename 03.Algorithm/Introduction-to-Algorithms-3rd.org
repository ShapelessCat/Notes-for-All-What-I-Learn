#+TITLE: Introduction to Algorithms
#+VERSION: 3rd
#+YEAR: 2009
#+AUTHOR: Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - xiii
* TODO I Foundations - 2
** Introduction - 3
** 1 The Role of Algorithms in Computing - 5
*** 1.1 Algorithms - 5
*** 1.2 Algorithms as a technology - 11

** 2 Getting Started - 16
*** 2.1 Insertion sort - 16
    - *Loop invariants and the correctness of insertion sort*
      + /Loop invariants/ properties:
        + _Initialization_: TRUE prior to the first iteration

        + _Maintenance_:
          1. TRUE before an iteration;
             =from Jian= this means
             * the _initialization_ property is satisfied_,
               and
             * Iterations FROM the _initialization_ TO this iteration is right.

          2. Remain TRUE before the next iteration.

        + _Termination_:
          When the loop terminates, the invariant gives us a useful property that
          helps show that the algorithm is correct.

    - Compare the /loop invariants/ properties with /mathematical induction/:
      + 1 and 2 are like the base case and induction rule.
        * Q :: WHY 1 and 2 are not enough???

      + A :: /mathematical induction/ need to apply the induction step infinitely,
             while /loop/ must stop! When stopping, there must be some things change!
             The _termination_ property means when things change and you need to
             terminate the loop, still the /loop invariants/ must promise some useful
             property. TODO =RE-WRITE=

    - *Pseudocode conventions*
      + To indicate /code block/, use /indentation/ instead of ~begin~ and ~end~ statement.

    - *Exercises*

*** 2.2 Analyzing algorithms - 23
**** Analysis of insertion sort - 24
**** Worst-case and average-case analysis - 27
**** Order of growth - 28

*** 2.3 Designing algorithms - 29
**** 2.3.1 The divide-and-conquer approach - 30
**** 2.3.2 Analyzing divide-and-conquer algorithms - 34
***** Analysis of merge sort - 35
***** Exercises - 37

*** Problems - 39
*** Chapter notes - 42

** 3 Growth of Functions - 43
*** 3.1 Asymptotic notation - 43
**** Asymptotic notation, functions, and running times - 44
**** \Theta{}-notation - 44
**** O-notation - 47
**** \Omega{}-notation - 48
**** Asymptotic notation in equations and inequalities - 49
**** o-notation - 50
**** \omega{}-notation - 51
**** Comparing functions - 51
**** Exercises - 52

*** 3.2 Standard notations and common functions - 53
**** Monotonicity - 53
**** Floors and ceilings - 54
**** Modular arithmetic - 54
**** Polynomials - 55
**** Exponentials - 55
**** Logarithms - 56
**** Factorials - 57
**** Functional iteration - 58
**** The iterated logarithm function - 58
**** Fibonacci numbers - 59
**** Exercises - 60

*** Problems - 61
*** Chapter notes - 64

** 4 Divide-and-Conquer - 65
*** 4.1 The maximum-subarray problem - 68
**** A brute-force solution - 69
**** A transformation - 69
**** A solution using divide-and-conquer - 70
**** Analyzing the divide-and-conquer algorithm - 73
**** Exercises - 74

*** 4.2 Strassen's algorithm for matrix multiplication - 75
**** A simple divide-and-conquer algorithm - 76
**** Strassen's method - 82
**** Exercises - 82

*** 4.3 The substitution method for solving recurrences - 83
**** Making a good guess - 84
**** Subtleties - 85
**** Avoiding pitfalls - 86
**** Changing variables - 86
**** Exercises - 87

*** 4.4 The recursion-tree method for solving recurrences - 88
**** Exercises - 92

*** 4.5 The master method for solving recurrences - 93
**** The master theorem - 94
**** Using the master method - 95
**** Exercises - 96

*** 4.6 Proof of the master theorem - 97
**** 4.6.1 The proof for exact powers - 98
**** 4.6.2 Floors and ceilings - 103
**** Exercises - 106

*** Problems - 107
*** Chapter notes - 111

** 5 Probabilistic Analysis and Randomized Algorithms - 114
*** 5.1 The hiring problem - 114
**** Worst-case analysis - 115
**** Probabilistic analysis - 115
**** Randomized algorithms - 116
**** Exercises - 117

*** 5.2 Indicator random variables - 118
**** Analysis of the hiring problem using indicator random variables - 120
**** Exercises - 122

*** 5.3 Randomized algorithms - 122
**** Randomly permuting arrays - 124
**** Exercises - 128

*** 5.4 Probabilistic analysis and further uses of indicator random variables - 130
**** 5.4.1 The birthday paradox - 130
***** An analysis using indicator random variables - 132

**** 5.4.2 Balls and bins - 133
**** 5.4.3 Streaks - 135
**** 5.4.4 The on-line hiring problem - 139
**** Exercises - 142

*** Problems - 143
*** Chapter notes - 145

* II Sorting and Order Statistics - 146
** Introduction - 147
** 6 Heapsort - 151
*** 6.1 Heaps - 151
*** 6.2 Maintaining the heap property - 154
*** 6.3 Building a heap - 156
*** 6.4 The heapsort algorithm - 159
*** 6.5 Priority queues - 162

** 7 Quicksort - 170
*** 7.1 Description of quicksort - 170
*** 7.2 Performance of quicksort - 174
*** 7.3 A randomized version of quicksort - 179
*** 7.4 Analysis of quicksort - 180

** 8 Sorting in Linear Time - 191
*** 8.1 Lower bounds for sorting - 191
*** 8.2 Counting sort - 194
*** 8.3 Radix sort - 197
*** 8.4 Bucket sort - 200

** 9 Medians and Order Statistics - 213
*** 9.1 Minimum and maximum - 214
*** 9.2 Selection in expected linear time - 215
*** 9.3 Selection in worst-case linear time - 220

* III Data Structures - 228
** Introduction - 229
** 10 Elementary Data Structures - 232
*** 10.1 Stacks and queues - 232
*** 10.2 Linked lists - 236
*** 10.3 Implementing pointers and objects - 241
*** 10.4 Representing rooted trees - 246

** 11 Hash Tables - 253
*** 11.1 Direct-address tables - 254
*** 11.2 Hash tables - 256
*** 11.3 Hash functions - 262
*** 11.4 Open addressing - 269
*** 11.5 Perfect hashing - 277

** 12 Binary Search Trees - 286
*** 12.1 What is a binary search tree? - 286
*** 12.2 Querying a binary search tree - 289
*** 12.3 Insertion and deletion - 294
*** 12.4 Randomly built binary search trees - 299

** 13 Red-Black Trees - 308
*** 13.1 Properties of red-black trees - 308
*** 13.2 Rotations - 312
*** 13.3 Insertion - 315
*** 13.4 Deletion - 323

** 14 Augmenting Data Structures - 339
*** 14.1 Dynamic order statistics - 339
*** 14.2 How to augment a data structure - 345
*** 14.3 Interval trees - 348

* IV Advanced Design and Analysis Techniques - 356
** Introduction - 357
** 15 Dynamic Programming - 359
*** 15.1 Rod cutting - 360
*** 15.2 Matrix-chain multiplication - 370
*** 15.3 Elements of dynamic programming - 378
*** 15.4 Longest common subsequence - 390
*** 15.5 Optimal binary search trees - 397

** 16 Greedy Algorithms - 414
*** 16.1 An activity-selection problem - 415
*** 16.2 Elements of the greedy strategy - 423
*** 16.3 Huffman codes - 428
*** 16.4 Matroids and greedy methods - 437
*** 16.5 A task-scheduling problem as a matroid - 443

** 17 Amortized Analysis - 451
*** 17.1 Aggregate analysis - 452
*** 17.2 The accounting method - 456
*** 17.3 The potential method - 459
*** 17.4 Dynamic tables - 463

* V Advanced Data Structures - 480
** Introduction - 481
** 18 B-Trees - 484
*** 18.1 Definition of B-trees - 488
*** 18.2 Basic operations on B-trees - 491
*** 18.3 Deleting a key from a B-tree - 499

** 19 Fibonacci Heaps - 505
*** 19.1 Structure of Fibonacci heaps - 507
*** 19.2 Mergeable-heap operations - 510
*** 19.3 Decreasing a key and deleting a node - 518
*** 19.4 Bounding the maximum degree - 523

** 20 van Emde Boas Trees - 531
*** 20.1 Preliminary approaches - 532
*** 20.2 A recursive structure - 536
*** 20.3 The van Emde Boas tree - 545

** 21 Data Structures for Disjoint Sets - 561
*** 21.1 Disjoint-set operations - 561
*** 21.2 Linked-list representation of disjoint sets - 564
*** 21.3 Disjoint-set forests - 568
*** 21.4 Analysis of union by rank with path compression - 573

* VI Graph Algorithms - 586
** Introduction - 587
** TODO 22 Elementary Graph Algorithms - 589
*** 22.1 Representations of graphs - 589
**** Representing attributes - 592
**** Exercises - 592

*** 22.2 Breadth-first search - 594
**** Analysis - 597
**** Shortest paths - 597
**** Breadth-first trees - 600
**** Exercises - 601

*** 22.3 Depth-first search - 603
**** Properties of depth-first search - 606
**** Classification of edges - 609
**** Exercises - 610

*** 22.4 Topological sort - 612
**** Exercises - 614

*** 22.5 Strongly connected components - 615
**** Exercises - 620

*** Problems - 621

** TODO 23 Minimum Spanning Trees - 624
*** 23.1 Growing a minimum spanning tree - 625
**** Exercises - 629

*** 23.2 The algorithms of Kruskal and Prim - 631
**** Kruskal's algorithm - 631
**** Prim's algorithm - 634
**** Exercises - 637

*** Problems - 638
*** Chapter notes - 641

** 24 Single-Source Shortest Paths - 643
*** 24.1 The Bellman-Ford algorithm - 651
*** 24.2 Single-source shortest paths in directed acyclic graphs - 655
*** 24.3 Dijkstra's algorithm - 658
*** 24.4 Difference constraints and shortest paths - 664
*** 24.5 Proofs of shortest-paths properties - 671

** 25 All-Pairs Shortest Paths - 684
*** 25.1 Shortest paths and matrix multiplication - 686
*** 25.2 The Floyd-Warshall algorithm - 693
*** 25.3 Johnson's algorithm for sparse graphs - 700

** 26 Maximum Flow - 708
*** 26.1 Flow networks - 709
*** 26.2 The Ford-Fulkerson method - 714
*** 26.3 Maximum bipartite matching - 732
*** 26.4 Push-relabel algorithms - 736
*** 26.5 The relabel-to-front algorithm - 748

* VII Selected Topics - 768
** Introduction - 769
** 27 Multithreaded Algorithms - 772
*** 27.1 The basics of dynamic multithreading - 774
*** 27.2 Multithreaded matrix multiplication - 792
*** 27.3 Multithreaded merge sort - 797

** 28 Matrix Operations - 813
*** 28.1 Solving systems of linear equations - 813
*** 28.2 Inverting matrices - 827
*** 28.3 Symmetric positive-definite matrices and least-squares approximation - 832

** 29 Linear Programming - 843
*** 29.1 Standard and slack forms - 850
*** 29.2 Formulating problems as linear programs - 859
*** 29.3 The simplex algorithm - 864
*** 29.4 Duality - 879
*** 29.5 The initial basic feasible solution - 886

** 30 Polynomials and the FFT - 898
*** 30.1 Representing polynomials - 900
*** 30.2 The DFT and FFT - 906
*** 30.3 Efficient FFT implementations - 915

** 31 Number-Theoretic Algorithms - 926
*** 31.1 Elementary number-theoretic notions - 927
*** 31.2 Greatest common divisor - 933
*** 31.3 Modular arithmetic - 939
*** 31.4 Solving modular linear equations - 946
*** 31.5 The Chinese remainder theorem - 950
*** 31.6 Powers of an element - 954
*** 31.7 The RSA public-key cryptosystem - 958
*** 31.8 Primality testing - 965
*** 31.9 Integer factorization - 975

** 32 String Matching - 985
*** 32.1 The naive string-matching algorithm - 988
*** 32.2 The Rabin-Karp algorithm - 990
*** 32.3 String matching with finite automata - 995
*** 32.4 The Knuth-Morris-Pratt algorithm - 1002

** 33 Computational Geometry - 1014
*** 33.1 Line-segment properties - 1015
*** 33.2 Determining whether any pair of segments intersects - 1021
*** 33.3 Finding the convex hull - 1029
*** 33.4 Finding the closest pair of points - 1039

** 34 NP-Completeness - 1048
*** 34.1 Polynomial time - 1053
*** 34.2 Polynomial-time verification - 1061
*** 34.3 NP-completeness and reducibility - 1067
*** 34.4 NP-completeness proofs - 1078
*** 34.5 NP-complete problems - 1086

** 35 Approximation Algorithms - 1106
*** 35.1 The vertex-cover problem - 1108
*** 35.2 The traveling-salesman problem - 1111
*** 35.3 The set-covering problem - 1117
*** 35.4 Randomization and linear programming - 1123
*** 35.5 The subset-sum problem - 1128

* VIII Appendix: Mathematical Background - 1142
** TODO Introduction - 1143
** TODO A Summations - 1145
*** A.1 Summation formulas and properties - 1145
**** Linearity - 1146
**** Arithmetic series - 1146
**** Sums of squares and cubes - 1147
**** Geometric series - 1147
**** Harmonic series - 1147
**** Integrating and differentiating series - 1147
**** Telescoping series - 1148
**** Products - 1148

*** A.2 Bounding summations - 1149
**** Mathematical induction - 1149
**** Bounding the terms - 1150
**** Splitting summations - 1152
**** Approximation by integrals - 1154

*** Problems - 1156
*** Appendix notes - 1157

** TODO B Sets, Etc. - 1158
*** TODO B.1 Sets - 1158
**** Exercises - 1162

*** TODO B.2 Relations - 1163
**** Exercises - 1165

*** TODO B.3 Functions - 1166
**** Exercises - 1168

*** TODO B.4 Graphs - 1168
**** Exercises - 1172

*** TODO B.5 Trees - 1173
**** B.5.1 Free trees - 1173
**** B.5.2 Rooted and ordered trees - 1176
**** B.5.3 Binary and positional trees - 1177
**** Exercises - 1179

*** TODO Problems - 1180
*** TODO Appendix notes - 1182

** C Counting and Probability - 1183
*** C.1 Counting - 1183
*** C.2 Probability - 1189
*** C.3 Discrete random variables - 1196
*** C.4 The geometric and binomial distributions - 1201
*** C.5 The tails of the binomial distribution - 1208

** D Matrices - 1217
*** D.1 Matrices and matrix operations - 1217
*** D.2 Basic matrix properties - 1222

* Bibliography - 1231
* Index - 1251
