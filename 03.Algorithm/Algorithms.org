#+TITLE: Algorithms
#+AUTHOR: Sanjoy Dasgupta, Christos Papadimitriou, Umesh Vazirani
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Preface - ix
* TODO 0 Prologue
** 0.1 Books and algorithms - 1
** 0.2 Enter Fibonacci - 2
*** A polynomial algorithm - 4
*** More careful analysis - 5

** 0.3 Big-O notation - 6
** Exercises - 8

* TODO 1 Algorithms with numbers - 11
** 1.1 Basic arithmetic - 11
*** 1.1.1 Addition - 11
*** 1.1.2 Multiplication and division - 13

** 1.2 Modular arithmetic - 16
*** 1.2.1 Modular addition and multiplication - 18
*** 1.2.2 Modular exponentiation - 18
*** 1.2.3 Euclid's algorithm for greatest common divisor - 20
*** 1.2.4 An extension of Euclid's algorithm - 21
*** 1.2.5 Modular division - 23

** 1.3 Primality testing - 23
*** 1.3.1 Generating random primes - 28

** 1.4 Cryptography - 30
*** 1.4.1 Private-key schemes: one-time pad and AES - 31
*** 1.4.2 RSA - 33

** 1.5 Universal hashing - 35
*** 1.5.1 Hash tables - 35
*** 1.5.2 Families of hash functions - 36

** Exercises - 38

* Randomized algorithms: a virtual chapter - 29
* TODO 2 Divide-and-conquer algorithms - 45
** 2.1 Multiplication - 45
** 2.2 Recurrence relations - 49
** 2.3 Mergesort - 50
** 2.4 Medians - 53
** 2.5 Matrix multiplication - 56
** 2.6 The fast Fourier transform - 58
*** 2.6.1 An alternative representation of polynomials - 58
*** 2.6.2 Evaluation by divide-and-conquer - 60
*** 2.6.3 Interpolation - 62
**** A matrix reformulation - 64
**** Interpolation resolved - 65

*** 2.6.4 A closer look at the fast Fourier transform - 67
**** The definitive FFT algorithm - 67
**** The fast Fourier transform unraveled - 68

** Exercises - 70

* TODO 3 Decompositions of graphs - 80
** 3.1 Why graphs? - 80
*** 3.1.1 How is a graph represented? - 81

** 3.2 Depth-first search in undirected graphs - 83
*** 3.2.1 Exploring mazes - 83
*** 3.2.2 Depth-first search - 85
*** 3.2.3 Connectivity in undirected graphs - 86
*** 3.2.4 Previsit and postvisit orderings - 87

** 3.3 Depth-first search in directed graphs - 87
*** 3.3.1 Types of edges - 87
*** 3.3.2 Directed acyclic graphs - 89

** 3.4 Strongly connected components - 91
*** 3.4.1 Defining connectivity for directed graphs - 91
*** 3.4.2 An efficient algorithm - 92

** Exercises - 95

* TODO 4 Paths in graphs - 104
** 4.1 Distances - 104
** 4.2 Breadth-first search - 105
** 4.3 Lengths on edges - 107
** 4.4 Dijkstra's algorithm - 108
*** 4.4.1 An adaptation of breadth-first search - 108
**** A more convenient graph - 108
**** Alarm clocks - 108
**** Dijkstra's algorithm - 109

*** 4.4.2 An alternative derivation - 112
*** 4.4.3 Running time - 114

** 4.5 Priority queue implementations - 113
*** 4.5.1 Array - 113
*** 4.5.2 Binary heap - 114
*** 4.5.3 d-ary heap - 115

** 4.6 Shortest paths in the presence of negative edges - 115
*** 4.6.1 Negative edges - 115
*** 4.6.2 Negative cycles - 118

** 4.7 Shortest paths in dags - 119
** Exercises - 120

* TODO 5 Greedy algorithms - 127
** 5.1 Minimum spanning trees - 127
*** 5.1.1 A greedy approach - 128
*** 5.1.2 The cut property - 130
    - Say that in the process of building a /minimum spanning tree (MST)/,
      + Suppose
        *we have already chosen some edges and are so far on the right track*.

      + Question
        *Which edge should we add next?*

      The following lemma gives us a lot of flexibility in our choice.

    - *Cut property*
      1. Suppose edges X are part of a /minimum spanning tree/ of G = (V, E ).
         =From Jian= You are right until now.

      2. Pick any subset of nodes S for which X does not cross between S and V − S,
         and let e be the _LIGHTEST edge_ *across* this partition.

      *Then X ∪ {e} is part of some /MST/.*

    
*** 5.1.3 Kruskal's algorithm - 131
*** 5.1.4 A data structure for disjoint sets - 132
*** 5.1.5 Prim's algorithm - 137

** 5.2 Huffman encoding - 138
** 5.3 Horn formulas - 144
** 5.4 Set cover - 145
** Exercises - 148

* TODO 6 Dynamic programming - 156
** 6.1 Shortest paths in dags, revisited - 156
** 6.2 Longest increasing subsequences - 157
** 6.3 Edit distance - 159
** 6.4 Knapsack - 164
** 6.5 Chain matrix multiplication - 168
** 6.6 Shortest paths - 171
*** Shortest reliable paths - 171
*** All-pairs shortest paths - 172
*** The traveling salesman problem - 173

** 6.7 Independent sets in trees - 175
** Exercises - 177

* TODO 7 Linear programming and reductions - 188
** 7.1 An introduction to linear programming - 188
*** 7.1.1 Example: profit maximization - 189
**** Solving linear programs - 190
**** More products - 191

*** 7.1.2 Example: production planning - 193
*** 7.1.3 Example: optimum bandwidth allocation - 194
*** 7.1.4 Variants of linear programming - 197

** 7.2 Flows in networks - 198
*** 7.2.1 Shipping oil - 198
*** 7.2.2 Maximizing flow - 199
*** 7.2.3 A closer look at the algorithm - 200
*** 7.2.4 A certificate of optimality - 201
*** 7.2.5 Efficiency - 204

** 7.3 Bipartite matching - 205
** 7.4 Duality - 206
** 7.5 Zero-sum games - 209
** 7.6 The simplex algorithm - 213
*** 7.6.1 Vertices and neighbors in n-dimensional space - 214
*** 7.6.2 The algorithm - 214
*** 7.6.3 Loose ends - 216
*** 7.6.4 The running time of simplex - 218

** 7.7 Postscript: circuit evaluation - 221
** Exercises - 222

* TODO 8 NP-complete problems - 232
** 8.1 Search problems - 232
*** Satisfiability - 232
*** The traveling salesman problem - 235
*** Euler and Rudrata - 236
*** Cuts and bisections - 238
*** Integer linear programming - 239
*** Three-dimensional matching - 240
*** Independent set, vertex cover, and clique - 240
*** Longest path - 242
*** Knapsack and subset sum - 242

** 8.2 NP-complete problems - 243
*** Hard problems, easy problems - 243
*** P and NP - 243
*** Reductions, again - 244
*** Factoring - 245

** 8.3 The reductions - 247
** Exercises - 264

* TODO 9 Coping with NP-completeness - 271
** 9.1 Intelligent exhaustive search - 272
*** 9.1.1 Backtracking - 272
*** 9.1.2 Branch-and-bound - 275

** 9.2 Approximation algorithms - 276
*** 9.2.1 Vertex cover - 278
*** 9.2.2 Clustering - 279
*** 9.2.3 TSP - 281
**** General TSP - 283

*** 9.2.4 Knapsack - 283
*** 9.2.5 The approximability hierarchy - 284

** 9.3 Local search heuristics - 285
*** 9.3.1 Traveling salesman, once more - 285
*** 9.3.2 Graph partitioning - 288
*** 9.3.3 Dealing with local optima - 290
**** Randomization and restarts - 290
**** Simulated annealing - 290

** Exercises - 293

* TODO 10 Quantum algorithms - 297
** 10.1 Qubits, superposition, and measurement - 297
** 10.2 The plan - 301
** 10.3 The quantum Fourier transform - 303
** 10.4 Periodicity - 305
** 10.5 Quantum circuits - 307
*** 10.5.1 Elementary quantum gates - 307
*** 10.5.2 Two basic types of quantum circuits - 308
*** 10.5.3 The quantum Fourier transform circuit - 309

** 10.6 Factoring as periodicity - 310
** 10.7 The quantum algorithm for factoring - 311
** Exercises - 314

* Historical notes and further reading - 317
* Index - 319
