;; 3. is a integer, 3.0 is a float

;; nil and () are false and empty list. All the others are t.

;; (= 3 3.001) ; => nil
;; (= 3 3.00000000000000001) ; â‡’ t

;; integerp, floatp, string-equal, string-to-number, number-to-string
;; equal (for generic equality test)

;; (= 3 3.0) ; => t
;; (equal 3 3.0) ; => nil  ;; data type mismatch

;; (equal 'abc 'abc) ; => t

;; eq return t only if two args are same object in elisp

;; /=

;; setq is used to set variables. Variables need not be declared, and is global.
;; (setq x 1) ; assign 1 to x
;; (setq a 3 b 2 c 7) ; assign 3 to a, 2 to b, 7 to c
#+BEGIN_SRC elisp
(let (a b)
  (setq a 3)
  (setq b 4)
  (+ a b)) ; returns 7

(let ((a 3) (b 4))
  (+ a b)) ; returns 7
#+END_SRC

;; if
;; when

;; progn

;; while loop, remember this is lisp!!! Don't over use imperative form
(setq x 0)

(while (< x 4)
  (print (format "number is %d" x))
  (setq x (1+ x)))

** Define a Command
   - ~defun~ ::
       #+BEGIN_SRC elisp
       (defun myFunction ()
         "testing"
         (message "Yay!"))
       #+END_SRC

   - ~interactive~ :: To make a function available for interactive use, add
       ~(interactive)~ right after the doc string.
       #+BEGIN_SRC emacs-lisp
       (defun yay ()
         "Insert 'Yay!' at cursor position."
         (interactive)
         (insert "Yay!"))
       #+END_SRC

   - ~insert~ :: insert text in the buffer

   - ~(point)~ ::

   - ~(region-beginning)~ ::

   - ~(region-end)~ ::

   - ~(line-beginning-position)~ :: 

   - ~(line-end-position)~ ::

   - ~(point-min)~ ::

   - ~(point-max)~ ::

   -  :: 

** AAA




