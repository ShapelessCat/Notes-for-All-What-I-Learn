#+TITLE: Google Java Style Guide
#+VERSION: 2019-12
#+STARTUP: overview
#+STARTUP: entitiespretty

* DONE 1 Introduction
  CLOSED: [2019-12-20 Fri 19:17]
  This document
  - _focuses primarily on_ the *hard-and-fast rules* that we follow universally,
  - _avoids_ giving advice that isn't clearly enforceable (whether by human or tool).

** DONE 1.1 Terminology notes
   CLOSED: [2019-12-20 Fri 19:14]
   - In this document, unless otherwise clarified:
     1. _class_ -->
        ~class~, ~enum~, ~interface~, and ~@interface~

     2. _member_ (of a _class_) -->
        /nested class/, /field/, /method/, or /constructor/ -- all top-level
        contents of a _class_ except /initializers/ and /comments/.

     3. _comment_ -->
        ALWAYS refers to /implementation comments/
        + won't use "documentation comments", _USE "Javadoc"_

   - Other "terminology notes" will appear occasionally throughout the document.

** DONE 1.2 Guide notes
   CLOSED: [2019-12-20 Fri 19:17]
   Example code in this documentation is /non-normative/:
   Not the only stylish way, just a way follow our rules in this document.
   There might be other formmating choices we can make, and this document just
   pick one.

* TODO 2 Source file basics
** DONE 2.1 File name
   CLOSED: [2019-12-20 Fri 19:22]
** DONE 2.2 File encoding: UTF-8
   CLOSED: [2019-12-20 Fri 19:22]
   Source files are encoded in UTF-8.

** TODO 2.3 Special characters
*** 2.3.1 Whitespace characters
*** 2.3.2 Special escape sequences
*** 2.3.3 Non-ASCII characters

* TODO 3 Source file structure
** 3.1 License or copyright information, if present
** 3.2 Package statement
** 3.3 Import statements
*** 3.3.1 No wildcard imports
*** 3.3.2 No line-wrapping
*** 3.3.3 Ordering and spacing
*** 3.3.4 No static import for classes

** 3.4 Class declaration
*** 3.4.1 Exactly one top-level class declaration
*** 3.4.2 Ordering of class contents
**** 3.4.2.1 Overloads: never split

* TODO 4 Formatting
** DONE 4.1 Braces
   CLOSED: [2019-12-21 Sat 01:43]
*** DONE 4.1.1 Braces are used where optional
    CLOSED: [2019-12-21 Sat 01:27]
    Braces are used with ~if~, ~else~, ~for~, ~do~ and ~while~ statements, even
    when the body is empty or contains only a single statement.

*** DONE 4.1.2 Nonempty blocks: K & R style
    CLOSED: [2019-12-21 Sat 01:37]
    - Braces follow the Kernighan and Ritchie style ("Egyptian brackets") for
      nonempty blocks and block-like constructs:
      + No line break before {.

      + Line break after the {.

      + Line break before the }.

      + Line break after the }, *only if* that brace
        * _terminates_ a statement
          OR
        * terminates the body of a /method/, /constructor/, or /named class/.
          For example, there is _no line break_ after the brace if it is
          followed by ~else~ or a _comma_.

    - Examples:
      #+begin_src java
        return () -> {
          while (condition()) {
            method();
          };
        }

        return new MyClass() {
          @Override public void method() {
            if (condition()) {
              try {
                something();
              } catch (ProblemException e) {
                recover();
              }
            } else if (othercondtion()) {
              somethingElse();
            } else {
              lastThing();
            }
          }
        }
      #+end_src

    - TODO A few exceptions for /enum classes/ are given in Section 4.8.1, /Enum classes/.
      TODO TODO TODO

*** DONE 4.1.3 Empty blocks: may be concise
    CLOSED: [2019-12-21 Sat 01:43]
    - RULE :: An /empty block/ or /block-like construct/ (=from Jian= ???) may be
      + may be in K & R style (as described in Section 4.1.2)
        OR
      + may be _closed IMMEDIATELY_ after it is opened, with _no characters or
        line break in between (~{}~)_,
        *UNLESS* it is part of a /multi-block statement/ (one that directly
        contains multiple blocks: ~if/else~ or ~try/catch/finally~).

    - *Acceptable*:
      #+begin_src java
        // This is acceptable
        void doNothing() {}
  
        // (K & r) This is equally acceptable
        void doNothingElse() {
        }
      #+end_src

    - *NOT acceptable*:
      #+begin_src java
        // This is not acceptable: No concise empty blocks in a multi-block statement
        try {
          doSomething();
        } catch (Exception e) {}
      #+end_src

** DONE 4.2 Block indentation: +2 spaces
   CLOSED: [2019-12-20 Fri 19:27]
   Apply this rule to both code and comments

** DONE 4.3 One statement per line
   CLOSED: [2019-12-20 Fri 19:27]
** DONE 4.4 Column limit: 100
   CLOSED: [2019-12-20 Fri 20:03]
   - One /Unicode code point/ counts as _one character_,
     even if its display width is greater or less.
     + If using /fullwidth characters/, you may choose to wrap the line earlier
       than where this rule strictly requires.

   - Exceptions:
     =from Jian=
     Enforce code width limit is mostly for readability!
     No need to consider readability for things that we don't "really read".
     This is the main reason why we have the exceptions (1 and 2)!

     1. When not possible
        For example,
        + long URLs in Javadoc
        + a long JSNI method reference
          =from Jian= I don't think I need to touch anything about JSNI.

     2. ~package~ and ~import~ statements
        =from Jian=
        + ~package~ is a _declaration_ and ~import~ is a _reference_.
          If one can be long, the corresponding one must be long.

        + Q :: WHY this can be an exception?

        + A1 :: If people can control all code, even the library, long ~package~
                and ~import~ statement should be refactored out. However, no one
                can control all, in practical, our work are mostly based on other
                projects, and sometimes we don't have a good choice.

        + A2 :: ~package~ and ~import~ are not the code we need "read".

     3. Command lines in a comment that may be cut-and-pasted into a shell.
        =from Jian= for convenience!

** TODO 4.5 Line-wrapping
   - *Terminology Note*:
      When code that might otherwise legally occupy a single line is divided
     into multiple lines, this activity is called line-wrapping.

   - NO comprehensive, deterministic formula showing eactly how to line-wrap in
     every situation -- often multiple valid way.
     + =from Jian=
       This is way I prefer to do line-wrap manually instead of use formatter
       plugins -- only the creator, though not always, of a piece code knows the
       best way apply line-wrap to his/her code.

   - *Tip*
     _Extracting a method or local variable_ may solve the problem without the
     need to line-wrap.


*** TODO 4.5.1 Where to break
*** TODO 4.5.2 Indent continuation lines at least +4 spaces

** TODO 4.6 Whitespace
*** TODO 4.6.1 Vertical Whitespace
*** TODO 4.6.2 Horizontal whitespace
*** TODO 4.6.3 Horizontal alignment: never required

** TODO 4.7 Grouping parentheses: recommended
** TODO 4.8 Specific constructs
*** TODO 4.8.1 Enum classes
*** DONE 4.8.2 Variable declarations
    CLOSED: [2019-12-21 Sat 01:53]
**** DONE 4.8.2.1 One variable per declaration
     CLOSED: [2019-12-21 Sat 01:50]
     - *EXCEPTION*:
       _Multiple variable declarations_ are ACCEPTABLE in the _header of a ~for~
       loop_.

**** DONE 4.8.2.2 Declared when needed
     CLOSED: [2019-12-21 Sat 01:52]
     - To *minimize their scope*, /local variables/ are *declared* _close to the
       point they are first used (within reason)_.

     - /Local variable/ declarations typically
       + have /initializers/,
         OR
       + are /initialized/ immediately after /declaration/.

*** DONE 4.8.3 Arrays
    CLOSED: [2019-12-21 Sat 01:58]
**** DONE 4.8.3.1 Array initializers: can be "block-like"
     CLOSED: [2019-12-21 Sat 01:58]
     Any array initializer may optionally be formatted as if it were a
     "block-like construct." For example, the following are all valid (not an
     exhaustive list):
     #+begin_src java
       // #1
       new int[] {
         0, 1, 2, 3
       }

       // #2
       new int[] {
         0, 1,
         2, 3
       }

       // #3
       new int[] {
         0,
         1,
         2,
         3,
       }

       // #4 TODO ??? indentation
       new int[]
           {0, 1, 2, 3}
     #+end_src

**** DONE 4.8.3.2 No C-style array declarations
     CLOSED: [2019-12-21 Sat 01:54]
     - The _square brackets_
       + form a part of the /type/
       + *NOT* the /variable/

     - Example: ~String[] args~, *NOT* ~String args[]~.

*** TODO 4.8.4 Switch statements
    - *Terminology Note*
**** TODO 4.8.4.1 Indentation
**** TODO 4.8.4.2 Fall-through: commented
**** TODO 4.8.4.3 The ~default~ case is present

*** TODO 4.8.5 Annotations
*** DONE 4.8.6 Comments
    CLOSED: [2019-12-21 Sat 02:10]
    This section only talk about the /implementatio comments/.
    TODO Javadoc is addressed separately in Section 7, Javadoc

**** DONE 4.8.6.1 Block comment style
     CLOSED: [2019-12-21 Sat 02:09]
     - /Block comments/ are _indented at the *SAME* level_ AS _the surrounding
       code_.

     - /Block comments/ can use ~/* ... */~ style or ~// ...~ style.
       For multi-line ~/* ... */~ comments, subsequent lines must start with ~*~
       aligned with the ~*~ on the previous line.

     - Example:
       #+begin_src java
         /*
          * This is
          * okay.
          */


         // And so
         // is this

         /* Or you can
          * even do this. */
       #+end_src

     - Comments are *NOT* enclosed in boxes drawn with asterisks or other characters.

     - *TIP*:
       + When writing multi-line comments, use the ~/* ... */~ style if you want
         automatic code formatters to _re-wrap_ the lines when necessary
         (paragraph-style).

       + Most formatters do *NOT* _re-wrap_ lines in ~// ...~ style comment blocks.

*** DONE 4.8.7 Modifiers - TODO =Re-Read=
    CLOSED: [2019-12-21 Sat 02:01]
    Class and member modifiers, when present, appear in the order recommended by
    the JLS:
    ~public protected private abstract default static final transient volatile synchronized native strictfp~

*** DONE 4.8.8 Numeric Literals
    CLOSED: [2019-12-21 Sat 02:01]
    ~long~ literal use an uppercase ~L~ suffix, NEVER lowercase!

* TODO 5 Naming
** 5.1 Rules common to all identifiers
** 5.2 Rules by identifier type
*** 5.2.1 Package names
*** 5.2.2 Class names
*** 5.2.3 Method names
*** 5.2.4 Constant names
*** 5.2.5 Non-constant field names
*** 5.2.6 Parameter names
*** 5.2.7 Local variable names
*** 5.2.8 Type variable names

** 5.3 Camel case: defined

* TODO 6 Programming Practices
** 6.1 ~@Override:~ always used
** 6.2 Caught exceptions: not ignored
** 6.3 Static members: qualified using class
** 6.4 Finalizers: not used

* TODO 7 Javadoc
** 7.1 Formatting
*** 7.1.1 General form
*** 7.1.2 Paragraphs
*** 7.1.3 Block tags

** 7.2 The summary fragment
** 7.3 Where Javadoc is used
*** 7.3.1 Exception: self-explanatory methods
*** 7.3.2 Exception: overrides
*** 7.3.3 ??? =DOC Error -- No this section= ???
*** 7.3.4 Non-required Javadoc
