#+TITLE: Real World OCaml
#+SUBTITLE: FUNCTIONAL PROGRAMMING FOR THE MASSES
#+VERSION: 2014
#+AUTHOR: Yaron Minsky, Anil Madhavapeddy & Jason Hickey
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Prologue
* TODO Part I. Language Concepts
** TODO 1. A Guided Tour - 3
   Use ~Core~ instead of the standard library.
   Use ~utop~ rather than the standard toplevel ~ocaml~.

*** TODO OCaml as a Calculator 3
*** TODO Functions and Type Inference 5
**** Type Inference 7
**** Inferring Generic Types 8
*** TODO Tuples, Lists, Options, and Pattern Matching 10
**** Tuples 10
**** Lists 11
**** Options 16
*** TODO Records and Variants 18
*** TODO Imperative Programming 20
**** Arrays 20
**** Mutable Record Fields 21
**** Refs 22
**** For and While Loops 23
*** TODO A Complete Program 25
**** Compiling and Running 26
*** TODO Where to Go from Here 26
** TODO 2. Variables and Functions - 27
*** TODO Variables 27
**** Pattern Matching and let 30
*** TODO Functions 31
**** Anonymous Functions 31
**** Multiargument functions 33
**** Recursive Functions 34
**** Prefix and Infix Operators 35
**** Declaring Functions with Function 39
**** Labeled Arguments 40
**** Optional Arguments 43
** TODO 3. Lists and Patterns - 49
*** TODO List Basics 49
*** TODO Using Patterns to Extract Data from a List 50
*** TODO Limitations (and Blessings) of Pattern Matching 52
**** Performance 52
**** Detecting Errors 54
*** TODO Using the List Module Effectively 55
**** More Useful List Functions 58
*** TODO Tail Recursion 61
*** TODO Terser and Faster Patterns 63
** TODO 4. Files, Modules, and Programs - 67
   - So far we experienced OCaml largely through the toplevel.

     To move to the real world we need to start building programs from files.

   - /Files/ are _more than_ just a convenient way to store and manage your code;

     They also correspond to /modules/, which act as boundaries that divide your
     program into conceptual units.

*** TODO Single-File Programs 67
*** TODO Multifile Programs and Modules 70
*** TODO Signatures and Abstract Types 71
*** TODO Concrete Types in Signatures 74
*** TODO Nested Modules 75
*** TODO Opening Modules 77
*** TODO Including Modules 79
*** TODO Common Errors with Modules 81
*** TODO Type Mismatches 81
**** Missing Definitions 81
**** Type Definition Mismatches 81
**** Cyclic Dependencies 82
*** TODO Designing with Modules 83
**** Expose Concrete Types Rarely 83
**** Design for the Call Site 84
**** Create Uniform Interfaces 84
**** Interfaces before implementations 85
** TODO 5. Records - 87
*** TODO Patterns and Exhaustiveness 88
*** TODO Field Punning 91
*** TODO Reusing Field Names 92
*** TODO Functional Updates 96
*** TODO Mutable Fields 97
*** TODO First-Class Fields 98
** TODO 6. Variants - 103
*** TODO Catch-All Cases and Refactoring 105
*** TODO Combining Records and Variants 107
*** TODO Variants and Recursive Data Structures 111
*** TODO Polymorphic Variants 114
**** Example: Terminal Colors Redux 116
**** When to Use Polymorphic Variants 121
** TODO 7. Error Handling - 123
*** TODO Error-Aware Return Types 123
**** Encoding Errors with Result 125
**** Error and Or\under{}error 125
**** bind and Other Error Handling Idioms 127
*** TODO Exceptions 128
**** Helper Functions for Throwing Exceptions 131
**** Exception Handlers 132
**** Cleaning Up in the Presence of Exceptions 132
**** Catching Specific Exceptions 133
**** Backtraces 135
**** From Exceptions to Error-Aware Types and Back Again 137
*** TODO Choosing an Error-Handling Strategy 138
** TODO 8. Imperative Programming - 139
*** TODO Example: Imperative Dictionaries 139
*** TODO Primitive Mutable Data 143
**** Array-Like Data 143
**** Mutable Record and Object Fields and Ref Cells 145
**** Foreign Functions 146
*** TODO for and while Loops 146
*** TODO Example: Doubly Linked Lists 147
**** Modifying the List 149
**** Iteration Functions 150
*** TODO Laziness and Other Benign Effects 151
**** Memoization and Dynamic Programming 153
*** TODO Input and Output 159
**** Terminal I/O 160
**** Formatted Output with printf 161
**** File I/O 163
*** TODO Order of Evaluation 165
*** TODO Side Effects and Weak Polymorphism 167
**** The Value Restriction 168
**** Partial Application and the Value Restriction 170
**** Relaxing the Value Restriction 170
*** TODO Summary 173
** TODO 9. Functors - 175
*** TODO A Trivial Example 176
*** TODO A Bigger Example: Computing with Intervals 177
**** Making the Functor Abstract 181
**** Sharing Constraints 182
**** Destructive Substitution 184
**** Using Multiple Interfaces 185
*** TODO Extending Modules 189
** TODO 10. First-Class Modules - 193
*** TODO Working with First-Class Modules 193
*** TODO Example: A Query-Handling Framework 199
**** Implementing a Query Handler 200
**** Dispatching to Multiple Query Handlers 202
**** Loading and Unloading Query Handlers 205
*** TODO Living Without First-Class Modules 208
** TODO 11. Objects - 211
*** TODO OCaml Objects 212
*** TODO Object Polymorphism 213
*** TODO Immutable Objects 215
*** TODO When to Use Objects 216
*** TODO Subtyping 217
**** Width Subtyping 217
**** Depth Subtyping 218
**** Variance 219
**** Narrowing 222
**** Subtyping Versus Row Polymorphism 224
** TODO 12. Classes - 227
*** TODO OCaml Classes 227
*** TODO Class Parameters and Polymorphism 228
*** TODO Object Types as Interfaces 230
**** Functional Iterators 232
*** TODO Inheritance 233
*** TODO Class Types 234
*** TODO Open Recursion 235
*** TODO Private Methods 237
*** TODO Binary Methods 239
*** TODO Virtual Classes and Methods 242
**** Create Some Simple Shapes 242
*** TODO Initializers 245
*** TODO Multiple Inheritance 245
**** How Names Are Resolved 245
**** Mixins 246
**** Displaying the Animated Shapes 249
* TODO Part II. Tools and Techniques
** TODO 13. Maps and Hash Tables - 253
*** TODO Maps 254
**** Creating Maps with Comparators 255
**** Trees 257
**** The Polymorphic Comparator 258
**** Sets 260
**** Satisfying the Comparable.S Interface 260
*** TODO Hash Tables 264
**** Satisfying the Hashable.S Interface 266
*** TODO Choosing Between Maps and Hash Tables 267
** TODO 14. Command-Line Parsing - 271
*** TODO Basic Command-Line Parsing 272
**** Anonymous Arguments 272
**** Defining Basic Commands 273
**** Running Basic Commands 273
*** TODO Argument Types 275
**** Defining Custom Argument Types 276
**** Optional and Default Arguments 277
**** Sequences of Arguments 279
*** TODO Adding Labeled Flags to the Command Line 280
*** TODO Grouping Subcommands Together 282
*** TODO Advanced Control over Parsing 284
**** The Types Behind Command.Spec 285
**** Composing Specification Fragments Together 286
**** Prompting for Interactive Input 287
**** Adding Labeled Arguments to Callbacks 289
*** TODO Command-Line Autocompletion with bash 290
**** Generating Completion Fragments from Command 290
**** Installing the Completion Fragment 291
*** TODO Alternative Command-Line Parsers 292
** TODO 15. Handling JSON Data - 293
*** TODO JSON Basics 293
*** TODO Parsing JSON with Yojson 294
*** TODO Selecting Values from JSON Structures 296
*** TODO Constructing JSON Values 300
*** TODO Using Nonstandard JSON Extensions 302
*** TODO Automatically Mapping JSON to OCaml Types 303
**** ATD Basics 304
**** ATD Annotations 305
**** Compiling ATD Specifications to OCaml 305
**** Example: Querying GitHub Organization Information 307
** TODO 16. Parsing with OCamllex and Menhir - 311
*** TODO Lexing and Parsing 312
*** TODO Defining a Parser 314
**** Describing the Grammar 314
**** Parsing Sequences 316
*** TODO Defining a Lexer 318
**** OCaml Prelude 318
**** Regular Expressions 318
**** Lexing Rules 319
**** Recursive Rules 320
*** TODO Bringing It All Together 322
** TODO 17. Data Serialization with S-Expressions - 325
*** TODO Basic Usage 326
**** Generating S-Expressions from OCaml Types 328
*** TODO The Sexp Format 329
*** TODO Preserving Invariants 331
*** TODO Getting Good Error Messages 334
*** TODO Sexp-Conversion Directives 336
**** sexp\under{}opaque 336
**** sexp\under{}list 337
**** sexp\under{}option 338
**** Specifying Defaults 338
** TODO 18. Concurrent Programming with Async - 341
*** TODO Async Basics 342
**** Ivars and Upon 345
*** TODO Examples: An Echo Server 347
**** Improving the Echo Server 350
*** TODO Example: Searching Definitions with DuckDuckGo 353
**** URI Handling 353
**** Parsing JSON Strings 354
**** Executing an HTTP Client Query 354
*** TODO Exception Handling 357
**** Monitors 358
**** Example: Handling Exceptions with DuckDuckGo 361
*** TODO Timeouts, Cancellation, and Choices 363
*** TODO Working with System Threads 366
**** Thread-Safety and Locking 369
* TODO Part III. The Runtime System
** TODO 19. Foreign Function Interface - 373
*** Example: A Terminal Interface 374
*** Basic Scalar C Types 378
*** Pointers and Arrays 380
*** Allocating Typed Memory for Pointers 381
*** Using Views to Map Complex Values 382
*** Structs and Unions 383
*** Defining a Structure 383
*** Adding Fields to Structures 384
*** Incomplete Structure Definitions 384
*** Defining Arrays 388
*** Passing Functions to C 389
*** Example: A Command-Line Quicksort 390
*** Learning More About C Bindings 392
*** Struct Memory Layout 393

** TODO 20. Memory Representation of Values - 395
*** OCaml Blocks and Values 396
*** Distinguishing Integers and Pointers at Runtime 397
*** Blocks and Values 398
*** Integers, Characters, and Other Basic Types 399
*** Tuples, Records, and Arrays 400
*** Floating-Point Numbers and Arrays 400
*** Variants and Lists 401
*** Polymorphic Variants 403
*** String Values 404
*** Custom Heap Blocks 405
*** Managing External Memory with Bigarray 405

** TODO 21. Understanding the Garbage Collector - 407
*** Mark and Sweep Garbage Collection 407
*** Generational Garbage Collection 408
*** The Fast Minor Heap 408
*** Allocating on the Minor Heap 409
*** The Long-Lived Major Heap 410
*** Allocating on the Major Heap 411
*** Memory Allocation Strategies 412
*** Marking and Scanning the Heap 413
*** Heap Compaction 414
*** Intergenerational Pointers 415
*** Attaching Finalizer Functions to Values 418

** TODO 22. The Compiler Frontend: Parsing and Type Checking - 421
*** An Overview of the Toolchain 422
*** Parsing Source Code 424
*** Syntax Errors 424
*** Automatically Indenting Source Code 425
*** Generating Documentation from Interfaces 426
*** Preprocessing Source Code 428
*** Using Camlp4 Interactively 430
*** Running Camlp4 from the Command Line 431
*** Preprocessing Module Signatures 433
*** Further Reading on Camlp4 434
*** Static Type Checking 434
*** Displaying Inferred Types from the Compiler 435
*** Type Inference 436
*** Modules and Separate Compilation 440
*** Packing Modules Together 443
*** Shorter Module Paths in Type Errors 444
*** The Typed Syntax Tree 445
*** Using ocp-index for Autocompletion 446
*** Examining the Typed Syntax Tree Directly 446

** TODO 23. The Compiler Backend: Bytecode and Native code - 449
*** The Untyped Lambda Form 449
*** Pattern Matching Optimization 450
*** Benchmarking Pattern Matching 452
*** Generating Portable Bytecode 454
*** Compiling and Linking Bytecode 455
*** Executing Bytecode 456
*** Embedding OCaml Bytecode in C 456
*** Compiling Fast Native Code 458
*** Inspecting Assembly Output 459
*** Debugging Native Code Binaries 462
*** Profiling Native Code 465
*** Embedding Native Code in C 467
*** Summarizing the File Extensions 468

* Index - 471
