#+TITLE: Learning Rust with Entirely Too Many Linked Lists
#+VERSION: 2020-11-30 Github https://github.com/rust-unofficial/too-many-lists
#+STARTUP: overview
#+STARTUP: entitiespretty

* 1. Introduction
** An Obligatory Public Service Announcement
*** Performance doesn't always matter
*** They have O(1) split-append-insert-remove if you have a pointer there
*** I can't afford amortization
*** Linked lists waste less space
*** I use linked lists all the time in <functional languaged>
*** Linked lists are great for building concurrent data structures!
*** Mumble mumble kernel embedded something something intrusive.
*** Iterators don't get invalidated by unrelated insertions/removals
*** They're simple and great for teaching!

** Take a Breath

* 2. A Bad Stack
** 2.1. Layout
   *Basic Data Layout*

** 2.2. New
** 2.3. Ownership 101
** 2.4. Push
** 2.5. Pop
** 2.6. Testing
** 2.7. Drop
*** Bonus Section for Premature Optimization!

** 2.8. Final Code

* 3. An Ok Stack
  *A Ok Singly-Linked Stack*
  
** 3.1. Option
   *Using Option*
   
** 3.2. Generic
   *Making it all Generic*

** 3.3. Peek
** 3.4. IntoIter
** 3.5. Iter
** 3.6. IterMut
** 3.7. Final Code

* 4. A Persistent Stack
  *A Persistent Singly-Linked Stack*
  
** 4.1. Layout
** 4.2. Basics
** 4.3. Drop
** 4.4. Arc
** 4.5. Final Code

* 5. A Bad Safe Deque
** 5.1. Layout
** 5.2. Building
   *Building Up*
*** When to choose interior mutability
**** Introducing inherited mutability roots to shared types

** 5.3. Breaking
   *Breaking Down*

** 5.4. Peek
   *Peeking*

** 5.5. Symmetric Cases
   *Symmetric Junk*

** 5.6. Iteration
*** IntoIter
*** Iter

** 5.7. Final Code

* 6. An Unsafe Queue
  *An Unsafe Singly-Linked Queue*

** 6.1. Layout
** 6.2. Unsafe
   *Unsafe Rust*

** 6.3. Basics
** 6.4. Extras
   *Extra Junk*

** 6.5. Final Code

* 7. An Ok Unsafe Deque
  *An Ok Unsafe Doubly-Linked Deque*

* 8. A Bunch of Silly Lists
** 8.1. The Double Single
   *The Double Singly-Linked List*
