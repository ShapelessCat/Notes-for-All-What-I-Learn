#+TITLE: Cats Effect 3.x
#+SUBTITLE: The IO Monad for Scala
#+VERSION: 3.2.2
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Overview
** DONE Getting Started
   CLOSED: [2021-08-19 Thu 00:45]
   - Initialize a Cats Effect 3 project:
     * Add this dependency to =build.sbt=:
       #+begin_src scala
         libraryDependencies += "org.typelevel" %% "cats-effect" % "3.2.2"
       #+end_src
       + When using _Scala.js_, replace ~%%~ with ~%%%~.

       + When using _Scala 2_, it is highly recommended:
         #+begin_src scala
           addCompilerPlugin("com.olegpy" %% "better-monadic-for" % "0.3.1")
         #+end_src
   
     * Use the Cats Effect 3 Giter8 template:
       #+begin_src shell
         sbt new typelevel/ce3.g8
       #+end_src
       
   - Create a new Cats Effect application:
     #+begin_src scala
       import cats.effect.{IO, IOApp}

       object HelloWorld extends IOApp.Simple {
         val run = IO.println("Hello, World!")
       }
     #+end_src
     - Use ~sbt run~ to run it.

     - Applications written in this style have _FULL ACCESS_ to
       * /timers/,
       * /multithreading/,
       * all of the bells and whistles that you would expect from a full application.
     
   - A very silly version of FizzBuzz which runs _FOUR_ concurrent _lightweight threads_,
     or /fibers/,
     * one of which *counts* up an ~Int~ value once per second,
     * while the others *poll* that value for changes and *print* in response:
     #+begin_src scala
       import cats.effect.{IO, IOApp}
       import scala.concurrent.duration._

       // obviously this isn't actually the problem definition, but it's kinda fun
       object StupidFizzBuzz extends IOApp.Simple {
         val run =
           for {
             ctr <- IO.ref(0)

             wait = IO.sleep(1.seconds)
             poll = wait *> ctr.get

             _ <- poll.flatMap(IO.println(_)).foreverM.start
             _ <- poll.map(_ % 3 == 0).ifM(IO.println("fizz"), IO.unit).foreverM.start
             _ <- poll.map(_ % 5 == 0).ifM(IO.println("buzz"), IO.unit).foreverM.start

             _ <- (wait *> ctr.update(_ + 1)).foreverM.void
           } yield ()
       }
     #+end_src
     =TODO= Can understand this soon!
     
*** DONE REPL
    CLOSED: [2021-08-18 Wed 20:03]
    #+begin_src scala
      // In Ammonite:

      import $ivy.`org.typelevel::cats-effect:3.2.2`

      import cats.effect.unsafe.implicits._
      import cats.effect.IO

      val program = IO.println("Hello, World!")
      // program.unsafeRunSync()
    #+end_src
    - ~unsafeRunSync()~ function is not meant to be used within a normal application,
      BUT it is very useful for REPL-based experimentation and sometimes useful
      for testing.
      
    - As the name suggest, the implementation of ~unsafeRunSync()~ is *unsafe in several ways.*
      =from Jian= =Learn more?!?!=
    
*** DONE Testing
    CLOSED: [2021-08-19 Thu 00:45]
    The easiest way to write /unit tests/ which use _Cats Effect_ is with _MUnit Cats Effect_.

    - To get started, add the dependency:
      #+begin_src scala
        libraryDependencies += "org.typelevel" %% "munit-cats-effect-3" % "1.0.3" % Test
      #+end_src

    - Example:
      #+begin_src scala
        import cats.effect.{IO,  SyncIO}
        import munit.CatsEffectSuite

        class ExampleSuite extends CatsEffectSuite {
          test("make sure IO computes the right result") {
            IO.pure(1).map(_ + 2) flatMap { result =>
              IO(assertEquals(result, 3))
            }
          }
        }
      #+end_src
      * =from Jian=
        + Q :: Why not use
          #+begin_src scala
            IO.pure(1).map(_ + 2) map { result =>
              assertEquals(result, 3)
            }
          #+end_src
          
        + A :: Put the ~assertEquals~ expression into ~IO~ to make sure we can properly
                handle a _effectful operation_.
    
**** DONE Other Testing Frameworks
     CLOSED: [2021-08-19 Thu 00:45]
     - The _Cats Effect Testing_ library provides seamless integration with most
       major test frameworks:
       * ScalaTest
       * Specs2
       * ÂµTest
       * MiniTest

     - Simply add a /dependency/ on the module which is appropriate to your test framework of choice.
       For example, _Specs2_:
       #+begin_src scala
         libraryDependencies += "org.typelevel" %% "cats-effect-testing-specs2" % "1.1.1" % Test
       #+end_src

     - Once this is done, you can write specifications in the familiar _Specs2_
       style, except where each example may now return *in* ~IO~:
       #+begin_src scala
         import cats.effect.IO
         import cats.effect.testing.specs2.CatsEffect

         import org.specs2.mutable.Specification

         class ExampleSpec extends Specification with CatsEffect {
           "my example" should {
             "make sure IO computes the right result" in {
               IO.pure(1).map(_ + 2) flatMap { result =>
                 IO(result mustEqual 3)
               }
             }
           }
         }
       #+end_src
     
**** DONE ScalaCheck
     CLOSED: [2021-08-19 Thu 00:45]
     Special support is available for _ScalaCheck_ /properties/ in the form of the
     _ScalaCheck Effect_ project. This library makes it possible to write
     /properties/ using a special ~forAllF~ syntax which
     _evaluate *ENTIRELY within* ~IO~ *WITHOUT blocking* /threads/._

** TODO Concepts
   _Cats Effect_ introduces a large number of _concepts_ which, while very general
   and individually simple.

   - This also brings along with it a set of terminology
     for describing _concepts_ and _scenarios_
     which can be *significantly different from* that
     which is used in other _asynchronous frameworks_ (such as _Akka_ or _Vert.x_).

   - *This page is an attempt to describe the _Cats Effect runtime_ at a high level,*
     introducing the _concepts_ and _terminology_ which is often assumed in
     discussions about the various details.

   - As a general orientation, though, _Cats Effect_ should be considered as living
     in the same conceptual space as any other /asynchronous runtime/ on the JVM.
     Some other common examples of such /runtimes/:
     * Akka
       + Akka tends to be viewed as a more holistic framework, particularly
         encompassing things SUCH AS
         - akka-http and
         - akka-cluster.

       + The elements of Akka which correspond most directly to _Cats Effect_ are
         ~Actor~ and ~Future~ (which is actually part of the _Scala standard library_).

     * Netty
       + Netty's core runtime (~EventLoopGroup~ and the various ~Handlers~) is
         relatively basic and mostly just in service of its /NIO wrapper/, which
         - _Cats Effect_ does *NOT provide*,
         - BUT _Fs2_ does.

       + Conversely, /Cats Effect's runtime/ is considerably *more robust*.

     * Tokio

     * RxJava

     * Vert.x

   - Note that all of the above libraries have *significant differences and
     conceptual mismatches* with _Cats Effect_.

     * _Tokio_ and _Vert.x_ are probably the *closest counterparts*,
       + though both are more /framework/ oriented approach.
       + WHILE _Cats Effect_ prescriptively defines itself as a /library/ 
         which enables a broad /composable ecosystem/.

     * In many places, _Cats Effect_ defines features and functionality
       which simply *doesn't exist in* these ecosystems.

       + As an example,
         *neither* _Akka (via ~Future~)_, _Netty_, *nor* _Vert.x_ have any
         support for /asynchronous cancelation (also known as "interruption")/,
         MEANING that
         basic functionality such as
         _/timeouts/ and /concurrent error/ handling_ can result in /resource
         leaks/ in a running application.

       + Another example of functionality mismatch:
         the /fiber-aware work-stealing runtime/, which is
         - *present in* _Tokio_ and (to a lesser extent) _Akka_,
         - BUT *not in* _Netty_ or _Vert.x_.

       + As a final example:
         /asynchronous tracing/ is
         - *present* to a *limited degree* in _Vert.x_ and _Akka_,
         - but *absent* from all other frameworks,
         and *NEITHER* of these provide a version of this functionality which is
         performant enough *for production use (unlike _Cats Effect_)*.

   - _Despite the DIFFERENCES,_
     it is generally helpful to understand that _Cats Effect_ fundamentally
     solves many of the same problems as other /frameworks/ in this space:
     it is a _FOUNDATIONAL /runtime layer/_
     which *makes it easy to*
     *build and scale* complex /high-performance asynchronous and parallel
     software/ on the /JVM/ and on /JavaScript/.
     
*** Fibers
    - Put another way: with fibers, there is no difference between a callback and a ~return~.
     
**** Cancelation

*** Terminology
**** Asynchronous
**** Concurrent
***** Structured Concurrency

**** Parallel
     
*** Effects
**** Side-Effects
    
** TODO Tutorial
*** TODO Introduction
*** TODO Setting things up
*** TODO Copying files - basic concepts, resource handling and cancelation
**** Acquiring and releasing ~Resource~'s
**** What about ~bracket~?
**** Copying data
**** Dealing with cancelation
**** ~IOApp~ for our final program
***** Copy program code
      
**** Polymorphic cats-effect code
***** Copy program code, polymorphic version
      
**** Exercises: improving our small ~IO~ program
     
*** TODO Producer-consumer problem - concurrency and fibers
**** Intro to fibers
**** First (and inefficient) implementation
**** A more solid implementation of the producer/consumer problem
**** Producer consumer with bounded queue
**** Taking care of cancelation
**** Exercise: build a concurrent queue
     
*** TODO Conclusion
   
** TODO Tracing
*** TODO Introduction
**** General note on stack tracing performance
     
*** TODO Ansynchronous stack tracing
**** Configuration
     
*** TODO Stack tracing modes
**** ~none~
**** ~cached~
**** ~full~
     
*** TODO Enhanced exceptions
**** Complete code
    
** TODO Migration Guide
*** TODO Summary
**** Before You Begin: This Isn't A "Quick Start" Guide
**** Need Help?
**** Context: What's Changed, What's the Same?
     
*** TODO Make Sure Your Dependencies Have Upgraded
*** TODO Run the Scalafix Migration
*** TODO Upgrade Dependencies
**** Which Modules Should I Use?
     
*** TODO Fix Remaining Compilation Issues
***** New Type Class Hierarchy
**** Async
**** ~Blocker~
**** ~Bracket~
**** ~Clock~
**** ~Concurrent~
**** ~Effect~, ~ConcurrentEffect~, ~SyncEffect~
**** ~ContextShift~
**** ~Deferred~
**** ~ExitCase~, ~Fiber~
**** ~IO~
**** ~IOApp~
**** ~MVar~
**** ~Sync~
**** ~Resource~
**** Timer
**** Tracing
     
*** TODO Test Your Application
*** TODO FAQ / Examples
    - Why does ~Outcome#Succeeded~ contain a value of type ~F[A]~ rather than type ~A~?   

** TODO Thread Model
*** TODO High-level goals
*** TODO The ~IO~ runloop
**** Fibers
**** Thread blocking
**** Semantic blocking
     
*** TODO Summary thus far
*** TODO Cats Effect 2
**** Context shift
**** Blocker
**** Local reasoning
**** Auto-yielding
**** Obtaining a handle to the compute pool
     
*** TODO Cats Effect 3
**** Spawn
**** Blocking
**** Work-stealing pool
     
*** TODO And that's it!

** TODO Schedulers
*** TODO JVM
**** Handling Blocking
     
*** TODO JavaScript
**** Yielding
***** ~setTimeout~
***** ~Promise~
***** ~setImmediate~
      
* TODO Typeclasses
** Overview
** ~MonadCancel~
*** Self-Cancelation
    
** ~Spawn~
*** Cancelation
*** Joining
   
** ~Unique~
** ~Clock~
** ~Concurrent~
*** Memoization
*** Why ~Ref~ and ~Deferred~?
    
** ~Temporal~
** ~Sync~
*** Methods of suspension

** ~Async~
*** FFI
*** Threadpool shifting
*** Here be dragons

* TODO Standard Library
** Count Down Latch
** Cyclic Barrier
** Deferred
*** Only Once

** Dequeue
*** Variance
    
** Dispatcher
*** Motivation
*** Dispatcher
    
** Hotswap
*** Motivation
*** Hotswap
    
** Priority Queue
*** Variance
    
** Queue
*** Variance
    
** Random
*** API
*** Customizing the source of randomness
*** Creating a ~Random~ instance
*** Using ~Random~
*** Derivation
    
** Ref
*** Concurrent Counter

** Resource
*** Motivation
*** Resource
    
** Semaphore
*** Semantic Blocking and Cancellation
*** Shared Resource

** Supervisor
*** Motivation
*** Supervisor
    
** Async/Await (Experimental)
*** Warning
*** Installation
*** Motivation
*** Sequential async/await
**** Known limitations
