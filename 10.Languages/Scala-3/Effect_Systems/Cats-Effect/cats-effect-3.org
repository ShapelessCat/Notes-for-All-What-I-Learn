#+TITLE: Cats Effect 3.x
#+SUBTITLE: The IO Monad for Scala
#+VERSION: 3.1.1
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Overview
** Getting Started
*** REPL
*** Testing
**** Other Testing Frameworks
**** ScalaCheck

** Tutorial
*** Introduction
*** Setting things up
*** Copying files - basic concepts, resource handling and cancelation
**** Acquiring and releasing ~Resource~'s
**** What about ~bracket~?
**** Copying data
**** Dealing with cancelation
**** ~IOApp~ for our final program
**** Polymorphic cats-effect code
**** Exercises: improving our small ~IO~ program
     
*** Producer-consumer problem - concurrency and fibers
**** Intro to fibers
**** First (and inefficient) implementation
**** A more solid implementation of the producer/consumer problem
**** Producer consumer with bounded queue
**** Taking care of cancelation
**** Exercise: build a concurrent queue
     
*** Conclusion  
   
** Migration Guide
*** Summary
**** Before You Begin: This Isn't A "Quick Start" Guide
**** Need Help?
**** Context: What's Changed, What's the Same?
     
*** Make Sure Your Dependencies Have Upgraded
*** Run the Scalafix Migration
*** Upgrade Dependencies
**** Which Modules Should I Use?
     
*** Fix Remaining Compilation Issues
**** Async
**** ~Blocker~
**** ~Bracket~
**** ~Clock~
**** ~Concurrent~
**** ~Effect~, ~ConcurrentEffect~, ~SyncEffect~
**** ~ContextShift~
**** ~Deferred~
**** ~ExitCase~, ~Fiber~
**** ~IO~
**** ~IOApp~
**** ~MVar~
**** Sync
**** ~Resource~
**** Timer
**** Tracing
     
*** Test Your Application
*** FAQ / Examples
**** Why does ~Outcome#Succeeded~ contain a value of type ~F[A]~ rather than type ~A~?   

** Thread Model
*** High-level goals
*** The IO runloop
**** Fibers
**** Thread blocking
**** Semantic blocking
     
*** Summary thus far
*** Cats Effect 2
**** Context shift
**** Blocker
**** Local reasoning
**** Auto-yielding
**** Obtaining a handle to the compute pool
     
*** Cats Effect 3
**** Spawn
**** Blocking
**** Work-stealing pool
     
*** And that's it!   

** Schedulers
*** JVM
**** Handling Blocking
     
*** JavaScript
**** Yielding
***** ~setTimeout~
***** ~Promise~
***** ~setImmediate~
   
* TODO Typeclasses
** Overview
** MonadCancel
** Spawn
*** Cancelation
*** Joining
   
** Unique
** Clock
** Concurrent
*** Memoization
*** Why ~Ref~ and ~Deferred~?
    
** Temporal
** Sync
*** Methods of suspension

** Async
*** FFI
*** Threadpool shifting
*** Here be dragons

* TODO Standard Library
** Count Down Latch
** Cyclic Barrier
** Deferred
*** Only Once

** Dequeue
*** Variance
    
** Dispatcher
*** Motivation
*** Dispatcher
    
** Hotswap
*** Motivation
*** Hotswap
    
** Priority Queue
*** Variance
    
** Queue
*** Variance
    
** Ref
*** Concurrent Counter

** Resource
*** Motivation
*** Resource
    
** Semaphore
*** Semantic Blocking and Cancellation
*** Shared Resource

** Supervisor
*** Motivation
*** Supervisor
    
** Async/Await (Experimental)
*** Warning
*** Installation
*** Motivation
*** Sequential async/await
**** Known limitations
