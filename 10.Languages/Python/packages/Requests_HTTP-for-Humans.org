#+TITLE: Requests: HTTP for Humans™
#+VERSION: v2.25.1
#+SUPPORT PYTHON VERSIONS: 2.7, 3.5 ~ 3.9
#+STARTUP: overview
#+STARTUP: entitiespretty

*Requests* is an elegant and simple HTTP library for Python, built for human
beings.

- *Requests* allows you to send *HTTP/1.1 requests* extremely easily.
  * There's no need
    to manually add query strings to your URLs, or
    to form-encode your POST data.

  * _Keep-alive_ and _HTTP connection pooling_ are 100% automatic,
    thanks to ~urllib3~.

* DONE Beloved Features - =TODO= _Review_
  CLOSED: [2021-04-23 Fri 18:02]
  - *Requests* is ready for today's web.
    * Keep-Alive & Connection Pooling
    * International Domains and URLs
    * Sessions with Cookie Persistence
    * Browser-style SSL Verification
    * Automatic Content Decoding
    * Basic/Digest Authentication
    * Elegant Key/Value Cookies
    * Automatic Decompression
    * Unicode Response Bodies
    * HTTP(S) Proxy Support
    * Multipart File Uploads
    * Streaming Downloads
    * Connection Timeouts
    * Chunked Requests
    * .netrc Support

  - *Requests* officially supports
    _Python 2.7 & 3.5+_, and
    runs great on _PyPy_.

* TODO The User Guide
  This part of the documentation, which is mostly prose, begins with some
  background information about *Requests*, then focuses on step-by-step
  instructions for getting the most out of *Requests*.

** DONE Installation of Requests
   CLOSED: [2021-04-23 Fri 18:09]
*** ~$ python -m pip install requests~
*** Get the Source Code

** TODO Quickstart
*** Make a Request
*** Passing Parameters In URLs
*** Response Content
*** Binary Response Content
*** JSON Response Content
*** Raw Response Content
*** Custom Headers
*** More complicated POST requests
*** POST a Multipart-Encoded File
*** Response Status Codes
*** Response Headers
*** Cookies
*** Redirection and History
*** Timeouts
*** Errors and Exceptions

** TODO Advanced Usage
*** Session Objects
*** Request and Response Objects
*** Prepared Requests
*** SSL Cert Verification
*** Client Side Certificates
*** CA Certificates
*** Body Content Workflow
*** Keep-Alive
*** Streaming Uploads
*** Chunk-Encoded Requests
*** POST Multiple Multipart-Encoded Files
*** Event Hooks
*** Custom Authentication
*** Streaming Requests
*** Proxies
*** Compliance
*** HTTP Verbs
*** Custom Verbs
*** Link Headers
*** Transport Adapters
*** Blocking Or Non-Blocking?
*** Header Ordering
*** Timeouts

** TODO Authentication
*** Basic Authentication
*** Digest Authentication
*** OAuth 1 Authentication
*** OAuth 2 and OpenID Connect Authentication
*** Other Authentication
*** New Forms of Authentication

* The Community Guide
** Recommended Packages and Extensions
*** Certifi CA Bundle
*** CacheControl
*** Requests-Toolbelt
*** Requests-Threads
*** Requests-OAuthlib
*** Betamax

** Frequently Asked Questions
*** Encoded Data?
*** Custom User-Agents?
*** Why not Httplib2?
*** Python 3 Support?
*** Python 2 Support?
*** What are “hostname doesn’t match” errors?

** Integrations
*** Python for iOS

** Articles & Talks
** Support
*** Stack Overflow
*** File an Issue
*** Send a Tweet

** Vulnerability Disclosure
*** Process
*** Previous CVEs

** Release Process and Rules
*** Major Releases
*** Minor Releases
*** Hotfix Releases
*** Reasoning

** Community Updates
** Release History

* The API Documentation / Guide
** Developer Interface
*** Main Interface
*** Exceptions
*** Request Sessions
*** Lower-Level Classes
*** Lower-Lower-Level Classes
*** Authentication
*** Encodings
*** Cookies
*** Status Code Lookup
*** Migrating to 1.x
*** Migrating to 2.x

* The Contributor Guide
** Contributor’s Guide
*** Be Cordial
*** Get Early Feedback
*** Contribution Suitability
*** Code Contributions
**** Steps for Submitting Code
**** Code Review
**** New Contributors
**** Kenneth Reitz’s Code Style™

*** Documentation Contributions
*** Bug Reports
*** Feature Requests

** Authors
*** Keepers of the Crystals
*** Previous Keepers of Crystals
*** Patches and Suggestions
