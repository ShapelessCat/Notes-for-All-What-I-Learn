#+TITLE: Learning Concurrency in Python
#+SUBTITLE: Speed up your Python code with clean, reeadable, and advanced concurrency techniques
#+AUTHOR: Elliot Forbes
#+RELEASE DATE: Nov. 2017
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - 1
* Chapter 1: Speed It Up! - 6
** History of concurrency - 7
** Threads and multithreading - 8
*** What is a thread? - 8
**** Types of threads - 9

*** What is multithreading? - 9

** Processes - 10
*** Properties of processes - 11

** Multiprocessing - 12
*** Event-driven programming - 13
*** Turtle - 14
**** Breaking it down - 15

** Reactive programming - 16
*** ReactiveX - RxPy - 16
**** Breaking it down - 18

** GPU programming - 19
*** PyCUDA - 20
*** OpenCL - 20
*** Theano - 21

** The limitations of Python - 21
*** Jython - 22
*** IronPython - 23
*** Why should we use Python? - 23

** Concurrent image download - 23
*** Sequential download - 24
**** Breaking it down - 24

*** Concurrent download - 25
**** Breaking it down - 26

** Improving number crunching with multiprocessing - 26
*** Sequential prime factorization - 27
**** Breaking it down - 27

*** Concurrent prime factorization - 28
**** Breaking it down - 29

** Summary - 30

* Chapter 2: Parallelize It - 31
** Understanding concurrency - 32
*** Properties of concurrent systems - 32

** I/O bottlenecks - 33
** Understanding parallelism - 35
*** CPU-bound bottlenecks - 36

** How do they work on a CPU? - 36
*** Single-core CPUs - 37
*** Clock rate - 37
*** Martelli model of scalability - 38
*** Time-sharing - the task scheduler - 39
*** Multi-core processors - 40

** System architecture styles - 41
*** SISD - 41
*** SIMD - 42
*** MISD - 44
*** MIMD - 44

** Computer memory architecture styles - 45
*** UMA - 45
*** NUMA - 46

** Summary - 48

* Chapter 3: Life of a Thread - 49
** Threads in Python - 49
*** Thread state - 50
*** State flow chart - 51
**** Python example of thread state - 51
**** Breaking it down - 52

*** Different types of threads - 52
**** POSIX threads - 53
**** Windows threads - 53

*** The ways to start a thread - 53
**** Starting a thread - 53
**** Inheriting from the thread class - 54
**** Breaking it down - 54

*** Forking - 55
**** Example - 55
**** Breaking it down - 55

*** Daemonizing a thread - 56
**** Example - 57
**** Breaking it down - 57

** Handling threads in Python - 57
*** Starting loads of threads - 58
**** Example - 58
**** Breaking it down - 58

*** Slowing down programs using threads - 59
**** Example - 59
**** Breaking it down - 60

*** Getting the total number of active threads - 61
**** Example - 61
**** Breaking it down - 61

*** Getting the current thread - 62
**** Example - 62
**** Breaking it down - 62

*** Main thread - 63
**** Example - 63
**** Breaking it down - 63

*** Enumerating all threads - 64
**** Example - 64
**** Breaking it down - 64

*** Identifying threads - 65
**** Example - 65
**** Breakdown - 66

*** Ending a thread - 67
**** Best practice in stopping threads - 67
**** Example - 67
**** Output - 68

*** Orphan processes - 68

** How does the operating system handle threads - 68
*** Creating processes versus threads - 68
**** Example - 69
**** Breaking it down - 69

** Multithreading models - 70
*** One-to-one thread mapping - 71
*** Many-to-one - 71
*** Many-to-many - 72

** Summary - 73

* Chapter 4: Synchronization between Threads - 74
** Synchronization between threads - 75
*** The Dining Philosophers - 75
**** Example - 77
**** Output - 78

*** Race conditions - 78
**** Process execution sequence - 79
***** The solution - 80

*** Critical sections - 81
**** Filesystem - 81
**** Life-critical systems - 81

** Shared resources and data races - 82
*** The join method - 83
**** Breaking it down - 83
**** Putting it together - 84

*** Locks - 84
**** Example - 84
**** Breaking it down - 86

*** RLocks - 86
**** Example - 87
**** Breaking it down - 87
***** Output - 88

*** RLocks versus regular locks - 89
*** Condition - 90
**** Definition - 90
**** Example - 90
***** Our publisher - 90
***** Our subscriber - 91
***** Kicking it off - 92

**** The results - 93

*** Semaphores - 93
**** Class definition - 94
**** Example - 94
**** The TicketSeller class - 94
***** Output - 96
***** Thread race - 96

*** Bounded semaphores - 96
*** Events - 97
**** Example - 98
**** Breaking it down - 98

*** Barriers - 98
**** Example - 99
**** Breaking it down - 99
***** Output - 100

** Summary - 101

* Chapter 5: Communication between Threads - 102
** Standard data structures - 103
*** Sets - 103
**** Extending the class - 103
**** Exercise - extending other primitives - 104

*** Decorator - 104
*** Class decorator - 105
*** Lists - 106
*** Queues - 107
**** FIFO queues - 107
***** Example - 108
***** Breaking it down - 108
***** Output - 109

**** LIFO queues - 109
***** Example - 110
***** Breaking it down - 111
***** Output - 111

**** PriorityQueue - 112
***** Example - 112
***** Breakdown - 113
***** Output - 114

*** Queue objects - 114
**** Full/empty queues - 114
***** Example - 115
***** Output - 115

**** The ~join()~ function - 115
***** Example - 116
***** Breakdown - 117
***** Output - 117

*** Deque objects - 117
**** Example - 117
**** Breakdown - 118
**** Output - 118

*** Appending elements - 119
**** Example - 119
**** Breaking it down - 119
**** Output - 120

*** Popping elements - 120
**** Example - 120
**** Breaking it down - 121
**** Output - 121

*** Inserting elements - 121
**** Example - 122
**** Breaking it down - 122
**** Output - 122

*** Rotation - 122
**** Example - 123
**** Breaking it down - 123
**** Output - 124

** Defining your own thread-safe communication structures - 124
*** A web Crawler example - 124
**** Requirements - 125
**** Design - 125
**** Our Crawler class - 125
**** Our starting point - 127
**** Extending the queue object - 129
***** Breaking it down - 129
***** Output - 129

*** Future enhancements - 130
*** Conclusion - 130
*** Exercise - testing your skills - 131

** Summary - 131

* Chapter 6: Debug and Benchmark - 132
** Testing strategies - 133
*** Why do we test? - 133
*** Testing concurrent software systems - 134
*** What should we test? - 134
*** Unit tests - 134
**** PyUnit - 135
***** Example - 135
***** Output - 136

**** Expanding our test suite - 136

*** Unit testing concurrent code - 136
*** Integration tests - 137

** Debugging - 138
*** Make it work as a single thread - 138
*** Pdb - 139
**** An interactive example - 140

*** Catching exceptions in child threads - 142

** Benchmarking - 143
*** The timeit module - 144
**** Timeit versus time - 145
**** Command-line example - 145
**** Importing timeit into your code - 145

*** Utilizing decorators - 147
*** Timing context manager - 147
**** Output - 149

** Profiling - 149
*** cProfile - 149
**** Simple profile example - 150

*** The line_profiler tool - 152
**** Kernprof - 152

*** Memory profiling - 154
**** Memory profile graphs - 155

** Summary - 158

* Chapter 7: Executors and Pools - 159
** Concurrent futures - 159
*** Executor objects - 160
**** Creating a ThreadPoolExecutor - 160
***** Example - 161
***** Output - 161

**** Context manager - 162
***** Example - 162
***** Output - 163

**** Maps - 163
***** Example - 164
***** Output - 164

**** Shutdown of executor objects - 164
***** Example - 165
***** Output - 165

** Future objects - 166
*** Methods in future objects - 166
**** The ~result()~ method - 166
**** The ~add_done_callback()~ method - 167
**** The ~.running()~ method - 167
**** The ~cancel()~ method - 167
**** The ~.exception()~ method - 167
**** The ~.done()~ method - 167

*** Unit testing future objects - 168
**** The ~set_running_or_notify_cancel()~ method - 168
**** The ~set_result()~ method - 168
**** The ~set_exception()~ method - 168

*** Cancelling callable - 168
**** Example - 169
**** Output - 170

*** Getting the result - 170
**** Example - 171
**** Output - 172

*** Using ~as_completed~ - 172
**** Example - 172
**** Output - 173

*** Setting callbacks - 174
**** Example - 174
**** Output - 175
**** Chaining callbacks - 176

*** Exception classes - 176
**** Example - 176
**** Output - 177

** ProcessPoolExecutor - 178
*** Creating a ~ProcessPoolExecutor~ - 178
**** Example - 178
**** Output - 179

*** Context Manager - 179
**** Example - 179
**** Output - 180

*** Exercise - 180
**** Getting started - 180

*** Improving the speed of computationally bound problems - 180
**** Full code sample - 181
**** Output - 182

** Improving our crawler - 183
*** The plan - 183
**** New improvements - 184
**** Refactoring our code - 184
**** Storing the results in a CSV file - 186

*** Exercise - capture more info from each page crawl - 187
** ~concurrent.futures~ in Python 2.7 - 188
** Summary - 188

* Chapter 8: Multiprocessing - 189
** Working around the GIL - 189
*** Utilizing sub-processes - 190
**** Example - 190
**** Output - 191

** The life of a process - 191
*** Starting a process using fork - 191
*** Spawning a process - 192
*** Forkserver - 192
*** Daemon processes - 192
**** Example - 193
**** Breaking it down - 193
**** Output - 193

*** Identifying processes using PIDs - 194
**** Example - 194
**** Output - 195

*** Terminating a process - 196
**** Example - 196

*** Getting the current process - 197
*** Subclassing processes - 197
**** Example - 198
**** Output - 198

** Multiprocessing pools - 199
*** The difference between concurrent.futures.ProcessPoolExecutor and Pool - 199
*** Context manager - 200
**** Example - 200
**** Output - 201

*** Submitting tasks to a process pool - 201
**** Apply - 201
**** Apply_async - 202
**** Map - 203
**** Map_async - 204
**** Imap - 204
**** Imap_unordered - 205
**** Starmap - 206
**** Starmap_async - 207
**** Maxtasksperchild - 207

** Communication between processes - 208
*** Pipes - 209
**** Anonymous pipes - 209
**** Named pipes - 209

*** Working with pipes - 210
**** Example - 210

*** Handling Exceptions - 211
**** Using pipes - 211

** Multiprocessing managers - 212
*** Namespaces - 213
**** Example - 213

*** Queues - 214
**** Example - 214
**** Output - 215

*** Listeners and clients - 215
**** Example - 216
**** The Listener class - 216
**** The Client class - 217
**** Output - 217

*** Logging - 218
**** Example - 218

** Communicating sequential processes - 220
*** PyCSP - 220
**** Processes in PyCSP - 221
**** Output - 221

** Summary - 222

* Chapter 9: Event-Driven Programming - 223
** Event-driven programming - 224
*** The event loop - 225

** Asyncio - 226Getting started - 227
*** Getting started - 227
*** Event loops - 227
**** The ~run_forever()~ method - 227
**** The ~run_until_complete()~ method - 228
**** The ~stop()~ method - 229
**** The ~is_closed()~ method - 229
**** The ~close()~ function - 230

*** Tasks - 230
**** Example - 230
**** The ~all_tasks(loop=None)~ method - 231
**** The ~current_tasks()~ function - 232
**** The ~cancel()~ function - 233

*** Task functions - 234
**** The ~as_completed(fs, *, loop=None, timeout=None)~ function - 234
**** The ~ensure_future(coro_or_future, *, loop=None)~ function - 234
**** The ~wrap_future(future, *, loop=None)~ function - 234
**** The ~gather(*coroes_or_futures, loop=None, return_exceptions=False)~ function - 235
**** The ~wait()~ function - 235

*** Futures - 236
**** Example - 237
**** Output - 237

*** Coroutines - 237
**** Chaining coroutines - 238
**** Output - 241

*** Transports - 241
*** Protocols - 241
*** Synchronization between coroutines - 242
**** Locks - 242
**** Queues - 244
**** Events and conditions - 245

*** Semaphores and BoundedSemaphores - 245
*** Sub-processes - 246

** Debugging asyncio programs - 246
*** Debug mode - 246

** Twisted - 248
*** A simple web server example - 248

** Gevent - 250
*** Event loops - 250
*** Greenlets - 251
*** Simple example-hostnames - 251
**** Output - 252

*** Monkey patching - 252

** Summary - 253

* Chapter 10: Reactive Programming - 254
** Basic reactive programming - 255
*** Maintaining purity - 255

** ReactiveX, or RX - 255
*** Installing RxPY - 256
*** Observables - 257
**** Creating observers - 257
**** Example - 257
**** Example 2 - 259
**** Breaking it down - 259
**** Output - 260

*** Lambda functions - 260
**** Example - 261
**** Breaking it down - 261
**** On_next, on_completed, and on_error in lambda form - 262
**** Output - 263

*** Operators and chaining - 263
**** Filter example - 263
**** Breaking it down - 264
**** Chained operators - 264

*** The different operators - 265
**** Creating observables - 265
**** Transforming observables - 265
**** Filtering observables - 266
**** Error-handling observables - 266

*** Hot and cold observables - 266
*** Emitting events - 267
**** Example - 267
**** Breaking it down - 268
**** Output - 268

*** Multicasting - 268
**** Example - 269
**** Output - 270

*** Combining observables - 271
**** ~Zip()~ example - 271
**** Output - 272
**** The ~merge_all()~ operator - 272
**** Output - 273

*** Concurrency - 273
**** Example - 274
**** Output - 275

** PyFunctional - 276
*** Installation and official docs - 276
*** Simple example - 277
**** Output - 277

*** Streams, transformations, and actions - 277
*** Filtering lists - 278
**** Output - 279

*** Reading/writing SQLite3 - 279
*** Compressed files - 280
*** Parallel execution - 281

** Summary - 282

* Chapter 11: Using the GPU - 283
** Introduction to GPUs - 284
** Why use the GPU? - 285
*** Data science - 285
**** Branches of data science - 286
***** Machine learning - 286
***** Classification - 286
***** Cluster analysis - 286
***** Data mining - 287

** CUDA - 288
*** Working with CUDA without a NVIDIA graphics card - 289

** PyCUDA - 289
*** Features - 290
*** Simple example - 290
*** Kernels - 291
*** GPU arrays - 292

** Numba - 292
*** Overview - 293
*** Features of Numba - 293
**** LLVM - 293

*** Cross -hardware compatibility- 294
**** Python compilation space - 294
**** Just -in-Time (JiT) versus Ahead-of-Time (Aot) compilation- 295
**** The Numba process - 295
**** Anaconda - 296
**** Writing basic Numba Python programs - 296
**** Compilation options - 297
***** nopython - 297
***** nogil - 297
***** The cache option - 298
***** The parallel option - 298

**** Issues with Numba - 298

*** Numba on the CUDA-based GPUs - 299
*** Numba on AMD APUs - 299

** Accelerate - 300
** Theano - 301
*** Requirements - 301
*** Getting started - 301
**** Very simple example - 302
**** Adding two matrices - 302
**** Fully-typed constructors - 303

*** Using Theano on the GPU - 303
**** Example - 304

*** Leveraging multiple GPUs - 305
**** Defining the context map - 306
**** Simple graph example - 306

** PyOpenCL - 307
*** Example - 307
**** Output - 308

** Summary - 309

* Chapter 12: Choosing a Solution - 310
** Libraries not covered in this book - 310
*** GPU - 311
**** PyGPU - 311

*** Event-driven and reactive libraries - 311
**** Tornado - 311
**** Flask - 312
**** Celery - 313

*** Data science - 313
**** Pandas - 313
**** Matplotlib - 314
**** TensorFlow - 314

** Designing your systems - 314
*** Requirements - 315
**** Functional requirements - 315
**** Non-functional requirements - 315

*** Design - 316
**** Computationally expensive - 316
**** Event-heavy applications - 317
**** I/O-heavy applications - 317

*** Recommended design books - 317
**** Software Architecture with Python - 318
**** Python: Master the Art of Design Patterns - 318

*** Research - 318

** Summary - 318
