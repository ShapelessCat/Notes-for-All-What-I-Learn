#+TITLE: Eloquent JavaScript
#+SUBTITLE: Modern Introduction to Programming
#+VERSION: 2nd
#+AUTHOR: Marijn Haverbeke
#+STARTUP: overview
#+STARTUP: entitiespretty

* Chapter 10 Modules
  Modules divide programs into clusters of code that, by some criterion, be-
  long together. This chapter explores some of the benefits that such division
  provides and shows techniques for building modules in JavaScript.

  Every program has a shape:
  1. On a small scale, 
  2. 
  3. 
** Why Modules Help
   - To keep things that are related close together. Some programs are even
     organized along

   - /literate programming/

   - structureless --> stabilized --> structured.
     1. Avoid wasting time at the very beginning when you have no idea what
        structure the project should be, and
     2. Avoid accidentally lock yourself into a structure that doesn't
        actually fit your program.

*** Namespacing
*** Reuse
*** Decoupling

** Using Function as Namespaces
   _Functions_ are the _only things_ in JavaScript that _create a new scope_.
   If we want our modules to have their own scope, we will have to base them on
   functions.
   1. Bad! Data shouldn't be spilled into the global scope.
      #+BEGIN_SRC javascript
      var names = ["Sunday", "Monday", "Tuesday", "Wednesday",
                    "Thursday", "Friday", "Saturday"];
      function dayName(number) {
        return names[number];
      }
      #+END_SRC

   2. Good!
      #+BEGIN_SRC javascript
      var dayName = function() {
        var names = ["Sunday", "Monday", "Tuesday", "Wednesday",
                     "Thursday", "Friday", "Saturday"];
        return function(number) {
          return names[number];
        };
      }();

      console.log(dayName(3));
      // . Wednesday
      #+END_SRC

   3. Isolate code from the outside world entirely, and do not actually provide
      any values for other modules to use:
      #+BEGIN_SRC javascript
      (function() {
        function square(x) { return x * x; }
        var hundred = 100;
        
        console.log(square(hundred));
      })();
      #+END_SRC
