#+TITLE: Scala Puzzlers from Me
#+VERSION: 2019
#+AUTHOR: Jian Lan
#+STARTUP: overview
#+STARTUP: entitiespretty

* The Difference Between _\colon{}\colon{}\colon{}_ and _\plus{}\plus{}_ When Applying to _List_
  - https://stackoverflow.com/a/32135472
    The *Efficiency* part!

  - The FIRST tricky part is the /associativity/, which is enforced the Scala
    specification -- ~:~ ended operator has /right-to-left associativity/.

  - The SECOND tricky part is that at the first glance you may think the first
    part is not tricky, and you can notice the inefficiency of ~++~ when
    concatenate more than two lists.

    However, you can't find any hint in the source code!
    WHY? Becuase the /associativity/ is used when Scala's building parser read in
    source codes, and it's never hard coded in source code -- in source code you
    can only see a infix operator operate two things, you can never know what
    will happen if you don't know the exact /associativity/.

  - Conclusion:
    Pay attention to time complexity that potentially can be introduced by
    /associativity/!!! Keep this in mind, because you can find it in code -- a
    sane programmer won't read compiler build-in parser when they only need to
    write application code.

