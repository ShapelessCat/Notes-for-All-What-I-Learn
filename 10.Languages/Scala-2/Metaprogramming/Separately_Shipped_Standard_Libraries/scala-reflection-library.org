#+TITLE: Scala Standard Library API
#+VERSION: 2.13.3
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO package ~api~ - _EXPERIMENTAL_
  - The _Scala Reflection API_ (located in scala-reflect.jar).

  - In Scala 2.10.0, the _Scala Reflection API_ and its implementation have an
    "experimental" status. This means that the API and the docs are not
    complete and can be changed in binary- and source-incompatible manner in
    2.10.1. This also means that the implementation has some known issues.

  - The following types are the backbone of the Scala Reflection API, and serve
    as a good starting point for information about Scala Reflection:
    + ~scala.reflect.api.Symbols~
    + ~scala.reflect.api.Types~
    + ~scala.reflect.api.Mirrors~
    + ~scala.reflect.api.Universe~

  - For more information about Scala Reflection, see the [[https://docs.scala-lang.org/overviews/reflection/overview.html][Reflection Guide]]

** (t) ~Annotations~
** (t) ~Constants~
** (t) ~Exprs~
** (t) ~FlagSets~
** (t) ~ImplicitTags~
** (t) ~Internals~
** (t) ~JavaUniverse~
** (t) ~Liftables~
** (c) ~Mirror~
** (t) ~Mirrors~
** (t) ~Names~
** (t) ~Position~
** (t) ~Positions~
** (t) ~Printers~
** (t) ~Quasiquotes~
** (t) ~Scopes~
** (t) ~StandardDefinitions~
** (t) ~StandardLiftables~
** (t) ~StandardNames~
** (t) ~Symbols~
** (c) ~TreeCreator~
** (t) ~Trees~
** (c) ~TypeCreator~
** (t) ~TypeTags~
** (t) ~Types~
** (c) ~Universe~

* TODO package ~macros~ - _EXPERIMENTAL_
  - The *base* package for Scala macros.

  - Macros are functions that _are called by the compiler_ _during compilation_.
    Within these functions the programmer has _access to compiler APIs_.
    For example, it is possible to _generate_, _analyze_ and _typecheck_ code.

  - See the [[https://docs.scala-lang.org/overviews/macros/overview.html][Macros Guide]] on how to get started with Scala macros.

** package ~blackbox~
*** (t) ~Context~

** package ~whitebox~
*** (t) ~Context~

** (t) ~Aliases~
** (c) ~Attachments~
** (t) ~Enclosures~
** (t) ~Evals~
** (t) ~ExprUtils~
** (t) ~FrontEnds~
** (t) ~Infrastructure~
** (t) ~Internals~
** (t) ~Names~
** (c) ~ParseException~
** (t) ~Parsers~
** (c) ~ReificationException~
** (t) ~Reifiers~
** (c) ~TypecheckException~
** (t) ~Typers~
** (c) ~UnexpectedReificationException~
** (c) ~Universe~
** Deprecated Type Members
*** ~type Context = macros.whitebox.Context~

* TODO package ~runtime~
  Entry points into runtime reflection
  See the [[https://www.scala-lang.org/api/current/scala-reflect/scala/reflect/api/index.html][overview]] page for details on how to use them.
** TODO Type Members
*** TODO (c) ~JavaUniverse~
*** TODO (t) ~JavaUniverseForce~

** TODO Value Members
*** TODO ~macro def currentMirror: Mirror~
*** TODO ~lazy val universe: api.JavaUniverse~
*** TODO (o) ~ReflectionUtils~

* TODO Deprecated Type Members
** (t) ~ClassManifest[T]~
   ~type ClassManifest[T] = ClassTag[T]~

* TODO Value Members
** ~def classTag[T](implicit ctag: ClassTag[T]): ClassTag[T]~
** ~def ensureAccessible[T <: AccessibleObject](m: T): T~

* TODO Deprecated Value Members
** ~val ClassManifest: ClassManifestFactory.type~
