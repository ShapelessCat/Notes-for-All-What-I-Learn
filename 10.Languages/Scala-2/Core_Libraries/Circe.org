#+TITLE: Circe
#+SUBTITLE: A JSON library for Scsala powered by Cats
#+STARTUP: entitiespretty
#+STARTUP: overview
#+STARTUP: entitiespretty

_circe_'s working title was _jfc_, which stood for “JSON for cats”.
The name was changed for [[https://github.com/circe/circe/issues/11][a number of reasons]].

- The reason of using the new name *Circe*:
  *Circe* is a goddess who PURIFIED the _Argonauts_ -- which is the library name
  from which _circe_ forked.

* DONE Quick start
  CLOSED: [2021-10-04 Mon 01:58]
  #+begin_src scala
    val circeVersion = "0.14.1"
    
    libraryDependencies ++= Seq(
      "io.circe" %% "circe-core",
      "io.circe" %% "circe-generic",
      "io.circe" %% "circe-parser"
    ).map(_ % circeVersion)
  #+end_src
  
  - *Know Issue*:
    In case of *large* or *deep-nested* /case classes/, there is a chance to get
    /stack overflow/ during compilation.
    * Solution:
      please refer to [[https://circe.github.io/circe/codecs/known-issues.html][known-issues]] for WORKAROUND.

  - If you're using circe-generic-extra's ~@JsonCodec~ /macro annotations/,
    you'll need
    * to add ~-Ymacro-annotations~ to your _compiler options_ on Scala 2.13,
      OR
    * to include the /Macro Paradise compiler plugin/ in your build on earlier
      Scala versions:
      #+begin_src scala
        addCompilerPlugin(
          "org.scalamacros" % "paradise" % "2.1.1" cross CrossVersion.full
        )
      #+end_src
  
  - Example (paste this in REPL):
    #+begin_src scala
      import io.circe._
      import io.circe.generic.auto._
      import io.circe.parser._
      import io.circe.syntax._
      
      sealed trait Foo
      final case class Bar(xs: Vector[String])        extends Foo
      final case class Qux(i: Int, d: Option[Double]) extends Foo
      
      val foo: Foo = Qux(13, Some(14.0))
      
      val json = foo.asJson.noSpaces
      println(json)
      
      val decodedFoo = decode[Foo](json)
      println(decodedFoo)
    #+end_src
    - No boilerplate, no /runtime reflection/.

    - ~.noSpaces~: Pretty-print this JSON value to a string with no spaces.
    
* TODO Why?
  - _Argonaut_ is a great library.
    1. It's _by far_
      * the *best* JSON library for *Scala*, and
      * the *best* JSON library on the *JVM*.

    2. If you're doing anything with JSON in Scala, you should be using
      _Argonaut_.

  - _circe_ is a fork of _Argonaut_
    with _a few important differences_. =???= =???= =???=
    
** DONE Dependencies and modularity
   CLOSED: [2021-10-04 Mon 02:38]
   - *circe* depends on *cats* _INSTEAD of Scalaz_,
     and the ~core~ project has only one dependency (~cats-core~).

   - Other subprojects bring in dependencies on
     * *Jawn* (for _parsing_ in the ~jawn~ subproject),
     * *Shapeless* (for _automatic codec derivation_ in ~generic~),
     * BUT it would be possible to *replace* the functionality provided by these
       subprojects *with ALTERNATIVE* implementations that use other libraries.
       =TODO= =???= =TODO=

** TODO Parsing
** TODO Lenses
** TODO Codec derivation
** TODO Aliases
** TODO Testing
** TODO Performance

* TODO License
* DONE Parsing JSON
  CLOSED: [2021-10-04 Mon 02:53]
  - Circe includes a /parsing module/, which
    * on the _JVM_ is a wrapper around the /Jawn JSON parser/ and
    * for _JavaScript_ uses the BUILT-IN ~JSON.parse~.

  - Parsing is *NOT* part of _the ~circe-core~ module_,
    so you will need to include a /dependency/ on _the ~circe-parser~ module_ in
    your build:
    #+begin_src scala
      libraryDependencies += "io.circe" %% "circe-parser" % circeVersion
    #+end_src
    * Example:
      #+begin_src scala
        import io.circe._, io.circe.parser._
        
        val rawJson: String = """
        {
          "foo": "bar",
          "baz": 123,
          "list of stuff": [ 4, 5, 6 ]
        }
        """
        
        val parseResult = parse(rawJson)
        // parseResult: Either[ParsingFailure, Json] = Right(
        //   value = JObject(
        //     value = object[foo -> "bar",baz -> 123,list of stuff -> [
        //   4,
        //   5,
        //   6
        // ]]
        //   )
        // )
      #+end_src

  - Because parsing might fail, the result is an ~Either~ with an
    ~io.circe.Error~ on the ~Left~ side:
    #+begin_src scala
      val badJson: String = "yolo"
      
      parse(badJson)
      // res0: Either[ParsingFailure, Json] = Left(
      //   value = ParsingFailure(
      //     message = "expected json value got 'yolo' (line 1, column 1)",
      //     underlying = ParseException(
      //       msg = "expected json value got 'yolo' (line 1, column 1)",
      //       index = 0,
      //       line = 1,
      //       col = 1
      //     )
      //   )
      // )
    #+end_src

  - You can extract the ~Json~ value from the parsing result by
    * pattern matching
      OR
    * ~.getOrElse(Json.Null)~
  
** DONE Warnings and known issues  
   CLOSED: [2021-10-04 Mon 02:53]
   When using the _Scala.js_ version of *circe*, numerical values like ~Long~
   may *lose precision* when decoded.

   - For example,
     ~decode[Long]("767946224062369796")~ will return ~Right(767946224062369792L)~.
     
     This is not a limitation of how Scala.js represents ~scala.Long~'s
     nor /circe's decoders/ for _numerical values_
     _BUT_ due to ~JSON.parse~ converting _numerical values_ to /JavaScript
     numbers/.
     * *If precision is required*
       consider
       1. representing _numerical values_ as _strings_ and
       2. convert them to their final value via the /JSON AST/.
   
* DONE Traversing and modifying JSON
  CLOSED: [2021-10-04 Mon 03:39]
  Working with JSON in *circe* usually involves using a /cursor/.

  /Cursors/ are used both for *extracting* data and for *performing
  modification*.

  Suppose we have the following JSON document:
  #+begin_src scala
    import cats.syntax.either._
    import io.circe._, io.circe.parser._
    
    val json: String = """
      {
        "id": "c730433b-082c-4984-9d66-855c243266f0",
        "name": "Foo",
        "counts": [1, 2, 3],
        "values": {
          "bar": true,
          "baz": 100.001,
          "qux": ["a", "b"]
        }
      }
    """
    
    val doc: Json = parse(json).getOrElse(Json.Null)
  #+end_src
  
** DONE Extracting data
   CLOSED: [2021-10-04 Mon 03:14]
   In order to *traverse* the document
   we need to *create* an ~HCursor~ with the focus at the /document's root/:
   #+begin_src scala
     val cursor: HCursor = doc.hcursor
   #+end_src
   
   - We can then use various operations to
     *move* the focus of the /cursor/ around the document and
     *extract* data from it:
     #+begin_src scala
       val baz: Decoder.Result[Double] =
         cursor.downField("values").downField("baz").as[Double]
       // baz: Decoder.Result[Double] = Right(value = 100.001)
       
       // You can also use `get[A](key)` as shorthand for `downField(key).as[A]`
       val baz2: Decoder.Result[Double] =
         cursor.downField("values").get[Double]("baz")
       // baz2: Decoder.Result[Double] = Right(value = 100.001)
       
       val secondQux: Decoder.Result[String] =
         cursor.downField("values").downField("qux").downArray.as[String]
       // secondQux: Decoder.Result[String] = Right(value = "a")
     #+end_src
   
** DONE Transforming data
   CLOSED: [2021-10-04 Mon 03:32]
   We can also use a cursor to modify JSON.
   #+begin_src scala
     val reversedNameCursor: ACursor =
       cursor.downField("name").withFocus(_.mapString(_.reverse))
   #+end_src

   - We can then return to the root of the document and return its value with
     ~top~:
     #+begin_src scala
       val reversedName: Option[Json] = reversedNameCursor.top
       // reversedName: Option[Json] = Some(
       //   value = JObject(
       //     value = object[id -> "c730433b-082c-4984-9d66-855c243266f0",name -> "ooF",counts -> [
       //   1,
       //   2,
       //   3
       // ],values -> {
       //   "bar" : true,
       //   "baz" : 100.001,
       //   "qux" : [
       //     "a",
       //     "b"
       //   ]
       // }]
       //   )
       // )
     #+end_src
     * Note that ~Json~ is *immutable*, so the original document is left
       *UNCHANGED*.
   
** DONE Cursors
   CLOSED: [2021-10-04 Mon 03:38]
   *circe* has _THREE_ slightly different /cursor implementations/:
   - ~Cursor~ provides functionality for
     * *moving around* a tree
       AND
     * *making modifications*

   - ~HCursor~ tracks the *HISTORY* of operations performed.
     This can be used to provide useful _error messages_ WHEN something goes
     wrong.

   - ~ACursor~ also tracks *HISTORY*,
     BUT represents the *POSSIBILITY of failure* (e.g. calling ~downField~ on a
     field that doesn't exist)

   =TODO= =???= =TODO=
   =from Jian=
   Still not clear about the last two types of /cursors/.

** DONE Optics
   CLOSED: [2021-10-04 Mon 03:39]
   /Optics/ are an *ALTERNATIVE way* to _traverse_ JSON documents.
   See the _Optics_ page (later section) for more details.
   
* TODO Encoding and decoding
  *circe* uses ~Encoder~ and ~Decoder~ /type classes/ for *encoding* and
  *decoding*.

  - An ~Encoder[A]~ /instance/ provides a function that will convert any ~A~ to a
    ~Json~

  - A ~Decoder[A]~ takes a ~Json~ value to either an exception or an ~A~.

  - *circe* provides /implicit instances/ of these /type classes/ for many _types
    from the Scala standard library_, including ~Int~, ~String~, and others
    (~Encoder~ API).

    * It also provides /instances/ for ~List[A]~, ~Option[A]~, and other /generic
      types/, but only if ~A~ has an ~Encoder~ /instance/.

  - *Encoding* data to ~Json~ can be done using the ~.asJson~ syntax:
    #+begin_src scala
      import io.circe.syntax._
      
      val intsJson = List(1, 2, 3).asJson
      // intsJson: io.circe.Json = JArray(
      //   value = Vector(
      //     JNumber(value = JsonLong(value = 1L)),
      //     JNumber(value = JsonLong(value = 2L)),
      //     JNumber(value = JsonLong(value = 3L))
      //   )
      // )
    #+end_src

  - Use the ~.as~ syntax for decoding data from ~Json~:
    #+begin_src scala
      intsJson.as[List[Int]]
      // res0: io.circe.Decoder.Result[List[Int]] = Right(value = List(1, 2, 3))
    #+end_src

  - The ~decode~ function from the included ~parser~ module can be used to
    directly *decode* a JSON ~String~:
    #+begin_src scala
      import io.circe.parser.decode
      
      decode[List[Int]]("[1, 2, 3]")
      // res1: Either[io.circe.Error, List[Int]] = Right(value = List(1, 2, 3))
    #+end_src
    
** TODO Semi-automatic Derivation
*** TODO ~@JsonCodec~
*** TODO ~forProductN~ helper methods

** DONE Automatic Derivation
   CLOSED: [2021-10-04 Mon 11:13]
   It is also possible to derive ~Encoder~'s and ~Decoder~'s for many types with
   no boilerplate at all.
     *Circe* uses *shapeless* to _AUTOMATICALLY derive_ the necessary /type class
   instances/:
   #+begin_src scala
     import io.circe.generic.auto._, io.circe.syntax._
     
     final case class Person(name: String)
     final case class Greeting(salutation: String, person: Person, exclamationMarks: Int)
     
     Greeting("Hey", Person("Chris"), 3).asJson
     // res0: io.circe.Json = JObject(
     //   value = object[
     //     salutation -> "Hey",
     //     person -> {"name" : "Chris"},
     //     exclamationMarks -> 3
     //   ]
     // )
   #+end_src
   
** DONE Custom encoders/decoders
   CLOSED: [2021-10-04 Mon 11:45]
   If you want to write your own codec instead of using automatic or
   semi-automatic derivation, you can do so in a couple of ways.
   
**** DONE Older scala versions
     CLOSED: [2021-10-04 Mon 11:17]
     If you are using /custom codecs/ and _an *OLDER versions* of scala (below
     2.12)_ and you get errors like this
     #+begin_src scala
       value flatMap is not a member of io.circe.Decoder.Result[Option[String]]
     #+end_src
     or
     #+begin_src scala
       value map is not a member of io.circe.Decoder.Result[Option[String]]
     #+end_src
     then you need to use the following import: ~import cats.syntax.either._~ to
     fix this.
     
*** DONE Custom key types
    CLOSED: [2021-10-04 Mon 11:45]
    If you need to *encode/decode* ~Map[K, V]~ where ~K~ is _NOT_ ~String~ (or
    ~Symbol~, ~Int~, ~Long~, etc.), you need to provide a ~KeyEncoder~ and/or
    ~KeyDecoder~ for your /custom key type/.

    - For example:
      #+begin_src scala
        import io.circe._
        import io.circe.syntax._
        
        case class Foo(value: String)
        
        implicit val fooKeyEncoder: KeyEncoder[Foo] = new KeyEncoder[Foo] {
          override def apply(foo: Foo): String = foo.value
        }
          // fooKeyEncoder: KeyEncoder[Foo] = repl.MdocSession$App$$anon$3@6c1f5628
        val map = Map[Foo, Int](
          Foo("hello") -> 123,
          Foo("world") -> 456
        )
          // map: Map[Foo, Int] = Map(
          //   Foo(value = "hello") -> 123,
          //   Foo(value = "world") -> 456
          // )
        
        val json = map.asJson
          // json: Json = JObject(value = object[hello -> 123,world -> 456])
        
        implicit val fooKeyDecoder: KeyDecoder[Foo] = new KeyDecoder[Foo] {
          override def apply(key: String): Option[Foo] = Some(Foo(key))
        }
          // fooKeyDecoder: KeyDecoder[Foo] = repl.MdocSession$App$$anon$4@79a3d20b
        
        json.as[Map[Foo, Int]]
          // res0: Decoder.Result[Map[Foo, Int]] = Right(
          //   value = Map(Foo(value = "hello") -> 123, Foo(value = "world") -> 456)
          // )
      #+end_src
    
*** DONE Custom key mappings via annotations
    CLOSED: [2021-10-04 Mon 11:45]
    It's often necessary to work with keys in your /JSON objects/ that are
    *NOT* _idiomatic case class member names_ in Scala.
      While the /standard generic derivation/ does *NOT* support this use
    case, the _experimental circe-generic-extras module_ does provide
    *TWO* ways to transform your _case class member names_ during *encoding* and
    *decoding*:

    - In many cases the transformation is as simple as going
      *from /camel case/ to /snake case/,*
      in which case all you need is a custom _implicit configuration_:
      #+begin_src scala
        import io.circe.generic.extras._
        import io.circe.syntax._
        
        implicit val config: Configuration = Configuration.default.withSnakeCaseMemberNames
        // config: Configuration = Configuration(
        //   transformMemberNames = io.circe.generic.extras.Configuration$$$Lambda$9550/488838311@6f34928a,
        //   transformConstructorNames = io.circe.generic.extras.Configuration$$$Lambda$9549/114342652@6ffb6ccf,
        //   useDefaults = false,
        //   discriminator = None,
        //   strictDecoding = false
        // )
        
        @ConfiguredJsonCodec case class User(firstName: String, lastName: String)
        
        User("Foo", "McBar").asJson
        // res1: Json = JObject(
        //   value = object[first_name -> "Foo",last_name -> "McBar"]
        // )
      #+end_src

    - In other cases you may need more complex mappings.
      These can be provided as a function:
      #+begin_src scala
        import io.circe.generic.extras._, io.circe.syntax._
        
        implicit val config: Configuration = Configuration.default.copy(
          transformMemberNames = {
            case "i"   => "my-int"
            case other => other
          }
        )
        // config: Configuration = Configuration(
        //   transformMemberNames = <function1>,
        //   transformConstructorNames = io.circe.generic.extras.Configuration$$$Lambda$9549/114342652@6ffb6ccf,
        //   useDefaults = false,
        //   discriminator = None,
        //   strictDecoding = false
        // )
        
        @ConfiguredJsonCodec case class Bar(i: Int, s: String)
        
        Bar(13, "Qux").asJson
        // res3: io.circe.Json = JObject(value = object[my-int -> 13,s -> "Qux"])
      #+end_src

    - Since this is a common use case, we also support for mapping member names
      via an annotation:
      #+begin_src scala
        import io.circe.generic.extras._, io.circe.syntax._
        
        implicit val config: Configuration = Configuration.default
        // config: Configuration = Configuration(
        //   transformMemberNames = io.circe.generic.extras.Configuration$$$Lambda$9548/1537801843@498c48f6,
        //   transformConstructorNames = io.circe.generic.extras.Configuration$$$Lambda$9549/114342652@6ffb6ccf,
        //   useDefaults = false,
        //   discriminator = None,
        //   strictDecoding = false
        // )
        
        @ConfiguredJsonCodec case class Bar(@JsonKey("my-int") i: Int, s: String)
        
        Bar(13, "Qux").asJson
        // res5: io.circe.Json = JObject(value = object[my-int -> 13,s -> "Qux"])
      #+end_src

    - It's worth noting that if you don't want to use _the experimental
      generic-extras module_, the completely unmagical ~forProductN~ version
      isn't really that much of a burden:
      #+begin_src scala
        import io.circe.Encoder, io.circe.syntax._
        
        case class User(firstName: String, lastName: String)
        case class Bar(i: Int, s: String)
        
        implicit val encodeUser: Encoder[User] =
          Encoder.forProduct2("first_name", "last_name")(u => (u.firstName, u.lastName))
        // encodeUser: Encoder[User] = io.circe.ProductEncoders$$anon$2@4ba7b8fd
        
        implicit val encodeBar: Encoder[Bar] =
          Encoder.forProduct2("my-int", "s")(b => (b.i, b.s))
        // encodeBar: Encoder[Bar] = io.circe.ProductEncoders$$anon$2@5913c33a
        
        User("Foo", "McBar").asJson
        // res7: io.circe.Json = JObject(
        //   value = object[first_name -> "Foo",last_name -> "McBar"]
        // )
        Bar(13, "Qux").asJson
        // res8: io.circe.Json = JObject(value = object[my-int -> 13,s -> "Qux"])
      #+end_src
      While this version does involve a bit of boilerplate, it only requires
      ~circe-core~, and may have _slightly BETTER runtime performance_ in some
      cases.
    
** TODO ADTs encoding and decoding
   The _MOST STRAIGHTFORWARD way_ to *encode / decode* ADTs is by using /generic
   derivation/ for the /case classes/ but *explicitly defined instances* for the
   ADT type.

   - Consider the following ADT:
     #+begin_src scala
       sealed trait Event
       
       case class Foo(i: Int)               extends Event
       case class Bar(s: String)            extends Event
       case class Baz(c: Char)              extends Event
       case class Qux(values: List[String]) extends Event
     #+end_src

   - And the *encoder / decoder* instances:
     #+begin_src scala
       import cats.syntax.functor._
       import io.circe.{ Decoder, Encoder }, io.circe.generic.auto._
       import io.circe.syntax._
       
       object GenericDerivation {
         implicit val encodeEvent: Encoder[Event] = Encoder.instance {
           case foo @ Foo(_) => foo.asJson
           case bar @ Bar(_) => bar.asJson
           case baz @ Baz(_) => baz.asJson
           case qux @ Qux(_) => qux.asJson
         }
       
         implicit val decodeEvent: Decoder[Event] =
           List[Decoder[Event]](
             Decoder[Foo].widen,
             Decoder[Bar].widen,
             Decoder[Baz].widen,
             Decoder[Qux].widen
           ).reduceLeft(_ or _)
       }
     #+end_src
     * Note that we have to call ~widen~ (which is provided by /Cats's Functor syntax/,
       which we bring into scope with the first import) on the /decoders/ because
       the ~Decoder~ /type class/ is *NOT* /covariant/.

         The /invariance/ of /circe's type classes/ is a matter of some controversy
       (Argonaut for example has gone from /invariant/ to /covariant/ and back), but
       it has enough benefits that it's unlikely to change, which means we need
       workarounds like this occasionally.
       + =from Jian= No longer a problem in Scala 3.

   - It's also worth noting that
     our /explicit ~Encoder~ and ~Decoder~ instances/
     *will take precedence over*
     the /generically-derived instances/ we would otherwise get from the
     ~io.circe.generic.auto._~ import
     * =TODO=
       (see slides from Travis Brown's talk [[http://meta.plasm.us/slides/scalaworld/#1][here]] for some discussion of how this
       prioritization works).

   - We can use these /instances/ like this:
     #+begin_src scala
       import GenericDerivation._
       import io.circe.parser.decode
       
       decode[Event]("""{ "i": 1000 }""")
       // res0: Either[io.circe.Error, Event] = Right(value = Foo(i = 1000))
       
       (Foo(100): Event).asJson.noSpaces
       // res1: String = "{\"i\":100}"
     #+end_src
     This works, and if you need to be able to
     *specify the order that the ADT constructors* are tried,
     _it's currently the best solution._

   - Having to
     ENUMERATE the /constructors/ like this is obviously *NOT ideal*, though,
     even if we get the /case class instances/ for free.
   
*** TODO A more generic solution
*** TODO The future
*** TODO Notes
    This still doesn't get us exactly what we want, but it's closer than the
    default behavior.

      It's also been considered to change ~withDiscriminator~ to take an
    ~Option[String]~ instead of a ~String~, with ~None~ indicating that
    we don't want an _extra field_ indicating the /constructor/, giving us the
    same behavior as our ~circe-shapes~ instances in the previous section, but
    haven't been implemented so far.
    
** TODO Warnings and known issues
*** TODO ~knownDirectSubclasses~ error

* TODO Optics
** TODO Traversing JSON
** TODO Modifying JSON
** TODO Recursively modifying JSON
** TODO Dynamic
*** TODO Warning
    
* TODO Performance
* TODO Guide for contributors
** TODO Pick or report and issue
** TODO Write code
** TODO Write tests
** TODO Submit a pull request
