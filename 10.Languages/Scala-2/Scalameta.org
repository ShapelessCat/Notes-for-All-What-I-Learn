#+TITLE: Scalameta
#+STARTUP: overview
#+STARTUP: entitiespretty

* Trees
** Guide
   A core functionality of Scalameta is syntax trees, which enable you to read,
   analyze, transform and generate Scala programs at a level of abstraction. In
   this guide, you will learn how to
   - parse source code into syntax trees
   - construct new syntax trees
   - pattern match syntax trees
   - traverse syntax trees
   - transform syntax trees

**** Installation
**** sbt
**** Ammonite REPL
**** ScalaFiddle

*** What is a syntax tree?
*** Parse trees
**** From strings
**** From files
**** From expressions
**** From programs with multiple top-level statements

*** Construct trees
**** With normal constructors
**** With quasiquotes

*** Pattern match trees
**** With normal constructors
**** With quasiquotes

*** Compare trees for equality
*** Traverse trees
**** Simple traversals
**** Custom traversals

*** Transform trees
**** Simple transformations
**** Custom transformations

** Quasiquotes
** Examples
** ScalaFiddle Playground
** AST Explorer
** Scaladoc

* SemanticDB
** Guide
** Specification

* Community
** Built with Scalameta
** Presentations
