#+TITLE: Functional Programming, Simplified
#+VERSION: 1.0, published December 07, 2017
#+AUTHOR: Alvin Alexander
#+STARTUP: overview
#+STARTUP: entitiespretty

* 1 Introduction (or, Why I Wrote This Book) - 1
* 2 Who This Book is For - 5
* 3 Goals, Part 1: "Soft" Goals of This Book - 9
* 4 Goals, Part 2: Concrete Goals - 15
* 5 Goals, Part 3: A Disclaimer - 17
* 6 Question Everything - 19
* 7 Rules for Programming in this Book - 31
* 8 One Rule for Reading this Book - 31
* 9 What is "Functional Programming"? - 33
* 10 What is This Lambda You Speak Of ? - 43
* 11 The Benefits of Functional Programming - 59
* 12 Disadvantages of Functional Programming - 79
* 13 The "Great FP Terminology Barrier" - 99
* 14 Pure Functions - 107
* 15 Grandma's Cookies (and Pure Functions) - 115
* 16 Benefits of Pure Functions - 125
* DONE 17 Pure Functions and I/O - 133
  CLOSED: [2017-11-26 Sun 23:30]
  - [] =TODO= See also

* DONE 18 Pure Function Signatures Tell All - 141
  CLOSED: [2017-11-26 Sun 23:12]
** DONE OOP function signatures
   CLOSED: [2017-11-26 Sun 23:06]
   - A programmer, even with only few experience, will never trust the
     /signature/ of a function -- they know they must read the source code.

   - For a pure function, a /signature/ can provide a lot of information.

** DONE Signatures of pure functions
   CLOSED: [2017-11-26 Sun 23:06]
   - No side effects

   - Output only depends on inputs.

   - All values are immutable.

** DONE A game called, "What can this pure function possible do?"
   CLOSED: [2017-11-26 Sun 23:06]

** DONE A second game example
   CLOSED: [2017-11-26 Sun 23:06]

** DONE A third game example
   CLOSED: [2017-11-26 Sun 23:10]
** DONE Trying to play the game with an impure method
   CLOSED: [2017-11-26 Sun 23:12]
** DONE Summary
   CLOSED: [2017-11-26 Sun 23:12]
** DONE What's next
   CLOSED: [2017-11-26 Sun 23:12]

* 20 A Note About Expression-Oriented Programming - 161
* 21 Functional Programming is Like Unix Pipelines - 165
* 22 Functions Are Variables, Too - 183
* 23 Using Methods As If They Were Functions - 199
* 24 How to Write Functions That Take Functions
* as Input Parameters - 211
* 25 How to Write a ~map~ Function - 231
* 26 How to Use By-Name Parameters - 237
* 27 Functions Can Have Multiple Parameter Groups - 251
* 28 Partially-Applied Functions (and Currying) - 273
* 29 Recursion: Introduction - 289
* 30 Recursion: Motivation - 291
* 31 Recursion: Let’s Look at Lists - 295
* 32 Recursion: How to Write a ~sum~ Function - 303
* 33 Recursion: How Recursive Function Calls Work - 311
* 34 Visualizing the Recursive sum Function - 317
* 35 Recursion: A Conversation Between Two Developers - 325
* 36 Recursion: Thinking Recursively - 329
* 37 JVM Stacks and Stack Frames - 337
* 38 A Visual Look at Stacks and Frames - 345
* 39 Tail-Recursive Algorithms - 353
* 40 A First Look at "State" - 365
* 41 A Functional Game (With a Little Bit of State) - 369
* 42 A Quick Review of Case Classes - 385
* 43 Update as You Copy, Don't Mutate - 393
* 44 A Quick Review of ~for~ Expressions - 403
* 45 How to Write a Class That Can Be Used in a ~for~ Expression - 411
* 46 Creating a Sequence Class to be Used in a ~for~ Comprehension - 415
* 47 Making ~Sequence~ Work in a Simple ~for~ Loop - 421
* 48 How To Make ~Sequence~ Work as a Single Generator in a ~for~ Expression - 425
* 49 Enabling Filtering in a ~for~ Expression - 431
* 50 How to Enable the Use of Multiple Generators in a ~for~ Expression - 439
* 51 A Summary of the ~for~ Expression Lessons - 451
* 52 Pure Functions Tell No Lies - 455
* 53 Functional Error Handling (~Option~, ~Try~, or ~Either~) - 461
* 54 Embrace The Idioms! - 473
* 55 What to Think When You See That Opening Curly Brace - 477
* 56 A Quick Review of How ~flatMap~ Works - 493
* 57 ~Option~ Naturally Leads to ~flatMap~ - 499
* 58 ~flatMap~ Naturally Leads to ~for~ - 505
* 59 ~for~ Expressions are Better Than ~getOrElse~ - 507
* 60 Recap: ~Option~ -> ~flatMap~ -> ~for~ - 511
* 61 A Note About Things That Can Be Mapped-Over - 521
* 62 A Quick Review of Companion Objects and ~apply~ - 523
* 63 Starting to Glue Functions Together - 525
* 64 The "Bind" Concept - 529
* 65 Getting Close to Using ~bind~ in ~for~ Expressions - 535
* 66 Using a "Wrapper" Class in a ~for~ Expression - 537
* 67 Making ~Wrapper~ More Generic - 547
* 68 Changing "new Wrapper" to "Wrapper" - 549
* 69 Using ~bind~ in a ~for~ Expression - 557
* 70 How ~Debuggable~, ~f~, ~g~, and ~h~ Work - 571
* 71 A Generic Version of ~Debuggable~ - 585
* 72 One Last ~Debuggable~: Using ~List~ Instead of ~String~ - 589
* 73 Key Points About Monads - 595
* 74 Signpost: Where We're Going Next - 597
* 75 Introduction: The ~IO~ Monad - 599
* 76 How to Use an ~IO~ Monad - 601
* 77 Assigning a ~for~ Expression to a Function - 607
* 78 The ~IO~ Monad and a ~for~ Expression That Uses Recursion - 609
* 79 Diving Deeper Into the ~IO~ Monad - 611
* 80 I’ll Come Back to the ~IO~ Monad - 619
* 81 Functional Composition - 621
* 82 An Introduction to Handling State - 625
* 83 Handling State Manually - 627
* 84 Getting State Working in a ~for~ Expression - 633
* 85 Handling My Golfing State with a State Monad - 635
* 86 The ~State~ Monad Source Code - 641
* 87 Signpost: Getting IO and State Working Together - 647
* 88 Trying to Write a ~for~ Expression with IO and State - 649
* 89 Seeing the Problem: Trying to Use State and IO Together - 651
* 90 Solving the Problem with Monad Transformers - 655
* 91 Beginning the Process of Understanding ~StateT~ - 657
* 92 Getting Started: We’re Going to Need a ~Monad~ Trait - 661
* 93 Now We Can Create ~StateT~ - 665
* 94 Using StateT in a ~for~ Expression - 669
* 95 Trying to Combine ~IO~ and ~StateT~ in a ~for~ Expression - 675
* 96 Fixing the ~IO~ Functions With Monadic Lifting - 679
* 97 A First IO/StateT ~for~ Expression - 683
* 98 The Final IO/StateT ~for~ Expression - 687
* 99 Summary of the ~StateT~ Lessons - 691
* 100 Signpost: Modeling the world with Scala/FP - 693
* 101 What is a Domain Model? - 695
* 102 A Review of OOP Data Modeling - 699
* 103 Modeling the "Data" Portion of the Pizza POS System with Scala/FP - 707
* 104 First Attempts to Organize Pure Functions - 711
* 105 Implementing FP Behavior with Modules - 717
* 106 Implementing the Pizza POS System Using a Modular Approach - 725
* 107 The "Functional Objects" Approach - 743
* 108 Demonstrating the "Functional Objects" Approach - 747
* 109 Summary of the Domain Modeling Approaches - 753
* 110 ScalaCheck 1: Introduction - 755
* 111 ScalaCheck 2: A More-Complicated Example - 767
* 112 The Problem with the IO Monad - 783
* 113 Signpost: Type Classes - 789
* 114 Type Classes 101: Introduction - 791
* 115 Type Classes 102: The Pizza Class - 801
* 116 Type Classes 103: The Cats Library - 807
* 117 Lenses, to Simplify "Update as You Copy" - 811
* 118 Signpost: Concurrency - 815
* 119 Concurrency and Mutability Don't Mix - 817
* 120 Scala Concurrency Tools - 825
* 121 Akka Actors - 829
* 122 Akka Actor Examples - 837
* 123 Scala Futures - 849
* 124 A Second Futures Example - 857
* 125 Key Points About Futures - 871
* 126 A Few Notes About Real World Functional Programming - 875
* 127 Signpost: Wrapping Things Up - 883
* 128 The Learning Path - 885
* 129 Final Summary - 889
* 130 Where To Go From Here - 895
* Appendices - 901
* TODO A. Explaining Scala's ~val~ Function Syntax - 903
** Background - 903
** Goals - 903
** Scala's function syntax - 904
** Explaining the ERT syntax - 905
** Reading IRT function signatures - 908
** Key: Using return doesn't feel right - 909
** Examples of function syntax using ~isEven~ - 910
** The REPL shows the explicit function syntax - 911
** We're giving an anonymous function a name - 912
** ~isEven~ is an instance of ~Function1~ - 913
** Conspiracy Theory: The function syntax has its root in Haskell - 915
** Summary - 917
** See also - 918

* TODO B. The Differences Between ~val~ and ~def~ When Creating Functions - 919
** Goals - 919
** Background - 919
*** ~case~ expressions in functions - 920

** Terminology in this lesson - 921
** A quick summary of the differences between ~val~ and ~def~ functions - 921
*** Converting methods to functions - 923
*** More details - 923

** Why a ~val~ function can use a ~case~ expression without a beginning ~match~ - 923
** The ~val~ function syntax - 925
** Decompiling a ~def~ method - 926
** Decompiling a ~val~ function - 927
*** Trying that on a ~def~ method - 931

** Creating ~Function~ instances manually - 932
** Using parameterized (generic) types - 933
*** Coerce a parameterized method into a function - 934
** Summary - 935
** See also - 936

* TODO C. A Review of Anonymous Functions - 937
** An example - 937
** Reducing anonymous functions - 938
** Recognizing anonymous functions in complex code - 940
** Passing multiple parameters to an anonymous function - 944
** See also - 944

* TODO D. Recursion is Great, But ... - 945
** Source code - 945
** Goal - 945
** Introduction - 946
** Calculating a sum with recursion - 946
** That's nice, but ... - 947
** Using ~reduce~ - 948
** How ~reduce~ works - 950
*** How ~reduceLeft~ works - 950
*** Demonstrating how ~reduceLeft~ works - 951

** 1) Showing how reduceLeft works with debug/trace code - 951
** 2) Showing how reduceLeft works with diagrams - 953
** A look at a different data type - 957
** ~reduceRight~ - 959
*** How ~reduceRight~ receives its elements - 959
*** Note 1: ~reduce~ vs ~reduceLeft~ - 960
*** Note 2: Performance - 961

** How ~foldLeft~ works - 963
*** Aside: foldLeft uses two parameter lists - 964

** How ~foldRight~ works - 964
** ~scanLeft~ and ~scanRight~ - 964
** How ~foldLeft~ is like recursion - 966
*** Implementing ~foldLeft~ with recursion - 967
*** Convert ~foldLeft~ to use generic types - 969

** Even more methods - 969
** Key points - 969
** See also - 969

* TODO E. ~for~ expression translation examples - 971
** Sample lists - 971
** 1) ~foreach~ - 972
** 2) ~for~ / ~yield~ with one generator - 973
** 3) ~for~ / ~yield~ with two generators - 974
** 4) ~for~ / ~yield~ with two Option generators - 975
** 5) ~for~ / ~yield~ with three generators - 976
** 6) A filter in a ~for~ expression - 977
** 7) A filter in a longer ~for~ expression - 978
** 8) A block of code after ~yield~ - 979

* TODO F. On Using ~def~ vs ~val~ To Define Abstract Members in Traits - 981
** Short story: Use def to define fields in your traits - 981
** "A ~val~ can override a ~def~, but a ~def~ cannot override a ~val~" - 982
** More motivation to use ~def~ in traits - 983
** More information - 984
** See also - 984

* DONE G. Algebraic Data Types - 985 - =TODO= =See Also=
  CLOSED: [2018-10-05 Fri 01:51]
  #+BEGIN_QUOTE
  Algebraic Data Type:
  "A type defined by providing several alternatives, each of which comes with
  its own constructor. It usually comes with a way to decompose the type through
  pattern matching. The concept is found in specification languages and
  functional programming languages. Algebraic data types can be emulated in
  Scala with case classes."
                                                   --- From the Scala Glossary
  #+END_QUOTE

** DONE Introduction - 985
   CLOSED: [2018-10-04 Thu 23:54]
   - Because I look at ADTs as
     *a way of categorizing or classifying code _rather than_ designing code*,

     I decided *it was best to include this topic as an appendix in this book*,
     rather than as a lesson in the front of the book.

   - The "TL;DR" version of this lesson goes like this:
     If you create your /data models/ using
     + /case classes/ with /immutable fields/
     + /case objects/
     + those data types have *no methods*,

     _you're *ALREADY* writing /ADTs/._

** DONE Goals, motivation - 986 
   CLOSED: [2018-10-04 Thu 23:54]
   The goals of this lesson are:
   + To define basic ADT terminology

   + To show examples of the different ADT types

   + To help demonstrate another way to see your Scala/FP code as algebra
     =???= =TODO=

** DONE What is "Algebra"? - 986
   CLOSED: [2018-10-05 Fri 00:08]
   - Informally, an /algebra/ can be thought of as consisting of two things:
     =from Jian= I don't like the author's way the set must be defined under some
     =from Jian= (continue) operations, and they shouldn't be split into two points
     =from Jian= (continue) --- you can't talk about /operations/ without fully
     =from Jian= (continue) considering corresponding /types/, and vice versa!

     + A set of objects and operations that can be applied to these objects to get
       new objects (=from Jian= should also in this set???)

     + The laws govern the algebra -- _NOT covered_ in this lesson.

   - Examples:
     + *Numeric algebra*
       numbers under the operation like ~+~, ~-~, ~*~ (and ~/~).

     + *Relational algebra*
       The algebra in the /relational database/.

     + *Algebra in programming*
       For example, ~case class Pair(a: Int, b: Int)~ creates new type ~Pair~ from
       two instances of the existing type ~Int~ -- the /class constructor/ is an
       /operator/ that lets you create NEW /types/ from existing Scala /types/.

** DONE Three types of Algebraic Data Types - 988
   CLOSED: [2018-10-05 Fri 01:50]
   /ADT/'s fall into *three* main categories:
   - Sum type
   - Product type
   - Hybrid types

*** DONE The Sum type - 989
    CLOSED: [2018-10-05 Fri 00:46]
    =from Jian=
    - Sum type :: An /abstract type/ (/abstract class/ or /trait/ -- /class/ is
                  allowed, but shouldn't be here in /sementics/) and their alter-
                  natives (called /type variants/). Each alternative should be a
                  singleton, *NOT* cons- tructed from other values as a
                  composition.

**** DONE Another example - 989
     CLOSED: [2018-10-05 Fri 00:46]
     #+BEGIN_SRC scala
       sealed abstract class Bool  // sealed trait Bool
       case object True extends Bool
       case object False extends Bool
     #+END_SRC

     - This is a reasonable way to define the boolean type and its values
       (singleton types/classes).
        =from Jian= However, this is NOT the standard library way

     - =from Jian=
       ~Bool~ should be a /class/ rather than /trait/!
       A /class/ is a kind of things, while a /trait/ is a /property/ can be used
       to category things. Things has same property can be essentially different
       -- for example, both a huge rock and a mature elephant can be very heavy,
       we usually don't they are the same thing, or even in one category.

       + =Comment= Things can be considered in different ways: in the design of
         Python, every object has a boolean value, and boolean in Python can be
         a property or a concrete category of things.
         =From Jian= I don't prefer this design!

**** DONE Why use ~sealed trait~? - 990 - =TODO=
     CLOSED: [2018-10-05 Fri 00:22]
     A ~sealed trait~ can only be extended the file it is located, rather than
     anywhere else -- then the compiler get to know this, and can do /exhaustiveness
     checking/.

     - Q ::  =From Jian= Can the compiler still do /exhaustiveness checking/ for
            the extensions of a /open trait/ in scope?
            =TODO= =TODO= =TODO= =IMPORTANT=
            =DO EXPERIMENTS= =!!!=

**** DONE Why use ~case object~? - 990
     CLOSED: [2018-10-05 Fri 00:26]
     Becase in these cases we need *singleton functionality*!

     - /case objects/ automatically-generated ~unapply~ /method/, and then they
       work easily in ~match~ expressions.

     - /case objects/ (as opposed to plain ~object~) also
       + provides _DEFAULT_ ~equals~ and ~hashCode~ /methods/
       + ~extends Serializable~
       + has a good _DEFAULT_ ~toString~ /method/, etc.

*** DONE The Product type - 990
    CLOSED: [2018-10-05 Fri 01:35]
    - Product type :: A _SINGLE_ /type/ (the ONLY /type variant/) that constructed
                      from other values as a composition.

    - A /product type/ is usually materialized through /case classes/.
      =from Jian=
      The PURE /product type/ has no super class/trait. If it exists, this will
      be a /hybird type/ (next section) -- a sum type form, even if it has _only
      one_ /variant/ -- the _only one_ /variant/ is a production.

      =from Jian=
      A /case class/ without any fields is allowed. Of course this is NOT a
      effective /product type/.

      =TODO= =???= =???=
      From the semantics meaning, I can understand the reason why /non-case
      class/ without any field exist, but I don't understand why do we allow
      /case class without any field/ -- it is a singleton because the automatically
      implemented /methods/: ~equals~ and ~hashCode~ -- /case class without any
      field/ are esentially /case object/, the only difference is the redundant
      syntax, and repeated creations (=TODO= ???) in the background.

    - Though, ONLY ONE /type variant/, a /product type/ can have many instances
      -- countable and uncountable.

    - /String/ is a /product type/ that NOT use /case class/ form as implementation.

      =from Jian= at least, length N (certain fixed width) strings can be
      considered as a /product type/ -- uncountable number of instances.

    - Of couse, /product types/ can be *recursive*!

*** DONE Hybrid types - 993
    CLOSED: [2018-10-05 Fri 01:50]
    - =from Jian=
      Give an informal operational definition of a /hybrid types/:
      1. write a /sum type/ form definition;
      2. replace some singleton variants with /product types/.

    - /Hybrid types/ is known as the "Sum of Products".

      For example (from Mario Gleichmann =details - page 993=), 
      #+BEGIN_SRC scala
        sealed abstract class Shape  // original: `sealed trait class Shape`
        final case class Circle(radius: Double) extends Shape
        final case class Rectangle(width: Double, height: Double) extends Shape
      #+END_SRC
      These types represent a /Sum type form/ (=from Jian= I use "form" because
      it is NOT a PURE /sum type/) because ~Shape~ is a ~Circle~ or a ~Rectangle~;
      ~Circle~ is a /Product type/ because it has a ~radius~; and
      ~Rectangle~ is also /Product type/ because it has a ~width~ and a ~height~.

    - ADT's, except PURE /sum types/ and PURE /product types/, are /hybrid types/.

** DONE Pattern matching - 994
   CLOSED: [2018-10-05 Fri 00:11]
** DONE Key points - 995
   CLOSED: [2018-10-05 Fri 00:11]
** TODO See also - 995 - =TODO=
