#+TITLE: Hands-on Scala.js
#+SUBTITLE: Writing client-side web application in Scala
#+STARTUP: overview
#+STARTUP: entitiespretty

* Intro to Scala.js
  Scala.js COMPILES Scala code TO equivalent, executable JavaScript.

  - Example (Hello-world):
    + Scala.js
      #+BEGIN_SRC scala
        // scala.js
        object Main extends js.JSApp {
          def main(): Unit = {
            var x = 0
            while (x < 10) x += 3
            println(x)
            // 12
          }
        }
      #+END_SRC

    + JavaScript
      #+BEGIN_SRC javascript
        ScalaJS.c.LMain$.prototype.main__V = (function() {
            var x = 0;
            while ((x < 10)) {
                x = ((x + 3) | 0)
            };
            ScalaJS.m.s_Predef$()
                .println__O__V(x)
            // 12
        });
      #+END_SRC


** About JavaScript
*** JavaScript-the-language
*** JavaScript-the-platform

** About Scala.js
*** The Language
*** Sharing Code
*** Client-Server Integration

* Hands On
** Getting Started
*** Opening up the Project
*** The Application Code
*** The Project Code
**** =project/build.sbt=
**** =build.sbt=
**** =src/main/resources/index-dev.html=

*** Publishing
**** Optimization
**** Blob Size
*** Recap

** Making a Canvas App
*** Making a Sketchpad using Mouse Input
*** Making a Clock using ~setInterval~
*** Typing it together: Flappy Box
**** Setting Up the Canvas
**** Defining our State
**** Game Logic
**** A Working Product

*** Canvas Recap
**** Development Speed
**** Full Scala
**** Seamless Javascript Interop

** Interactive Web Pages
*** Hello World: HTML
*** Scalatags
*** Using Web Services
**** Raw Javascript
**** dom.extensions
**** Parsing the Data

*** Typing it together: Weather Search
*** Interactive Web Pages Recap

** The Command Line
*** Commands
**** The compile Command
**** The package Command
**** The fastOptJS Command
**** The fullOptJS Command
**** The run Command
**** The test Command

*** Headless Runtimes
*** Stages

** Cross Publishing Libraries
*** A Simple Cross-Built Library
**** Build Configuration
**** Source Files
**** Funning the Module

*** Further Work
*** Other Testing Libraries

** Integrating Client-Sever
*** A Client-Sever Setup
*** Client-Server Reflections
**** Shared Templating
**** Shared Code
**** Boilerplate-free Serialization

*** What's Left?
*** Autowire
**** Setting up Autowire
**** Why Autowire?

* In Depth
** Advanced Techniques
*** Functional-Reactive UIs
**** Why FRP
**** FRP with Scala.Rx
**** More Rx

*** Asynchronous Workflows
**** Futures & Promises
**** Scala-Async
***** Traditional Asynchrony
***** Using Scala-Async

** Deviations from Scala-JVM
*** Language Differences
*** Library Differences
**** Standard Library
**** Macros v.s. Reflection
**** Pure-Scala v.s. Java Libraries
**** JavaScript APIs v.s. JVM APIs
**** Scala/Browser tooling v.s. Java tooling

** The Compilation Pipeline
*** Whole Program Optimization
*** How Compilation Works
**** Compilation
**** Fast Compilation
**** Full Compilation

** Scala.js' Design Space
*** Why No Reflection?
**** Dead Code Elimination
**** Whither Reflection?
**** Macros

*** Why does error behavior differ?
**** Divide-by-zero: a case study
**** The Performance/Correctness Tradeoff

*** Small Executables
**** Raw Verbosity
**** Browsers Performance
**** Deployment Size

** Java APIs
*** Available Java APIs
*** Porting Java APIs
