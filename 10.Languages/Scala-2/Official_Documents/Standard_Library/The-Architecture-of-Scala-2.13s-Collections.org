#+TITLE: The Architecture of Scala 2.13's Collections
#+AUTHOR: Julien Richard-Foy
#+OTHER CONTRIBUTORS: Yasuhiro Horimoto (komainu8)
#+STARTUP: overview
#+STARTUP: entitiespretty

* Overview (title added by Me to better fit doc format)
  - This document describes the architecture of the Scala collections framework
    in detail.
    * Compared to the _Collections Introduction_ you will find out *more about the
      internal workings* of the framework.

    * You will also learn how this architecture helps you _define your own
      collections_ in a few lines of code, while reusing the overwhelming part
      of collection functionality from the framework.

  - The Collections API contains a LARGE NUMBER of collection operations, which
    exist uniformly on many different collection implementations.

    Implementing every collection operation anew for every collection type would
    lead to an enormous amount of code, most of which would be copied from
    somewhere else.
    
    Such code duplication could lead to inconsistencies over time, when an
    operation is added or modified in one part of the collection library but not
    in others.

    The principal design objective of the collections framework is to avoid any
    duplication, defining every operation in as few places as possible. (Ideally,
    everything should be defined in one place only, but there are a
    few exceptions where things needed to be redefined.)

    The design approach was to implement most operations in collection "templates"
    that can be flexibly inherited from individual base classes and implementations.
    =TODO= =RE-NOTE=

  - More precisely, these templates address the following challenges:
    * some transformation operations return the _SAME_ concrete collection type
      (e.g. ~filter~, called on a ~List[Int]~ returns a ~List[Int]~),

    * some transformation operations return the _SAME_ concrete collection type
      with a _DIFFERENT_ type of elements (e.g. ~map~, called on a ~List[Int]~,
      can return a ~List[String]~),

    * some collections have a _SINGLE_ element type (e.g. ~List[A]~), while some
      others have _TWO_ (e.g. ~Map[K, V]~),

    * some operations on collections return a different concrete collection
      depending on the element type. For example, map called on a ~Map~ returns
      a ~Map~ if the mapping function returns a key-value pair, but otherwise
      returns an ~Iterable~,

    * transformation operations on some collections require additional /implicit
      parameters/ (e.g. ~map~ on ~SortedSet~ takes an ~implicit Ordering~),

    * some collections are *strict* (e.g. ~List~),
      WHILE some others are *non-strict* (e.g. ~View~ and ~LazyList~).
    
* DONE Factoring out common operations
  CLOSED: [2020-12-15 Tue 23:11]
  This section presents the variability found in collections, which has to be
  abstracted over to define reusable operation implementations.
  
  - We can group collection operations into two categories:
    * *transformation* operations
      return another collection (e.g. ~map~, ~filter~, ~zip~, ...),

    * *reduction* operations
      return a single value (e.g. ~isEmpty~, ~foldLeft~, ~find~, ...).

  - Transformation operations are harder to implement in template traits because
    we want them to return collection types that are unknown yet. For instance,
    consider the signature of the ~map~ operation on ~List[A]~ and ~Vector[A]~:
    #+begin_src scala
      trait List[A] {
        def map[B](f: A => B): List[B]
      }

      trait Vector[A] {
        def map[B](f: A => B): Vector[B]
      }
    #+end_src
    To *generalize* the /type signature/ of ~map~
    we have to *abstract over* the _resulting collection_ /type constructor/.

  - A slightly different example is ~filter~.
    Considier its /type signature/ on ~List[A]~ and ~Map[K, V]~:
    #+begin_src scala
      trait List[A] {
        def filter(p: A => Boolean): List[A]
      }

      trait Map[K, V] {
        def filter(p: ((K, V)) => Boolean): Map[K, V]
      }
    #+end_src
    To *generalize* the /type signature/ of ~filter~
    we have to *abstract over* the _resulting collection_ /type/.

  - In summary,
    * operations that change the _elements_ /type/ (~map~, ~flatMap~, ~collect~,
      etc.) need to *abstract over* the _resulting collection_ /type constructor/

    * operations that keep the same elements type (~filter~, ~take~, ~drop~, etc.)
      need to *abstract over* the _resulting collection_ /type/.
  
* DONE Abstracting over collection types
  CLOSED: [2019-09-26 Thu 00:24]
  Example:
  The /template trait/ ~IterableOps~ implements the operations available on the
  ~Iterable[A]~ collection type: ~trait IterableOps[+A, +CC[_], +C] { ... }~
  
  - The type parameter A stands for the element type of the iterable, the type
    parameter CC stands for the collection type constructor and the type
    parameter C stands for the collection type.
    This allows us to define the signature of ~filter~ and ~map~ like so:
    #+begin_src scala
      trait IterableOps[+A, +CC[_], +C] {
        def filter(p: A => Boolean): C = ...
        def map[B](p: A => B): CC[B] = ...
      }
    #+end_src

  - Then leaf collection type appropriately instantiate the /type parameters/.
    For instance, in the case of ~List[A]~ we want ~CC~ to be ~List~ and ~C~ to
    be ~List[A]~:
    #+begin_src scala
      trait List[+A] extends Iterable[A]
        with IterableOps[A, List, List[A]]
    #+end_src

* TODO Four branches of templates traits
  - The astute reader might have noticed that the given /type signature/ for the
    map operation doesn't work with ~Map~ collections because the ~CC[_]~ /type
    parameter/ of the ~IterableOps~ /trait/ takes *one* /type parameter/ whereas
    ~Map[K, V]~ takes *two* /type parameters/.
  
    * To support /collection types constructors/ with _TWO_ /types parameters/ we
      have another /template trait/ named ~MapOps~:
      #+begin_src scala
        trait MapOps[K, +V, +CC[_, _], +C] extends IterableOps[(K, V), Iterable, C] {
          def map[K2, V2](f: ((K, V)) => (K2, V2)): CC[K2, V2] = ...
        }
      #+end_src

    * And then ~Map[K, V]~ can extend this trait and appropriately instantiate
      its /type parameters/:
      #+begin_src scala
        trait Map[K, V] extends Iterable[(K, V)]
          with MapOps[K, V, Map, Map[K, V]]
      #+end_src
      Note that the ~MapOps~ /trait/ inherits from ~IterableOps~ so that operations
      defined in ~IterableOps~ are also available in ~MapOps~.
        Also note that the collection /type constructor/ passed to the
      ~IterableOps~ /trait/ is ~Iterable~. This means that ~Map[K, V]~ inherits
      *two* /overloads/ of the ~map~ operation:
      #+begin_src scala
        // from MapOps
        def map[K2, V2](f: ((K, V)) => (K2, V2)): Map[K2, V2]

        // from IterableOps
        def map[B](f: ((K, V)) => B): Iterable[B]
      #+end_src
  
* TODO Strict and non-strict collections
  
* TODO Operations implementation
* TODO When a strict evaluation is preferable (or unavoidable)
* TODO Summary
  This document explains that:
  - _collection operations_ are implemented in /template traits/ suffixed with
    ~Ops~ (e.g. ~IterableOps[A, CC[_], C]~).
    + ~A~ :: collection element type 
    + ~CC~ :: collection type constructor
    + ~C~ :: collection type

  - =Comment from Jian=:
    If we can write ~IterableOps[C @ CC[A]]~ instead of ~IterableOps[A, CC[_], C]~,
    the meaning of them can be self-explained.

  - There are *FOUR* branches of /template traits/:
    + ~IterableOps~
    + ~MapOps~
    + ~SortedSetOps~
    + ~SortedMapOps~

  - Some transformation operations (e.g. map) are overloaded to return different
    result types according to their arguments type,
    TODO

  - the logic of _transformation operations_ is primarily implemented in views TODO ???
    but there are *SPECIALIZED VERSIONS of template traits* (prefixed with
    ~StrictOptimized~) that override these operations to use a /builder based
    approach/.
    TODO

** Acknowledgement
