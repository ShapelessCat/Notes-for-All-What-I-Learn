#+TITLE: Quasiquotes
#+VERSION: 2.13.3
#+AUTHOR: Denys Shabalin
#+STARTUP: overview
#+STARTUP: entitiespretty

* DONE Dependencies and setup
  CLOSED: [2020-09-19 Sat 04:05]
** DONE Scala 2.11 - =TODO= =ADDITIONAL NOTE=
   CLOSED: [2020-09-19 Sat 04:04]
   Add dependency =scala-reflect.jar=

   - All examples and code snippets in this guide are run under in 2.11 REPL with
     one extra line: ~import scala.reflect.runtime.universe._~
     *All of the examples will assume this import.*

   - A wildcard import from a ~universe~ is all that's needed to use /quasiquotes/.
     All of the examples will assume that import.
     + Here the ~universe~ can be
       * a /runtime reflection/ ~universe~ (like examples in this section);
       * a /compile-time reflection (macros)/ ~universe~.

   - Additionally some examples that use ToolBox API will need a few more lines
     to get things rolling:
     #+begin_src scala
       // For `ToolBox`
       import scala.reflection.runtime.currentMirror
       import scala.tools.reflect.ToolBox

       // For `Quasiquote` and functions that can show the tree
       import scala.reflection.runtime.universe.{Quasiquote, showCode, showRaw}

       object macros {

         val toolbox = currentMirror.mkToolBox()
         val C = q"class C"
         // C: universe.ClassDef =
         // class C extends scala.AnyRef {
         //   def <init>() = {
         //     super.<init>();
         //     ()
         //   }
         // }


         println(showCode(C))
         println(showRaw(C))
       }
     #+end_src

** DONE Scala 2.10
   CLOSED: [2020-09-19 Sat 04:01]
   - In Scala 2.10, /quasiquotes/ are ONLY available via the _macro paradise
     compiler plugin_. Adding
     + a single ~addCompilerPlugin~ line to your _sbt build_ for the _macro paradise
       plugin_ that *enables* /quasiquotes/

     + an additional ~libraryDependencies~ line for the supporting library
       (=scala-reflect.jar=) that is necessary for /quasiquotes/ to function in
       Scala 2.10.

   - New ~showCode~ pretty printer is NOT available under 2.10.

** DONE sbt cross-compile - =RE-READ= and =Try=
   CLOSED: [2020-09-19 Sat 04:04]
   Here's a neat sbt snippet taken from _Spire_ that allows you to use /quasiquotes/
   and /cross-compile/ against BOTH Scala 2.10 and 2.11:
   #+begin_src scala
     libraryDependencies := {
       CrossVersion.partialVersion(scalaVersion.value) match {
         // if scala 2.11+ is used, quasiquotes are merged into scala-reflect
         case Some((2, scalaMajor)) if scalaMajor >= 11 =>
           libraryDependencies.value

         // in Scala 2.10, quasiquotes are provided by macro paradise
         case Some((2, 10)) =>
           libraryDependencies.value ++ Seq(
             compilerPlugin("org.scalamacros" % "paradise" % "2.0.0" cross CrossVersion.full),
             "org.scalamacros" %% "quasiquotes" % "2.0.0" cross CrossVersion.binary)
       }
     }
   #+end_src

* DONE Introduction
  CLOSED: [2020-09-19 Sat 05:28]
  Quasiquotes are a neat notation that lets you manipulate Scala syntax trees with ease.

  - Example:
    #+begin_src scala
      object macros {
        val tree = q"i am { a quasiquote }"
        // tree: universe.Tree = i.am(a.quasiquote)
      }
    #+end_src

  - The code snippet you wrap into a ~q"..."~ will become a /AST tree/ that
    represents the given code snippet.

  - It is clear that /quasiquote/ syntax is just another usage of extensible
    /string interpolation/, introduced in 2.10.

  - The same syntax can be used to match /trees/ as /patterns/:
    #+begin_src scala
      object macros {
        println(tree match { case q"i am { a quasiquote }" => "it worked!" })
        //// it worked!
      }
    #+end_src

  - WHENEVER you match a /tree/ with a /quasiquote/ it will match whenever the
    structure of a given /tree/ is equivalent to the one you've provided as a
    pattern.
      You can check for structural equality manually with the help of
    ~equalsStructure~ /method/:
    #+begin_src scala
      object macros {
        println(q"foo + bar" equalsStructure q"foo.+(bar)")
        //// true
      }
    #+end_src

  - You can also put things into /quasiquotation/ with the help of ~$~:
    #+begin_src scala
      object macros {
        val aquasiquote = q"a quasiquote"
        // aquasiquote: universe.Select = a.quasiquote

        val tree = q"i am { $aquasiquote }"
        // tree: universe.Tree = i.am(a.quasiquote)
      }
    #+end_src

  - This operation (~$~) is also known as /unquoting/.
    Whenever you /unquote/ an expression of type ~Tree~ in a /quasiquote/ it
    will STRUCTURALLY *substitute* that /tree/ into that location.
      *MOST of the time* such substitutions between /quotes/ is *equivalent* to a
    _textual substitution_ of the source code.

  - Similarly, one can STRUCTURALLY *deconstruct* a /tree/ using /unquoting/ in
    /pattern matching/:
    #+begin_src scala
      object macros {
        val q"i am $what" = q"i am { a quasiquote }"
        // what: universe.Tree = a.quasiquote
      }
    #+end_src

** DONE Interpolators
   CLOSED: [2020-09-19 Sat 05:27]
   Scala is a language with rich syntax that *differs* greatly _depending on_ the
   /syntactical context/
   #+begin_src scala
     object macros {
       val x = q"""
         val x: List[Int] = List(1, 2) match {
           case List(a, b) => List(a + b)
         }
       """
       // x: universe.ValDef =
       //   val x: List[Int] = List(1, 2) match {
       //     case List((a @ _), (b @ _)) => List(a.$plus(b))
       //   }
     }
   #+end_src

   - In this example we see three primary contexts being used:
     1. ~List(1, 2)~ and ~List(a + b)~ are /expressions/
     2. ~List[Int]~ is a /type/
     3. ~List(a, b)~ is a /pattern/

   - Each of these /contexts/ is covered by a *SEPARATE* /interpolator/:
     |---------------------+---------------------------------------|
     | interpolator prefix | Used for                              |
     |---------------------+---------------------------------------|
     | ~q~                 | expressions, definitions, and imports |
     | ~tq~                | types                                 |
     | ~pq~                | patterns                              |
     |---------------------+---------------------------------------|
     + Syntactical similarity between different contexts doesn't imply similarity
       between underlying trees:
       #+begin_src scala
         object macros {
           q"List[Int]" equalsStructure tq"List[Int]"  // false
         }
       #+end_src

     + If we peek under the hood weâ€™ll see that trees are, indeed different:
       #+begin_src scala
         object macros {

           println(showRaw(q"List[Int]"))
           // TypeApply(Ident(TermName("List")), List(Ident(TypeName("Int"))))

           println(showRaw(tq"List[Int]"))
           // AppliedTypeTree(Ident(TypeName("List")), List(Ident(TypeName("Int"))))

         }
       #+end_src

     + Similarly, patterns and expressions are also not equivalent:
       #+begin_src scala
         object macros {
           pq"List(a, b)" equalsStructure q"List(a, b)"  // false
         }
       #+end_src

   - It's extremely important to use the RIGHT /interpolator/ for the job in order
     to construct a VALID syntax tree.

   - Additionally there are two auxiliary interpolators that let you work with minor
     areas of scala syntax:Additionally there are two auxiliary interpolators
     that let you work with minor areas of scala syntax:
     |------------------------------+---------------------|
     | Auxiiary Interpolator Prefix | Used for            |
     |------------------------------+---------------------|
     | ~cq~                         | case clause         |
     | ~fq~                         | for loop enumerator |
     |------------------------------+---------------------|
     See the section *syntax summary* section for details.

** DONE Splicing
   CLOSED: [2020-09-19 Sat 05:07]
   - /Unquote splicing/ is a way to *unquote* _a *variable number* of elements_:
     #+begin_src scala
       object macros {
         val ab = List(q"a", q"b")
         val fab = q"f(..$ab)"
         // fab: universe.Tree = f(a, b)
       }
     #+end_src
     + _Dots before the unquotee annotate_ indicate _a *degree* of flattening_ and
       are called a /splicing rank/.
       + ~..$~ expects the argument to be an ~Iterable[Tree]~
       + ~...$~ expects an ~Iterable[Iterable[Tree]]~.

   - /Splicing/ can easily be _combined with_ regular /unquotation/:
     #+begin_src scala
       object macros {

         val c = q"c"
         val fabc = q"f(..$ab, $c)"
         // fabc: universe.Tree = f(a, b, c)

         val fcab = q"f($c, ..$ab)"
         // fcab: universe.Tree = f(c, a, b)

         val fabcab = q"f(..$ab, $c, ..$ab)"
         // fabcab: universe.Tree = f(a, b, c, a, b)

       }
     #+end_src

   - If you want to abstract over applications even further, you can use ~...$~:
     #+begin_src scala
       object macros {

         val argss = List(ab, List(c))
         // arglists: List[List[universe.Ident]] = List(List(a, b), List(c))

         val fargss = q"f(...$argss)"
         // fargss: universe.Tree = f(a, b)(c)

       }
     #+end_src
     + At the moment ~...$~ /splicing/ is *ONLY* supported for /function applications/
       and /parameter lists/ _in ~def~ and ~class~ definitions_.

   - Similarly to *construction*
     one can also use ~..$~ and ~...$~ to *TEAR /trees/ apart*:
     #+begin_src scala
       object macros {

         val q"f(..$args)" = q"f(a, b)"
         // args: List[universe.Tree] = List(a, b)

         val q"f(...$argss)" = q"f(a, b)(c)"
         // argss: List[List[universe.Tree]] = List(List(a, b), List(c))

       }
     #+end_src

   - There are some limitations in the way you can combine /splicing/ with regular
     ~$~ variable extraction:
     #+begin_src scala
       case q"f($first, ..$rest)" => // ok
       case q"f(..$init, $last)"  => // ok
       case q"f(..$a, ..$b)"      => // not allowed
     #+end_src

   - So, in general, *ONLY one* ~..$~ is allowed per given list.
     Similar _restrictions_ also apply to ~...$~:
     #+begin_src scala
       case q"f(..$first)(...$rest)" => // ok
       case q"f(...$init)(..$first)" => // ok
       case q"f(...$a)(...$b)"       => // not allowed
     #+end_src

   - In this section we only worked with /function arguments/ BUT the same
     _splicing rules_ are true for ALL syntax forms with a _variable number_ of
     elements.
       Syntax summary and the corresponding details sections demonstrate how you
     can use /splicing/ with other syntactic forms.
     =TODO= =TODO= =TODO=

* DONE Lifting
  CLOSED: [2020-09-19 Sat 07:15]
  Lifting is an extensible way to /unquote/ custom data types in /quasiquotes/.

  - The primary use-case of /lifting/ is support *unquoting* of /literal values/
    and a number of /reflection primitives/ as /trees/:
    #+begin_src scala
      object macros {

        val two = 1 + 1
        // two: Int = 2

        val four = q"$two + $two"
        // four: universe.Tree = 2.$plus(2)

      }
    #+end_src
    + =from Jian=
      /Lifting/ implicitly convert the value passed to it to a /tree/ and then
      /unquote/ it -- remember: is only consider explicit operations, the type of
      values that can be *unquoted* MUST BE a /tree/.

    + This code above runs successfully because ~Int~ is considered to be ~Liftable~
      _by default_. The ~Liftable~ /type/ is just a /trait/ with a *SINGLE abstract
      method* that defines _a *mapping* of a given type *to* /tree/:_
      #+begin_src scala
        trait Liftable[T] {
          def apply(value: T): Tree
        }
      #+end_src
      This is a /type class pattern/.

  - A number of /data types/ that are *supported natively* by /quasiquotes/ will
    never trigger the usage of a ~Liftable~ representation, even if it's
    available: /subtypes/ of ~Tree~, ~Symbol~, ~Name~, ~Modifiers~ and ~FlagSet~.
    =from Jian= What is the ~FlagSet~??? =TODO=

  - One can also combine /lifting/ and /unquote splicing/:
    #+begin_src scala
      object macros {

        val ints = List(1, 2, 3)
        val f123 = q"f(..$ints)"
        // f123: universe.Tree = f(1, 2, 3)

        val intss = List(List(1, 2, 3), List(4, 5), List(6))
        val f123456 = q"f(...$intss)"
        // f123456: universe.Tree = f(1, 2, 3)(4, 5)(6)

      }
    #+end_src

** DONE Bring your own
   CLOSED: [2020-09-19 Sat 07:05]
   To define /tree/ representation for YOUR OWN /data type/ just provide an
   /implicit instance/ of ~Liftable~ for it:
   #+begin_src scala
     package points

     import scala.reflect.runtime.universe._

     final case class Point(x: Int, y: Int)
     object Point {
       implicit val lift = Liftable[Point] { p =>
         q"_root_.points.Point(${p.x}, ${p.y})"
       }
     }
   #+end_src
   This way, whenever a value of type ~Point~ is /unquoted/ at /runtime/ it will
   be automatically transformed into a /case class constructor/ call. In this
   example there are _THREE_ important points you should consider:
   1. The ~Liftable~ /companion/ contains a helper ~apply~ /method/ to simplify
      the creation of ~Liftable~ /instances/. It takes a single /type parameter/
      ~T~ and a ~T => Tree~ /function/ as a _single value parameter_ and returns
      a ~Liftable[T]~.

   2. Here we only defined ~Liftable~ for /runtime reflection/. It won't be found
      if you try to use it from a /macro/ due to the fact that *EACH* ~universe~
      contains its *OWN* ~Liftable~, which is *NOT compatible* with the others.
        This problem is caused by the /path-dependent/ nature of the current
      reflection API. (see "reusing liftable implementation between universes")

   3. Due to a *lack* of /hygiene/,
      the reference to ~Point~'s /companion/ has to be *fully qualified* to
      _ENSURE_ the correctness of this tree in *EVERY* possible _context_.
      + Another way to _workaround_ this reference issue is to *use /symbols/ instead*:
        #+begin_src scala
          object macros {
            val PointSym = symbolOf[Point].companionModule

            implicit val lift = Liftable[Point] { p =>
              q"$PointSym(${p.x}, ${p.y})"
            }
          }
        #+end_src

** DONE Standard Liftables - =RE-READ= =reference=
   CLOSED: [2020-09-19 Sat 07:05]
** DONE Reusing Liftable implementation between universes
   CLOSED: [2020-09-19 Sat 07:14]
   Due to the /path dependent/ nature of the CURRENT reflection API, it is
   *non-trivial to SHARE* the same ~Liftable~ definition BETWEEN the /macro/ and
   the /runtime universes/.
     One possible way to do this is _to *define* ~Liftable~ implementations in a
   /trait/ and *instantiate* it for EACH ~universe~ SEPARATELY_:
   #+begin_src scala
     import scala.reflect.api.Universe
     import scala.reflect.macros.blackbox

     trait LiftableImpls {
       val universe: Universe
       import universe._

       implicit val liftPoint = Liftable[points.Point] { p =>
         q"_root_.points.Point(${p.x}, ${p.y})"
       }
     }

     object RuntimeLiftableImpls extends LiftableImpls {
       val universe: universe.type = scala.reflect.runtime.universe
     }

     trait MacroLiftableImpls extends LiftableImpls {
       val c: Context
       val universe: c.universe.type = c.universe
     }

     // macro impls defined as a bundle
     class MyMacro(val c: blackbox.Context) extends MacroLiftableImpls {
       // ...
     }
   #+end_src
   =from Jian=  What does this comment "// macro impls defined as a bundle" mean???

   So, in practice, it's much easier to just define a ~Liftable~ for given
   ~universe~ at hand:
   #+begin_src scala
     import scala.reflect.macros.blackbox

     // macro impls defined as a macro bundle
     class MyMacros(c: blackbox.Context) {
       import c.universe._

       implicit val liftPoint = Liftable[points.Point] { p =>
         q"_root_.points.Point(${p.x}, ${p.y})"
       }

       // ...
     }
   #+end_src

* DONE Unlifting
  CLOSED: [2020-09-19 Sat 17:30]
  /Unlifting/ is the REVERSE OPERATION to *lifting*.
  It takes a /tree/ and *recovers* a /value/ from it:
  #+begin_src scala
    trait Unliftable[T] {
      def unapply(tree: Tree): Option[T]
    }
  #+end_src

  - Due to the fact that the /tree/ may NOT be a representation of our /data type/,
    the /return type/ of ~unapply~ is ~Option[T]~ rather than just ~T~.
      This signature makes it easy to use ~Unliftable~ /instances/ as /extractors/.

  - WHENEVER an /implicit instance/ of ~Unliftable~ is available for a given /data
    type/ you can use it for /pattern matching/ with the help of an ascription syntax:
    #+begin_src scala
      object macros {

        val q"${left: Int} + ${right: Int}" = q"2 + 2"
        // left: Int = 2
        // right: Int = 2

        left + right
        // res4: Int = 4

      }
    #+end_src
    + =from Jian=
      To implement that /pattern matching/ WITHOUT warnings, import
      ~universe.Quasiquote~ is NOT enough. Try to learn what else are required to
      eliminate the warnings. For now, the only fact I know is ~import universe._~
      works -- I need a more fine grained understanding.

  - It's important to note that /unlifting/ will *NOT* be performed at locations
    where ~Name~, ~TermName~ or ~Modifiers~ are extracted by default:
    =TODO= =from Jian= Consider WHY!?!?
    #+begin_src scala
      object macros {
        val q"foo.${bar: Int}" = q"foo.bar"
        // <console>:29: error: pattern type is incompatible with expected type;
        //  found   : Int
        //  required: universe.NameApi
        //        val q"foo.${bar: Int}" = q"foo.bar"
        //                         ^
      }
    #+end_src

  - One can also successfully *combine* /unquote splicing/ and /unlifting/:
    #+begin_src scala
      object macros {

        val q"f(..${ints: List[Int]})" = q"f(1, 2, 3)"
        // ints: List[Int] = List(1, 2, 3)

        val q"f(...${ints: List[List[Int]]})" = q"f(1, 2, 3)(4, 5)(6)"
        // intss: List[List[Int]] = List(List(1, 2, 3), List(4, 5), List(6))

      }
    #+end_src
    Analogously to /lifting/, this would /unlift/ arguments of the function,
    _element-wise_ and _wrap_ the result into a ~List~.

** DONE Bring your own
   CLOSED: [2020-09-19 Sat 17:39]
   Similarly to /liftables/ one can define your own /unliftables/:
   #+begin_src scala
     package Points

     import scala.universe._

     case class Point(x: Int, y: Int)
     object Point {
       implicit val unliftPoint = Unliftable[points.Point] {
         case q"_root_.points.Point(${x: Int}, ${y: Int})" => Point(x, y)
       }
     }
   #+end_src

   - Here one must pay attention to a few _nuances_:
     1. Similarly to ~Liftable~, ~Unliftable~ defines a helper ~apply~ function
        in the /companion object/ to SIMPLIFY the creation of ~Unliftable~
        instances. It take a /type parameter/ ~T~ as well as a /partial function/
        ~PartialFunction[Tree, T]~ and returns an ~Unliftable[T]~. At all inputs
        where a /partial function/ is defined it is expected to return an /instance/
        of ~T~ unconditionally.

     2. (=from Jian= In this example) We've only define ~Unliftable~ for the /runtime
        universe/, it won't be available in /macros/. (see section *sharing liftable
        implementations*)

     3. /Patterns/ used in this /unliftable/ will only match a /fully qualified
        reference/ to ~Point~ that starts with ~_root_~. It won't match other
        possible shapes of the reference; they have to be specified by hand.
        *This problem is caused by a LACK of /hygiene/.*

     4. The pattern will _ONLY match_ trees that have *literal* ~Int~ arguments.
        It won't work for other expressions that might evaluate to ~Int~.

** DONE Standard Unliftables - =RE-READ=
   CLOSED: [2020-09-19 Sat 16:59]

* DONE Hygiene
  CLOSED: [2020-09-19 Sat 19:52]
  - The notion of /hygiene/ has been widely popularized by /macro/ research in Scheme.
    + A /code generator/ is called /hygienic/
      if it *ensures* the _absence of /name clashes/ between regular and generated
      code_, preventing accidental capture of identifiers.
      * /hygiene/ is of great importance to code generation, because name binding
        problems are often *non-obvious*, and lack of /hygiene/ might manifest
        itself in subtle ways.

  - Sophisticated macro systems such as Racket's have mechanisms that make /macros/
    /hygienic/ _without any effort_ from /macro/ writers.
      In Scala we *DON'T* have *automatic* /hygiene/ - both of our codegen facilities
    (_compile-time codegen with macros_ and _runtime codegen with toolboxes_) require
    programmers to handle /hygiene/ *manually*. You must know how to work around the
    absence of /hygiene/, which is what this section is about.

  - *PREVENTING name clashes* between regular and generated code means _TWO_ things.
    1. we must ensure that, regardless of the context in which we put generated
       code, its meaning will not change (/referential transparency/).

    2. we must make certain that regardless of the context in which we /splice/
       regular code, its meaning will not change (often called /hygiene/ _in the
       narrow sense_).

  - Let's see what can be done to this end on a series of examples.

** DONE Referential transparency
   CLOSED: [2020-09-19 Sat 19:52]
   What /referential transparency/ means is that /quasiquotes/ should *remember*
   _the /lexical context/ in which they are defined._
   - For instance, if there are /imports/ provided at the definition site of the
     /quasiquote/, then these /imports/ should be used to resolve names in the
     /quasiquote/.
       *Unfortunately*, this is *NOT* the case at the moment, and here's an example:
     #+begin_src scala
       object macros {
         import collection.mutable.Map

         def typecheckType(tree: Tree): Type =
           toolbox.typecheck(tree, toolbox.TYPEmode).tpe

         typecheckType(tq"Map[_, _]") =:= typeOf[Map[_, _]]
         // false

         typecheckType(tq"Map[_, _]") =:= typeOf[collection.immutable.Map[_, _]]
         // true

       }
     #+end_src
     Here we can see that the /unqualified reference/ to ~Map~ does *NOT* respect
     our _custom_ /import/ and resolves to DEFAULT ~collection.immutable.Map~
     instead.
       Similar problems can arise if references arenâ€™t fully qualified in
     macros.
     #+begin_src scala
       // ---- MyMacro.scala ----
       package example

       import scala.reflect.macros.blackbox
       import scala.language.experimental.macros

       object MyMacro {
         def wrapper(x: Int) = { println(s"wrapped x = $x"); x }
         def apply(x: Int): Int = macro impl
         def impl(c: blackbox.Context)(x: c.Tree) = {
           import c.universe._
           q"wrapper($x)"
         }
       }

       // ---- Test.scala ----
       package example

       object Test extends App {
         def wrapper(x: Int) = x
         MyMacro(2)
       }
     #+end_src

     + If we compile both the macro and it's usage, we'll see that ~println~ will
       *NOT* be called when the application runs. This will happen because, after
       /macro expansion/, ~Test.scala~ will look like:
       #+begin_src scala
         // Expanded Test.scala
         package example

         object Test extends App {
           def wrapper(x: Int) = x
           wrapper(2)
         }
       #+end_src
       * And ~wrapper~ will be resolved to ~example.Test.wrapper~ rather than
         *intended* ~example.MyMacro.wrapper~. To avoid /referential transparency/
         gotchas one can use _TWO_ possible workarounds:
         - *Fully qualify all references*.
           i.e. we can adapt our /macro/'s implementation to:
           #+begin_src scala
             def impl(c: Context)(x: c.Tree) = {
               import c.universe._
               q"_root_.example.MyMacro.wrapper($x)"
             }
           #+end_src
           It's important to start with ~_root_~ as otherwise there will still be
           a chance of name collision if example gets redefined at the _use-site_
           of the /macro/.

         - *Unquote* /symbols/ INSTEAD of using _plain identifiers_.
           i.e. we can resolve the reference to ~wrapper~ by hand:
           #+begin_src scala
             def impl(c: Context)(x: c.Tree) = {
               import c.universe._
               val myMacro = symbolOf[MyMacro.type].asClass.module
               val wrapper = myMacro.info.member(TermName("wrapper"))
               q"$wrapper($x)"
             }
           #+end_src

** DONE Hygiene in the narrow sense
   CLOSED: [2020-09-19 Sat 19:51]
   _"hygiene in the narrow sense"_ means is that /quasiquotes/ *shouldn't mess*
   with the bindings of /trees/ that are *unquoted* into them.

   - For example, if a /macro argument/ that *unquoted* into a /macro expansion/
     was originally referring to some variable in the enclosing /lexical context/,
     then this reference should _REMAIN_ in force _AFTER_ /macro expansion/,
     regardless of what code was generated for that /macro expansion/.
       *Unfortunately*, we _DON'T have *automatic* facilities to ENSURE_ this, and
     that can lead to unexpected situations:
     #+begin_src scala
       object macros {

         val originalTree = q"val x = 1; x"
         // originalTree: universe.Tree = ...

         toolbox.eval(originalTree)
         // res1: Any = 1

         val q"$originalDefn; $originalRef" = originalTree
         // originalDefn: universe.Tree = val x = 1
         // originalRef: universe.Tree = x

         val generatedTree = q"$originalDefn; { val x = 2; println(x); $originalRef }"
         // generatedTree: universe.Tree = ...

         toolbox.eval(generatedTree)
         // 2
         // res2: Any = 2

       }
     #+end_src
     + In this example, the definition of ~val x = 2~ *shadows* the binding from
       ~x~ to ~val x = 1~ established in the ORIGINAL tree, changing the semantics
       of ~originalRef~ in generated code.
         In this simple example, shadowing is quite easy to follow, HOWEVER in
       elaborate /macros/ it can get out of hand quite easily.

     + To resolve this use the ~freshName~ function, which is like Lisp's ~gensym~,
       that can create unique names that are to be used in generated code.
       * Lisp's ~gensym~ is a battle-tested workaround from the early days of Lisp

       * /Quasiquotes/ are particularly nice here, because they allow *unquoting*
         of _generated names_ *DIRECTLY* into _generated code_.
         =TODO= =???= =TODO=

   - There's a bit of a mixup in our API, though. There is an internal API
     ~internal.reificationSupport.{ freshTermName, freshTypeName }~ available in
     _BOTH_ compile-time and runtime universes, _HOWEVER_ *only* at compile-time
     is there a nice public facade for it, called ~c.freshName~.
     We plan to fix this in Scala 2.12.
     #+begin_src scala
       object macros {

         val xfresh = universe.internal.reificationSupport.freshTermName("x$")
         // xfresh: universe.TermName = x$1

         val generatedTree = q"$originalDefn; { val $xfresh = 2; println($xfresh); $originalRef }"
         // generatedTree: universe.Tree = ...

         toolbox.eval(generatedTree)
         // 2
         // res2: Any = 1

       }
     #+end_src
     + =from Jian=
        I use Scala 2.13.3,
        the ~internal.reificationSupport.{ freshTermName, freshTypeName }~ no
        longer available as expected. We can still see this in Scala 2.11.
        =TODO= Try to fix this example code in Scala 2.12+. =TODO=

* DONE Use cases
  CLOSED: [2020-09-20 Sun 02:55]
** DONE AST manipulation in macros and compiler plugins
   CLOSED: [2020-09-20 Sun 02:49]
   /Quasiquotes/ were designed primary as tool for *ast manipulation* in /macros/.
   - A common workflow is to
     1. *deconstruct* arguments with /quasiquote patterns/
     2. *construct* a _rewritten_ result with another /quasiquote/:

   - Example:
     + Definition in a file:
       #+begin_src scala
         // macro that prints the expression code before executing it
         object debug {

           def apply[T](x: => T): T = macro impl

           def impl(c: black.Context)(x: c.Tree) = {
             import c.universe._
             val q"..$stats" = x
             val loggedStats = stats.flatMap { stat =>
               val msg = "executing " + showCode(stat)
               List(q"println($msg)", stat)
             }
             q"..$loggedStats"
           }

         }
       #+end_src

     + Usage:
       #+begin_src scala
         object Test extends App {

           def faulty: Int = throw new Execption

           debug {
             val x = 1
             val y = x + faulty
             x + y
           }

         }

         /* -- output -- */
         //// executing val x: Int = 1
         //// executing val y: Int = x.+(Test.this.faulty)
         //// java.lang.Exeception
         //// ...
       #+end_src

   - To simplify integration with /macros/ we've also made it easier to simply use
     /trees/ in /macro implementations/ *instead of* _the reify-centric ~Expr~ api_
     that might be used previously:
     + Scala 2.10
       #+begin_src scala
         object Macro {
           def apply(x: Int): Int = macro impl

           def impl(c: Context)(x: c.Expr[Int]): c.Expr[Int] = {
             import c.universe._
             c.Expr(q"$x + 1")
           }
         }
       #+end_src

     + Scala 2.11
       You can also do it like that
       #+begin_src scala
         object Macro {
           def apply(x: Int): Int = macro impl

           def impl(c: Context)(x: c.Tree) = {
             import c.universe._
             q"$x + 1"
           }
         }
       #+end_src
       * You _no longer need_ to wrap the return value of a /macro/ with ~c.Expr~,
         or to specify the /argument types/ twice, and the /return type/ in ~impl~
         is now optional (=from Jian= always ~c.universe.Tree~).
         =TODO= =WHY=

       * /Quasiquotes/ can also be used "as is" in /compiler plugins/ as the
         _reflection API_ is strict subset of the compiler's ~Global~ API.
         =TODO= =???=

** DONE Just in time compilation
   CLOSED: [2020-09-20 Sun 02:54]
   Thanks to _the ~ToolBox~ API_, one can *generate*, *compile* and *run* Scala
   code at /runtime/:
   #+begin_src scala
     object macros {
       val code = q"""println("compiled and run at runtime!")"""
       val compiledCode = toolbox.compile(code)
       val result = compiledCode()
       // compiled and run at runtime!
       result: Any = ()
     }
   #+end_src

** DONE Offline code generation
   CLOSED: [2020-09-20 Sun 02:54]
   Thanks to _the NEW ~showCode~ "pretty printer"_ one can implement an /offline
   code generator/ that does _AST manipulation_ with the help of /quasiquotes/,
   and then serializes that into actual source code right before writing it to disk:
   #+begin_src scala
     object OfflineCodeGen extends App {

       def generateCode() =
         q"package mypackage { class MyClass }"

       def saveToFile(path: String, code: Tree) = {
         val writer = new java.io.PrintWriter(path)
         try writer.write(showCode(code))
         finally writer.close()
       }

       saveToFile("myfile.scala", generateCode())

     }
   #+end_src

* DONE Syntax summary - =REFERENCE= =RE-READ=
  CLOSED: [2020-09-20 Sun 02:59]
** TODO Expressions
** TODO Types
** TODO Patterns
** TODO Definitions
** TODO Auxiliary
** TODO Abbreviations

* DONE Expression details - =REFERENCE= =RE-READ=
  CLOSED: [2020-09-20 Sun 03:00]
** Empty
** Literal
** Identifier and Selection
** Super and This
** Application and Type Application
** Assign and Update
** Return
** Throw
** Ascription
** Annotation
** Tuple
** Block
** If
** Pattern Match
** Try
** Function
** Partial Function
** While and Do-While Loops
** For and For-Yield Loops
** New
** Import

* DONE Type details - =REFERENCE= =RE-READ=
  CLOSED: [2020-09-20 Sun 03:07]
** Empty Type
** Type Identifier
** Singleton Type
** Type Projection
** Applied Type
** Annotated Type
** Compound Type
** Existential Type
** Tuple Type
** Function Type

* DONE Pattern details - =REFERENCE= =RE-READ=
  CLOSED: [2020-09-20 Sun 03:48]
** Wildcard Pattern
** Literal Pattern
** Binding Pattern
** Extractor Pattern
** Type Pattern
** Alternative Pattern
** Tuple Pattern

* TODO Definition and import details - =REFERENCE= =RE-READ=
** Modifiers
** Templates
** Val and Var Definitions
** Pattern Definitions
** Type Definition
** Method Definition
** Secondary Constructor Definition
** Class Definition
** Trait Definition
** Object Definition
** Package Definition
** Package Object Definition

* DONE Terminology summary
  CLOSED: [2020-09-20 Sun 04:11]
  - Quasiquote (not quasi-quote) :: refer to either the /quasiquote/ library or
    any usage of one its /interpolators/.
    + The name is not hyphenated for the sake of consistency with implementations
      of the same concept in other languages (e.g. Scheme and Racket, Haskell)

  - Tree or AST (Abstract Syntax Tree) :: a representation of a Scala program or
    a part of it through means of the Scala reflection API's ~Tree~ type.

  - Tree construction :: usages of /quasiquotes/ _as expressions_ to represent
    *creation* of new /tree/ values.

  - Tree deconstruction :: usages of /quasiquotes/ _as patterns_ to structurally
    *tear apart* /trees/.

  - Unquoting :: a way of either putting things in or extracting things out of
    /quasiquotes/.
    + Can be performed with ~$~ syntax _within_ a /quasiquote/.

  - Unquote splicing (or just splicing) :: another form of *unquoting* that _FLATTENS
    contents of the unquotee_ *into* a /tree/.
    + Can be performed with either ~..$~ or ~...$~ syntax.

  - Rank is a /degree/ of flattening of unquotee:
    - ~rank($) == 0~
    - ~rank(..$) == 1~
    - ~rank(...$) == 2~

  - Lifting :: a way to
    1. *unquote* /non-tree values/
    2. *transform* them into /trees/ with the help of the ~Liftable~ /typeclass/.

  - Unlifting :: a way to *unquote* /non-tree values/ *out of* /quasiquote patterns/
    with the help of the ~Unliftable~ /typeclass/.

* DONE Future prospects
  CLOSED: [2020-09-20 Sun 04:22]
  - =from Jian=
    No future, and no further updates are guaranteed. All the tickets about
    /quasiquote/ are closed. @SethTisue mentioned they can be re-open, but he
    closed them because of there is long time that no one really worked on them.
    Consider the status of Scala 3 Macros, put more effort on Scala 2 Quasiquote
    is not very valuable.

  - =from Jian= The future is the Scala 3 Macros.
