#+TITLE: herding cats
#+AUTHOR: Eugene Yokota (eed3si9n)
#+VERSION: for Cats 1.0 (Year 2020, Cats is now 2.1.0)
#+STARTUP: overview
#+STARTUP: entitiespretty

* 1. day 0
*** Intro to Cats
    - Cats consists of two parts:
      + NEW datatypes (~Validated~, ~State~, etc)

      + Implementation of many general functions you need (/ad-hoc polymorphism/,
        /traits/ + /implicits/)

** DONE a. What is polymorphism?
   CLOSED: [2019-06-07 Fri 16:18]
*** DONE Parametric polymorphism
    CLOSED: [2020-02-24 Mon 16:09]
    #+begin_src scala
      def head[A](xs: List[A]): A =
        xs(0)

      head(1 :: 2 :: Nil)
      // 1

      final case class Car(make: String)

      head(Car("Civic") :: Car("CR-V") :: Nil)
      // Car(Civic)
    #+end_src

    =from Jian= with /parametric polymorhpism/, you do *NOT* try to use the
    functionality of values of the /type parameter/.

    - quote from _Haskell wiki_:
      #+begin_quote
      Parametric polymorphism refers to when the type of a value contains one or
      more (unconstrained) type variables, so that the value may adopt any type
      that results from substituting those variables with concrete types.
      #+end_quote

*** DONE Subtype polymorphism - TODO RE-READ
    CLOSED: [2020-02-24 Mon 16:25]
    We want for type ~A~, we can do some operation like:
    ~def plus[A](a1: A, a2: A): A = ???~

    - _Depending on the type ~A~,_ we need to provide different definition for what
      it means to add them.

      One way to achieve this is through /subtyping/.
      #+begin_src scala
        trait PlusIntf[A] {
          def plus(a2: A): A
        }

        def plusBySubtype[A <: PlusIntf[A]](a1: A, a2: A): A =
          a1.plus(a2)
      #+end_src
      + To directly operate on values typed ~A~, we must know some info about ~A~
        If ~A~ is a ~subtype~ of another type (here ~PlusIntf[A]~), we know all
        the functionalities ~PlusIntf[A]~ promise that can be invoked.
          However, this means when ~A~ is defined, it need to extends ~PlusIntf[A]~,
        which is not applicable for built-in types when you want more functionalities
        form them.

      + Also we don't prefer to set the type parameter subtyping as ~A <: KnownType~
        without the ~[A]~. This is applicable, but not flexible.

*** DONE Ad-hoc polymorphism
    CLOSED: [2020-02-24 Mon 16:31]
    /Ad-hoc polymorphism/ solves the problem /subtype polymorphism/ try to solve
    in a different way: /ad-hoc polymorphism/ do _NOT NEED_ /subtyping relation/,
    it just guarantees type ~A~ values can be converted to some other types that
    have the required functionalities you want!

    - This is *truely* ad-hoc in the sense that
      + we can
        _provide_
        separate function definitions
        _for_
        DIFFERENT types of ~A~

      + we can provide function definitions to types (like ~Int~) *without access
        to its source code*

      + the function definitions can *be enabled or disabled in different scopes*

    - Comment:
      The last point above makes Scala's /ad-hoc polymorphism/ MORE POWERFUL than
      that of Haskell.
      * More on this topic can be found at _Debasish Ghosh @debasishg_'s /Scala
        Implicits/: _Type Classes Here I Come_.
        TODO TODO TODO
        TODO TODO TODO
        TODO TODO TODO

    - Example:
      #+begin_src scala
        trait CanPlus[A] {
          def plus(a1: A, a2: A): A
        }

        def plus[A: CanPlus](a1: A, a2: A): A =
          implicitly[CanPlus[A]].plus(a1, a2)
      #+end_src
      + NEXT SECTION
        Let's look into ~plus~ function in more detail.

** TODO b. sum function
*** ~Monoid~
** TODO c. ~FoldLeft~
*** Typeclasses in Cats

** TODO d. Method injection (enrich my library)
*** Operator syntax for the standard datatypes

* DONE 2. day 1
  CLOSED: [2020-02-25 Tue 01:34]
** TODO a. sbt
** DONE b. ~Eq~
   CLOSED: [2020-02-24 Mon 23:52]
   - Compare Haskell and Scala Cats:
     #+begin_quote
     LYAHFGG:
       ~Eq~ is used for types that support equality testing. The functions its members
     implement are ~==~ and ~/=~.
     #+end_quote
     Cats' equivalent /typeclass/ is also called ~Eq~.

   - ~Eq~ was moved from _non/algebra_ into _cats-kernel_,
     and became part of Cats.

   - ~Eq~ enables ~===~ (~eqv~) and ~=!=~ (~neqv~)

** DONE c. ~Order~
   CLOSED: [2020-02-24 Mon 23:57]
   - Compare Haskell and Scala Cats:
     #+begin_quote
     LYAHFGG:
       ~Ord~ is for types that have an ordering. ~Ord~ covers all the standard
     comparing functions such as ~>~, ~<~, ~>=~, and ~<=~.
     #+end_quote
     Cats' equivalent /typeclass/ is ~Order~.

   - ~Order~ enables
     + ~compare~ syntax which returns ~Int~.
     + ~min~ and ~max~ operators

   - ~Order~ is a type-safe version of Scala standard library ~Ordering~.

** DONE d. ~PartialOrder~
   CLOSED: [2020-02-25 Tue 00:29]
   In addition to ~Order~, Cats also defines ~PartialOrder~.

   - ~PartialOrder~ enables
     + ~tryCompare~

     + also ~>~, ~>=~, ~<~, and ~<=~ operators
         This is tricky, if not used careful you could end up using the built-in
       comparison operators.

   - =from Jian=
     One thing the author also mentioned is that
     _DO NOT know how to find a example that ~tryCompare~ really returns ~None~._
     TODO TODO TODO TODO TODO TODO TODO TODO

** DONE e. ~Show~
   CLOSED: [2020-02-25 Tue 01:25]
   - Compare Haskell and Scala Cats:
     #+begin_quote
     LYAHFGG:
       Members of ~Show~ can be presented as strings.
     #+end_quote
     Cats' equivalent /typeclass/ is also named ~Show~.

   - Definition (simplified):
     #+begin_src scala
       @typeclass trait Show[T] {
         def show(f: T): String
       }
     #+end_src

   - ~Show~ is introduced for two reasons (even if we already have ~toString~
     from ~Any~):
     + Type-safe string representation.
       No anything would match, like ~Any~ -- compiler will stop you, by accident,
       calling ~show~ on any object of any type.

     + Give you a chance to avoid some _junk_ ~toString~ like:
       #+begin_src scala
         (new {}).toString
         // res0: String = $anon$1@44a69428

         (new {}).show
         // <console>:21: error: value show is not a member of AnyRef
         //        (new {}).show
         //                 ^
       #+end_src

   - object ~Show~ provides two functions to create a ~Show~ instance:
     #+begin_src scala
       object Show {
         /** creates an instance of [[Show]] using the provided function */
         def show[A](f: A => String): Show[A] = new Show[A] {
           def show(a: A): String = f(a)
         }

         /** creates an instance of [[Show]] using object toString */
         def fromToString[A]: Show[A] = new Show[A] {
           def show(a: A): String = a.toString
         }

         implicit val catsContravariantForShow: Contravariant[Show] = new Contravariant[Show] {
           def contramap[A, B](fa: Show[A])(f: B => A): Show[B] =
             show[B](fa.show _ compose f)
         }
       }
     #+end_src
     + =from Jian=
       This contravariant functor is very useful!!!
       Create a example for it.

** TODO f. ~Read~
   #+begin_quote
   LYAHFGG:
     ~Read~ is sort of the opposite typeclass of ~Show~. The read function takes
   a string and returns a type which is a member of ~Read~.
   #+end_quote
   Now equivalent for this typeclass in Cats.
   TODO TODO TODO TODO TODO
   =from Jian=
   How about current version of Cats??? This doc was written 2 years ago.

** TODO g. ~Enum~
** TODO h. ~Numeric~
** DONE i. typeclasses 102
   CLOSED: [2020-02-25 Tue 01:34]

* TODO 3. day 2
** DONE a. Making our own typeclass with ~simulacrum~
   CLOSED: [2018-11-28 Wed 20:29]
*** simulacrum
    - The _conventional steps_ of *defining a modular /typeclass/ in Scala* used
      to look like:
      1. Define /typeclass/ contract ~trait Foo~.

      2. Define a /companion object/ ~Foo~
         with a helper method ~apply~ that acts like ~implcitly~, and a way of
         defining ~Foo~ instances typically from a function.

      3. Define ~FooOps~ /class/ that defines _unibary or binary operators_.

      4. Define ~FooSyntax~ /trait/ that IMPLICITLY provides ~FooOps~ from a ~Foo~
         instance.

    - Frankly, these steps are *MOSTLY copy-paste boilerplate*
      *EXCEPT for the first one.*

    - Enter =Michael Pilquist (@mpilquist)='s ~simulacrum~.
      ~simulacrum~ magically generates _MOST_ of steps 2-4 just by putting
      ~@typeclass~ /annotation/.
        =Stew O'Connor (@stewoconnor/@stew)='s refactored /Cats/ to use it
      (_MERGED_).

*** Yes-No typeclass
    #+BEGIN_SRC scala
      import simulacrum._

      @typeclass trait CanTruthy[A] { self =>  // MUST have `self =>`, and we will use later
        def truthy(a: A): Boolean
      }

      object CanTruthy {
        // Since Scala 2.12
        def fromTruthy[A](f: A => Boolean): CanTruthy[A] =
          a => f(a)

        //// Before Scala 2.12
        //
        // def fromTruthy[A](f: A => Boolean): CanTruthy[A] =
        //  new CanTruthy[A] {
        //    def truthy(a: A): Boolean = f(a)
        //  }
      }
    #+END_SRC

    According to the =README= of ~simulacrum~, the macro will _generate_ all the
    operator enrichment stuff:
    #+BEGIN_SRC scala
      // This is the supposed generated code. You don't have to write it!
      object CanTruthy {
        def fromTruthy[A](f: A => Boolean): CanTruthy[A] =
          a => f(a)

        def apply[A](implicit instance: CanTruthy[A]): CanTruthy[A] =
          instance

        trait Ops[A] {
          def typeClassInstance: CanTruthy[A]
          def self: A
          def truthy: A = typeClassInstance.truthy(self)
        }

        trait ToCanTruthyOps {
          implicit def toCanTruthyOps[A](target: A)(implicit tc: CanTruthy[A]): Ops[A] =
            new Ops[A] {
              val self = target
              val typeClassInstance = tc
            }
        }

        trait AllOps[A] extends Ops[A] {
          def typeClassInstance: CanTruthy[A]
        }

        object ops {
          implicit def toAllCanTruthyOps[A](target: A)(implicit tc: CanTruthy[A]): AllOps[A] =
            new AllOps[A] {
              val self = target
              val typeClassInstance = tc
            }
        }
      }
    #+END_SRC

    - Use it:
      #+BEGIN_SRC scala
        implicit val intCanTruthy: CanTruthy[Int] =
          CanTruthy.fromTruthy({
                                 case 0 => false
                                 case _ => true
                               })

        import CanTruthy.ops._
        10.truthy
        // res0: Boolean = true
      #+END_SRC

    - *ONE Caveat* is that this requires /Macro Paradise plugin/ to compile.
      =from Jian=
      However, _from Scala 2.13 on_, /Macro Paradise/ will be part of the scala
      compiler. Then you can turn it on with corresponding command line options,
      or set it up in the =build.sbt=.

*** Symbolic operators
    - For CanTruthy the injected operator happened to be unary, and it matched the name of the function on the typeclass contract.

    - ~simulacrum~ can also *define* _operator with symbolic names_ using ~@op~
      /annotation/:
      #+BEGIN_SRC scala
        @typeclass trait CanAppend[A] {
          @op("|+|") def append(a1: A, a2: A): A
        }
        // defined trait CanAppend
        // defined object CanAppend

        implicit val intCanAppend: CanAppend[Int] =
          (a1, a2) => a1 + a2

        import CanAppend.ops._

        1 |+| 2
        // res1: Int = 3
      #+END_SRC

** TODO b. ~Functor~
*** TODO ~Functor~
    ~Functor~ Definition
    #+BEGIN_SRC scala
      /** Functor.
        ,*
        ,* The name is short for "covariant functor".
        ,*
        ,* Must obey the laws defined in `cats.laws.FunctorLaws`.
        ,*/
      @typeclass trait Functor[F[_]] extends functor.Invariant[F] { self =>
        def map[A, B](fa: F[A])(f: A => B): F[B]
        // ...
      }
    #+END_SRC

    - Usage (without importing operators):
      #+BEGIN_SRC scala
        import cats._
        import cats.data._
        import cats.implicits._

        Functor[List].map(List(1, 2, 3)) { _ + 1 }
        // res0: List[Int] = List(2, 3, 4)
      #+END_SRC
      This is the /function syntax/ -- no operator imported.

    - As we know that ~@typeclass~ /annotation/ will auuto turn _a ~map~ function_
      into /a ~map~ operator/ -- =from Jian= binary fucuntion to infix binary op.

      The name ~fa~ and ~f~ below comes from the ~map~ definition of ~Functor[F[_]]~
      + The ~fa~ turns into the ~this~ of the /method/
      + The ~f~ turns into the operation being mapped.

      This looks almost like the ~map~ /method/ on /Scala collection library/,
      except this ~map~ does NOT do the ~CanBuildFrom~ auto conversion. =???= =TODO=

      =TODO= I don't know what does ~CanBuildFrom~ do?!?!?!

**** DONE ~Either~ as a functor
     CLOSED: [2018-11-28 Wed 21:06]
     #+BEGIN_SRC scala
       (Right(1): Either[String, Int]) map { _ + 1 }
       // res1: scala.util.Either[String,Int] = Right(2)

       (Left("boom!"): Either[String, Int]) map { _ + 1 }
       // res2: scala.util.Either[String,Int] = Left(boom!)
     #+END_SRC

     - =from Jian=
       The paragraph after the example code describes the OLD ~Either~ (before
       Scala 2.12.0). At that time, ~Either~ did NOT have ~map~.

       =IMPORTANT=
       =IMPORTANT=
       =IMPORTANT=
     - However, the topic the paragraph after the example code is still =IMPORTANT=:
         Because of the property of ~implicit~, if one class has ~map~, the one
       you implement won't work as an operator, which the original one can do,
       and *no need to do any /implicit conversion/.*

       =IMPORTANT=
       If you still want to use your version of ~map~, one workaround is to opt for
       the /function syntax/.

**** TODO Function as a functor

**** TODO Lifting a function

*** TODO ~Functor~ Laws

** TODO c. Checking laws with Discipline
*** Checking laws from the REPL
*** Checking laws with Discipline + Specs2
*** Breaking the law

** DONE d. Import guide
   CLOSED: [2018-11-29 Thu 13:37]
*** DONE Implicits review
    CLOSED: [2018-11-29 Thu 13:37]
    Let's quickly _REVIEW_ Scala's ~import~'s and ~implicit~'s!

    - In Scala, ~import~'s are used for *2 PURPOSES*:
      1. To *include*
         NAMES of /values/ and /types/
         *into* the /scope/.

      2. To *include*
         ~implicit~'s
         *into* the /scope/.

         =from Jian=
         This looks similar to point 1, but different reasons:
         + 1 is for _convenience_,
         + 2 is the *MUST DO* part.

    - ~implicit~'s are for *4 PURPOSES* that _I can think of_:
                                             =from Jian= is there more???
      1. To *provide* /typeclass instances/.

      2. To *inject* /methods/ and /operators/. (static monkey patching =???= Ruby???)

      3. To *declare* /type constraints/.

      4. To *retrieve* /type information/ from compiler.

    - ~implicit~'s are selected in the following precedence:
      =from Jian= it seem's these two points have overlap!
      1. /Values/ and /converters/ (=from Jian= /implcit functions/ or /implicit classes/)
         accessible *without prefix* VIA
         + LOCAL /declaration/
         + /imports/
         + OUTER /scope/
         + /inheritance/
         + CURRENT /package object/

         /Inner scope/ can *SHADOW* values when they are _named the same_.

      2. /Implicit scope/.
         Values and converters declared in /companion objects/ and /package object/
         of
         + the type
         + its parts
         + super types.

*** DONE import ~cats._~
    CLOSED: [2018-11-29 Thu 13:19]
    - TODO =Note=

*** DONE import ~cats.data._~
    CLOSED: [2018-11-29 Thu 13:20]
    - TODO =Note=
*** DONE import ~cats.implicits._~
    CLOSED: [2018-11-29 Thu 13:20]
    - TODO =Note=
**** DONE ~cats.instances.AllInstances~
     CLOSED: [2018-11-29 Thu 13:20]
**** DONE ~cats.syntax.AllSyntax~
     CLOSED: [2018-11-29 Thu 13:20]

*** DONE ~a la carte style~ =IMPORTANT=
    CLOSED: [2018-11-29 Thu 13:37]
**** DONE typeclass instances
     CLOSED: [2018-11-29 Thu 13:24]
     /Typeclass instances/ are *broken down* _by the datatypes_

     - Example (get all /typeclass instances/ for ~Option~):
       #+BEGIN_SRC scala
         // { If you are in REPL, you need this to make the two lines below in scope
         import cats.instances.option._
         cats.Monad[Option].pure(0)
         // }

         // RESULT:
         // Some(0)  // Option[Int]
       #+END_SRC

     - Example (get all instances):
       #+BEGIN_SRC scala
         // { If you are in REPL, you need this to make the two lines below in scope
         import cats.instances.all._
         cats.Monoid[Int].empty
         // }

         0  // Int
       #+END_SRC

**** DONE Cats typeclass syntax
     CLOSED: [2018-11-29 Thu 13:30]
     /Typeclass syntax/ are *broken down* _by the typeclass_.

     - Example:
       #+BEGIN_SRC scala
         // {
         import cats.syntax.eq._
         import cats.instances.all._
         1 === 1
         // }

         // RESULT:
         // true  // Boolean
       #+END_SRC

**** DONE Cats datatype syntax
     CLOSED: [2018-11-29 Thu 13:32]
     Cats /datatype syntax/ like ~Writer~ are also available under ~cats.syntax package~:
     #+BEGIN_SRC scala
       // { // if in REPL
         import cats.syntax.writer._
         import cats.instances.all._
         1.tell
       // }

       // RESULT:
       // WriterT((1,()))  // cats.data.Writer[Int,Unit]
     #+END_SRC

**** DONE standard datatype syntax
     CLOSED: [2018-11-29 Thu 13:34]
     /Standard datatype syntax/ are *broken down* _by the datatypes_.

     - Example:
       Inject /methods/ and /functions/ for ~Option~
       #+BEGIN_SRC scala
         // {
           import cats.syntax.option._
           import cats.instances.all._
           1.some
         // }

         // RESULT:
         // Some(1)  // Option[Int]
       #+END_SRC
**** DONE all syntax
     CLOSED: [2018-11-29 Thu 13:37]
     Here's how to load *ALL* /syntax/ and *ALL* /instances/.
     #+BEGIN_SRC scala
       // {
         import cats.syntax.all._
         import cats.instances.all._
         1.some
       // }

       // RESULT:
       // Some(1)  //  Option[Int]:w
     #+END_SRC

     This is the same as ~import cats.implicits._~

     - If you are confused by this by now,
       just keep using:
       #+BEGIN_SRC scala
         import cats._
         import cats.data._
         import cats.implicits._
       #+END_SRC

* TODO 4. day 3
** TODO a. Kinds and some type-foo
** TODO b. Semigroupal
** TODO c. Apply
** TODO d. Applicative

* 5. day 4
  - Yesterday (day 3),
    we reviewed kinds and types, explored ~Apply~, /applicative style/, and
    ended with ~sequenceA~.

  - Let's move on to ~Semigroup~ and ~Monoid~ today.

** a. ~Semigroup~
   - LYHGG
     + Chapter :: Functors, Applicative Functors and Monoids.
       * Section :: Monids

   - Cats is missing ~newtype~ taged type facility.
     We'll implement our own later. TODO TODO TODO TODO TODO

   - /Haskell's Monoid/ is split into ~Semigroup~ and ~Monoid~ in Cats.
     They are also /type aliases/ of ~algebra.Semigroup~ and ~algebra.Monoid~.

       As with ~Apply~ and ~Applicative~, ~Semigroup~ is a _weaker version of_
     ~Monoid~.

   - *When solving the same problem, weaker is cooler -- fewer assumptions are made.*

** b. ~Monoid~
** c. About Laws
** d. Using monoids to fold data structures

* 6. day 5
** a. ~FlatMap~
** b. ~Monad~
** c. ~List~ datatype
** d. ~FunctorEmpty~
** e. A knight’s quest

* 7. day 6
** a. do vs ~for~
** b. Writer datatype
** c. Reader datatype

* 8. day 7
** a. State datatype
** b. Validated datatype
** c. Ior datatype

* 9. day 8
** a. Free monoids
** b. Free monads
** c. Stackless Scala with Free Monads
** d. Tail Recursive Monads (FlatMap)

* 10. day 9
** a. Some useful monadic functions
** b. Making a safe RPN calculator
** c. Composing monadic functions
** d. Making monads
** e. Monads are fractals

* 11. day 10
** a. Monad transformers
** b. Stacking Future and Either

* 12. day 11
** a. Genericity
** b. Datatype-generic programming with Bifunctor
** c. Const datatype
** d. Combining applicative functors

* 13. day 12
** a. Traverse
** b. TraverseEmpty
** c. Coercing type inference using partial unification
** d. Shape and contents
** e. Applicative wordcount

* 14. day 13
** a. Id datatype
** b. Eval datatype
** c. The Abstract Future

* 15. day 14
** a. SemigroupK
** b. MonoidK
** c. Alternative

* 16. day 15
** a. Basic category theory
** b. Arrow
** c. Isomorphism

* 17. day 16
** a. Sets
** b. Pos
** c. Finite categories
** d. Cat
** e. Monoid as categories
** f. Grp

* 18. day 17
** a. Initial and terminal objects
** b. Product
** c. Duality
** d. Coproduct

* Contents in Depth
* Combined Pages
