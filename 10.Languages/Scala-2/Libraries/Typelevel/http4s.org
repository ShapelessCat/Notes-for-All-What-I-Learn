#+TITLE: http4s
#+SUBTITLE: Functional Configurations for Scala
#+VERSION: 0.21.13
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Quick Start
* TODO Integrations
** Http Backend integrations
** Entity integrations
   
* TODO Upgrading from 0.18
* TODO Service
** Your first service
*** Defining your service
*** Returning content in the response
*** Returning your service

** Cleaning up
*** Running your service as an ~App~
    
* TODO The https4s DSL
** Add the https4s-dsl to your build
** The simplest service
** Testing the Service
** Generating responses
*** Status codes
*** Headers
*** Cookies
*** Responding with a body
**** Simple bodies
**** Asynchronous responses
**** Streaming bodies
     
** Matching and extracting requests
*** The ~->~ object
*** Path info
*** Matching paths
*** Handling path parameters
*** Handling query parameters
**** Optional query parameters
**** Missing required query parameters
**** Invalid query parameter handling
**** Optional Invalid query parameter handling

* TODO Middleware
** Composing Services with Middleware
** Included Middleware
*** Metrics Middleware
**** Dropwizard Metrics Middleware
**** Prometheus Metrics Middleware

*** X-Request-ID Middleware

* TODO Authentication
** Built in
** Composing Authenticated Routes
** Returning an Error Response
*** With Kleisli
    
** Implementing authUser
*** Cookies
*** Authorization Header
*** Using tsec-http4s for Authentication and Authorization

* TODO CORS
** Configuration

* TODO CSRF
* TODO GZip Compression
* TODO HSTS
** Configuration
** References

* TODO Static Files
** Getting Started
** ETags
*** Execution Context
    
** Serving from jars
** Webjars
    
* TODO HTTP Client
*** Creating the client
*** Describing a call
    
** Making the call
** Constructing a URI
** Middleware
*** Included Middleware
*** Metrics Middleware
**** Dropwizard Metrics Middleware
**** Prometheus Metrics Middleware
   
** Examples
*** Send a GET request, treating the response as a string
*** Post a form, decoding the JSON response to a case class
    
** Calls to a JSON API
** Body decoding / encoding

* TODO Entity handling
** Why Entity*
** Construction and Media Types
** Chaining Decoders
** Presupplied Encoders/Decoders
*** Raw Data Types
*** JSON
*** XML
*** Support for Twirl and Scalatags

* TODO Streaming
** Introduction
** Streaming responses from your service
** Consuming streams with the client

* TODO JSON handling
** Add the JSON support module(s)
*** Circe
*** Argonaut
*** Json4s
    
** Sending raw JSON
** Encoding case classes as JSON
** Receiving raw JSON
** Decoding JSON to a case class
** Putting it all together
*** A Hello world service
*** A Hello world client

* TODO Testing
** Introduction
** Conclusion
** References
   
* TODO URI handling
** Literals
** Building URIs
*** URI
*** URI Template
    
** Receiving URIs

* TODO Deployment
** Overview
** Assembled JAR
** Graal Native Image
*** Install GraalVM and Native Image plugin
    
** (Optional) Get or build a muslC bundle required to build a static image.
** META-INF resources for reflection
*** Build an assembled jar using GraalVM
*** Create the native image with the assembled JAR
*** Execute the native image
*** Why static?

* Scaladoc
