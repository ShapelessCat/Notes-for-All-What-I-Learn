#+TITLE: fs2
#+SUBTITLE: Purely functional, effectful, resource-safe, concurrent streams for Scala
#+STARTUP: entitiespretty
#+STARTUP: overview
#+STARTUP: entitiespretty

* Guide
** Overview
** Building streams
** Chunks
** Basic stream operations
** Error handling
** Resource acquisition
** Exercises (stream building)
** Statefully transforming streams
** Exercises (stream transforming)
** Concurrency
** Exercises (concurrency)
** Interruption
** Talking to the external world
** Reactive streams
** Learning more
** Appendix: How interruption of streams works

* Concurrency Primitives
** FIFO (First IN / First OUT)
** Single Publisher / Multiple Subscriber
** Shared Resource

* I/O
** Networking
*** TCP
*** UDP
*** TLS
    
** Files
** Console operations
** Interop with ~java.io.{InputStream, OutputStream}~
   
* FAQ
** Why does stream evaluation sometimes hang in the REPL?
** What does ~Stream.compile~ do? Is it actually compiling something? Optimizing the stream somehow?
** What is the difference between Stream and Pull?

* Documentation
** Talks and Presentations
** Tutorials
** Blog Posts and Short Articles
** Books
** Related Academic Research
** Related Scala Libraries
** Related Haskell Libraries
** Older References
   
* Ecosystem
** Typelevel Dependencies
** Libraries using FS2, and integrations with data stores

