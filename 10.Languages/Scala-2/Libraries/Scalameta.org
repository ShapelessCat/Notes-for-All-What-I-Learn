#+TITLE: Scalameta
#+VERSION: 4.3.18
#+STARTUP: overview
#+STARTUP: entitiespretty

* Trees
** Guide
*** Installation
**** sbt
**** Ammonite REPL
**** ScalaFiddle

*** What is a syntax tree?
*** Parse trees
**** From strings
**** From files
**** From expressions
**** From programs with multiple top-level statements

*** Construct trees
**** With normal constructors
**** With quasiquotes

*** Pattern match trees
**** With normal constructors
**** With quasiquotes

*** Compare trees for equality
*** Traverse trees
**** Simple traversals
**** Custom traversals

*** Transform trees
**** Simple transformations
**** Custom transformations

** trees/quasiquotes
*** Expressions (meta.Term)
*** Types (meta.Type)
*** Patterns (meta.Pat) and Cases (meta.Case)
*** Members (meta.Member)
**** Declarations
**** Definitions
**** Value Parameters (meta.Term.Param)
**** Type Parameters (meta.Type.Param)

*** Inits (meta.Init)
*** Selfs (meta.Self)
*** Template (meta.Template)
*** Modifiers (meta.Mod)
*** Enumerators (meta.Enum)
*** Imports (meta.Import)
*** Importer (meta.Importer)
*** Importees (meta.Importee)
*** Sources (meta.Source)
*** Legend
**** Shorthands
**** Suffixes

** trees/examples
*** Top level (~meta.Source~, ~meta.Pkg~, ~meta.Pkg.Object~)
*** Declarations (~meta.Decl~)
*** Definitions (~meta.Defn~)
*** Terms (~meta.Term~)
*** Types (~meta.Type~)
*** Patterns (~meta.Pat~) and Cases (~meta.Case~)
*** Name (~meta.Name~)
*** Literals (~meta.Lit~)

** ScalaFiddle Playground
** AST Explorer
   A great way to learn about the structure of /Scalameta syntax trees/ is
   [[https://astexplorer.net/#/gist/ec56167ffafb20cbd8d68f24a37043a9/677e43f3adb93db8513dbe4e2c868dd4f78df4b3][AST explorer]].

** Scaladoc
   Scaladoc documentation for individual modules can be browsed on
   ~static.javadoc.io~:
   - ~Trees~: syntax trees such as ~Source~, ~Term~ and ~Type~.
   - ~Scalameta~: umbrella API with extension methods such as ~.parse[Source]~.
   - ~Testkit~: utility methods for testing with Scalameta.
   - ~Parsers~: internal parser APIs and implementation.
   - ~Common~: internal APIs.

* SemanticDB
** Guide
*** Installation
*** Example
*** What is SemanticDB good for?
*** Producing SemanticDB
**** Scalac compiler plugin
**** Metac
**** sbt

*** Consuming SemanticDB
**** Scala bindings
**** Metap
**** Protoc

*** SemanticDB-based tools
**** Scalafix
**** Metadoc
**** Metals

** Specification
*** Motivation
*** Data Model
**** TextDocument
**** Language
**** URI
**** Range
**** Location
**** Symbol
**** Scope
**** Constant
**** Type
**** Signature
**** SymbolInformation
**** Annotation
**** Access
**** SymbolOccurrence
**** Diagnostic
**** Synthetic
**** Tree

*** Data Schemas
**** Protobuf

*** Languages
**** Notation

*** Scala
**** Symbol
**** Type
**** Signature
**** SymbolInformation
**** Annotation
**** Access
**** SymbolOccurrence
**** Synthetic

*** Java
**** Symbol
**** Type
**** Signature
**** SymbolInformation
**** Annotation
**** Access
**** SymbolOccurrence
**** Synthetic

* Community
** Built with Scalameta
   Feel free to add your project to this list by submitting a pull request here.
   - _Scalafmt_: code formatter.

   - _Scalafix_: refactoring and linting tool.

   - _Metals_: Language Server Protocol implementation.

   - _Metabrowse_: static site generator to browse source code with "Jump to definition"
     and "Find references".

   - _Stags_: Scala tags generator.

   - _AST explorer_: interactive explorer of Scala syntax trees.

   - _Metarpheus_: extract models and apis from a spray-based server.

   - _sbt-ammonite-classpath_: an sbt plug-in to export classpath of an sbt project
     to Ammonite Script, which can be then used in Ammonite REPL or Jupyter Scala.

   - _sbt-example_: an sbt plug-in for creating unit tests from Scaladoc.

   - _sbt-doctest_: generates tests from examples in Scaladoc.

   - _Stryker4s_: Test your tests with mutation testing.

   - _ScalaTs_: SBT plugin based on ScalaJS; generates TypeScript declaration files
     from ScalaJS sources; outputs ECMAScript modules

** Presentations
*** How We Built Tools That Scale to Millions of Lines of Code (ScalaDays New York 2018)
*** Six Steps from Zero to IDE (flatMap(Oslo) and ScalaDays Berlin 2018)
*** SemanticDB for Scala developer tools (ScalaSphere Krakow 2018)
*** Semantic Tooling at Twitter (ScalaDays Copenhagen 2017)
*** Metaprogramming 2.0 (ScalaDays Berlin 2016)
