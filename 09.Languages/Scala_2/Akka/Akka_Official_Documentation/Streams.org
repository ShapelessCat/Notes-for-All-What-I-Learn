#+TITLE: Streams
#+VERSION: 2.7.0
#+STARTUP: overview
#+STARTUP: entitiespretty

* Module Info
* Introduction
** Motivation
** How to read these docs

* Streams Quickstart Guide
** Dependency
** First steps
** Reusable Pieces
** Time-Based Processing
** Reactive Tweets

* Design Principles behind Akka Streams
** What shall users of Akka Streams expect?
** Interoperation with other Reactive Streams implementations
** What shall users of streaming libraries expect?
** The difference between Error and Failure

* Basics and working with Flows
** Dependency
** Introduction
** Core concepts
** Defining and running streams
** Back-pressure explained
** Stream Materialization
** Stream ordering
** Actor Materializer Lifecycle

* Working with Graphs
** Dependency
** Introduction
** Constructing Graphs
** Constructing and combining Partial Graphs
** Constructing Sources, Sinks and Flows from Partial Graphs
** Combining Sources and Sinks with simplified API
** Building reusable Graph components
** Predefined shapes
** Bidirectional Flows
** Accessing the materialized value inside the Graph
** Graph cycles, liveness and deadlocks

* Modularity, Composition and Hierarchy
** Dependency
** Introduction
** Basics of composition and modularity
** Composing complex systems
** Materialized values
** Attributes

* Buffers and working with rate
** Dependency
** Introduction
** Buffers for asynchronous operators
** Buffers in Akka Streams
** Rate transformation

* Context Propagation
** Restrictions
** Creation
** Composition

* Dynamic stream handling
** Dependency
** Introduction
** Controlling stream completion with KillSwitch
** Dynamic fan-in and fan-out with MergeHub, BroadcastHub and PartitionHub

* Custom stream processing
** Dependency
** Introduction
** Custom processing with GraphStage
** Thread safety of custom operators
** Resources and the operator lifecycle
** Extending Flow Operators with Custom Operators

* Futures interop
** Dependency
** Overview

* Actors interop
** Dependency
** Overview

* Reactive Streams Interop
** Dependency
** Overview
** Other implementations

* Error Handling in Streams
** Dependency
** Introduction
** Logging errors
** Recover
** Recover with retries
** Delayed restarts with a backoff operator
** Supervision Strategies

* Working with streaming IO
** Dependency
** Introduction
** Streaming TCP
** Streaming File IO

* StreamRefs - Reactive Streams over the network
** Dependency
** Introduction
** Stream References
** Bulk Stream References
** Serialization of SourceRef and SinkRef
** Configuration

* Pipelining and Parallelism
** Dependency
** Introduction
** Pipelining
** Parallel processing
** Combining pipelining and parallel processing

* Testing streams
** Dependency
** Introduction
** Built-in sources, sinks and operators
** TestKit
** Streams TestKit
** Fuzzing Mode

* Substreams
** Dependency
** Introduction
** Nesting operators
** Flattening operators

* Streams Cookbook
** Dependency
** Introduction
** Working with Flows
** Working with Operators
** Working with rate
** Working with IO

* Configuration
* Operators
** Source operators
** Sink operators
** Additional Sink and Source converters
** File IO Sinks and Sources
** Simple operators
** Flow operators composed of Sinks and Sources
** Asynchronous operators
** Timer driven operators
** Backpressure aware operators
** Nesting and flattening operators
** Time aware operators
** Fan-in operators
** Fan-out operators
** Watching status operators
** Actor interop operators
** Compression operators
** Error handling
** ~Source.actorRef~
** ~Sink.actorRef~
** ~ActorSource.actorRef~
** ~ActorSink.actorRef~
** ~Source.actorRefWithBackpressure~
** ~Sink.actorRefWithBackpressure~
** ~ActorSource.actorRefWithBackpressure~
** ~ActorSink.actorRefWithBackpressure~
** ~aggregateWithBoundary~
** ~alsoTo~
** ~alsoToAll~
** ~Flow.asFlowWithContext~
** ~StreamConverters.asInputStream~
** ~StreamConverters.asJavaStream~
** ~ask~
** ~ActorFlow.ask~
** ~ActorFlow.askWithContext~
** ~ActorFlow.askWithStatus~
** ~ActorFlow.askWithContext~
** ~StreamConverters.asOutputStream~
** ~Sink.asPublisher~
** ~Source.asSourceWithContext~
** ~Source.asSubscriber~
** ~backpressureTimeout~
** ~Balance~
** ~batch~
** ~batchWeighted~
** ~Broadcast~
** ~buffer~
** ~Sink.cancelled~
** ~collect~
** ~Sink.collect~
** ~Sink.collection~
** ~collectType~
** ~Source.combine~
** ~Sink.combine~
** ~Source.completionStage~
** ~Flow.completionStageFlow~
** ~Sink.completionStageSink~
** ~Source.completionStageSource~
** ~completionTimeout~
** ~concat~
** ~concatAllLazy~
** ~concatLazy~
** ~conflate~
** ~conflateWithSeed~
** ~Source.cycle~
** ~Compression.deflate~
** ~delay~
** ~delayWith~
** ~detach~
** ~divertTo~
** ~drop~
** ~dropWhile~
** ~dropWithin~
** ~Source.empty~
** ~expand~
** ~extrapolate~
** ~Source.failed~
** ~filter~
** ~filterNot~
** ~flatMapConcat~
** ~flatMapMerge~
** ~flatMapPrefix~
** ~Flow.flattenOptional~
** ~fold~
** ~Sink.fold~
** ~foldAsync~
** ~Sink.foreach~
** ~Sink.foreachAsync~
** ~Sink.foreachParallel~
** ~Source.apply~
** ~Source.fromCompletionStage~
** ~FileIO.fromFile~
** ~Source.fromFuture~
** ~Source.fromFutureSource~
** ~StreamConverters.fromInputStream~
** ~Source.fromIterator~
** ~fromJavaStream~
** ~StreamConverters.fromJavaStream~
** ~fromMaterializer~
** ~Sink.fromMaterializer~
** ~StreamConverters.fromOutputStream~
** ~FileIO.fromPath~
** ~Source.fromPublisher~
** ~Flow.fromSinkAndSource~
** ~Flow.fromSinkAndSourceCoupled~
** ~Source.fromSourceCompletionStage~
** ~Sink.fromSubscriber~
** ~Source.future~
** ~Flow.futureFlow~
** ~Sink.futureSink~
** ~Source.futureSource~
** ~groupBy~
** ~grouped~
** ~groupedWeighted~
** ~groupedWeightedWithin~
** ~groupedWithin~
** ~Compression.gunzip~
** ~Compression.gzip~
** ~Sink.head~
** ~Sink.headOption~
** ~idleTimeout~
** ~Sink.ignore~
** ~Compression.inflate~
** ~initialDelay~
** ~initialTimeout~
** ~interleave~
** ~interleaveAll~
** ~intersperse~
** ~StreamConverters.javaCollector~
** ~StreamConverters.javaCollectorParallelUnordered~
** ~keepAlive~
** ~Sink.last~
** ~Sink.lastOption~
** ~Source.lazily~
** ~Source.lazilyAsync~
** ~Source.lazyCompletionStage~
** ~Flow.lazyCompletionStageFlow~
** ~Sink.lazyCompletionStageSink~
** ~Source.lazyCompletionStageSource~
** ~Flow.lazyFlow~
** ~Source.lazyFuture~
** ~Flow.lazyFutureFlow~
** ~Sink.lazyFutureSink~
** ~Source.lazyFutureSource~
** ~Flow.lazyInitAsync~
** ~Sink.lazyInitAsync~
** ~Source.lazySingle~
** ~Sink.lazySink~
** ~Source.lazySource~
** ~limit~
** ~limitWeighted~
** ~log~
** ~logWithMarker~
** ~map~
** ~mapAsync~
** ~mapAsyncUnordered~
** ~mapConcat~
** ~mapError~
** ~mapWithResource~
** ~Source.maybe~
** ~merge~
** ~mergeAll~
** ~mergeLatest~
** ~mergePreferred~
** ~mergePrioritized~
** ~mergePrioritizedN~
** ~MergeSequence~
** ~mergeSorted~
** ~monitor~
** ~never~
** ~Sink.never~
** ~Sink.onComplete~
** ~RestartSource.onFailuresWithBackoff~
** ~RestartFlow.onFailuresWithBackoff~
** ~orElse~
** ~Partition~
** ~prefixAndTail~
** ~preMaterialize~
** ~Sink.preMaterialize~
** ~prepend~
** ~prependLazy~
** ~Source.queue~
** ~Sink.queue~
** ~Source.range~
** ~recover~
** ~recoverWith~
** ~recoverWithRetries~
** ~reduce~
** ~Sink.reduce~
** ~Source.repeat~
** ~scan~
** ~scanAsync~
** ~Sink.seq~
** ~setup~
** ~Sink.setup~
** ~Source.single~
** ~PubSub.sink~
** ~sliding~
** ~PubSub.source~
** ~splitAfter~
** ~splitWhen~
** ~statefulMap~
** ~statefulMapConcat~
** ~take~
** ~Sink.takeLast~
** ~takeWhile~
** ~takeWithin~
** ~throttle~
** ~Source.tick~
** ~FileIO.toFile~
** ~FileIO.toPath~
** ~Source.unfold~
** ~Source.unfoldAsync~
** ~Source.unfoldResource~
** ~Source.unfoldResourceAsync~
** ~Unzip~
** ~UnzipWith~
** ~watch~
** ~watchTermination~
** ~wireTap~
** ~RestartSource.withBackoff~
** ~RestartFlow.withBackoff~
** ~RestartSink.withBackoff~
** ~RetryFlow.withBackoff~
** ~RetryFlow.withBackoffAndContext~
** ~zip~
** ~zipAll~
** ~zipLatest~
** ~zipLatestWith~
** ~Source.zipN~
** ~zipWith~
** ~zipWithIndex~
** ~Source.zipWithN~
