#+TITLE: Slick
#+SUBTITLE: Reactive Functional Relational Mapping for Scala
#+VERSION: ???
#+STARTUP: overview
#+STARTUP: entitiespretty

* User Manual
** Introduction
*** What is Slick?
*** Functional Relational Mapping
*** Reactive Applications
*** Plain SQL Support
*** License
*** Next Steps

** Supported Databases
** Getting Started
*** Hello Slick
*** Adding Slick to Your Project
*** Quick Introduction
**** Database Configuration
**** Schema
**** Populating the Database
**** Querying
**** Aggregations
**** Plain SQL / String Interpolation
**** Case Class Mapping
**** Auto-Generated Primary Keys
**** Running Queries

** Core Concepts
*** Scala Queries
*** Database I/O Actions
*** Plain SQL Statements
*** Databases
*** Results
*** Profiles

** Database Configuration
*** Using Typesafe Config
**** Examples

*** Using a JDBC URL
*** Using a Database URL
*** Using a DataSource
*** Using a JNDI Name
*** Database thread pool
*** Connection pools
*** DatabaseConfig
*** Other Multi-DB Patterns
**** A DAO Class
**** The Cake Pattern

** Database I/O Actions
*** Executing Database Actions
**** Materialized
**** Streaming

*** Composing Database I/O Actions
**** Sequential Execution
**** Error Handling
**** Primitives
**** Debugging
**** Transactions and Pinned Sessions {#transactions}
**** Rollbacks

*** JDBC Interoperability

** Schemas
*** Table Rows
*** Table Query
*** Mapped Tables
*** Constraints
*** Data Definition Language
*** Date and Time types

** Queries
*** Expressions
*** Sorting and Filtering
*** Joining and Zipping
**** Applicative joins
**** Monadic joins
**** Zip joins

*** Unions
*** Aggregation
*** Querying
*** Deleting
*** Inserting
*** Updating
*** Upserting
*** Compiled Queries

** Schema Code Generation
*** Overview
*** Standalone use
*** Integrated into sbt
*** Generated Code
*** Customization

** User-Defined Features
*** Scalar Database Functions
*** Other Database Functions And Stored Procedures
*** Using Custom Scalar Types in Queries
*** Using Custom Record Types in Queries
**** Polymorphic Types (e.g. Custom Tuple Types or HLists)
**** Monomorphic Case Classes
**** Combining Mapped Types

** Plain SQL Queries
*** Scaffolding
*** String Interpolation
*** Result Sets
*** Splicing Literal Values
*** Type-Checked SQL Statements

** Coming from ORM to Slick
*** Introduction
*** Configuration
*** Mapping configuration
*** Navigating the object graph
**** Using plain old method calls
**** Query languages

*** Query granularity
*** Read caching
*** Writes (and caching)
*** Relationships
**** Modifying relationships

*** Inheritance
*** Code-generation

** Coming from SQL to Slick
*** Schema
*** Queries in comparison
**** JDBC Query
**** Slick Plain SQL queries
**** Slick type-safe, composable queries

*** Main obstacle: Semantic API differences
*** Scala-to-SQL compilation during runtime
*** Limitations
**** Missing query operators
**** Non-optimal SQL code

*** SQL vs. Slick examples
**** SELECT *
**** SELECT
**** WHERE
**** ORDER BY
**** Aggregations (max, etc.)
**** GROUP BY
**** HAVING
**** Implicit inner joins
**** Explicit inner joins
**** Outer joins (left/right/full)
**** Subquery
**** Scalar value subquery / custom function
**** insert
**** update
**** delete
**** CASE

*** Cookbook
**** Mapping more than 22 fields
**** Track the Number of Query Compilations

*** Upgrade Guides
**** Compatibility Policy
**** Latest changes
**** Upgrade from 3.3.x to 3.4.0
***** Dependency upgrades
***** AsyncExecutor defaults
***** PostgreSQL ~java.time~ mappings

*** Upgrade from 3.2 to 3.3
**** Create / Drop If Not Exists
**** Support for ~java.time~ columns

*** Upgrade from 3.1 to 3.2
**** Profiles vs Drivers
**** Slick Extensions
**** Database Action Scheduling

*** Incompatible changes
**** Changes since com.typesafe.slick:slick-hikaricp:3.4.0
**** Changes since com.typesafe.slick:slick-testkit:3.4.0
**** Changes since com.typesafe.slick:slick:3.4.0
**** Changes since com.typesafe.slick:slick-codegen:3.4.0

*** Database Migrations
**** Scala Forklift
**** slick-migration-api
**** Flyway

*** Slick TestKit
**** Scaffolding
**** Profile
**** Test Harness
**** Database Configuration
**** Testing

*** Markdown Documentation
*** Configuration
**** Logging
**** Monitoring
