#+TITLE: Official TypeScript Documentation
#+VERSION: 3.7
#+STARTUP: overview
#+STARTUP: entitiespretty

* Tutorials
** TypeScript in 5 minutes
*** Installing TypeScript 
*** Building your first TypeScript file
*** Compiling your code 
*** Type annotations
*** Interfaces
*** Classes
*** Running your TypeScript web app
** ASP.NET Core
** Gulp
** Migrating from JavaScript
** React & Webpack

* What's New
** Overview
** TypeScript 3.7
** TypeScript 3.6
** TypeScript 3.5
** TypeScript 3.4
** TypeScript 3.3
** TypeScript 3.2
** TypeScript 3.1
** TypeScript 3.0
** TypeScript 2.9
** TypeScript 2.8
** TypeScript 2.7
** TypeScript 2.6
** TypeScript 2.5
** TypeScript 2.4
** TypeScript 2.3
** TypeScript 2.2
** TypeScript 2.1
** TypeScript 2.0
** TypeScript 1.8
** TypeScript 1.7
** TypeScript 1.6
** TypeScript 1.5
** TypeScript 1.4
** TypeScript 1.3
** TypeScript 1.1

* Handbook
** TODO Basic Types
*** Introduction
*** Boolean
*** Number
*** String
*** Array
*** Tuple
*** Enum
*** Any
*** Void
*** Null and Undefined
*** Never
*** Object
*** Type assertions
*** A note about ~let~

** TODO Variable Declarations
*** ~var~ declarations 
**** Scoping rules
**** Variable capturing quirks

*** ~let~ declarations
**** Block-scoping
**** Re-declarations and Shadowing
**** Block-scoped variable capturing

*** ~const~ declarations
*** ~let~ vs. ~const~
*** Destructuring 
**** Array destructuring
**** Tuple destructuring
**** Object destructuring
**** Property renaming
**** Default values
**** Function declarations
**** Spread

** TODO Interfaces
*** Introduction
*** Our First Interface
*** Optional Properties
*** Readonly properties
**** ~readonly~ vs ~const~

*** Excess Property Checks
*** Function Types
*** Indexable Types
*** Class Types
**** Implementing an interface
**** Difference between the static and instance sides of classes 

*** Extending Interfaces
*** Hybird Types
*** Interfaces Extending Classes

** TODO Classes
*** Introduction
*** Classes
*** Inheritance
*** Public, private, and protected modifiers
**** Public by default
**** Understanding ~private~
**** Understanding ~protected~

*** Readonly modifier
**** Parameter properties

*** Accessors
*** Static Properties
*** Abstract Classes
*** Advanced Techniques
**** Constructor functions
**** Using a class as an interface

** TODO Functions
*** Introduction
*** Functions
*** Function Types
**** Typing the function
**** Writing the function type
**** Inferring the types

*** Optional and Default Parameters
*** Rest Parameters
*** ~this~
**** ~this~ and arrow functions
**** ~this~ parameters
***** ~this~ parameters in callbacks

*** Overloads

** TODO Generics
*** Introduction
*** Hello World of Generics
*** Working with Generic Type variables
*** Generic Types
*** Generic Classes
*** Generic Constraints
**** Using Type Parameters in Generic Constraints
**** Using Class Types in Generics

** TODO Enums
*** Enums
**** Numeric enums
**** String enums
**** Heterogeneous enums
**** Computed and constant members
**** Union enums and enum member types
**** Enums at runtime
**** Enums at compile time
***** Reverse mappings
***** ~const~ enums

**** Ambient enums

** TODO Type Inference
*** Introduction
*** Basics
*** Best common type
*** Contextual Typing

** TODO Type Compatibility
*** Introduction
**** A Note on Soundness

*** Starting out
*** Comparing two functions
**** Function Parameter Bivariance
**** Optional Parameters and Rest Parameters
**** Functions with overloads

*** Enums
*** Classes
**** Private and protected members in classes

*** Generics
*** Advanced Topics
**** Subtype vs Assignment

** TODO Advanced Types
*** Intersection Types
*** Union Types
*** Type Guards and Differentiating Types
**** User-Defined Type Guards
***** Using type predicates
***** Using the in operator

**** typeof type guards
**** instanceof type guards

*** Nullable types
**** Optional parameters and properties
**** Type guards and type assertions

*** Type Aliases
**** Interfaces vs. Type Aliases

*** String Literal Types
*** Numeric Literal Types
*** Enum Member Types
*** Discriminated Unions
**** Exhaustiveness checking

*** Polymorphic this types
*** Index types
**** Index types and index signatures

*** Mapped types
**** Inference from mapped types

*** Conditional Types
**** Distributive conditional types
**** Type inference in conditional types
**** Predefined conditional types

** TODO Symbols
*** Introduction
*** Well-known Symbols

** TODO Iterators and Generators
*** Iterables
**** ~for..of~ statements
**** ~for..of~ vs. ~for..in~ statements
**** Code generation
***** Targeting ES5 and ES3
***** Targeting ECMAScript 2015 and higher

** TODO Modules
*** Introduction
*** Export
**** Exporting a declaration
**** Export statements
**** Re-exports

*** Import
**** Import a single export from a module
**** Import the entire module into a single variable, and use it to access the module exports
**** Import a module for side-effects only

*** Default exports
*** ~export =~ and ~import = require()~
*** Code Generation for Modules
*** Simple Example
*** Optional Module Loading and Other Advanced Loading Scenarios
*** Working with Other JavaScript Libraries
**** Ambient Modules
***** Shorthand ambient modules
***** Wildcard module declarations
***** UMD modules

*** Guidance for structuring modulesi
**** Export as close to top-level as possible
***** If you're only exporting a single class or function, use export default
***** If you're exporting multiple objects, put them all at top-level 
***** Explicitly list imported names
***** Use the namespace import pattern if you're importing a large number of things

**** Re-export to extend
**** Do not use namespaces in modules
**** Red Flags

** TODO Namespaces
*** Introduction
*** First steps
**** Validators in a single file

*** Namespacing
**** Namespaced Validators

*** Splitting Across Files
**** Multi-file namespaces

*** Aliases
*** Working with Other JavaScript Libraries
**** Ambient Namespaces

** TODO Namespaces and Modules
*** Introduction
*** Using Namespaces
*** Using Modules
*** Pitfalls of Namespaces and Modules
**** ~/// <reference>~-ing a module
**** Needless Namespacing
**** Trade-offs of Modules

** Module Resolution
** Declaration Merging
** TODO JSX
*** Introduction
*** Basic Usage
*** The as operator
*** Type Checking
**** Intrinsic elements
**** Value-based elements
**** Function Component
**** Class Component
**** Attribute type checking
**** Children Type Checking

*** The JSX result type
*** Embedding Expressions
*** React integration
*** Factory Functions

** TODO Decorators
*** Introduction
*** Decorators
**** Decorator Factories
**** Decorator Composition
**** Decorator Evaluation
**** Class Decorators
**** Method Decorators
**** Accessor Decorators
**** Property Decorators
**** Parameter Decorators
**** Metadata

** TODO Mixins
*** Introduction
*** Mixin sample
*** Understanding the sample

** TODO Triple-Slash Directives
*** Preprocessing input files
*** Errors
*** Using =--noResolve=
*** =/// <reference types="..." />=
*** =/// <reference lib="..." />=
*** =/// <reference no-default-lib="true"/>=
*** =/// <amd-module />=
*** =/// <amd-dependency />=

** TODO Type Checking JavaScript Files
*** JSDoc types are used for type information
***  Properties are inferred from assignments in class bodies
***  Constructor functions are equivalent to classes
***  CommonJS modules are supported
***  Classes, functions, and object literals are namespaces
***  Object literals are open-ended
***  null, undefined, and empty array initializers are of type any or any[]
***  Function parameters are optional by default
***  Var-args parameter declaration inferred from use of ~arguments~
***  Unspecified type parameters default to ~any~
****  In extends clause
****  In JSDoc references
****  In function calls

***  Supported JSDoc
**** ~@type~
**** ~@param~ (or ~@arg~ or ~@argument~)
**** ~@returns~ (or ~@return~)
**** ~@typedef~
**** ~@callback~
**** ~@template~
**** ~@class~ (or ~@constructor~)
**** ~@this~
**** ~@extends~ (or ~@augments~)
**** ~@enum~

** TODO Utility Types
*** Introduction
*** ~Partial<T>~
*** ~Readonly<T>~
*** ~Record<K,T>~
*** ~Pick<T,K>~
*** ~Omit<T,K>~
*** ~Exclude<T,U>~
*** ~Extract<T,U>~
*** ~NonNullable<T>~
*** ~Parameters<T>~
*** ~ConstructorParameters<T>~
*** ~ReturnType<T>~
*** ~InstanceType<T>~
*** ~Required<T>~
*** ~ThisParameterType~
*** ~OmitThisParameter~
*** ~ThisType<T>~


* Declaration Files
** Introduction
** Library Structures
** By Example
** Do's and Don'ts
** Deep Dive
** Templates
** Publishing
** Consumption

* Project Configuration
** =tsconfig.json=
** Compiler Options
** Project References
** Compiler Options in MSBuild
** Integrating with Build Tools
** Nightly Builds
