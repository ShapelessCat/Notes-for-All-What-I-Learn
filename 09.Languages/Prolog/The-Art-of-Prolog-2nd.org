#+TITLE: The Art of Prolog
#+SUBTITLE: Advanced Programming Techniques
#+VERSION: 2nd
#+AUTHOR: Leon Sterling, Ehud Shapiro
#+Foreword: David H. D. Warren
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Series Foreword
  The logic programming approach to computing investigates the use of logic as a
  programming language and explores computational models based on /controlled
  deduction/.

* TODO Foreword
* TODO Preface
* TODO Preface to First Edition
* TODO Introduction
* TODO I Logic Programs
  - A logic program :: a set of /axioms/, or /rules/, /defining relations/
       between objects.

  - A computation (of a logic program) :: a deduction of consequences of the
       protram.

  - A program defines a set of consequences, which is its meaning.

** TODO Chapter 1  Basic Constructs
   _THREE_ basic statements: /facts/, /rules/, and /queries/.

   There is a _SINGLE_ data structure: the /logical term/.

*** DONE 1.1 /Facts/
    CLOSED: [2017-08-15 Tue 02:59]
    - /facts/ :: a means of stating that a relation holds between objects.

    - An example of /facts/: ~father(abraham, isaac).~

    - /predicate/ :: another name for a relation.

    - /atoms/ :: names of individuals.

    - _A CASE CONVENTION_:
      names of both /predicates/ and /atoms/ in facts begin with a lowercase
      letter.

    - A finite set of facts constitutes a /program/.
      This is the simplest form of logic program.

      A set of facts is also a description of a situation.

      This insight is the basis of database programming, to be discussed in the
      next chapter.

*** TODO 1.2 /Queries/
    - /queries/ :: a means of retrieving information from a logic program.

    - A /query/ asks whether a certain relation holds between objects.

    - /queries/ and /facts/ look the same, but they can be disinguished by the
      context.

    - /goal/ :: the entity without the period or question mark.

    - A fact ~P.~ states that the goal P is true.

    - A query ~P?~ asks whether the goal P is true.

    - A simple /query/ consists of a single goal.

    - =TODO=
    - =TODO=
    - =TODO=
    - =TODO=

*** TODO 1.3 The Logical Variable, Substitutions, and Instances
    - /a logical variable/ :: an unspecified individual.

    - A logical variable is used _accordingly_:
      + Find out who is =abraham='s father. You kand keep asking
        ~father(abraham, milcah)?~, ..., ~father(abraham, isaac)?~ until an
        answer true/yes is given.

        However, with variables a better way to express the query is
        ~father(abraham, X)?~

        Used in this way
        /variables/ are _a means of summarizing many queries_.

    - =IMPORTANT= Variables in logic programs behave differently from variables
      in conventional programming languages.
        They stand for an unspecified but single entity rather than for a store
      location in memory.

    - Having introduced variables, we can define a /term/ -- the single data
      structure in logic programs.

      The definition is inductive.

      /Constants/ and /variables/ are /terms/.

    - /compound terms (structures)/ are /terms/.

    - /A compound term/ comprises a /functor/ (called _the principle functor of
      the term_) and a sequence of one or more arguments.

    - /A functor/ is characterized by its name, which is an /atom/, and its
      /arity/.

    - /ground/ :: NO variable /queries/, /goals/, and /more generally terms/.

    - /nonground/ :: with variables /queries/, /goals/, and /more generally
                     terms/.

    - /substitution/ :: =TODO= =TODO=

    - /instance/ :: /A/ is an instance of /B/ if there is a substitution \theta{} such
                    that A = B\theta{}.

      For example,
      1. the goal ~father(abraham, isaac)~ is an instance of ~father(abraham, X)~
         by this definition.

      2. ~mother(sarah, isaac)~ is an instance of ~mother(X, Y)~ under the subs-
         titution ~{X=sarah, Y=isaac}~.

*** TODO 1.4 Existential Queries
    - Logically speaking, variables in queries are /existentially quantified/,
      which means,
      + intuitively, that the query ~father(abraham, X)?~ reads: "Does there
        exist an X such that ~abraham~ is the father of ~X~?"

      + more generally, a query ~p(T_1 , T_2 , ..., T_n)?~, which contains the
        variables ~X_1~, ~X_2~, ..., ~X_k~ reads:
        "Are there ~X_1~, ~X_2~, ..., ~X_k~ such that ~p(T_1, T_2, ..., T_n)?~"

    - For convenience, /existential quantification/ is usually omitted.

    - /generalization/ :: A deduction rule

*** TODO 1.5 Universal Facts
*** TODO 1.6 Conjunctive Queries and Shared Variables
*** TODO 1.7 Rules
*** TODO 1.8 A Simple Abstract Interpreter
*** TODO 1.9 The Meaning of a Logic Program
*** TODO 1.10 Summary

** TODO Chapter 2  Database Programming
*** 2.1 Simple Databases
*** 2.2 Structured Data and Data Abstraction
*** 2.3 Recursive Rules
*** 2.4 Logic Programs and the Relational Database Model
*** 2.5 Background
** TODO Chapter 3  Recursive Programming
*** 3.1 Arithmetic
*** 3.2 Lists
*** 3.3 Composing Recursive Programs
*** 3.4 Binary Trees
*** 3.5 Manipulating Symbolic Expressions
*** 3.6 Background
** TODO Chapter 4  The Computation Model of Logic Programs
*** 4.1 Unification
*** 4.2 An Abstract Interpreter for Logic Programs
*** 4.3 Background
** TODO Chapter 5  Theory of Logic Programs
*** 5.1 Semantics
*** 5.2 Program Correctness
*** 5.3 Complexity
*** 5.4 Search Trees
*** 5.5 Negation in Logic Programming
*** 5.6 Background
* TODO II The Prolog Language
** TODO Chapter 6  Pure Prolog
*** 6.1 The Execution Model of Prolog
*** 6.2 Comparison to Conventional Programming Languages
*** 6.3 Backgound
** TODO Chapter 7  Programming in Pure Prolog
*** 7.1 Rule Order
*** 7.2 Termination
*** 7.3 Goal Order
*** 7.4 Redundant Solutions
*** 7.5 Recursive Programming in Pure Prolog
*** 7.6 Background
** TODO Chapter 8  Arithmetic
*** 8.1 System Predicates for Arithmetic
*** 8.2 Arithmetic Logic Programs Revisited
*** 8.3 Transforming Recursion into Iteration
*** 8.4 Background
** TODO Chapter 9  Structure Inspection
*** 9.1 Type Predicates
*** 9.2 Accessing Compound Terms
*** 9.3 Background
** TODO Chapter 10 Meta-Logical Predicates
*** 10.1 Meta-Logical Type Predicates
*** 10.2 Comparing Nonground Terms
*** 10.3 Variables as Objects
*** 10.4 The Meta-Variable Facility
*** 10.5 Background
** TODO Chapter 11 Cuts and Negation
*** 11.1 Green Cuts: Expressing Determinism
*** 11.2 Tall Recursion Optimization
*** 11.3 Negation
*** 11.4 Red Cuts: Omitting Explicit Conditions
*** 11.5 Default Rules
*** 11.6 Cuts for Efficiency
*** 11.7 Background
** TODO Chapter 12 Extra-Logical Predicates
*** 12.1 Input/Output
*** 12.2 Program Access and Manipulation
*** 12.3 Memo-Functions
*** 12.4 Interactive Programs
*** 12.5 Failure-Driven Loops
*** 12.6 Background
** TODO Chapter 13 Program Development
*** 13.1 Programming Style and Layout
*** 13.2 Reflections on Program Development
*** 13.3 Systematizing Program Construction
*** 13.4 Background
* TODO III Advanced Prolog Programming Techniques
** TODO Chapter 14 Nondeterministic Programming
*** 14.1 Generate-and-Test
*** 14.2 Don't-Care and Don't-Know Nondeterminism
*** 14.3 Artificial Intelligence Classics: ANALOGY, ELIZA, and McSAM
*** 14.4
** TODO Chapter 15 Incomplete Data Structures
*** 15.1 Difference-Lists
*** 15.2 Difference-Structures
*** 15.3 Dictionaries
*** 15.4 Queues
*** 15.5 Background
** TODO Chapter 16 Second-Order Programming
*** 16.1 All-Solutions Predicates
*** 16.2 Applications of Set Predicates
*** 16.3 Other Second-Order Predicates
*** 16.4 Background
** TODO Chapter 17 Interpreters
*** 17.1 Interpreters for Finite State Machines
*** 17.2 Meta-Interpreters
*** 17.3 Enhanced Meta-Interpreters for Debugging
*** 17.4 An Explanation Shell for Rule-Based Systems
*** 17.5 Background
** TODO Chapter 18 Program Transformation
*** 18.1 Unfold/Fold Transformations
*** 18.2 Partial Reduction
*** 18.3 Code Walking
*** 18.4 Background
** TODO Chapter 19 Logic Grammars
*** 19.1 Definite Clause Grammars
*** 19.2 A Grammar Interpreter
*** 19.3 Application to Natural Language Understanding
*** 19.4 Background
** TODO Chapter 20 Search Techniques
*** 20.1 Searching State-Space Graphs
*** 20.2 Searching Game Trees
*** 20.3 Background
* TODO IV Applications
** TODO Chapter 21 Game-Playing Programs
*** 21.1 Mastermind
*** 21.2 Nim
*** 21.3 Kalah
*** 21.4 Background

** TODO Chapter 22 A Credit Evaluation Expert System
*** 22.1 Developing the System
*** 22.2 Background
** TODO Chapter 23 An Equation Solver
*** 23.1 An Overview of Equation Solving
*** 23.2 Factorization
*** 23.3 Isolation
*** 23.4 Polynomial
*** 23.5 Homogenization
*** 23.6 Background
** TODO Chapter 24 A Compiler
*** 24.1 Overview of the Compiler
*** 24.2 The Parser
*** 24.3 The Code Generator
*** 24.4 The Assembler
*** 24.5 Background
* Appendix A  Operators
* References
* Index
