#+TITLE: Common Lisp Recipes
#+SUBTITLE: A Problem-Solution Approach
#+AUTHOR: Edmund Weitz
#+YEAR: 2016
#+STARTUP: overview
#+STARTUP: entitiespretty

* About the Author - XVII
* About the Technical Reviewer - XIX
* Preface - XXI
** Who This Book Is For - XXI
** Who This Book Is (Probably) Not For - XXII
** How to Read This Book - XXII
** What’s In and What Not - XXIII
** The HyperSpec - XXIV
** Which Implementation - XXIV
** Source Code - XXV
** The Index - XXV
** Typographical Conventions - XXV
** Acknowledgements - XXVI

* 1. Symbols and Packages - 1
** 1-1. Understanding the Role of Packages and the Symbol Nomenclature - 1
** 1-2. Making Unique Symbols - 5
** 1-3. Making Symbols Inaccessible - 9
*** How Can We Fix This? - 11

** 1-4. Avoiding Name Conflicts - 12
*** When Name Conflicts Do Not Occur - 15

** 1-5. Using Symbols As Stand-Ins for Arbitrary Forms - 15
** 1-6. Searching for Symbols by Name - 17
** 1-7. Iterating Through All Symbols of a Package - 19
*** What To Do If You Don’t Like LOOP - 20

** 1-8. Understanding COMMON LISP's Case (In)Sensitivity - 21
*** Style Hint: Don't Use CamelCase! - 25

** 1-9. Using Symbols As String Substitutes - 26
*** So, What Should You Use? - 27

** 1-10. "Overloading" of Standard COMMON LISP Operators - 28

* 2. Conses, Lists, and Trees - 31
** 2-1. Understanding Conses - 31
*** List Access - 34
*** Testing Whether Something Is a Cons or a List - 35

** 2-2. Creating Lists - 37
*** Converting Vectors to Lists - 38

** 2-3. Transposing a Matrix - 39
** 2-4. Using List Interpolation - 40
** 2-5. Adding Objects to the End of a List - 42
*** The Tail Wagging the List - 44

** 2-6. “Splicing” into a List - 45
** 2-7. Detecting Shared Structure in Lists - 49
*** Isolating the Non-Shared Part - 51

** 2-8. Working with Trees - 51
*** More Complicated Trees - 54
*** COMMON LISP's Standard Tree Functions - 55

** 2-9. Working with Stacks - 55
** 2-10. Implementing a Queue - 56
** 2-11. Destructuring and Pattern Matching - 58

* 3. Strings and Characters - 61
** 3-1. Getting the ASCII Code of a Character - 61
*** The Other Way Around - 63
*** The Limit - 63

** 3-2. Naming Characters - 63
** 3-3. Using Different Character Encodings - 65
** 3-4. Comparing Strings or Characters - 67
*** Internationalization - 70

** 3-5. Escaping Characters in String Literals and Variable Interpolation - 71
*** Is It Still a Literal? - 72

** 3-6. Controlling Case - 72
*** What About Unicode? - 74

** 3-7. Accessing or Modifying a Substring - 75
** 3-8. Finding a Character or a Substring Within a String - 77
** 3-9. Trimming Strings - 77
** 3-10. Processing a String One Character at a Time - 79
** 3-11. Joining Strings - 81
** 3-12. Reading CSV Data - 83

* 4. Numbers and Math - 87
** 4-1. Using Arbitrarily Large Integers - 87
** 4-2. Understanding Fixnums - 89
** 4-3. Performing Modular Arithmetic - 92
*** Efficiency Considerations - 93

** 4-4. Switching Bases - 94
** 4-5. Performing Exact Arithmetic with Rational Numbers - 96
*** Various Ways of Converting Numbers to Integers - 98
*** How Not to Use FLOOR and Friends - 99
*** Converting Floating-Point Numbers to Rationals and Vice Versa 99
*** Mixing Rationals and Floats - 101

** 4-6. Controlling the Default Float Format - 102
** 4-7. Employing Arbitrary Precision Floats - 104
** 4-8. Working with Complex Numbers - 106
** 4-9.  Parsing Numbers - 109
** 4-10. Testing Whether Two Numbers Are Equal - 111
**** Don't Ever Use EQ with Numbers! - 112

** 4-11. Computing Angles Correctly - 113
*** 4-12. Calculating Exact Square Roots - 115

* 5. Arrays and Vectors - 117
** 5-1. Working with Multiple Dimensions - 117
** 5-2. Understanding Vectors and Simple Arrays - 119
** 5-3. Obtaining the Size of an Array - 120
** 5-4. Providing Initial Contents - 121
*** A Warning About Identical Objects - 122

** 5-5. Treating Arrays As Vectors - 123
** 5-6. Making the Length of Vectors Flexible - 125
** 5-7. Adjusting Arrays - 127
** 5-8. Using an Array As a “Window” into Another Array - 129
** 5-9. Restricting the Element Type of an Array - 131
*** Upgrading Element Types - 133

** 5-10. Copying an Array - 134
*** A Warning About Object Identity - 135

* 6. Hash Tables, Maps, and Sets - 137
** 6-1. Understanding the Basics of Hash Tables - 137
*** Why Does GETHASH Return Two Values? - 139
*** How Many Entries Does the Hash Table Have? - 140

** 6-2. Providing Default Values For Hash Table Lookups - 140
** 6-3. Removing Hash Table Entries - 142
** 6-4. Iterating Through a Hash Table - 143
*** Don't Rely on Any Order! - 146
*** Don't Modify While You're Iterating! - 147
*** Can't This Be More Concise, Please? - 147

** 6-5. Understanding Hash Table Tests and Defining Your Own - 148
*** What Is SXHASH For? - 152

** 6-6. Controlling Hash Table Growth - 152
** 6-7. Getting Rid of Hash Table Entries Automatically - 155
** 6-8. Representing Maps As Association Lists - 158
*** Combining Lookup and Manipulation - 161
*** Why Would Anybody Prefer Alists over Hash Tables? - 162

** 6-9. Representing Maps As Property Lists - 163
*** When to Prefer Plists over Alists - 165
*** The Plist of a Symbol - 166

** 6-10. Working with Sets - 166
*** Representing Sets As Hash Tables - 169
*** Representing Sets As Bit Patterns - 169

* 7. Sequences and Iteration - 171
** 7-1. Filtering a Sequence . . . . . . . . . . . . . . . . . . .171
** 7-2. Searching a Sequence . . . . . . . . . . . . . . . . . . . .          172
*** 7-3. Sorting and Merging Sequences . . . . . . . . . . . . . .             175
*** 7-4. Mixing Different Sequence Types . . . . . . . . . . . . . .           177
*** 7-5. Re-Using a Part of a Sequence . . . . . . . . . . . . . . .           177
*** 7-6. Repeating Some Values Cyclically . . . . . . . . . . . . .            179
*** Alternatives . . . . . . . . . . . . . . . . . . . . . . .                 181
*** 7-7. Counting Down . . . . . . . . . . . . . . . . . . . . . . .           182
*** 7-8. Iterating over “Chunks” of a List . . . . . . . . . . . . . .         184
*** 7-9. Closing over Iteration Variables . . . . . . . . . . . . . .          186
*** 7-10. “Extending” Short Sequences in Iterations . . . . . . . .            187
*** 7-11. Breaking out of LOOP . . . . . . . . . . . . . . . . . . . . .       188
*** 7-12. Making Sense of the MAP... Zoo . . . . . . . . . . . . . .           191
*** The Sequence Variants . . . . . . . . . . . . . . . . .                    194
*** 7-13. Defining Your Own Sequence Types . . . . . . . . . . . .             194
*** 7-14. Iterating with ITERATE . . . . . . . . . . . . . . . . . . . .       196
*** 7-15. Iterating with SERIES . . . . . . . . . . . . . . . . . . . . .      200
*** What the Example Does . . . . . . . . . . . . . . . .                      201
*** 8. The Lisp Reader . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
*** 8-1. Employing the Lisp Reader for Your Own Code . . . . .                 203
*** Why READ Is Potentially Dangerous . . . . . . . . .                        205
*** What READ Doesn’t Do . . . . . . . . . . . . . . . . .                     205
*** The Optional Arguments to READ . . . . . . . . . . .                       206
*** Go Wild! . . . . . . . . . . . . . . . . . . . . . . . . .                 206
*** 8-2. Troubleshooting Literal Object Notation . . . . . . . . . .           206
*** This Also Applies to Strings! . . . . . . . . . . . . .                    208
*** 8-3. Evaluating Forms at Read Time . . . . . . . . . . . . . .             208
*** What to Look Out For . . . . . . . . . . . . . . . . .                     210
*** Alternatives . . . . . . . . . . . . . . . . . . . . . . .                 210
*** 8-4. Embedding Literal Arrays into Your Code . . . . . . . .               211
*** The Usual Warning . . . . . . . . . . . . . . . . . . .                    212
*** 8-5. Understanding the Different Ways to Refer to a Function               213
*** 8-6. Repeating Something You Already Typed . . . . . . . . .               214
*** They Don’t Only Look Identical, They Are Identical!                        216
*** 8-7. Safely Experimenting with Readtables . . . . . . . . . . .            216
*** Temporarily Switching to Standard IO Syntax . . .                          218
*** 8-8. Changing the Syntax Type of a Character . . . . . . . . .             219
*** The Six Syntax Types . . . . . . . . . . . . . . . . . .                   220
*** How to Actually Change the Syntax Type . . . . . .                         222
*** Some Things Never Change . . . . . . . . . . . . . .                       222
*** 8-9. Creating Your Own Reader Macros . . . . . . . . . . . .               223
*** What Reader Macro Functions Do . . . . . . . . . .                         224
*** 8-10. Working with Dispatching Macro Characters . . . . . . .              226
*** 8-11. Preserving Whitespace . . . . . . . . . . . . . . . . . . . .        228
