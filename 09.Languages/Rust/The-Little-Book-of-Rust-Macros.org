#+TITLE: The Little Book of Rust Macros
#+VERSION: veykril.github.io/tlborm/
#+AUTHORS: Daniel Keep and continued by Lukas Wirth
#+STARTUP: overview
#+STARTUP: entitiespretty
#+STARTUP: indent

* Introduction
* DONE 1. Syntax Extensions
CLOSED: [2023-10-21 Sat 19:17]
** DONE 1.1. Source Analysis
CLOSED: [2023-10-21 Sat 17:59]
** DONE 1.2. Macros in the Ast
CLOSED: [2023-10-21 Sat 17:59]
** DONE 1.3. Expansion
CLOSED: [2023-10-21 Sat 19:12]
** DONE 1.4. Hygiene
CLOSED: [2023-10-21 Sat 19:12]
** DONE 1.5. Debugging
CLOSED: [2023-10-21 Sat 19:17]

* TODO 2. Declarative Macros
** DONE 2.1. A Methodical Introduction
CLOSED: [2023-10-23 Mon 17:58]
This chapter will introduce Rust's _declarative Macro-By-Example system_ by
explaining the system as a whole.

It will do so by
1. going into the construct's syntax and its key parts and then
2. following it up with more general information that one should at least be
   aware of.

*** ~macro_rules!~
~macro_rules!~ is itself a /syntax extension/, meaning _it is technically *NOT*
part of the Rust syntax._

- ~macro_rules!~ uses the following forms:
  #+begin_src text
    macro_rules! $name {
        $rule0 ;
        $rule1 ;
        // ...
        $ruleN ;
    }
  #+end_src
  * There MUST BE *at least one rule*, and

  * you can *omit* the semicolon after the *LAST rule*.

  * You can use brackets (~[]~), parentheses (~()~) or braces (~{}~).
    =FIXME: DOC=

  * Each "rule" looks like the following:
    ~($matcher) => {expansion}~
    + Like before, the types of parentheses used _can be ANY kind_,
      BUT
        _parentheses_ around the ~matcher~ and
        _braces_ around the ~expansion~
      are _somewhat conventional_.

    + transcriber :: the ~expansion~ part of a /rule/.

*** Matching
*** Metavariables
*** Repetitions
*** Metavariable Expressions

** DONE 2.2. A Practical Introduction
CLOSED: [2023-10-23 Mon 17:58]
*** A Little Context
*** Construction
*** Indexing and Shuffling
*** Substitution
*** Being Hygienic

** DONE 2.3. Minutiae
CLOSED: [2023-10-23 Mon 17:58]
*** 2.3.1. Fragment Specifiers
**** block
**** expr
**** ident
**** item
**** lifetime
**** literal
**** meta
**** pat
**** pat_param
**** path
**** stmt
**** tt
**** ty
**** vis

*** 2.3.2. Metavariables and Expansion Redux
*** 2.3.3. Metavariable Expressions
**** ~$$~
**** ~${count(ident, depth)}~
**** ~${index(depth)}~
**** ~${length(depth)}~
**** ~${ignore(ident)}~

*** 2.3.4. Hygiene
**** ~$crate~

*** 2.3.5. Non-Identifier Identifiers
*** 2.3.6. Debugging
*** 2.3.7. Scoping
**** Textual Scope
**** Path-Based Scope

*** 2.3.8. Import/Export
**** Edition 2015
**** Edition 2018

** TODO 2.4. Patterns
*** 2.4.1. Callbacks
*** 2.4.1. Incremental TT Munchers
**** Performance

*** 2.4.3. Internal Rules
**** Performance

*** 2.4.4. Push-down Accumulation
**** Performance

*** 2.4.5. Repetition Replacement
*** 2.4.6. TT Bundling

** TODO 2.5. Building Blocks
*** 2.5.1. AST Coercion
*** 2.5.2. Counting
***** Repetition with replacement
***** Recursion
***** Slice length
***** Array length
***** Enum counting
***** Bit twiddling

**** 2.5.2.1 Abacus Counting

*** 2.5.3. Parsing Rust
**** Function
***** Method

**** Struct
**** Enum

** TODO 2.6. Macros 2.0
*** Syntax
**** ~macro~ are proper items

*** Hygiene

* TODO 3. Procedural Macros
** 3.1. A Methodical Introduction
*** 3.1.1. Function-like
*** 3.1.2. Attribute
*** 3.1.3. Derive

** 3.2. A Practical Introduction
*** 3.2.1. Function-like
*** 3.2.2. Attribute
*** 3.2.3. Derive

** 3.3. Third-Party Crates
** 3.4. Hygiene and Spans
** 3.5. Techniques
*** 3.5.1. Testing

* Glossary
