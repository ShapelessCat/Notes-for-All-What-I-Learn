#+TITLE: Rust for Rustaceans
#+SUBTITLE: Idiomatic Programming for Experienced Developers
#+VERSION: 2022
#+AUTHOR: Jon Gjengset
#+STARTUP: overview
#+STARTUP: entitiespretty

* FOREWORD - xv
* PREFACE - xvii
* ACKNOWLEDGMENTS - xix
* INTRODUCTION - xxi
** What's in the Book - xxii

* 1 FOUNDATIONS - 1
** Talking About Memory - 1
*** Memory Terminology - 2
*** Variables in Depth - 3
**** High-Level Model - 3
**** Low-Level Model - 4

*** Memory Regions - 5
**** The Stack - 5
**** The Heap - 6
**** Static Memory - 6

** Ownership - 7
** Borrowing and Lifetimes - 9
*** Shared References - 9
*** Mutable References - 10
*** Interior Mutability - 12
*** Lifetimes - 12

** Summary - 17

* 2 TYPES - 19
** Types in Memory - 19
*** Alignment - 20
*** Layout - 21
*** Complex Types - 23
*** Dynamically Sized Types and Wide Pointers - 23

** Traits and Trait Bounds - 24
*** Compilation and Dispatch - 24
*** Generic Traits - 28
*** Coherence and the Orphan Rule - 28
*** Trait Bounds - 31
*** Marker Traits - 33

** Existential Types - 34
** Summary - 35
* 3 DESIGNING INTERFACES - 37
** Unsurprising - 38
*** Naming Practices - 38
*** Common Traits for Types - 39
*** Ergonomic Trait Implementations - 40
*** Wrapper Types - 40

** Flexible - 41
*** Generic Arguments - 43
*** Object Safety - 44
*** Borrowed vs . Owned - 45
*** Fallible and Blocking Destructors - 46

** Obvious - 47
*** Documentation - 47
*** Type System Guidance - 48

** Constrained - 50
*** Type Modifications - 50
*** Trait Implementations - 51
*** Hidden Contracts - 53

** Summary - 56

* 4 ERROR HANDLING - 57
** Representing Errors - 58
*** Enumeration - 58
*** Opaque Errors - 59
*** Special Error Cases - 61

** Propagating Errors - 62
** Summary - 65

* 5 PROJECT STRUCTURE - 67
** Features - 67
*** Defining and Including Features - 68
*** Using Features in Your Crate - 70

** Workspaces - 70
** Project Configuration - 73
*** Crate Metadata - 73
*** Build Configuration - 73

** Conditional Compilation - 78
** Versioning - 80
*** Minimum Supported Rust Version - 81
*** Minimal Dependency Versions - 82
*** Changelogs - 83
*** Unreleased Versions - 83

** Summary - 84
* 6 TESTING - 85
** Rust Testing Mechanisms - 86
*** The Test Harness - 86
*** ~#[cfg(test)]~ - 88
*** Doctests - 90

** Additional Testing Tools - 92
*** Linting - 92
*** Test Generation - 93
*** Test Augmentation - 96
*** Performance Testing - 97

** Summary - 100

* 7 MACROS - 101
** Declarative Macros - 102
*** When to Use Them - 102
*** How They Work - 104
*** How to Write Declarative Macros - 106

** Procedural Macros - 109
*** Types of Procedural Macros - 109
*** The Cost of Procedural Macros - 110
*** So You Think You Want a Macro - 111
*** How Do They Work? - 113

** Summary - 115

* 8 ASYNCHRONOUS PROGRAMMING - 117
** What's the Deal with Asynchrony? - 118
*** Synchronous Interfaces - 118
*** Multithreading - 119
*** Asynchronous Interfaces - 120
*** Standardized Polling - 121

** Ergonomic Futures - 121
*** async/await - 124
*** Pin and Unpin - 126

** Going to Sleep - 133
*** Waking Up - 133
*** Fulfilling the Poll Contract - 134
*** Waking Is a Misnomer - 136
*** Tasks and Subexecutors - 136

** Tying It All Together with spawn - 138
** Summary - 140

* 9 UNSAFE CODE - 141
** The unsafe Keyword - 142
** Great Power - 144
*** Juggling Raw Pointers - 144
*** Calling Unsafe Functions - 147
*** Implementing Unsafe Traits - 151

** Great Responsibility - 153
*** What Can Go Wrong? - 154
*** Validity - 155
*** Panics - 158
*** Casting - 159
*** The Drop Check - 160

** Coping with Fear - 163
*** Manage Unsafe Boundaries - 163
*** Read and Write Documentation - 164
*** Check Your Work - 165

** Summary - 166

* 10 CONCURRENCY (AND PARALLELISM) - 167
** The Trouble with Concurrency - 168
*** Correctness - 168
*** Performance - 169

** Concurrency Models - 172
*** Shared Memory - 172
*** Worker Pools - 173
*** Actors - 174

** Asynchrony and Parallelism - 175
** Lower-Level Concurrency - 177
*** Memory Operations - 177
*** Atomic Types - 178
*** Memory Ordering - 178
*** Compare and Exchange - 184
*** The Fetch Methods - 187

** Sane Concurrency - 188
*** Start Simple - 188
*** Write Stress Tests - 189
*** Use Concurrency Testing Tools - 189

** Summary - 192

* 11 FOREIGN FUNCTION INTERFACES - 193
** Crossing Boundaries with extern - 194
*** Symbols - 194
*** Calling Conventions - 198

** Types Across Language Boundaries - 200
*** Type Matching - 200
*** Allocations - 202
*** Callbacks - 204
*** Safety - 204

** bindgen and Build Scripts - 207
** Summary - 209

* 12 RUST WITHOUT THE STANDARD LIBRARY - 211
** Opting Out of the Standard Library - 212
** Dynamic Memory Allocation - 213
** The Rust Runtime - 215
*** The Panic Handler - 215
*** Program Initialization - 216
*** The Out-of-Memory Handler - 216

** Low-Level Memory Accesses - 217
** Misuse-Resistant Hardware Abstraction - 219
** Cross-Compilation - 220
** Summary - 222

* 13 THE RUST ECOSYSTEM - 223
** What's Out There? - 224
*** Tools - 224
*** Libraries - 225
*** Rust Tooling - 228
*** The Standard Library - 230

** Patterns in the Wild - 233
*** Index Pointers - 233
*** Drop Guards - 234
*** Extension Traits - 236
*** Crate Preludes - 236

** Staying Up to Date - 237
** What Next? - 238
*** Learn by Watching - 239
*** Learn by Doing - 240
*** Learn by Reading - 241
*** Learn by Teaching - 242

** Summary - 243

* INDEX - 245
