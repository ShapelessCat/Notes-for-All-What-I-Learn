#+TITLE: Rust Atomics and Locks
#+SUBTITLE: Low-Level Concurrency in Practice
#+VERSION: 2023
#+AUTHOR: Mara Bos
#+STARTUP: indent
#+STARTUP: overview
#+STARTUP: entitiespretty

* Foreword - xi
* Preface - xiii
* 1. Basics of Rust Concurrency - 1
** Threads in Rust - 2
** Scoped Threads - 5
** Shared Ownership and Reference Counting - 7
*** Statics - 7
*** Leaking - 8
*** Reference Counting - 8

** Borrowing and Data Races - 11
** Interior Mutability - 13
*** Cell - 14
*** RefCell - 14
*** Mutex and RwLock - 15
*** Atomics - 15
*** UnsafeCell - 16

** Thread Safety: Send and Sync - 16
** Locking: Mutexes and RwLocks - 18
*** Rust's Mutex - 18
*** Lock Poisoning - 21
*** Reader-Writer Lock - 22

** Waiting: Parking and Condition Variables - 24
*** Thread Parking - 24
*** Condition Variables - 26

** Summary - 29

* 2. Atomics - 31
** Atomic Load and Store Operations - 32
*** Example: Stop Flag - 32
*** Example: Progress Reporting - 33
*** Example: Lazy Initialization - 35

** Fetch-and-Modify Operations - 36
*** Example: Progress Reporting from Multiple Threads - 38
*** Example: Statistics - 39
*** Example: ID Allocation - 41

** Compare-and-Exchange Operations - 42
*** Example: ID Allocation Without Overflow - 44
*** Example: Lazy One-Time Initialization - 45

** Summary - 47

* 3. Memory Ordering - 49
** Reordering and Optimizations - 49
** The Memory Model - 51
** Happens-Before Relationship - 51
*** Spawning and Joining - 53

** Relaxed Ordering - 54
** Release and Acquire Ordering - 57
*** Example: Locking - 60
*** Example: Lazy Initialization with Indirection - 62

** Consume Ordering - 65
** Sequentially Consistent Ordering - 66
** Fences - 67
** Common Misconceptions - 71
** Summary - 73

* 4. Building Our Own Spin Lock - 75
** A Minimal Implementation - 75
** An Unsafe Spin Lock - 78
** A Safe Interface Using a Lock Guard - 80
** Summary - 83

* 5. Building Our Own Channels - 85
** A Simple Mutex-Based Channel - 85
** An Unsafe One-Shot Channel - 87
** Safety Through Runtime Checks - 90
** Safety Through Types - 94
** Borrowing to Avoid Allocation - 98
** Blocking - 101
** Summary - 104

* 6. Building Our Own "Arc" - 105
** Basic Reference Counting - 105
*** Testing It - 109
*** Mutation - 110

** Weak Pointers - 111
*** Testing It - 117

** Optimizing - 118
** Summary - 125

* 7. Understanding the Processor - 127
** Processor Instructions - 128
*** Load and Store - 132
*** Read-Modify-Write Operations - 133
*** Load-Linked and Store-Conditional Instructions - 137

** Caching - 141
*** Cache Coherence - 142
*** Impact on Performance - 144

** Reordering - 149
** Memory Ordering - 150
*** x86-64: Strongly Ordered - 151
*** ARM-64: Weakly Ordered - 153
*** An Experiment - 155
*** Memory Fences - 158

** Summary - 159

* 8. Operating System Primitives - 161
** Interfacing with the Kernel - 161
** POSIX - 163
*** Wrapping in Rust - 164

** Linux - 166
*** Futex - 167
*** Futex Operations - 169
*** Priority Inheritance Futex Operations - 173

** macOS - 174
*** os_unfair_lock - 175

** Windows - 175
*** Heavyweight Kernel Objects - 175
*** Lighter-Weight Objects - 176
*** Address-Based Waiting - 177

** Summary - 179

* 9. Building Our Own Locks - 181
** Mutex - 183
*** Avoiding Syscalls - 186
*** Optimizing Further - 188
*** Benchmarking - 191

** Condition Variable - 193
*** Avoiding Syscalls - 198
*** Avoiding Spurious Wake-ups - 200

** Reader-Writer Lock - 203
*** Avoiding Busy-Looping Writers - 206
*** Avoiding Writer Starvation - 208

** Summary - 211

* 10. Ideas and Inspiration - 213
** Semaphore - 213
** RCU - 214
** Lock-Free Linked List - 215
** Queue-Based Locks - 217
** Parking Lotâ€“Based Locks - 218
** Sequence Lock - 218
** Teaching Materials - 219

* Index - 221
