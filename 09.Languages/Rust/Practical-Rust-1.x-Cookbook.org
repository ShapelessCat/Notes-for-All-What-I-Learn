#+TITLE: Practical Rust 1.x Cookbook
#+VERSION: 2023
#+AUTHOR: Rustacean Team
#+STARTUP: overview
#+STARTUP: entitiespretty
#+STARTUP: indent

* Preface - 15
Practical Rust 1.x Cookbook is an in-depth guide _for experienced Rust
programmers_ looking to create robust and efficient applications.

- This solution-focused book covers a wide range of topics, including
  * command-line,
  * webassembly,
  * networking,
  * kubernetes,
  * microservices, and
  * system programming.

- This book includes over _100 real-world practical exercises_ that will teach
  you:
  how to use the Rust compiler and command-line programming across every stage of
  software development.

  * Each exercise is intended to reinforce Rust's potential for
    + outperforming legacy applications and
    + bridging the high performance gap.

- You'll learn about advanced solutions like
  * asynchronous functions,
  * API testing,
  * CI/CD pipelines,
  * Fuzz testing, and
  * microservices architecture
  as you read the book.

- You'll also have the chance to put your knowledge to uses
  _by solving complex concurrent and parallel code challenges._

- You'll also get hands-on experience with many of
  _Rust's built-in frameworks and libraries._

- This book will teach you how to:
  * Employing
    + declarative and procedural macros,
    + pattern matching, and
    + enums

  * Create and test asynchronous code,
    error handling, and
    communication patterns. =TODO= =???=

  * _Working with_ /deadlocks/ and /livelocks/, as well as
    _implementing_ /hash maps/ and /parallel algorithms/

  * SOAP and REST API development,
    API orchestration, and
    performance monitoring =IMPORTANT=

  * API layering,
    middleware programming, and
    end-to-end API testing

  * CI/CD,
    Docker registry,
    Kubernetes cluster,
    YAML files,
    and
    load balancers configurations

  * Working with
    fuzz testing,
    checking syntax, and
    identifying code vulnerabilities =IMPORTANT=

* Chapter 1: Setting up and Configuring Rust Environment - 20
* Chapter 2: Hands-on Traits, Enums, and Struct - 50
* Chapter 3: Pattern Matching, Concurrency, Pointers and Modules - 82
* Chapter 4: Using Declarative and Procedural Macros - 109
* Chapter 5: Implementing Concurrency and Multithreading - 130
* Chapter 6: Asynchronous Programming - 160
* Chapter 7: Developing REST and SOAP APIs - 186
* Chapter 8: Building Microservices & Architectures - 218
* Chapter 9: Working around CI/CD - 252
* Chapter 10: Working around Kubernetes - 270
* Chapter 11: Fuzz Testing and Static Analysis - 299
* Chapter 12: Code Performance Optimization - 327
