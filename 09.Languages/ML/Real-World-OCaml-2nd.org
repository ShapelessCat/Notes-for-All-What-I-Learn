#+TITLE: Real World OCaml (*in Progress*)
#+SUBTITLE: FUNCTIONAL PROGRAMMING FOR THE MASSES
#+VERSION: 2nd (in progress)
#+AUTHOR: Yaron Minsky, Anil Madhavapeddy & Jason Hickey
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Prologue
** Why OCaml?
*** A Brief History
*** The Base Standard Library
*** The OCaml Platform

** About This Book
*** What to Expect
*** Installation Instructions
*** Code Examples

** Contributors

* Part 1. Language Concepts
* TODO 1. A Guided Tour
  Use ~Core~ instead of the standard library.
  Use ~utop~ rather than the standard toplevel ~ocaml~.

** TODO Base, Core and Core\under{}kernel
** TODO OCaml as a Calculator
** TODO Functions and Type Inference
*** Type Inference
*** Inferring Generic Types
**** Type Errors Versus Exceptions

** TODO Tuples, Lists, Options, and Pattern Matching
*** Tuples
*** Lists
**** The List module
**** Constructing lists with ~::~
**** List patterns using match
**** Recursive list functions

*** Options

** TODO Records and Variants
*** Base and polymorphic comparison
   
** TODO Imperative Programming
*** Arrays
*** Mutable Record Fields
*** Refs
*** For and While Loops

** TODO A Complete Program
*** Compiling and Running

** TODO Where to Go from Here

* TODO 2. Variables and Functions
** TODO Variables
*** Why Don't Variables Vary?
*** Pattern Matching and ~let~

** TODO Functions
*** Anonymous Functions
**** ~let~ and ~fun~
    
*** Multiargument functions
*** Recursive Functions
*** Prefix and Infix Operators
*** Declaring Functions with Function
*** Labeled Arguments
**** Higher-order functions and labels

*** Optional Arguments
**** Explicit passing of an optional argument
**** Inference of labeled and optional arguments
**** Optional arguments and partial application

* TODO 3. Lists and Patterns
** TODO List Basics
** TODO Using Patterns to Extract Data from a List
** TODO Limitations (and Blessings) of Pattern Matching
*** Performance
*** Detecting Errors

** TODO Using the List Module Effectively
*** Performance of ~String.concat~ and ~^~
*** More Useful List Functions
**** Combining list elements with ~List.reduce~
**** Filtering with ~List.filter~ and ~List.filter_map~
**** Partitioning with ~List.partition_tf~
**** Combining lists
    
** TODO Tail Recursion
** TODO Terser and Faster Patterns
*** Polymorphic Compare

* TODO 4. Files, Modules, and Programs
  - So far we experienced OCaml largely through the toplevel.

    To move to the real world we need to start building programs from files.

  - /Files/ are _more than_ just a convenient way to store and manage your code;

    They also correspond to /modules/, which act as boundaries that divide your
    program into conceptual units.

** TODO Single-File Programs
*** Where Is main?
*** Bytecode Versus Native Code

** TODO Multifile Programs and Modules
** TODO Signatures and Abstract Types
** TODO Concrete Types in Signatures
** TODO Nested Modules
** TODO Opening Modules
** TODO Including Modules
** TODO Common Errors with Modules
*** Type Mismatches
*** Missing Definitions
*** Type Definition Mismatches
*** Cyclic Dependencies

** TODO Designing with Modules
*** Expose Concrete Types Rarely
*** Design for the Call Site
*** Create Uniform Interfaces
*** Interfaces before implementations

* TODO 5. Records
** TODO Patterns and Exhaustiveness
*** Compiler Warnings
   
** TODO Field Punning
** TODO Reusing Field Names
** TODO Functional Updates
** TODO Mutable Fields
** TODO First-Class Fields

* TODO 6. Variants
** TODO Variants, tuples and parens
** TODO Catch-All Cases and Refactoring
** TODO Combining Records and Variants
*** Embedded records

** TODO Variants and Recursive Data Structures
** TODO Polymorphic Variants
*** Polymorphic Variants and Catch-all Cases
*** Example: Terminal Colors Redux
*** When to Use Polymorphic Variants

* TODO 7. Error Handling
** TODO Error-Aware Return Types
*** Encoding Errors with Result
*** Error and Or\under{}error
*** bind and Other Error Handling Idioms
**** Monads and _Let_syntax_

** TODO Exceptions
*** Declaring Exceptions Using ~[@@deriving sexp]~
*** Helper Functions for Throwing Exceptions
*** Exception Handlers
*** Cleaning Up in the Presence of Exceptions
*** Catching Specific Exceptions
*** Backtraces
*** From Exceptions to Error-Aware Types and Back Again

** TODO Choosing an Error-Handling Strategy

* TODO 8. Imperative Programming
** TODO Example: Imperative Dictionaries
** TODO Primitive Mutable Data
*** Array-Like Data
**** Ordinary Arrays
**** Strings
**** Bigarrays

*** Mutable Record and Object Fields and Ref Cells
**** Ref Cells

*** Foreign Functions

** TODO ~for~ and ~while~ Loops
** TODO Example: Doubly Linked Lists
*** Cyclic Data Structures
*** Modifying the List
*** Iteration Functions

** TODO Laziness and Other Benign Effects
*** Memoization and Dynamic Programming
**** Limitations of ~let rec~

** TODO Input and Output
*** Terminal I/O
*** Formatted Output with ~printf~
**** Understanding Format Strings
    
*** File I/O

** TODO Order of Evaluation
** TODO Side Effects and Weak Polymorphism
*** The Value Restriction
*** Partial Application and the Value Restriction
*** Relaxing the Value Restriction

** TODO Summary

* TODO 9. Functors
** TODO A Trivial Example
** TODO A Bigger Example: Computing with Intervals
*** Making the Functor Abstract
*** Sharing Constraints
*** Destructive Substitution
*** Using Multiple Interfaces

** TODO Extending Modules

* TODO 10. First-Class Modules
** TODO Working with First-Class Modules
*** More on Locally Abstract Types
   
** TODO Example: A Query-Handling Framework
*** Implementing a Query Handler
*** Dispatching to Multiple Query Handlers
*** Loading and Unloading Query Handlers

** TODO Living Without First-Class Modules

* TODO 11. Objects
** TODO What Is Object-Oriented Programming?
** TODO OCaml Objects
** TODO Object Polymorphism
*** TODO Elisions are Polymorphic
    
** TODO Immutable Objects
** TODO When to Use Objects
** TODO Subtyping
*** Width Subtyping
*** Depth Subtyping
**** Polymorphic Variant Subtyping
     
*** Variance
**** Variance Annotations
     
*** Narrowing
*** Subtyping Versus Row Polymorphism
**** Production Note

* TODO 12. Classes
*** TODO OCaml Classes
*** TODO Class Parameters and Polymorphism
*** TODO Object Types as Interfaces
**** Functional Iterators

*** TODO Inheritance
*** TODO Class Types
*** TODO Open Recursion
*** TODO Private Methods
*** TODO Binary Methods
*** TODO Virtual Classes and Methods
**** Create Some Simple Shapes

*** TODO Initializers
*** TODO Multiple Inheritance
**** How Names Are Resolved
**** Mixins
**** Displaying the Animated Shapes
     
* Part II. Tools and Techniques
* TODO 13. Maps and Hash Tables
** TODO Maps
*** Sets
*** Modules and Comparators
*** Why do we need comparator witnesses?
*** The Polymorphic Comparator
**** The Perils of Polymorphic Compare
     
*** Satisfying Comparator.S with [@@deriving]
**** =, ==, and ~phys_equal~
    
*** Applying [@@deriving] to maps and sets
*** Trees

** TODO Hash Tables
*** Time Complexity of Hash Tables
*** Collisions with the Polymorphic Hash Function
   
** TODO Choosing Between Maps and Hash Tables
   
* TODO 14. Command-Line Parsing
** TODO Basic Command-Line Parsing
*** Defining an Anonymous Argument
*** Defining Basic Commands
*** Running Commands
*** Multi-argument Commands

** TODO Argument Types
*** Defining Custom Argument Types
*** Optional and Default Arguments
*** Sequences of Arguments

** TODO Adding Labeled Flags
** TODO Grouping Subcommands Together
** TODO Prompting for Interactive Input
** TODO Command-Line Autocompletion with bash
*** Generating Completion Fragments from Command
*** Installing the Completion Fragment
**** Installing A Generic Completion Handler

** TODO Alternative Command-Line Parsers

* TODO 15. Concurrent Programming with Async
*** TODO Async Basics
**** Using _Let_syntax_ with Async
**** Ivars and Upon
***** Understanding Bind In Terms of Ivars and Upon

*** TODO Examples: An Echo Server
**** Tail-calls and Chains of Deferreds
**** Functions that Never Return
**** Improving the Echo Server

*** TODO Example: Searching Definitions with DuckDuckGo
**** URI Handling
**** Parsing JSON Strings
**** Executing an HTTP Client Query

*** TODO Exception Handling
**** Monitors
**** Example: Handling Exceptions with DuckDuckGo

*** TODO Timeouts, Cancellation, and Choices
*** TODO Working with System Threads
**** Thread-Safety and Locking

* TODO 16. Handling JSON Data
** TODO JSON Basics
*** Installing the Yojson Library
    
** TODO Parsing JSON with Yojson
** TODO Selecting Values from JSON Structures
*** Functional Combinators
   
** TODO Constructing JSON Values
*** Polymorphic Variants and Easier Type Checking
   
** TODO Using Nonstandard JSON Extensions
** TODO Automatically Mapping JSON to OCaml Types
*** Installing the ATDgen Library and Tool
*** ATD Basics
*** ATD Annotations
*** Compiling ATD Specifications to OCaml
*** Example: Querying GitHub Organization Information

* TODO 17. Parsing with OCamllex and Menhir
** TODO Menhir Versus ocamlyacc
** TODO Lexing and Parsing
** TODO Defining a Parser
*** Describing the Grammar
*** Parsing Sequences

** TODO Defining a Lexer
*** OCaml Prelude
*** Regular Expressions
*** Lexing Rules
*** Recursive Rules
**** Handling Unicode

** TODO Bringing It All Together

* TODO 18. Data Serialization with S-Expressions
** TODO Basic Usage
*** More on Top-Level Printing
*** Generating S-Expressions from OCaml Types
**** Syntax Extensions and ppx

** TODO The Sexp Format
** TODO Preserving Invariants
** TODO Getting Good Error Messages
** TODO Sexp-Conversion Directives
*** sexp\under{}opaque
*** sexp\under{}list
*** sexp\under{}option
*** Specifying Defaults

* TODO Part III. The Runtime System
* TODO 19. Foreign Function Interface
** Installing the Ctypes Library
** Example: A Terminal Interface
** Basic Scalar C Types
** Pointers and Arrays
*** Allocating Typed Memory for Pointers
*** Using Views to Map Complex Values
**** OCaml Strings Versus C Character Buffers

** Structs and Unions
*** Defining a Structure
*** Adding Fields to Structures
*** Incomplete Structure Definitions
**** Recap: A time-printing command

*** Defining Arrays
**** Pointer Operators for Dereferencing and Arithmetic

** Passing Functions to C
*** Example: A Command-Line Quicksort
**** Lifetime of Allocated Ctypes

** Learning More About C Bindings
*** Struct Memory Layout

* TODO 20. Memory Representation of Values
** Why Do OCaml Types Disappear at Runtime?
** OCaml Blocks and Values
*** Distinguishing Integers and Pointers at Runtime
**** Some History About OCaml’s Word-Aligned Pointers
   
** Blocks and Values
*** Integers, Characters, and Other Basic Types

** Tuples, Records, and Arrays
*** Floating-Point Numbers and Arrays

** Variants and Lists
*** Obj Module Considered Harmful

** Polymorphic Variants
** String Values
** Custom Heap Blocks
*** Managing External Memory with Bigarray
    
* TODO 21. Understanding the Garbage Collector
** Mark and Sweep Garbage Collection
** Generational Garbage Collection
*** The Gc Module and OCAMLRUNPARAM

** The Fast Minor Heap
*** Allocating on the Minor Heap
**** Setting the Size of the Minor Heap
     
** The Long-Lived Major Heap
*** Allocating on the Major Heap
**** Controlling Major Heap Growth
     
*** Memory Allocation Strategies
**** Next-fit allocation
**** First-fit allocation
     
*** Marking and Scanning the Heap
**** Controlling Major Heap Collections
     
*** Heap Compaction
**** Controlling Frequency of Compactions
     
*** Intergenerational Pointers
**** The mutable write barrier
    
** Attaching Finalizer Functions to Values
*** What Values Can Be Finalized?
    
* TODO 22. The Compiler Frontend: Parsing and Type Checking
** An Overview of the Toolchain
*** Obtaining the Compiler Source Code
    
** Parsing Source Code
*** Syntax Errors
*** Automatically Indenting Source Code
*** Generating Documentation from Interfaces
**** Using Custom ocamldoc Generators

** Static Type Checking
*** Displaying Inferred Types from the Compiler
**** Which Comes First: The ml or the mli?
    
*** Type Inference
**** Adding type annotations to find errors
**** Enforcing principal typing
    
*** Modules and Separate Compilation
**** The mapping between files and modules
**** Defining a module search path

*** Packing Modules Together
**** Packing and Search Paths
     
*** Shorter Module Paths in Type Errors

** The Typed Syntax Tree
*** Using ocp-index for Autocompletion
*** Examining the Typed Syntax Tree Directly

* TODO 23. Preprocessing with ppx
** Extension Attributes
*** Commonly used extension attributes
*** ppx in the compiler

** Building your first ppx extension
*** The AST Mapper and hello world
*** ppxlib
  
* TODO 24. The Compiler Backend: Bytecode and Native code
** The Untyped Lambda Form
*** Pattern Matching Optimization
**** Learning More About Pattern Matching Compilation
    
*** Benchmarking Pattern Matching

** Generating Portable Bytecode
*** Where Did the Bytecode Instruction Set Come From?
*** Compiling and Linking Bytecode
*** Executing Bytecode
*** Embedding OCaml Bytecode in C

** Compiling Fast Native Code
*** Inspecting Assembly Output
**** The impact of polymorphic comparison
**** Benchmarking polymorphic comparison
    
*** Debugging Native Code Binaries
**** Understanding name mangling
**** Interactive breakpoints with the GNU debugger

*** Profiling Native Code
**** GPROF
**** PERF

*** Embedding Native Code in C
**** Activating the Debug Runtime
   
** Summarizing the File Extensions
