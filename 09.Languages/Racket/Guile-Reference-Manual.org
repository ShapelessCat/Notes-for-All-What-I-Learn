#+TITLE: Guile Reference Manual
#+VERSION: 2.2.1, revision 1
#+AUTHOR: The Guile Developers
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Preface - 1
** Contributors to this Manual - 1
** The Guile License - 1

* TODO 1 Introduction - 3
** 1.1 Guile and Scheme - 3
** 1.2 Combining with C Code - 3
** 1.3 Guile and the GNU Project - 4
** 1.4 Interactive Programming - 4
** 1.5 Supporting Multiple Languages - 5
** 1.6 Obtaining and Installing Guile - 5
** 1.7 Organisation of this Manual - 6
** 1.8 Typographical Conventions - 6

* TODO 2 Hello Guile! - 9
** DONE 2.1 Running Guile Interactively - 9
   CLOSED: [2017-11-04 Sat 02:33]
   - Command: ~guile~

   - =???= ~(getpwnam "root")~

** DONE 2.2 Running Guile Scripts - 9
   CLOSED: [2017-11-04 Sat 02:37]
   Example
   #+BEGIN_SRC scheme
     #!/usr/local/bin/guile -s
     !#
     (display "Hello, world!")
     (newline)
   #+END_SRC
  
   
** TODO 2.3 Linking Guile into Programs - 9
** 2.4 Writing Guile Extensions - 10
** 2.5 Using the Guile Module System - 11
*** 2.5.1 Using Modules - 11
*** 2.5.2 Writing new Modules - 12
*** 2.5.3 Putting Extensions into Modules - 12

** 2.6 Reporting Bugs - 12

* TODO 3 Hello Scheme! - 15
** 3.1 Data Types, Values and Variables - 15
*** 3.1.1 Latent Typing - 15
*** 3.1.2 Values and Variables - 15
*** 3.1.3 Defining and Setting Variables - 16

** 3.2 The Representation and Use of Procedures - 17
*** 3.2.1 Procedures as Values - 17
*** 3.2.2 Simple Procedure Invocation - 18
*** 3.2.3 Creating and Using a New Procedure - 19
*** 3.2.4 Lambda Alternatives - 20

** 3.3 Expressions and Evaluation - 20
*** 3.3.1 Evaluating Expressions and Executing Programs - 21
**** 3.3.1.1 Evaluating Literal Data - 21
**** 3.3.1.2 Evaluating a Variable Reference - 22
**** 3.3.1.3 Evaluating a Procedure Invocation Expression - 22
**** 3.3.1.4 Evaluating Special Syntactic Expressions - 23

*** 3.3.2 Tail calls - 24
*** 3.3.3 Using the Guile REPL- 25
*** 3.3.4 Summary of Common Syntax - 25

** 3.4 The Concept of Closure - 26
*** 3.4.1 Names, Locations, Values and Environments - 26
*** 3.4.2 Local Variables and Environments - 27
*** 3.4.3 Environment Chaining - 27
*** 3.4.4 Lexical Scope - 28
**** 3.4.4.1 An Example of Non-Lexical Scoping - 28

*** 3.4.5 Closure - 30
*** 3.4.6 Example 1: A Serial Number Generator - 31
*** 3.4.7 Example 2: A Shared Persistent Variable - 31
*** 3.4.8 Example 3: The Callback Closure Problem - 32
*** 3.4.9 Example 4: Object Orientation - 33

** 3.5 Further Reading - 34

* TODO 4 Programming in Scheme - 35
** 4.1 Guile’s Implementation of Scheme - 35
** 4.2 Invoking Guile - 35
*** 4.2.1 Command-line Options - 35
*** 4.2.2 Environment Variables - 38

** 4.3 Guile Scripting - 41
*** 4.3.1 The Top of a Script File - 41
*** 4.3.2 The Meta Switch - 41
*** 4.3.3 Command Line Handling - 43
*** 4.3.4 Scripting Examples - 44

** 4.4 Using Guile Interactively - 47
*** 4.4.1 The Init File, ~/.guile - 48
*** 4.4.2 Readline - 48
*** 4.4.3 Value History - 48
*** 4.4.4 REPL Commands - 49
**** 4.4.4.1 Help Commands - 49
**** 4.4.4.2 Module Commands - 50
**** 4.4.4.3 Language Commands - 50
**** 4.4.4.4 Compile Commands - 50
**** 4.4.4.5 Profile Commands - 51
**** 4.4.4.6 Debug Commands - 51
**** 4.4.4.7 Inspect Commands - 52
**** 4.4.4.8 System Commands - 53

*** 4.4.5 Error Handling - 53
*** 4.4.6 Interactive Debugging - 54

** 4.5 Using Guile in Emacs- 56
** 4.6 Using Guile Tools - 56
** 4.7 Installing Site Packages - 57
* TODO 5 Programming in C - 59
** 5.1 Parallel Installations - 59
** 5.2 Linking Programs With Guile - 60
*** 5.2.1 Guile Initialization Functions - 60
*** 5.2.2 A Sample Guile Main Program - 61
*** 5.2.3 Building the Example with Make - 61
*** 5.2.4 Building the Example with Autoconf - 62

** 5.3 Linking Guile with Libraries - 63
*** 5.3.1 A Sample Guile Extension - 64

** 5.4 General concepts for using libguile - 64
*** 5.4.1 Dynamic Types - 65
*** 5.4.2 Garbage Collection - 67
*** 5.4.3 Control Flow - 68
*** 5.4.4 Asynchronous Signals - 70
*** 5.4.5 Multi-Threading - 71

** 5.5 Defining New Foreign Object Types - 74
*** 5.5.1 Defining Foreign Object Types - 74
*** 5.5.2 Creating Foreign Objects - 75
*** 5.5.3 Type Checking of Foreign Objects - 76
*** 5.5.4 Foreign Object Memory Management - 77
*** 5.5.5 Foreign Objects and Scheme - 80

** 5.6 Function Snarfing - 81
** 5.7 An Overview of Guile Programming - 83
*** 5.7.1 How One Might Extend Dia Using Guile - 83
**** 5.7.1.1 Deciding Why You Want to Add Guile - 84
**** 5.7.1.2 Four Steps Required to Add Guile - 84
**** 5.7.1.3 How to Represent Dia Data in Scheme - 85
**** 5.7.1.4 Writing Guile Primitives for Dia - 86
**** 5.7.1.5 Providing a Hook for the Evaluation of Scheme Code - 87
**** 5.7.1.6 Top-level Structure of Guile-enabled Dia - 88
**** 5.7.1.7 Going Further with Dia and Guile - 88

*** 5.7.2 Why Scheme is More Hackable Than C - 90
*** 5.7.3 Example- Using Guile for an Application Testbed - 90
*** 5.7.4 A Choice of Programming Options - 91
**** 5.7.4.1 What Functionality is Already Available? - 92
**** 5.7.4.2 Functional and Performance Constraints - 92
**** 5.7.4.3 Your Preferred Programming Style - 92
**** 5.7.4.4 What Controls Program Execution? - 92

*** 5.7.5 How About Application Users? - 92

** 5.8 Autoconf Support - 94
*** 5.8.1 Autoconf Background - 94
*** 5.8.2 Autoconf Macros - 94
*** 5.8.3 Using Autoconf Macros - 96

* TODO 6 API Reference - 99
** 6.1 Overview of the Guile API - 99
** 6.2 Deprecation - 100
** 6.3 The SCM Type - 100
** 6.4 Initializing Guile - 101
** 6.5 Snarfing Macros - 102
** 6.6 Data Types - 104
*** 6.6.1 Booleans - 104
*** 6.6.2 Numerical data types - 105
**** 6.6.2.1 Scheme’s Numerical “Tower” - 105
**** 6.6.2.2 Integers - 106
**** 6.6.2.3 Real and Rational Numbers - 110
**** 6.6.2.4 Complex Numbers - 113
**** 6.6.2.5 Exact and Inexact Numbers - 113
**** 6.6.2.6 Read Syntax for Numerical Data - 115
**** 6.6.2.7 Operations on Integer Values - 116
**** 6.6.2.8 Comparison Predicates - 117
**** 6.6.2.9 Converting Numbers To and From Strings - 118
**** 6.6.2.10 Complex Number Operations - 118
**** 6.6.2.11 Arithmetic Functions - 119
**** 6.6.2.12 Scientific Functions - 123
**** 6.6.2.13 Bitwise Operations - 125
**** 6.6.2.14 Random Number Generation - 127

*** 6.6.3 Characters - 129
*** 6.6.4 Character Sets - 134
**** 6.6.4.1 Character Set Predicates/Comparison - 134
**** 6.6.4.2 Iterating Over Character Sets - 134
**** 6.6.4.3 Creating Character Sets - 135
**** 6.6.4.4 Querying Character Sets - 137
**** 6.6.4.5 Character-Set Algebra - 138
**** 6.6.4.6 Standard Character Sets - 139

*** 6.6.5 Strings - 141
**** 6.6.5.1 String Read Syntax - 141
**** 6.6.5.2 String Predicates - 143
**** 6.6.5.3 String Constructors - 144
**** 6.6.5.4 List/String conversion - 145
**** 6.6.5.5 String Selection - 145
**** 6.6.5.6 String Modification - 147
**** 6.6.5.7 String Comparison- 148
**** 6.6.5.8 String Searching - 152
**** 6.6.5.9 Alphabetic Case Mapping - 154
**** 6.6.5.10 Reversing and Appending Strings - 155
**** 6.6.5.11 Mapping, Folding, and Unfolding - 156
**** 6.6.5.12 Miscellaneous String Operations - 158
**** 6.6.5.13 Representing Strings as Bytes - 159
**** 6.6.5.14 Conversion to/from C - 160
**** 6.6.5.15 String Internals - 163

*** 6.6.6 Symbols - 164
**** 6.6.6.1 Symbols as Discrete Data - 165
**** 6.6.6.2 Symbols as Lookup Keys - 166
**** 6.6.6.3 Symbols as Denoting Variables - 167
**** 6.6.6.4 Operations Related to Symbols - 167
**** 6.6.6.5 Function Slots and Property Lists - 170
**** 6.6.6.6 Extended Read Syntax for Symbols - 171
**** 6.6.6.7 Uninterned Symbols - 172

*** 6.6.7 Keywords - 174
**** 6.6.7.1 Why Use Keywords? - 174
**** 6.6.7.2 Coding With Keywords - 174
**** 6.6.7.3 Keyword Read Syntax - 175
**** 6.6.7.4 Keyword Procedures - 176

*** 6.6.8 Pairs - 178
*** 6.6.9 Lists - 181
**** 6.6.9.1 List Read Syntax - 181
**** 6.6.9.2 List Predicates - 181
**** 6.6.9.3 List Constructors - 182
**** 6.6.9.4 List Selection - 183
**** 6.6.9.5 Append and Reverse - 183
**** 6.6.9.6 List Modification - 184
**** 6.6.9.7 List Searching - 185
**** 6.6.9.8 List Mapping - 186

*** 6.6.10 Vectors - 186
**** 6.6.10.1 Read Syntax for Vectors - 187
**** 6.6.10.2 Dynamic Vector Creation and Validation - 187
**** 6.6.10.3 Accessing and Modifying Vector Contents - 188
**** 6.6.10.4 Vector Accessing from C - 189
**** 6.6.10.5 Uniform Numeric Vectors - 190

*** 6.6.11 Bit Vectors - 191
*** 6.6.12 Bytevectors - 193
**** 6.6.12.1 Endianness - 193
**** 6.6.12.2 Manipulating Bytevectors - 194
**** 6.6.12.3 Interpreting Bytevector Contents as Integers - 195
**** 6.6.12.4 Converting Bytevectors to/from Integer Lists - 197
**** 6.6.12.5 Interpreting Bytevector Contents as Floating Point Numbers - 198
**** 6.6.12.6 Interpreting Bytevector Contents as Unicode Strings - 199
**** 6.6.12.7 Accessing Bytevectors with the Array API - 200
**** 6.6.12.8 Accessing Bytevectors with the SRFI-4 API- 200

*** 6.6.13 Arrays - 200
**** 6.6.13.1 Array Syntax - 201
**** 6.6.13.2 Array Procedures - 202
**** 6.6.13.3 Shared Arrays - 206
**** 6.6.13.4 Arrays as arrays of arrays - 208
**** 6.6.13.5 Accessing Arrays from C - 210

*** 6.6.14 VLists - 216
*** 6.6.15 Record Overview - 218
*** 6.6.16 SRFI-9 Records - 218
**** Non-toplevel Record Definitions - 219
**** Custom Printers - 219
**** Functional “Setters” - 220

*** 6.6.17 Records - 221
*** 6.6.18 Structures - 223
**** 6.6.18.1 Vtables - 223
**** 6.6.18.2 Structure Basics - 224
**** 6.6.18.3 Vtable Contents - 225
**** 6.6.18.4 Meta-Vtables - 226
**** 6.6.18.5 Vtable Example - 228
**** 6.6.18.6 Tail Arrays - 229

*** 6.6.19 Dictionary Types - 230
*** 6.6.20 Association Lists - 230
**** 6.6.20.1 Alist Key Equality - 231
**** 6.6.20.2 Adding or Setting Alist Entries - 231
**** 6.6.20.3 Retrieving Alist Entries - 233
**** 6.6.20.4 Removing Alist Entries - 234
**** 6.6.20.5 Sloppy Alist Functions - 235
**** 6.6.20.6 Alist Example - 236

*** 6.6.21 VList-Based Hash Lists or “VHashes” - 236
*** 6.6.22 Hash Tables - 238
**** 6.6.22.1 Hash Table Examples - 239
**** 6.6.22.2 Hash Table Reference - 240

*** 6.6.23 Other Types - 244

** 6.7 Foreign Objects - 244
** 6.8 Smobs - 246
** 6.9 Procedures - 249
*** 6.9.1 Lambda- Basic Procedure Creation - 249
*** 6.9.2 Primitive Procedures - 250
*** 6.9.3 Compiled Procedures - 251
*** 6.9.4 Optional Arguments - 253
**** 6.9.4.1 lambda* and define* - 253
**** 6.9.4.2 (ice-9 optargs) - 255

*** 6.9.5 Case-lambda - 256
*** 6.9.6 Higher-Order Functions - 258
*** 6.9.7 Procedure Properties and Meta-information - 259
*** 6.9.8 Procedures with Setters - 260
*** 6.9.9 Inlinable Procedures - 261

** 6.10 Macros - 262
*** 6.10.1 Defining Macros - 262
*** 6.10.2 Syntax-rules Macros - 263
**** 6.10.2.1 Patterns - 264
**** 6.10.2.2 Hygiene - 266
**** 6.10.2.3 Shorthands - 267
**** 6.10.2.4 Reporting Syntax Errors in Macros - 267
**** 6.10.2.5 Specifying a Custom Ellipsis Identifier - 267
**** 6.10.2.6 Further Information - 268

*** 6.10.3 Support for the syntax-case System - 268
**** 6.10.3.1 Why syntax-case? - 270
**** 6.10.3.2 Custom Ellipsis Identifiers for syntax-case Macros - 273

*** 6.10.4 Syntax Transformer Helpers - 273
*** 6.10.5 Lisp-style Macro Definitions - 276
*** 6.10.6 Identifier Macros - 277
*** 6.10.7 Syntax Parameters - 279
*** 6.10.8 Eval-when- 280
*** 6.10.9 Macro Expansion - 281
*** 6.10.10 Hygiene and the Top-Level - 282
*** 6.10.11 Internal Macros - 283

** 6.11 General Utility Functions - 284
*** 6.11.1 Equality - 284
*** 6.11.2 Object Properties - 286
*** 6.11.3 Sorting - 287
*** 6.11.4 Copying Deep Structures - 289
*** 6.11.5 General String Conversion - 289
*** 6.11.6 Hooks - 289
**** 6.11.6.1 Hook Usage by Example - 290
**** 6.11.6.2 Hook Reference - 290
**** 6.11.6.3 Hooks For C Code - 292
**** 6.11.6.4 Hooks for Garbage Collection - 293
**** 6.11.6.5 Hooks into the Guile REPL - 294

** 6.12 Definitions and Variable Bindings - 294
*** 6.12.1 Top Level Variable Definitions - 294
*** 6.12.2 Local Variable Bindings - 296
*** 6.12.3 Internal definitions - 297
*** 6.12.4 Querying variable bindings - 298
*** 6.12.5 Binding multiple return values - 298

** 6.13 Controlling the Flow of Program Execution - 299
*** 6.13.1 Sequencing and Splicing - 299
*** 6.13.2 Simple Conditional Evaluation - 300
*** 6.13.3 Conditional Evaluation of a Sequence of Expressions - 302
*** 6.13.4 Iteration mechanisms - 302
*** 6.13.5 Prompts - 304
**** 6.13.5.1 Prompt Primitives - 304
**** 6.13.5.2 Shift, Reset, and All That - 307

*** 6.13.6 Continuations - 308
*** 6.13.7 Returning and Accepting Multiple Values - 310
*** 6.13.8 Exceptions - 312
**** 6.13.8.1 Exception Terminology - 312
**** 6.13.8.2 Catching Exceptions - 312
**** 6.13.8.3 Throw Handlers - 315
**** 6.13.8.4 Throwing Exceptions - 316
**** 6.13.8.5 How Guile Implements Exceptions - 317

*** 6.13.9 Procedures for Signaling Errors - 317
*** 6.13.10 Dynamic Wind - 318
*** 6.13.11 Fluids and Dynamic States - 322
*** 6.13.12 Parameters - 325
*** 6.13.13 How to Handle Errors - 326
**** 6.13.13.1 C Support - 327
**** 6.13.13.2 Signalling Type Errors - 328

*** 6.13.14 Continuation Barriers - 329

** 6.14 Input and Output - 329
*** 6.14.1 Ports - 329
*** 6.14.2 Binary I/O - 331
*** 6.14.3 Encoding- 332
*** 6.14.4 Textual I/O - 334
*** 6.14.5 Simple Textual Output - 336
*** 6.14.6 Buffering - 337
*** 6.14.7 Random Access - 338
*** 6.14.8 Line Oriented and Delimited Text - 339
*** 6.14.9 Default Ports for Input, Output and Errors - 341
*** 6.14.10 Types of Port - 342
**** 6.14.10.1 File Ports - 342
**** 6.14.10.2 Bytevector Ports - 345
**** 6.14.10.3 String Ports - 345
**** 6.14.10.4 Custom Ports - 346
**** 6.14.10.5 Soft Ports - 348
**** 6.14.10.6 Void Ports - 348

*** 6.14.11 Venerable Port Interfaces - 348
*** 6.14.12 Using Ports from C - 350
*** 6.14.13 Implementing New Port Types in C - 351
*** 6.14.14 Non-Blocking I/O - 354
*** 6.14.15 Handling of Unicode Byte Order Marks - 355

** 6.15 Regular Expressions - 356
*** 6.15.1 Regexp Functions - 357
*** 6.15.2 Match Structures - 361
*** 6.15.3 Backslash Escapes - 362

** 6.16 LALR(1) Parsing - 363
** 6.17 PEG Parsing - 364
*** 6.17.1 PEG Syntax Reference - 364
*** 6.17.2 PEG API Reference - 366
*** 6.17.3 PEG Tutorial - 371
*** 6.17.4 PEG Internals - 378

** 6.18 Reading and Evaluating Scheme Code - 380
*** 6.18.1 Scheme Syntax: Standard and Guile Extensions - 380
**** 6.18.1.1 Expression Syntax - 380
**** 6.18.1.2 Comments - 381
**** 6.18.1.3 Block Comments - 382
**** 6.18.1.4 Case Sensitivity - 382
**** 6.18.1.5 Keyword Syntax - 382
**** 6.18.1.6 Reader Extensions - 383

*** 6.18.2 Reading Scheme Code - 383
*** 6.18.3 Writing Scheme Values - 384
*** 6.18.4 Procedures for On the Fly Evaluation - 385
*** 6.18.5 Compiling Scheme Code - 387
*** 6.18.6 Loading Scheme Code from File - 389
*** 6.18.7 Load Paths - 390
*** 6.18.8 Character Encoding of Source Files - 392
*** 6.18.9 Delayed Evaluation - 394
*** 6.18.10 Local Evaluation - 394
*** 6.18.11 Local Inclusion - 395
*** 6.18.12 Sandboxed Evaluation - 396
*** 6.18.13 REPL Servers - 400
*** 6.18.14 Cooperative REPL Servers - 401

** 6.19 Memory Management and Garbage Collection - 401
*** 6.19.1 Function related to Garbage Collection - 401
*** 6.19.2 Memory Blocks - 402
*** 6.19.3 Weak References - 405
**** 6.19.3.1 Weak hash tables - 405
**** 6.19.3.2 Weak vectors - 406

*** 6.19.4 Guardians - 406

** 6.20 Modules - 407
*** 6.20.1 General Information about Modules - 408
*** 6.20.2 Using Guile Modules - 408
*** 6.20.3 Creating Guile Modules - 410
*** 6.20.4 Modules and the File System - 413
*** 6.20.5 R6RS Version References - 414
*** 6.20.6 R6RS Libraries - 415
*** 6.20.7 Variables - 416
*** 6.20.8 Module System Reflection - 417
*** 6.20.9 Accessing Modules from C - 419
*** 6.20.10 provide and require - 422
*** 6.20.11 Environments - 422

** 6.21 Foreign Function Interface - 423
*** 6.21.1 Foreign Libraries - 423
*** 6.21.2 Foreign Functions - 424
*** 6.21.3 C Extensions - 426
*** 6.21.4 Modules and Extensions - 427
*** 6.21.5 Foreign Pointers - 428
**** 6.21.5.1 Foreign Types - 428
**** 6.21.5.2 Foreign Variables - 429
**** 6.21.5.3 Void Pointers and Byte Access - 431
**** 6.21.5.4 Foreign Structs - 433

*** 6.21.6 Dynamic FFI - 434

** 6.22 Threads, Mutexes, Asyncs and Dynamic Roots - 437
*** 6.22.1 Threads - 437
*** 6.22.2 Thread-Local Variables - 439
*** 6.22.3 Asynchronous Interrupts - 440
*** 6.22.4 Atomics - 442
*** 6.22.5 Mutexes and Condition Variables - 443
*** 6.22.6 Blocking in Guile Mode - 447
*** 6.22.7 Futures - 448
*** 6.22.8 Parallel forms - 449

** 6.23 Configuration, Features and Runtime Options - 451
*** 6.23.1 Configuration, Build and Installation - 451
*** 6.23.2 Feature Tracking - 453
**** 6.23.2.1 Feature Manipulation - 453
**** 6.23.2.2 Common Feature Symbols - 453

*** 6.23.3 Runtime Options - 455
**** 6.23.3.1 Examples of option use - 455

** 6.24 Support for Other Languages - 456
*** 6.24.1 Using Other Languages - 456
*** 6.24.2 Emacs Lisp - 457
**** 6.24.2.1 Nil - 457
**** 6.24.2.2 Dynamic Binding - 459
**** 6.24.2.3 Other Elisp Features - 459

*** 6.24.3 ECMAScript - 459

** 6.25 Support for Internationalization - 460
*** 6.25.1 Internationalization with Guile - 460
*** 6.25.2 Text Collation - 461
*** 6.25.3 Character Case Mapping - 462
*** 6.25.4 Number Input and Output - 463
*** 6.25.5 Accessing Locale Information - 463
*** 6.25.6 Gettext Support- 466

** 6.26 Debugging Infrastructure - 468
*** 6.26.1 Evaluation and the Scheme Stack - 469
**** 6.26.1.1 Stack Capture - 469
**** 6.26.1.2 Stacks - 470
**** 6.26.1.3 Frames - 471

*** 6.26.2 Source Properties - 472
*** 6.26.3 Programmatic Error Handling - 473
**** 6.26.3.1 Catching Exceptions - 473
**** 6.26.3.2 Capturing the full error stack - 475
**** 6.26.3.3 Pre-Unwind Debugging - 477
**** 6.26.3.4 Stack Overflow - 478
**** 6.26.3.5 Debug options - 480

*** 6.26.4 Traps - 481
**** 6.26.4.1 VM Hooks - 482
**** 6.26.4.2 Trap Interface - 483
**** 6.26.4.3 Low-Level Traps - 484
**** 6.26.4.4 Tracing Traps - 486
**** 6.26.4.5 Trap States - 487
**** 6.26.4.6 High-Level Traps - 488

*** 6.26.5 GDB Support - 489

** 6.27 Code Coverage Reports - 490

* TODO 7 Guile Modules - 493
** 7.1 SLIB - 493
*** 7.1.1 SLIB installation - 493
*** 7.1.2 JACAL - 494

** 7.2 POSIX System Calls and Networking - 494
*** 7.2.1 POSIX Interface Conventions - 494
*** 7.2.2 Ports and File Descriptors - 495
*** 7.2.3 File System - 502
*** 7.2.4 User Information - 509
*** 7.2.5 Time - 511
*** 7.2.6 Runtime Environment - 514
*** 7.2.7 Processes - 516
*** 7.2.8 Signals - 522
*** 7.2.9 Terminals and Ptys - 525
*** 7.2.10 Pipes - 526
*** 7.2.11 Networking - 527
**** 7.2.11.1 Network Address Conversion - 528
**** 7.2.11.2 Network Databases - 529
**** 7.2.11.3 Network Socket Address - 536
**** 7.2.11.4 Network Sockets and Communication - 537
**** 7.2.11.5 Network Socket Examples - 543

*** 7.2.12 System Identification - 544
*** 7.2.13 Locales - 544
*** 7.2.14 Encryption - 545

** 7.3 HTTP, the Web, and All That - 545
*** 7.3.1 Types and the Web - 546
*** 7.3.2 Universal Resource Identifiers - 548
*** 7.3.3 The Hyper-Text Transfer Protocol - 550
*** 7.3.4 HTTP Headers - 553
**** 7.3.4.1 HTTP Header Types - 553
**** 7.3.4.2 General Headers - 554
**** 7.3.4.3 Entity Headers - 555
**** 7.3.4.4 Request Headers - 556
**** 7.3.4.5 Response Headers - 559

*** 7.3.5 Transfer Codings - 560
*** 7.3.6 HTTP Requests - 561
**** 7.3.6.1 An Important Note on Character Sets - 561
**** 7.3.6.2 Request API - 562

*** 7.3.7 HTTP Responses - 564
*** 7.3.8 Web Client - 566
*** 7.3.9 Web Server - 567
*** 7.3.10 Web Examples - 570
**** 7.3.10.1 Hello, World! - 570
**** 7.3.10.2 Inspecting the Request - 571
**** 7.3.10.3 Higher-Level Interfaces - 572
**** 7.3.10.4 Conclusion - 573

** 7.4 The (ice-9 getopt-long) Module - 573
*** 7.4.1 A Short getopt-long Example - 574
*** 7.4.2 How to Write an Option Specification - 575
*** 7.4.3 Expected Command Line Format - 576
*** 7.4.4 Reference Documentation for getopt-long - 577
*** 7.4.5 Reference Documentation for option-ref - 578

** 7.5 SRFI Support Modules - 578
*** 7.5.1 About SRFI Usage - 578
*** 7.5.2 SRFI-0 - cond-expand - 579
*** 7.5.3 SRFI-1 - List library - 580
**** 7.5.3.1 Constructors - 580
**** 7.5.3.2 Predicates - 581
**** 7.5.3.3 Selectors - 582
**** 7.5.3.4 Length, Append, Concatenate, etc. - 583
**** 7.5.3.5 Fold, Unfold & Map - 584
**** 7.5.3.6 Filtering and Partitioning - 587
**** 7.5.3.7 Searching - 588
**** 7.5.3.8 Deleting - 589
**** 7.5.3.9 Association Lists - 590
**** 7.5.3.10 Set Operations on Lists - 591

*** 7.5.4 SRFI-2 - and-let* - 593
*** 7.5.5 SRFI-4 - Homogeneous numeric vector datatypes - 594
**** 7.5.5.1 SRFI-4 - Overview - 595
**** 7.5.5.2 SRFI-4 - API - 596
**** 7.5.5.3 SRFI-4 - Relation to bytevectors - 602
**** 7.5.5.4 SRFI-4 - Guile extensions - 602

*** 7.5.6 SRFI-6 - Basic String Ports - 603
*** 7.5.7 SRFI-8 - receive - 603
*** 7.5.8 SRFI-9 - define-record-type - 603
*** 7.5.9 SRFI-10 - Hash-Comma Reader Extension - 603
*** 7.5.10 SRFI-11 - let-values - 605
*** 7.5.11 SRFI-13 - String Library - 605
*** 7.5.12 SRFI-14 - Character-set Library - 605
*** 7.5.13 SRFI-16 - case-lambda - 605
*** 7.5.14 SRFI-17 - Generalized set! - 605
*** 7.5.15 SRFI-18 - Multithreading support - 606
**** 7.5.15.1 SRFI-18 Threads - 606
**** 7.5.15.2 SRFI-18 Mutexes - 607
**** 7.5.15.3 SRFI-18 Condition variables - 608
**** 7.5.15.4 SRFI-18 Time - 609
**** 7.5.15.5 SRFI-18 Exceptions - 609

*** 7.5.16 SRFI-19 - Time/Date Library - 610
**** 7.5.16.1 SRFI-19 Introduction - 610
**** 7.5.16.2 SRFI-19 Time - 611
**** 7.5.16.3 SRFI-19 Date - 613
**** 7.5.16.4 SRFI-19 Time/Date conversions - 614
**** 7.5.16.5 SRFI-19 Date to string - 615
**** 7.5.16.6 SRFI-19 String to date - 616

*** 7.5.17 SRFI-23 - Error Reporting - 617
*** 7.5.18 SRFI-26 - specializing parameters- 617
*** 7.5.19 SRFI-27 - Sources of Random Bits - 619
**** 7.5.19.1 The Default Random Source - 619
**** 7.5.19.2 Random Sources - 619
**** 7.5.19.3 Obtaining random number generator procedures - 620

*** 7.5.20 SRFI-28 - Basic Format Strings - 621
*** 7.5.21 SRFI-30 - Nested Multi-line Comments - 621
*** 7.5.22 SRFI-31 - A special form ‘rec’ for recursive evaluation - 621
*** 7.5.23 SRFI-34 - Exception handling for programs - 621
*** 7.5.24 SRFI-35 - Conditions - 622
*** 7.5.25 SRFI-37 - args-fold - 624
*** 7.5.26 SRFI-38 - External Representation for Data With Shared Structure - 625
*** 7.5.27 SRFI-39 - Parameters - 626
*** 7.5.28 SRFI-41 - Streams - 627
**** 7.5.28.1 SRFI-41 Stream Fundamentals - 627
**** 7.5.28.2 SRFI-41 Stream Primitives - 627
**** 7.5.28.3 SRFI-41 Stream Library - 629

*** 7.5.29 SRFI-42 - Eager Comprehensions - 636
*** 7.5.30 SRFI-43 - Vector Library - 636
**** 7.5.30.1 SRFI-43 Constructors - 637
**** 7.5.30.2 SRFI-43 Predicates - 638
**** 7.5.30.3 SRFI-43 Selectors - 638
**** 7.5.30.4 SRFI-43 Iteration- 638
**** 7.5.30.5 SRFI-43 Searching - 639
**** 7.5.30.6 SRFI-43 Mutators - 640
**** 7.5.30.7 SRFI-43 Conversion - 641

*** 7.5.31 SRFI-45 - Primitives for Expressing Iterative Lazy Algorithms - 641
*** 7.5.32 SRFI-46 - Basic syntax-rules Extensions - 643
*** 7.5.33 SRFI-55 - Requiring Features - 643
*** 7.5.34 SRFI-60 - Integers as Bits - 644
*** 7.5.35 SRFI-61 - A more general cond clause - 645
*** 7.5.36 SRFI-62 - S-expression comments - 645
*** 7.5.37 SRFI-64 - A Scheme API for test suites - 645
*** 7.5.38 SRFI-67 - Compare procedures - 645
*** 7.5.39 SRFI-69 - Basic hash tables - 646
**** 7.5.39.1 Creating hash tables - 646
**** 7.5.39.2 Accessing table items - 647
**** 7.5.39.3 Table properties - 647
**** 7.5.39.4 Hash table algorithms - 648

*** 7.5.40 SRFI-87 => in case clauses - 648
*** 7.5.41 SRFI-88 Keyword Objects - 648
*** 7.5.42 SRFI-98 Accessing environment variables - 649
*** 7.5.43 SRFI-105 Curly-infix expressions - 649
*** 7.5.44 SRFI-111 Boxes - 650

** 7.6 R6RS Support - 650
*** 7.6.1 Incompatibilities with the R6RS - 650
*** 7.6.2 R6RS Standard Libraries - 651
**** 7.6.2.1 Library Usage - 652
**** 7.6.2.2 rnrs base - 652
**** 7.6.2.3 rnrs unicode - 659
**** 7.6.2.4 rnrs bytevectors - 660
**** 7.6.2.5 rnrs lists - 660
**** 7.6.2.6 rnrs sorting - 662
**** 7.6.2.7 rnrs control - 662
**** 7.6.2.8 R6RS Records - 662
**** 7.6.2.9 rnrs records syntactic - 664
**** 7.6.2.10 rnrs records procedural - 665
**** 7.6.2.11 rnrs records inspection - 666
**** 7.6.2.12 rnrs exceptions - 666
**** 7.6.2.13 rnrs conditions - 667
**** 7.6.2.14 I/O Conditions - 670
**** 7.6.2.15 Transcoders - 671
**** 7.6.2.16 rnrs io ports - 674
**** 7.6.2.17 R6RS File Ports - 677
**** 7.6.2.18 rnrs io simple - 679
**** 7.6.2.19 rnrs files - 680
**** 7.6.2.20 rnrs programs - 680
**** 7.6.2.21 rnrs arithmetic fixnums - 681
**** 7.6.2.22 rnrs arithmetic flonums - 683
**** 7.6.2.23 rnrs arithmetic bitwise - 686
**** 7.6.2.24 rnrs syntax-case - 687
**** 7.6.2.25 rnrs hashtables - 688
**** 7.6.2.26 rnrs enums - 690
**** 7.6.2.27 rnrs - 691
**** 7.6.2.28 rnrs eval - 692
**** 7.6.2.29 rnrs mutable-pairs - 692
**** 7.6.2.30 rnrs mutable-strings - 692
**** 7.6.2.31 rnrs r5rs - 692

** 7.7 Pattern Matching - 693
** 7.8 Readline Support - 696
*** 7.8.1 Loading Readline Support - 696
*** 7.8.2 Readline Options - 697
*** 7.8.3 Readline Functions - 697
**** 7.8.3.1 Readline Port - 698
**** 7.8.3.2 Completion - 698

** 7.9 Pretty Printing - 699
** 7.10 Formatted Output - 701
** 7.11 File Tree Walk - 712
** 7.12 Queues - 717
** 7.13 Streams - 718
** 7.14 Buffered Input - 720
** 7.15 Expect - 721
** 7.16 ~sxml-match~: Pattern Matching of SXML - 723
*** Syntax - 724
*** Matching XML Elements - 725
*** Ellipses in Patterns - 725
*** Ellipses in Quasiquote’d Output - 725
*** Matching Nodesets - 726
*** Matching the “Rest” of a Nodeset - 726
*** Matching the Unmatched Attributes - 726
*** Default Values in Attribute Patterns - 727
*** Guards in Patterns - 727
*** Catamorphisms - 727
*** Named-Catamorphisms - 727
*** ~sxml-match-let and sxml-match-let*~ - 728

** 7.17 The Scheme shell (scsh) - 728
** 7.18 Curried Definitions - 729
** 7.19 Statprof - 730
** 7.20 SXML - 733
*** 7.20.1 SXML Overview- 734
*** 7.20.2 Reading and Writing XML - 734
*** 7.20.3 SSAX- A Functional XML Parsing Toolkit - 736
**** 7.20.3.1 History - 736
**** 7.20.3.2 Implementation - 737
**** 7.20.3.3 Usage - 738

*** 7.20.4 Transforming SXML - 739
**** 7.20.4.1 Overview - 739
**** 7.20.4.2 Usage - 740

*** 7.20.5 SXML Tree Fold - 740
**** 7.20.5.1 Overview - 741
**** 7.20.5.2 Usage - 741

*** 7.20.6 SXPath - 742
**** 7.20.6.1 Overview - 742
**** 7.20.6.2 Basic Converters and Applicators - 743
**** 7.20.6.3 Converter Combinators - 745

*** 7.20.7 (sxml ssax input-parse) - 748
**** 7.20.7.1 Overview - 748
**** 7.20.7.2 Usage - 748

*** 7.20.8 (sxml apply-templates) - 748
**** 7.20.8.1 Overview - 748
**** 7.20.8.2 Usage - 749

** 7.21 Texinfo Processing - 749
*** 7.21.1 (texinfo) - 749
**** 7.21.1.1 Overview - 749
**** 7.21.1.2 Usage - 749

*** 7.21.2 (texinfo docbook) - 750
**** 7.21.2.1 Overview - 750
**** 7.21.2.2 Usage - 750

*** 7.21.3 (texinfo html) - 751
**** 7.21.3.1 Overview - 751
**** 7.21.3.2 Usage - 751

*** 7.21.4 (texinfo indexing) - 752
**** 7.21.4.1 Overview - 752
**** 7.21.4.2 Usage - 752

*** 7.21.5 (texinfo string-utils) - 752
**** 7.21.5.1 Overview - 752
**** 7.21.5.2 Usage - 752

*** 7.21.6 (texinfo plain-text) - 755
**** 7.21.6.1 Overview - 755
**** 7.21.6.2 Usage - 755

*** 7.21.7 (texinfo serialize) - 755
**** 7.21.7.1 Overview - 755
**** 7.21.7.2 Usage - 755

*** 7.21.8 (texinfo reflection)- 755
**** 7.21.8.1 Overview - 756
**** 7.21.8.2 Usage - 756

* TODO 8 GOOPS - 759
** 8.1 Copyright Notice - 759
** 8.2 Class Definition - 759
** 8.3 Instance Creation and Slot Access - 760
** 8.4 Slot Options - 761
** 8.5 Illustrating Slot Description - 764
** 8.6 Methods and Generic Functions - 766
*** 8.6.1 Accessors - 768
*** 8.6.2 Extending Primitives - 768
*** 8.6.3 Merging Generics - 768
*** 8.6.4 Next-method - 769
*** 8.6.5 Generic Function and Method Examples - 770
*** 8.6.6 Handling Invocation Errors - 773

** 8.7 Inheritance - 773
*** 8.7.1 Class Precedence List - 774
*** 8.7.2 Sorting Methods - 775

** 8.8 Introspection - 776
*** 8.8.1 Classes - 776
*** 8.8.2 Instances - 777
*** 8.8.3 Slots - 777
*** 8.8.4 Generic Functions - 779
*** 8.8.5 Accessing Slots - 780

** 8.9 Error Handling - 782
** 8.10 GOOPS Object Miscellany - 782
** 8.11 The Metaobject Protocol - 783
*** 8.11.1 Metaobjects and the Metaobject Protocol - 783
*** 8.11.2 Metaclasses - 785
*** 8.11.3 MOP Specification - 786
*** 8.11.4 Instance Creation Protocol - 786
*** 8.11.5 Class Definition Protocol - 787
*** 8.11.6 Customizing Class Definition - 790
*** 8.11.7 Method Definition - 792
*** 8.11.8 Method Definition Internals - 792
*** 8.11.9 Generic Function Internals - 793
*** 8.11.10 Generic Function Invocation - 794

** 8.12 Redefining a Class - 795
*** 8.12.1 Default Class Redefinition Behaviour - 795
*** 8.12.2 Customizing Class Redefinition - 795

** 8.13 Changing the Class of an Instance - 796

* TODO 9 Guile Implementation - 799
** 9.1 A Brief History of Guile - 799
*** 9.1.1 The Emacs Thesis - 799
*** 9.1.2 Early Days - 799
*** 9.1.3 A Scheme of Many Maintainers - 800
*** 9.1.4 A Timeline of Selected Guile Releases - 801
*** 9.1.5 Status, or: Your Help Needed - 802

** 9.2 Data Representation - 803
*** 9.2.1 A Simple Representation - 804
*** 9.2.2 Faster Integers - 804
*** 9.2.3 Cheaper Pairs - 806
*** 9.2.4 Conservative Garbage Collection - 807
*** 9.2.5 The SCM Type in Guile - 808
**** 9.2.5.1 Relationship between SCM and scm_t_bits - 808
**** 9.2.5.2 Immediate objects - 809
**** 9.2.5.3 Non-immediate objects - 810
**** 9.2.5.4 Allocating Cells - 810
**** 9.2.5.5 Heap Cell Type Information - 811
**** 9.2.5.6 Accessing Cell Entries - 811

** 9.3 A Virtual Machine for Guile - 812
*** 9.3.1 Why a VM? - 812
*** 9.3.2 VM Concepts - 813
*** 9.3.3 Stack Layout - 814
*** 9.3.4 Variables and the VM - 815
*** 9.3.5 Compiled Procedures are VM Programs - 816
*** 9.3.6 Object File Format - 817
*** 9.3.7 Instruction Set - 819
**** 9.3.7.1 Lexical Environment Instructions - 820
**** 9.3.7.2 Top-Level Environment Instructions - 821
**** 9.3.7.3 Procedure Call and Return Instructions - 822
**** 9.3.7.4 Function Prologue Instructions - 824
**** 9.3.7.5 Trampoline Instructions - 825
**** 9.3.7.6 Branch Instructions - 826
**** 9.3.7.7 Constant Instructions - 827
**** 9.3.7.8 Dynamic Environment Instructions - 828
**** 9.3.7.9 Miscellaneous Instructions - 829
**** 9.3.7.10 Inlined Scheme Instructions - 830
**** 9.3.7.11 Inlined Atomic Instructions - 832
**** 9.3.7.12 Inlined Mathematical Instructions - 832
**** 9.3.7.13 Inlined Bytevector Instructions - 833
**** 9.3.7.14 Unboxed Integer Arithmetic - 834
**** 9.3.7.15 Unboxed Floating-Point Arithmetic - 836

** 9.4 Compiling to the Virtual Machine - 836
*** 9.4.1 Compiler Tower - 836
*** 9.4.2 The Scheme Compiler - 838
*** 9.4.3 Tree-IL - 839
*** 9.4.4 Continuation-Passing Style - 843
**** 9.4.4.1 An Introduction to CPS - 843
**** 9.4.4.2 CPS in Guile - 845
**** 9.4.4.3 Building CPS - 848
**** 9.4.4.4 CPS Soup - 849
**** 9.4.4.5 Compiling CPS - 852

*** 9.4.5 Bytecode - 853
*** 9.4.6 Writing New High-Level Languages - 855
*** 9.4.7 Extending the Compiler - 855

* TODO Appendix A GNU Free Documentation License - 857
* TODO Concept Index - 865
* TODO Procedure Index - 871
* TODO Variable Index - 913
* TODO Type Index - 917
* TODO R5RS Index - 919

