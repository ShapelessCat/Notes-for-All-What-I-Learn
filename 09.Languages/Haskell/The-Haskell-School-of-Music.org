#+TITLE: The Haskell School of Music
#+SUBTITLE: From Signals to Symphonies
#+AUTHOR: Paul Hudak
#+VERSION: Version 2.6 (January 2014)
#+STARTUP: overview
#+STARTUP: entitiespretty

* List of Figures - xii
* List of Tables - xiii
* Preface - xiv
* 1 Computer Music, Euterpea, and Haskell - 1
** 1.1 The Note vs. Signal Dichotomy - 2
** 1.2 Basic Principles of Programming - 3
** 1.3 Computation by Calculation - 4
** 1.4 Expressions and Values - 8
** 1.5 Types - 10
** 1.6 Function Types and Type Signatures - 11
** 1.7 Abstraction, Abstraction, Abstraction - 13
** 1.8 Haskell Equality vs. Euterpean Equality - 22
** 1.9 Code Reuse and Modularity - 23
** 1.10 [Advanced] Programming with Numbers - 24

* 2 Simple Music - 28
** 2.1 Preliminaries - 28
** 2.2 Notes, Music, and Polymorphism - 30
** 2.3 Convenient Auxiliary Functions - 34
** 2.4 Absolute Pitches - 41

* 3 Polymorphic & Higher-Order Functions - 45
** 3.1 Polymorphic Types - 46
** 3.2 Abstraction Over Recursive Definitions - 47
** 3.3 Append -51
** 3.4 Fold -53
** 3.5 [Advanced] A Final Example: Reverse - 58
** 3.6 Currying - 60
** 3.7 Errors - 64

* 4 A Musical Interlude - 67
** 4.1 Modules - 67
** 4.2 Transcribing an Existing Score - 69
** 4.3 Simple Algorithmic Composition - 74

* 5 Syntactic Magic - 77
** 5.1 Sections - 77
** 5.2 Anonymous Functions - 79
** 5.3 List Comprehensions - 80
** 5.4 Function Composition - 83
** 5.5 Higher-Order Thinking - 84
** 5.6 Infix Function Application - 85

* 6 More Music - 87
** 6.1 Delay and Repeat - 87
** 6.2 Inversion and Retrograde - 88
** 6.3 Polyrhythms - 90
** 6.4 Symbolic Meter Changes - 92
** 6.5 Computing Duration - 93
** 6.6 Super-retrograde - 93
** 6.7 takeM and dropM - 94
** 6.8 Removing Zeros - 95
** 6.9 Truncating Parallel Composition - 97
** 6.10 Trills - 99
** 6.11 Grace Notes - 101
** 6.12 Percussion - 102
** 6.13 A Map for Music - 104
** 6.14 A Fold for Music - 107
** 6.15 Crazy Recursion - 108

* 7 Qualified Types and Type Classes - 111
** 7.1 Motivation - 111
** 7.2 Equality - 113
** 7.3 Defining Our Own Type Classes - 115
** 7.4 Haskell’s Standard Type Classes - 121
** 7.5 Other Derived Instances - 126
** 7.6 The type of play - 130
** 7.7 Reasoning With Type Classes - 130

* 8 Interpretation and Performance - 134
** 8.1 Abstract Performance - 135
** 8.2 Players - 141
** 8.3 Putting it all Together - 149

* 9 Self-Similar Music - 153
** 9.1 Self-Similar Melody - 153
** 9.2 Self-Similar Harmony - 157
** 9.3 Other Self-Similar Structures - 158

* 10 Proof by Induction - 161
** 10.1 Induction and Recursion - 161
** 10.2 Examples of List Induction - 162
** 10.3 Proving Function Equivalences - 164
** 10.4 Useful Properties on Lists - 168
** 10.5 Induction on the Music Data Type - 172
** 10.6 [Advanced] Induction on Other Data Types - 176

* 11 An Algebra of Music - 182
** 11.1 Musical Equivalance - 182
** 11.2 Some Simple Axioms - 184
** 11.3 The Fundamental Axiom Set - 187
** 11.4 An Algebraic Semantics - 189
** 11.5 Other Musical Properties - 189

* 12 L-Systems and Generative Grammars - 191
** 12.1 Generative Grammars - 191
** 12.2 An L-System Grammar for Music - 197

* 13 Random Numbers ... and Markov Chains - 201
** 13.1 Random Numbers - 201
** 13.2 Probability Distributions - 204
** 13.3 Markov Chains - 210

* 14 From Performance to Midi - 214
** 14.1 An Introduction to Midi - 215
** 14.2 Converting a Performance into Midi - 220
** 14.3 Putting It All Together - 223

* 15 Basic Input/Output - 224
** 15.1 ~IO~ in Haskell - 224
** 15.2 ~do~ Syntax - 226
** 15.3 Actions are Just Values - 227
** 15.4 Reading and Writing MIDI Files - 229

* 16 Higher-Order Types and Monads - 230
** 16.1 The Functor Class - 230
** 16.2 The Monad Class - 233
** 16.3 The MonadPlus Class - 240
** 16.4 State Monads - 242
** 16.5 Type Class Type Errors - 245

* 17 Musical User Interface - 247
  Daniel Winograd-Cort
** 17.1 Introduction - 247
** 17.2 Basic Concepts - 248
** 17.3 The UISF Arrow - 254
** 17.4 Non-Widget Signal Functions - 264
** 17.5 Musical Examples - 269
** 17.6 Special Purpose and Custom Widgets - 274
** 17.7 Advanced Topics - 282

* 18 Sound and Signals - 289
** 18.1 The Nature of Sound - 289
** 18.2 Digital Audio - 299

* 19 Euterpea's Signal Functions - 311
** 19.1 Signals and Signal Functions - 312
** 19.2 Generating Sound - 322
** 19.3 Instruments - 323

* 20 Spectrum Analysis - 331
** 20.1 Fourier’s Theorem - 331
** 20.2 The Discrete Fourier Transform - 335
** 20.3 The Fast Fourier Transform - 348
** 20.4 Further Pragmatics - 349
** 20.5 References - 350

* 21 Additive and Subtractive Synthesis - 351
** 21.1 Additive Synthesis - 352
** 21.2 Subtractive Synthesis - 360
 
* 22 Amplitude and Frequency Modulation - 369
** 22.1 Amplitude Modulation - 369
** 22.2 Frequency Modulation - 372

* 23 Physical Modelling - 377
** 23.1 Introduction - 377
** 23.2 Delay Lines - 377
** 23.3 Karplus-Strong Algorithm - 381
** 23.4 Waveguide Synthesis - 382

* 24 Sound Effects - 386
* Appendix - 387
* A The PreludeList Module - 388
** A.1 The PreludeList Module - 389
** A.2 Simple List Selector Functions - 389
** A.3 Index-Based Selector Functions - 390
** A.4 Predicate-Based Selector Functions - 392
** A.5 Fold-like Functions - 392
** A.6 List Generators - 394
** A.7 String-Based Functions - 394
** A.8 Boolean List Functions - 395
** A.9 List Membership Functions - 396
** A.10 Arithmetic on Lists - 396
** A.11 List Combining Functions - 397

* B Haskell’s Standard Type Classes - 399
** B.1 The Ordered Class - 399
** B.2 The Enumeration Class - 400
** B.3 The Bounded Class - 401
** B.4 The Show Class - 402
** B.5 The Read Class - 405
** B.6 The Index Class - 408
** B.7 The Numeric Classes - 409

* C Built-in Types Are Not Special 411
* D Pattern-Matching Details 414
* Bibliography 419


