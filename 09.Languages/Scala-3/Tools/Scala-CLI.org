#+TITLE: Scala CLI
#+LINK: scala-cli.virtuslab.org
#+VERSION: 0.0.9
#+Funder: VirtusLab
#+STARTUP: overview
#+STARTUP: entitiespretty

* Installation
  - *Quick start*

  - *Advanced Installation*

  - *Standalone launcher*

  - *Shell completions*

  - *Scala JS*

  - *Scala Native*

* Use cases
** Education
** Scripting
** prototyping, experimenting, reporducing
** Single-module projects
   
* Documentation
** Overview
   The =scala-cli= CLI makes it easier to compile, run, test, and package Scala code.

   - It can:
     * =compile= Scala code
     * =run= it
     * =package= it as a JAR file, or in formats such as deb, rpm, MSI, ...
     * fire up a =REPL=, letting you quickly play with the code
     * compile and run =tests= suites

     ... and more!

   - Scala CLI supports
     * most recent Scala versions (_3.x_, _2.13.x_ and _2.12.x_), and
       changing the Scala version as easy as providing the =--scala= parameter.
       _See the cookbook for more info_.

     * /Scala.js/ and /Scala Native/.

*** Installation
    ~brew install Virtuslab/scala-cli/scala-cli~

    - Another way:
      See our _Advanced installation guide_.

*** What's next?
    Scala-CLI documentation is split into three main sections:
    * _Getting started_,
      where you learn how to start with Scala CLI

    * _Commands_,
      where you learn the most important Scala CLI commands

    * _Guides_,
      where you can read about the core aspects of Scala CLI, and learn how
      Scala CLI interacts with other tools, like your IDE

    * Scala CLI _Cookbook_,
      where you can learn how to solve specific problems with Scala CLI

** DONE Getting started - =TODO= NOTE
CLOSED: [2022-01-18 Tue 09:40]
   - Pre-knowledge:
     =TOOD=
     
   - Aim:
     =TOOD=

   - Let's verify if Scala CLI is properly installed with a simple "hello world"
     test:
     #+begin_src bash
       echo 'println("Hello")' | scala-cli -
       # Hello
     #+end_src
    
*** Scripting
    #+begin_src scala
      def helloMessage(names: Seq[String]): String = names match
        case Nil   => "Hello!"
        case names => names.mkString("Hello: ", ", ", "!")

      println(helloMessage(args.toSeq))
    #+end_src

    Run it:
    #+begin_src bash
      scala-cli hello.sc
      # Hello


      scala-cli hello.sc -- Jenny Jake
      # Hello Jenny, Jake!
    #+end_src

    - The Scala version used is the *latest stable version which was tested in Scala CLI.*
      * If we want to specify the Scala version we can use ~-S~ or ~--scala~ option.
      * More about setting _Scala version_ in a dedicated _cookbook_.

*** Dependencies
    #+begin_src bash
      scala-cli repl
    #+end_src

    - Add a dependency:
      #+begin_src bash
        scala-cli repl --dep com.lihaoyi::os-lib:0.7.8
      #+end_src
      #+begin_src scala
        os.pwd
        // val res0: os.Path = ...

        os.walk[os.pwd]
        // val res1: IndexedSeq[os.Path] = ArraySeq(...)
      #+end_src
    
*** A project
    Example:
    create a filter function to display all files with the given filename
    extension in the current directory.

    #+begin_src scala
      // using lib com.lihaoyi::os-lib:0.7.8

      def filesByExtension(extension: String,
                           dir: os.Path = os.home): Seq[os.Path] =
        os.walk(dir).filter { f =>
          ff.last.endsWith(s".$extension") && os.isFile(f)
        }
    #+end_src
    Then run ~scala-cli compile .~
    
    - Here, the ~// using lib com.lihaoyi::os-lib:0.7.8~ is important.
      For scala-cli, it is a instruction about dependencies, not a pure comment.
      Without it, ~scala-cli compile .~ would fail because of a missing dependency.
      =CAUTION= This ~// using lib ...~ is a experimental syntax, and it may change in the future. 

    - For project-like use cases, scala-cli recommend providing directories
      ratheer than individual files -- for most cases, specifying the current
      directory (~.~) is a best choice.

*** IDE support
    - At the present moment, support for IntelliJ is often *problematic*.

    - In order for Metals or IntlliJ to pick up a Scala CLI project, we need to
      generate a BSP connection detail file.
      * Scala CLI generates these details by default every time ~compile~, ~run~, or ~test~ are run.
        + You can also manually control creation of the connection details file by using ~setup-ide~.

    - =TODO= See *IDE guide* for more.

*** Tests
    xxx
     
*** A project, vol 2
*** Packaging
*** Summary

** DONE Commands - =TODO= NOTE
CLOSED: [2022-01-18 Tue 09:40]
*** Basics
**** Input formats
**** Source files
**** Directories
**** URLs
**** GitHub Gist
**** Piping
**** Process substitution

*** Compile
**** Watch mode
**** Scala version
**** Dependencies
**** Scala compiler options
**** Scala compiler plugins
**** Printing a class path

*** Run
**** Passing arguments
**** Main class
**** Custom JVM
**** Scala.JS
**** Scala Native
**** Scala Scripts
**** Scala CLI from docker

*** Test
**** Test sources
**** Test framework
**** Test arguments

*** Package
**** Default package format
**** Library JARs
**** Assemblies
**** Docker container
**** Scala.JS
**** Scala Native
**** OS-specific packages
***** Debian
****** Mandatory arguments
****** Optional arguments

***** RedHat
****** Mandatory arguments
****** Optional arguments

***** macOS (PKG)
****** Mandatory arguments
****** Optional arguments

***** Windows
****** Mandatory arguments
****** Optional arguments

*** REPL
**** Default package format

*** Format
**** Dialects
**** Current limitations

*** IDE Setup
**** IDE support internals

*** Clean

** TODO Guides
*** Introduction
    This section covers aspects of Scala CLI that apply *across various commands*.
    
    The guides cover many aspects that are *quite detailed* that, so we recommend
    starting at these points:
    - Configuration guide
    - IDE guide
    - ~using~ directives guide
    - _Scala.js_ and _Scala Native_ guides
    - _sbt_ / _mill_ export guide
    - Scripting guide
    
*** Configuration
    - scala-cli can be configured in two ways:
      * on the command-line
      * directly in =.scala= and =.sc= files

    - Parameters on the command line _TAKE PRECEDENCE OVER_ parameters in sources.
      * Rationale:
        That way, you can quickly _OVERRIDE_ parameters from the command line.
        
**** Configuration
     - Pass ~--help~ to any sub-command of scala-cli to list its options:
       #+begin_src bash
         scala-cli --help

         scala-cli package --help
       #+end_src

     - In previous sections, we already learned:
       * ~--scala~
       * ~--dependency~
       
**** In =.scala= and =.sc= files
***** Special imports
***** In =.scala= and =.sc= files
    
*** Managing dependencies
*** IDE support
*** Using directives
*** SBT and Mill
*** Scripts
*** Scala.JS
*** Scala Native
*** Internals

** TODO Cookbook
*** Introduction
*** Packaging Scala applications as executable files
*** Picking the Scala version with scala-cli
*** Using scala-cli to run Scala Scripts
*** Testing your code with different Java versions
*** Packaging Scala applications as Docker images
*** Sharing and testing code with GitHub gists
*** Setup ScalaCLI project in VSCode

** TODO Reference
*** Command-line options
*** Directives
*** Commands
*** Dependency format
*** Working directory
*** Interaction with Bloop server
*** Supported scala versions

** TODO Under the hood
