#+TITLE: http4s
#+SUBTITLE: Functional Configurations for Scala
#+VERSION: v1.0 (development)
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Quick Start
* TODO Integrations
** Ember
** Backend Integrations
** Entity Integrations

* TODO Upgrading
** TODO Automated Upgrading with Scalafix
** TODO Http4s 0.21 -> 0.22 Migration Guide
** TODO Help Us Help You!

* TODO Service
** Your First Service
*** Defining Your Service
*** Returning Content in the rEsponse
*** Returning Your Service

** Cleaning Up
*** Running Your Service as an ~App~

* TODO The https4s DSL
** Add the https4s-dsl to your build
** The Simplest Service
** Testing the Service
** Generating Responses
*** Status codes
*** Headers
*** Cookies
*** Responding with a Body
**** Simple Bodies
**** Asynchronous Responses
**** Streaming Bodies

** Matching and Extracting Requests
*** The ~->~ object
*** Path Info
*** Matching Paths
*** Handling Path Parameters
*** Handling Matrix Path Parameters
*** Handling Query Parameters
**** Optional Query Parameters
**** Missing Required Query Parameters
**** Invalid Query Parameter Handling
**** Optional Invalid Query Parameter Handling

* TODO Middleware
** Composing Services with Middleware
** Included Middleware
*** Metrics Middleware
*** X-Request-ID Middleware

* TODO Authentication
** Built in
** Composing Authenticated Routes
** Returning an Error Response
*** With Kleisli

** Implementing authUser
*** Cookies
*** Authorization Header
*** Using tsec-http4s for Authentication and Authorization

* TODO CORS
** Usage
** Configuration

* TODO CSRF
* TODO GZip Compression
* TODO HSTS
  # HTTP Strict Transport Security
** Configuration
** References

* TODO Static Files
** Getting Started
** ETags
** Inline in Route
** Serving from JARs
** Webjars

* TODO HTTP Client
*** Creating the client
*** Describing a call

** Making the call
** Constructing a URI
** Middleware
*** Included Middleware
*** Metrics Middleware

** Examples
*** Send a GET request, treating the response as a string
*** Post a form, decoding the JSON response to a case class

** Calls to a JSON API
** Body decoding / encoding

* TODO Entity handling
** Why Entity*
** Construction and Media Types
** Chaining Decoders
** Presupplied Encoders/Decoders
*** Raw Data Types
*** JSON
*** XML
*** Support for Twirl and Scalatags

* TODO Streaming
** Streaming responses from your service
** Consuming Streams with the Client

* TODO JSON handling
** Add the JSON support module(s)
*** Circe

** Sending Raw JSON
** Encoding case classes as JSON
** Receiving Raw JSON
** Decoding JSON to a case class
** Putting it all together
*** A Hello world service
*** A Hello world client

* TODO Testing
** Using client
** Conclusion
** References

* TODO URI handling
** Literals
** Building URIs
*** URI
*** URI Template

** Receiving URIs

* TODO Deployment
** Overview
** Assembled JAR
** Graal Native Image
*** Install GraalVM and Native Image plugin

** (Optional) Get or build a muslC bundle required to build a static image.
** META-INF resources for reflection
*** Build an assembled jar using GraalVM
*** Create the native image with the assembled JAR
*** Execute the native image
*** Why static?

* TODO Error Handling
** TODO Logging
** TODO Customizing Error Handling

* TODO HTTP Methods
