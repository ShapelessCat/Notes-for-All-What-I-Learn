#+TITLE: from OLD Scala 3 Reference
#+VERSION: 3.2.2-RC1-bin-20220916-afc6ce4-NIGHTLY -> 3.3.1-RC1-bin-20230525-2e19304-NIGHTLY
#+AUTHORS: Dotty Contributors
#+STARTUP: overview
#+STARTUP: entitiespretty

=FIXME= Fix some title: capitalize each word that is not preposition

* DONE Usage
  CLOSED: [2021-06-15 Tue 02:15]
** DONE Getting Started: Users
   CLOSED: [2020-12-11 Fri 11:22]
*** Trying out Dotty
**** In your web browser
     The online Scala playground [[https://scastie.scala-lang.org][Scastie]]
     - an easy way to try Dotty without installing anything;
     - =from Jian= a project of _Scala Center_.

**** sbt
     Use sbt (1.1.4+)
     - Dotty project:
       ~sbt new scala/scala3.g8~

     - Dotty project that _cross compiles_ with Scala 2:
       ~sbt new scala/scala3-cross.g8~

**** IDE support
     Check the *IDE support for Dotty* section.

**** Standalone installation
     - Releases include _THREE_ executables:
       #+begin_src text
         .
         |_ bin
             |_ scalac
             |_ scalad
             |_ scal
       #+end_src
       * scalac is the Dotty compiler
       * scalad is the Dotty Documentation tool
       * scala is the Dotty REPL

     - Ignore Mac related setup

**** Scala 3 for Scripting
     - If the =scala= executable on your ~PATH~, you can run =*.scala= files as
       _scripts_. Given a source named =Test.scala=:
       #+begin_src scala
         @main def Test(name: String): Unit =
           println(s"Hello ${name}!")
       #+end_src
       You can run: =scala Test.scala World= to get an output =Hello World!=.

     - A "script" is an _ORDINARY_ Scala file which contains a /main method/.
       The semantics of the =scala Script.scala= command is as follows:
       * *Compile* =Script.scala= with =scalac= into a temporary directory.
       * *Detect* the /main method/ in the =*.class= files produced by the compilation.
       * *Execute* the /main method/.

** DONE Using Dotty with sbt
   CLOSED: [2020-12-09 Wed 23:15]
   A redirect link to the sbt subsection in the _Getting Started: Users_
   section.

** DONE IDE support for Scala 3 - =CHANGED= =RE-READ=
   CLOSED: [2020-12-09 Wed 23:21]
   Dotty comes *built-in* with the /Dotty Language Server/, an implementation of
   the /Language Server Protocol/, which means that any editor that implements the
   LSP can be used as a Dotty IDE.
   - Currently, the only IDE we officially support is Visual Studio Code.

*** DONE Prerequisites
    CLOSED: [2020-12-09 Wed 23:18]
    Follow the instructions for the [[https://github.com/scala/scala3-example-project][scala3-example-project]]

*** DONE Usage
    CLOSED: [2020-12-09 Wed 23:18]
    Install _Visual Studio Code_, and run command ~sbt launchIDE~ in a Dotty
    project.

*** DONE Status - =WATCHING=
    CLOSED: [2020-12-09 Wed 23:20]
    =from Jian=
    I don't think current description below is update to date!
    It has been there for a very long time without significant changes.

**** Fully supported features
**** Partial working features
**** Unimplemented features
**** Current limitations, to be fixed

*** TODO Feedback

** DONE Worksheet mode in Dotty IDE
   CLOSED: [2020-12-09 Wed 23:25]
   - Worksheet use the extension .sc

*** DONE How to use the worksheets
    CLOSED: [2020-12-09 Wed 23:23]
   - On top of the buffer, the message "Run this worksheet" appears.
     Click it to evaluate the code of the worksheet.

   - The option "Run Worksheet On Save" can be turned on and off.
     =from Jian= Assume Visual Studio Code and LSP are being used.

*** TODO Implementation details
    More details in [[https://dotty.epfl.ch/docs/usage/worksheet-mode-implementation-details.html][Worksheet mode - Implementation details]]

** DONE Language Versions - =RE-READ=
   CLOSED: [2021-06-15 Tue 02:15]
   - The default Scala language version currently supported by the Dotty compiler
     is 3.0.
     There are also other language versions that can be specified instead:
     * 3.1 ::
       A preview of changes introduced in the next version after 3.0.
       _Some Scala-2 specific idioms will be *dropped* in this version._
       The feature set supported by this version will be refined over time as we
       approach its release.

     * 3.0-migration ::
       Same as 3.0 but with a Scala 2 compatibility mode that helps moving
       Scala 2.13 sources over to Scala 3. In particular, it
       + *flags* some Scala 2 constructs that are _DISALLOWED in Scala 3_ as
         _migration warnings_ instead of hard errors,

       + *changes* some rules to be _MORE LENIENT and BACKWARDS COMPATIBLE with
         Scala 2.13_

       + gives some _additional warnings_ where the semantics has changed between
         Scala 2.13 and 3.0

       + in conjunction with ~-rewrite~, offer code rewrites _from Scala 2.13 to 3.0_.

     * 3.1-migration ::
       Same as 3.1 but with additional helpers to migrate from 3.0.
       + Similarly to the helpers available under 3.0-migration, these include
         _migration warnings_ and _optional rewrites_.

   - There are _TWO ways_ to *specify* a _language version_.
     * With a ~-source~ command line setting, e.g.
       #+begin_src bash
         scalac -source 3.0-migration ........
       #+end_src

     * With a ~scala.language~ _import_ at the top of a source file, e.g:
       #+begin_src scala
         package p

         import scala.language.`3.1`

         class C {
           ...
         }
       #+end_src

   - _Language imports_ *supersede* _command-line settings_ in the /source files/
     where they are specified.
     * *Only one* _language import_ is allowed in a /source file/, and it
       MUST come before any definitions in that file.

** DONE Using Dotty with cbt
   CLOSED: [2020-11-06 Fri 11:32]
   # *Using Dotty with cbt*
   =from Jian=: We can ignore this section

** TODO scaladoc
*** Built-in blog
*** Linking documentation
*** Scaladoc docstrings - specific Tags and Features
*** Scaladoc settings
*** Site versioning
*** Static documentation
* TODO Resources - =REMOVED=
*** Talks
**** Talks on Dotty
**** Deep Dive with Dotty
* Contributing
** TODO Testing in Dotty
*** Unit tests
**** Testing with checkfiles

*** Integration tests
**** Joint and separate sources compilation
**** Bootstrapped-only tests
**** From TASTy tests
**** SemanticDB tests

*** Troubleshooting

** TODO Debugging Techniques
*** Setting up the playground
*** Show for human readable output
*** How to disable color
*** Reporting as a non-intrusive ~println~
*** Printing out trees after phases
*** Printing out stack traces of compile time errors
*** Configuring the printer output
*** Figuring out an object creation site
**** Via ID
**** Via tracer

*** Built-in Logging Architecture
**** Printers
**** Tracing
**** Reporter
* Internals
** Core Data Structrues
*** Symbols and SymDenotations
*** Why is this important?
*** Are We Done Yet?
*** What Are the Next Steps?


