#+TITLE: The Java® Language Specification
#+VERSION: Java SE 9 Edition, 2017-08-07
#+AUTHOR: James Gosling, Bill Joy, Guy Steele, Gilad Bracha, Alex Buckley, Daniel Smith
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO 1 Introduction - 1
** TODO 1.1 Organization of the Specification - 2
** DONE 1.2 Example Programs - 6
   CLOSED: [2018-02-07 Wed 19:45]
** DONE 1.3 Notation - 6
   CLOSED: [2018-02-07 Wed 19:58]
   - Throughout this specification we refer to /classes/ and /interfaces/ drawn
     from the /Java SE Platform API/.

     + We use a single identifier N for a class or interface from the ~java.lang~
       package, if not one defined in our example code.

     + We use the /canonical name/ (§6.7 =TODO=) for /classes/ or /interfaces/ from
       /packages/ other than ~java.lang~.

   - /Non-normative information/, designed to clarify the specification, is given
     in small size font(s) and indent.

   - The /type system/ of the Java programming language occasionally relies on
     the /notion of a substitution/.

     The notation ~[F1:=T1,...,Fn:=Tn]~ denotes *substitution* of ~Fi~ by ~Ti~
     for ~1 ≤ i ≤ n~.
   
** TODO 1.4 Relationship to Predefined Classes and Interfaces - 7
   =TODO= =More details=

   - This specification does *NOT* describe /reflection/ in any detail.

     The reader is referred to the Java SE Platform API documentation. =??????=
     =TODO:= I don't know what is this?!

** DONE 1.5 Feedback - 7
   CLOSED: [2018-02-07 Wed 19:54]
   - Please report *technical errors and ambiguities* in /The Java® Language
     Specification/ to ~jls-jvms-spec-comments@openjdk.java.net~.

   - Questions concerning the behavior of ~javac~, and in particular its
     conformance to this specification, may be sent to
     ~compiler-dev@openjdk.java.net~.

** TODO 1.6 References - 7

* DONE 2 Grammars - 9 =In-Complete= 
  CLOSED: [2018-02-07 Wed 21:19]
  THIS chapter describes the /context-free grammars/ used in this specification
  to define /the lexical and syntactic structure of a program/.

  =TODO= =From Jian= Therefore /the lexical and syntactic structure of a program/
                     will be explained in the later chapter.

** 2.1 Context-Free Grammars - 9
   - A /context-free grammar/ *consists* of _a number of_ /productions/.

     + Each /production/ has
       * *left-hand side*:
         /an abstract symbol/ called a /nonterminal/

         and

       * *right-hand side*:
         a sequence of _one or more_ /nonterminal and terminal/ symbols/

   - For each grammar, the /terminal symbols/ are drawn *from* a specified
     alphabet.

   - goal symbol :: ??

   - Starting from a sentence consisting of a single distinguished nonterminal,
     called the /goal symbol/, a given context-free grammar specifies a
     language, namely, the set of possible sequences of terminal symbols that
     can result from repeatedly replacing any nonterminal in the sequence with a
     right-hand side of a production for which the nonterminal is the left-hand
     side.
     =TODO= rE-WRITE

** TODO 2.2 The Lexical Grammar - 9
   Next chapter !!!

** TODO 2.3 The Syntactic Grammar - 10
   - Chapter 4, 6-10, 14, and 15.

   - For convenience, the syntactic grammar is presented all together in Chapter 19.

** DONE 2.4 Grammar Notation - 10
   CLOSED: [2018-02-07 Wed 21:18]
   - In this specification,
     + /terminal symbols/ are shown in *fixed width font*
     + /nonterminal symbols/ are shown in *italic type font*.

   - The definition of a /nonterminal/ is introduced by the name of the
     /nonterminal/ being defined, followed by a colon.
       _One or more_ alternative definitions for the nonterminal then follow on
     succeeding lines.
     + =Non-normative information=
       For example, the *syntactic production*:

       /IfThenStatement/:
         if ( /Expression/ ) /Statement/

       states that the /nonterminal/ ~IfThenStatement~ represents
       1. the token ~if~,
       2. followed by a *left parenthesis* token,
       3. followed by an *Expression*,
       4. followed by a *right parenthesis* token,
       5. followed by a *Statement*.

   - */{x}/* on the *right-hand side* of a /production/ denotes
     _zero or more occurrences of x_
     + =Non-normative information=
       For example, the *syntactic production*:

       /ArgumentList/:
         /Argument/ /{, Argument}/

       states that the /nonterminal/ ~IfThenStatement~ represents
       1. states that an /ArgumentList/ consists of an /Argument/,
       2. followed by /zero or more occurrences/ of /a comma and an Argument/.

       The result is that an /ArgumentList/ may contain _any positive number of
       arguments_.

   - */[x]/* on the *right-hand side* of a /production/ denotes
     _zero or one occurrences of x, x is an optional symbol._ This actually
     defines alternatives in shorthand
     + =Non-normative information=
       This means that:

          /BreakStatement:/
            break /[Identifier] ;/

       is a convenient abbreviation for:
          /BreakStatement:/
            /break ;/
            /break Identifier ;/

     + =Non-normative information=
       As another example, it means that:

          /BasicForStatement/:
            for ( /[ForInit]/ ; /[Expression]/ ; /[ForUpdate]/ ) /Statement/

       is a convenient abbreviation for 8 alternative right-hand sides.

   - A very long right-hand side may be continued on a second line by clearly
     indenting the second line.

   - *(one of)* on the *right-hand side* of a /production/
     signifies that each of the symbols on the following line or lines is an
     alternative definition.
     + =Non-normative information=
       For example, the lexical grammar contains the production:

         /ZeroToThree/:
           /(one of)/
           0 1 2 3

       which is merely a convenient abbreviation for:

         /ZeroToThree/:
            0
            1
            2
            3

     + When an alternative in a /production/ appears to be a /token/, it
       represents _the sequence of characters that would make up such a
       /token/._
       * =Non-normative information=
         Thus, the production:
           /BooleanLiteral/:
             /(one of)/
             true false
         
         is shorthand for:

           /BooleanLiteral/:
             t r u e
             f a l s e

   - *but not*
     The *right-hand side* of a /production/ may specify that
     certain expansions are *not permitted* by using the phrase "but not" and
     then _indicating the expansions to be EXCLUDED_.
     + =Non-normative information=
       For example:
         /Identifier/:
            /IdentifierChars/ but not /a Keyword/ or /BooleanLiteral or NullLiteral/

   - Finally, a few /nonterminals/ are defined by a narrative phrase in
     *roman type* where it would be _impractical to list all the alternatives_.
     + =Non-normative information=
       For example:

         /RawInputCharacter/:
           any Unicode character

* TODO 3 Lexical Structure - 15
** TODO 3.1 Unicode - 15
   - The Java SE Platform tracks the Unicode Standard as it evolves.

   - The precise *version of Unicode* used by a given /release/ is specified in
     the documentation of the /class/ ~Character~.

   - =Non-normative=
     + version > JDK 1.1: Unicode 1.1.5.
     + JDK 1.1    : Unicode 2.0
     + JDK 1.1.7  : Unicode 2.1
     + Java SE 1.4: Unicode 3.0
     + Java SE 5.0: Unicode 4.0
     + Java SE 7  : Unicode 6.0
     + Java SE 8  : Unicode 6.2
     + Java SE 9  : Unicode 8.0

   - =TODO= The strategy how to encode Unicode with UTF-8.

   - The Java programming language represents text in sequences of 16-bit code
     units, using the UTF-16 encoding.
     =Non-normative=
     Some APIs of the Java SE Platform, primarily in the ~Character~ class, use
     32-bit integers to represent /code points/ as individual entities. _The Java
     SE Platform provides methods to convert between 16-bit and 32-bit
     representations._ =TODO= =???=

   - This specification
     + uses the terms /code point/ and /UTF-16 code unit/
       _where the representation is relevant_

     + the generic term /character/
       _where the representation is irrelevant to the discussion_

** TODO 3.2 Lexical Translations - 16
** TODO 3.3 Unicode Escapes - 17
** TODO 3.4 Line Terminators - 19
** TODO 3.5 Input Elements and Tokens - 19
** DONE 3.6 White Space - 20
   CLOSED: [2018-02-08 Thu 18:32]
   WhiteSpace:
     the ASCII SP character, also known as "space"
     the ASCII HT character, also known as "horizontal tab"
     the ASCII FF character, also known as "form feed"
     LineTerminator

   - See /LineTerminator/ in section 3.4

** TODO 3.7 Comments - 21
** TODO 3.8 Identifiers - 22
** TODO 3.9 Keywords - 24
** TODO 3.10 Literals - 25
   - literal :: the source code representation of
     + a value
     + a primitive type (§4.2)
     + the String type (§4.3.3)
     + the null type (§4.1).

   - Lexical structure
     /Literal/:
        /IntegerLiteral/
        /FloatingPointLiteral/
        /BooleanLiteral/
        /CharacterLiteral/
        /StringLiteral/
        /NullLiteral/

   - =From Jian=
     From the definition above, it seems something like the right hand side of
     ~int[] num = {1, 2, 3, 4, 5}~ is NOT a /literal/, though people call it with
     the phrase "array literal".

     + My guess: =TODO= verification
       it is just a /syntax sugar/, and the complete form
       ~new int[]{1, 2, 3}~ is NOT considered a /literal/ but a syntax for create
       an instance of the ~int[]~.

*** 3.10.1 Integer Literals 25
    - =TODO=

    - Underscores are allowed as separators between digits that denote the integer.

*** TODO 3.10.2 Floating-Point Literals 32
*** DONE 3.10.3 Boolean Literals 35
    CLOSED: [2018-02-08 Thu 19:51]
    The ~boolean~ /type/ has *two* /values/, represented by the /boolean
    literals/ ~true~ and ~false~, formed from ASCII letters.

    - Lexical structure:
      /BooleanLiteral/:
        /(one of)/
        true false

    A /boolean literal/ is *always* of /type/ ~boolean~ (§4.2.5 =TODO=).

*** TODO 3.10.4 Character Literals 35
*** TODO 3.10.5 String Literals 36
*** TODO 3.10.6 Escape Sequences for Character and String Literals 38
*** DONE 3.10.7 The Null Literal 39
    CLOSED: [2018-02-08 Thu 19:54]
    - The /null type/ has *one* /value/, the /null reference/, represented by the
      /null literal/ ~null~.

    - The ~null~ (/null literal/) is formed from ASCII characters.

    - Lexical structure
      /NullLiteral/:
        null

    - A /null literal/ is always of the /null type/ (§4.1 =TODO=).

** DONE 3.11 Separators 40 =TODO=
   CLOSED: [2018-02-08 Thu 20:02]
   - One /separtors/ is can be one of *12* /tokens/, which are enumerated
     below.

   - /Separators/ are formed from ASCII characters

   - They are punctuators.

   - Lexical structure
     #+BEGIN_SRC quote
     /Separator/:
       /(one of)/
       ( ) { } [ ] ; , . ... @ ::
     #+END_SRC

   - =TODO=
     =From Jian=
     + What is ~...~ ????

     + Is ~@~ ONLY used by /annotations/?
       At least, a convention????

     + Try to learn more about ~::~

** DONE 3.12 Operators 40 =TODO=
   CLOSED: [2018-02-08 Thu 20:02]
   - One /operator/ is can be one of *38* /tokens/.

   - /Operators/ are formed from ASCII characters.

   - Lexical structure
     #+BEGIN_QUOTE
     /Operator/:
       /(one of)/
       = > < ! ~ ? : ->
       == >= <= != && || ++ --
       + - * / & | ^ % << >> >>>
       += -= *= /= &= |= ^= %= <<= >>= >>>=
     #+END_QUOTE

   - =TODO=
     =From Jian=
     Try to write down all the /operators/ usages without refer any resources!!!

* TODO 4 Types, Values, and Variables - 41
** 4.1 The Kinds of Types and Values - 41
** 4.2 Primitive Types and Values - 42
*** 4.2.1 Integral Types and Values - 43
*** 4.2.2 Integer Operations - 43
*** 4.2.3 Floating-Point Types, Formats, and Values - 45
*** 4.2.4 Floating-Point Operations - 48
*** 4.2.5 The boolean Type and boolean Values - 51

** 4.3 Reference Types and Values - 52
*** 4.3.1 Objects - 53
*** 4.3.2 The Class Object - 56
*** 4.3.3 The Class String - 56
*** 4.3.4 When Reference Types Are the Same - 57

** 4.4 Type Variables - 57
** 4.5 Parameterized Types - 59
*** 4.5.1 Type Arguments of Parameterized Types - 60
*** 4.5.2 Members and Constructors of Parameterized Types - 63

** 4.6 Type Erasure - 64
** 4.7 Reifiable Types - 65
** 4.8 Raw Types - 66
** 4.9 Intersection Types - 70
** 4.10 Subtyping - 71
*** 4.10.1 Subtyping among Primitive Types - 71
*** 4.10.2 Subtyping among Class and Interface Types - 72
*** 4.10.3 Subtyping among Array Types - 73
*** 4.10.4 Least Upper Bound - 73

** 4.11 Where Types Are Used - 76
** 4.12 Variables - 80
*** 4.12.1 Variables of Primitive Type - 81
*** 4.12.2 Variables of Reference Type - 81
*** 4.12.3 Kinds of Variables - 83
*** 4.12.4 final Variables - 85
*** 4.12.5 Initial Values of Variables - 87
*** 4.12.6 Types, Classes, and Interfaces - 88

* TODO 5 Conversions and Contexts - 93
** 5.1 Kinds of Conversion 96
*** 5.1.1 Identity Conversion 96
*** 5.1.2 Widening Primitive Conversion 96
*** 5.1.3 Narrowing Primitive Conversion 98
*** 5.1.4 Widening and Narrowing Primitive Conversion 101
*** 5.1.5 Widening Reference Conversion 101
*** 5.1.6 Narrowing Reference Conversion 101
**** 5.1.6.1 Allowed Narrowing Reference Conversion 102
**** 5.1.6.2 Checked and Unchecked Narrowing Reference Conversions 103
**** 5.1.6.3 Narrowing Reference Conversions at Run Time 103

*** 5.1.7 Boxing Conversion 105
*** 5.1.8 Unboxing Conversion 107
*** 5.1.9 Unchecked Conversion 108
*** 5.1.10 Capture Conversion 109
*** 5.1.11 String Conversion 111
*** 5.1.12 Forbidden Conversions 112
*** 5.1.13 Value Set Conversion 112

** 5.2 Assignment Contexts 113
** 5.3 Invocation Contexts 118
** 5.4 String Contexts 120
** 5.5 Casting Contexts 120
** 5.6 Numeric Contexts 126
*** 5.6.1 Unary Numeric Promotion 127
*** 5.6.2 Binary Numeric Promotion 128

* TODO 6 Names - 131
** 6.1 Declarations 132
** 6.2 Names and Identifiers 139
** 6.3 Scope of a Declaration 141
** 6.4 Shadowing and Obscuring 145
*** 6.4.1 Shadowing 147
*** 6.4.2 Obscuring 150

** 6.5 Determining the Meaning of a Name 151
*** 6.5.1 Syntactic Classification of a Name According to Context 152
*** 6.5.2 Reclassification of Contextually Ambiguous Names 155
*** 6.5.3 Meaning of Module Names and Package Names 157
**** 6.5.3.1 Simple Package Names 157
**** 6.5.3.2 Qualified Package Names 158

*** 6.5.4 Meaning of PackageOrTypeNames 158
**** 6.5.4.1 Simple PackageOrTypeNames 158
**** 6.5.4.2 Qualified PackageOrTypeNames 158

*** 6.5.5 Meaning of Type Names 158
**** 6.5.5.1 Simple Type Names 158
**** 6.5.5.2 Qualified Type Names 158

*** 6.5.6 Meaning of Expression Names 159
**** 6.5.6.1 Simple Expression Names 159
**** 6.5.6.2 Qualified Expression Names 160

*** 6.5.7 Meaning of Method Names 163
*** 6.5.7.1 Simple Method Names 163

** 6.6 Access Control 164
*** 6.6.1 Determining Accessibility 165
*** 6.6.2 Details on protected Access 169
**** 6.6.2.1 Access to a protected Member 170
**** 6.6.2.2 Access to a protected Constructor 170

** 6.7 Fully Qualified Names and Canonical Names 172

* TODO 7 Packages and Modules - 175
** 7.1 Package Members 176
** 7.2 Host Support for Modules and Packages 177
** 7.3 Compilation Units 180
** 7.4 Package Declarations 181
*** 7.4.1 Named Packages 182
*** 7.4.2 Unnamed Packages 182
*** 7.4.3 Package Observability and Visibility 183

** 7.5 Import Declarations 184
*** 7.5.1 Single-Type-Import Declarations 185
*** 7.5.2 Type-Import-on-Demand Declarations 187
*** 7.5.3 Single-Static-Import Declarations 188
*** 7.5.4 Static-Import-on-Demand Declarations 189

** 7.6 Top Level Type Declarations 190
** 7.7 Module Declarations 193
*** 7.7.1 Dependences 195
*** 7.7.2 Exported and Opened Packages 198
*** 7.7.3 Service Consumption 199
*** 7.7.4 Service Provision 199
*** 7.7.5 Unnamed Modules 200
*** 7.7.6 Observability of a Module 201

* TODO 8 Classes - 203
** 8.1 Class Declarations 205
*** 8.1.1 Class Modifiers 205
**** 8.1.1.1 abstract Classes 206
**** 8.1.1.2 final Classes 208
**** 8.1.1.3 strictfp Classes 208

*** 8.1.2 Generic Classes and Type Parameters 208
*** 8.1.3 Inner Classes and Enclosing Instances 211
*** 8.1.4 Superclasses and Subclasses 214
*** 8.1.5 Superinterfaces 216
*** 8.1.6 Class Body and Member Declarations 220

** 8.2 Class Members 220
** 8.3 Field Declarations 225
*** 8.3.1 Field Modifiers 230
**** 8.3.1.1 static Fields 230
**** 8.3.1.2 final Fields 233
**** 8.3.1.3 transient Fields 233
**** 8.3.1.4 volatile Fields 234

*** 8.3.2 Field Initialization 235
*** 8.3.3 Restrictions on Field References in Initializers 237

** 8.4 Method Declarations 240
*** 8.4.1 Formal Parameters 241
*** 8.4.2 Method Signature 245
*** 8.4.3 Method Modifiers 246
**** 8.4.3.1 abstract Methods 246
**** 8.4.3.2 static Methods 248
**** 8.4.3.3 final Methods 248
**** 8.4.3.4 native Methods 249
**** 8.4.3.5 strictfp Methods 250
**** 8.4.3.6 synchronized Methods 250

*** 8.4.4 Generic Methods 251
*** 8.4.5 Method Result 252
*** 8.4.6 Method Throws 253
*** 8.4.7 Method Body 254
*** 8.4.8 Inheritance, Overriding, and Hiding 255
**** 8.4.8.1 Overriding (by Instance Methods) 256
**** 8.4.8.2 Hiding (by Class Methods) 260
**** 8.4.8.3 Requirements in Overriding and Hiding 261
**** 8.4.8.4 Inheriting Methods with Override-Equivalent Signatures 265

*** 8.4.9 Overloading 266

** 8.5 Member Type Declarations 269
*** 8.5.1 Static Member Type Declarations 270

** 8.6 Instance Initializers 270
** 8.7 Static Initializers 270
** 8.8 Constructor Declarations 271
*** 8.8.1 Formal Parameters 272
*** 8.8.2 Constructor Signature 273
*** 8.8.3 Constructor Modifiers 273
*** 8.8.4 Generic Constructors 274
*** 8.8.5 Constructor Throws 274
*** 8.8.6 The Type of a Constructor 275
*** 8.8.7 Constructor Body 275
**** 8.8.7.1 Explicit Constructor Invocations 276

*** 8.8.8 Constructor Overloading 280
*** 8.8.9 Default Constructor 280
*** 8.8.10 Preventing Instantiation of a Class 282

** 8.9 Enum Types 282
*** 8.9.1 Enum Constants 283
*** 8.9.2 Enum Body Declarations 284
*** 8.9.3 Enum Members 286

* TODO 9 Interfaces - 293
** 9.1 Interface Declarations 294
*** 9.1.1 Interface Modifiers 294
**** 9.1.1.1 abstract Interfaces 295
**** 9.1.1.2 strictfp Interfaces 295

*** 9.1.2 Generic Interfaces and Type Parameters 295
*** 9.1.3 Superinterfaces and Subinterfaces 296
*** 9.1.4 Interface Body and Member Declarations 298

** 9.2 Interface Members 298
** 9.3 Field (Constant) Declarations 299
*** 9.3.1 Initialization of Fields in Interfaces 301

** 9.4 Method Declarations 302
*** 9.4.1 Inheritance and Overriding 303
**** 9.4.1.1 Overriding (by Instance Methods) 305
**** 9.4.1.2 Requirements in Overriding 305
**** 9.4.1.3 Inheriting Methods with Override-Equivalent Signatures 306

*** 9.4.2 Overloading 307
*** 9.4.3 Interface Method Body 307

** 9.5 Member Type Declarations 308
** 9.6 Annotation Types 309
*** 9.6.1 Annotation Type Elements 310
*** 9.6.2 Defaults for Annotation Type Elements 313
*** 9.6.3 Repeatable Annotation Types 314
*** 9.6.4 Predefined Annotation Types 318
**** 9.6.4.1 ~@Target~ 318
**** 9.6.4.2 ~@Retention~ 320
**** 9.6.4.3 ~@Inherited~ 321
**** 9.6.4.4 ~@Override~ 321
**** 9.6.4.5 ~@SuppressWarnings~ 322
**** 9.6.4.6 ~@Deprecated~ 323
**** 9.6.4.7 ~@SafeVarargs~ 325
**** 9.6.4.8 ~@Repeatable~ 326
**** 9.6.4.9 ~@FunctionalInterface~ 326

** 9.7 Annotations 326
*** 9.7.1 Normal Annotations 327
*** 9.7.2 Marker Annotations 329
*** 9.7.3 Single-Element Annotations 330
*** 9.7.4 Where Annotations May Appear 331
*** 9.7.5 Multiple Annotations of the Same Type 336

** 9.8 Functional Interfaces 337
** 9.9 Function Types 341

* TODO 10 Arrays - 347
** 10.1 Array Types 348
** 10.2 Array Variables 348
** 10.3 Array Creation 351
** 10.4 Array Access 351
** 10.5 Array Store Exception 352
** 10.6 Array Initializers 353
** 10.7 Array Members 355
** 10.8 Class Objects for Arrays 356
** 10.9 An Array of Characters Is Not a String 358

* TODO 11 Exceptions - 359
** 11.1 The Kinds and Causes of Exceptions - 360
*** 11.1.1 The Kinds of Exceptions - 360
    - ~Object~ -> ~Throwable~ -> exceptions

    - /Throwable/ and _ALL its subclasses_ are, collectively, the /exception
      classes/.

    - TWO /direct subclasses/ of ~Throwable~ -- ~Exception~ and ~Error~
      + ~Exception~ =TODO=

        ~RuntimeException~ =TODO=

      + ~Error~ =TODO=

    - The /unchecked exception classes/ are
      + the /run-time exception classes/
        and
      + the /error classes/

      All the left are /checked exception classes/

      =From Jian= In another word, 
      + a /unchecked exception/ MUST be a /subclass/ of a ~RuntimeException~ or
        ~Error~.

      + a /checked exception/ MUST be a /subclass/ of ~Throwable~,
        and
        it MUSTN'T be a /subclass/ of a ~RuntimeException~ or ~Error~.

    - =TODO= Note that a subclass of Throwable cannot be generic (§8.1.2).
      =IMPORTANT=

*** 11.1.2 The Causes of Exceptions - 361
*** 11.1.3 Asynchronous Exceptions - 362

** 11.2 Compile-Time Checking of Exceptions - 363
*** 11.2.1 Exception Analysis of Expressions - 364
*** 11.2.3 Exception Checking - 366

** 11.3 Run-Time Handling of an Exception - 368

* TODO 12 Execution - 373
** 12.1 Java Virtual Machine Startup 373
*** 12.1.1 Load the Class Test 374
*** 12.1.2 Link Test: Verify, Prepare, (Optionally) Resolve 374
*** 12.1.3 Initialize Test: Execute Initializers 375
*** 12.1.4 Invoke Test.main 376

** 12.2 Loading of Classes and Interfaces 376
*** 12.2.1 The Loading Process 377

** 12.3 Linking of Classes and Interfaces 378
*** 12.3.1 Verification of the Binary Representation 378
*** 12.3.2 Preparation of a Class or Interface Type 379
*** 12.3.3 Resolution of Symbolic References 379

** 12.4 Initialization of Classes and Interfaces 381
*** 12.4.1 When Initialization Occurs 381
*** 12.4.2 Detailed Initialization Procedure 384

** 12.5 Creation of New Class Instances 386
** 12.6 Finalization of Class Instances 389
*** 12.6.1 Implementing Finalization 391
*** 12.6.2 Interaction with the Memory Model 392

** 12.7 Unloading of Classes and Interfaces 394
** 12.8 Program Exit 395

* TODO 13 Binary Compatibility - 397
** 13.1 The Form of a Binary 398
** 13.2 What Binary Compatibility Is and Is Not 404
** 13.3 Evolution of Packages and Modules 405
** 13.4 Evolution of Classes 406
*** 13.4.1 abstract Classes 406
*** 13.4.2 final Classes 407
*** 13.4.3 public Classes 407
*** 13.4.4 Superclasses and Superinterfaces 407
*** 13.4.5 Class Type Parameters 409
*** 13.4.6 Class Body and Member Declarations 409
*** 13.4.7 Access to Members and Constructors 411
*** 13.4.8 Field Declarations 412
*** 13.4.9 final Fields and static Constant Variables 414
*** 13.4.10 static Fields 415
*** 13.4.11 transient Fields 415
*** 13.4.12 Method and Constructor Declarations 415
*** 13.4.13 Method and Constructor Type Parameters 416
*** 13.4.14 Method and Constructor Formal Parameters 417
*** 13.4.15 Method Result Type 418
*** 13.4.16 abstract Methods 418
*** 13.4.17 final Methods 419
*** 13.4.18 native Methods 419
*** 13.4.19 static Methods 420
*** 13.4.20 synchronized Methods 420
*** 13.4.21 Method and Constructor Throws 420
*** 13.4.22 Method and Constructor Body 420
*** 13.4.23 Method and Constructor Overloading 420
*** 13.4.24 Method Overriding 422
*** 13.4.25 Static Initializers 422
*** 13.4.26 Evolution of Enums 422

** 13.5 Evolution of Interfaces 422
*** 13.5.1 public Interfaces 422
*** 13.5.2 Superinterfaces 423
*** 13.5.3 Interface Members 423
*** 13.5.4 Interface Type Parameters 423
*** 13.5.5 Field Declarations 424
*** 13.5.6 Interface Method Declarations 424
*** 13.5.7 Evolution of Annotation Types 425
    
* TODO 14 Blocks and Statements - 427
** 14.1 Normal and Abrupt Completion of Statements 427
** 14.2 Blocks 429
** 14.3 Local Class Declarations 429
** 14.4 Local Variable Declaration Statements 430
*** 14.4.1 Local Variable Declarators and Types 431
*** 14.4.2 Execution of Local Variable Declarations 432

** 14.5 Statements 432
** 14.6 The Empty Statement 434
** 14.7 Labeled Statements 435
** 14.8 Expression Statements 436
** 14.9 The if Statement 437
*** 14.9.1 The if-then Statement 438
*** 14.9.2 The if-then-else Statement 438

** 14.10 The assert Statement 438
** 14.11 The switch Statement 441
** 14.12 The while Statement 445
*** 14.12.1 Abrupt Completion of while Statement 446

** 14.13 The do Statement 447
*** 14.13.1 Abrupt Completion of do Statement 447

** 14.14 The for Statement 449
*** 14.14.1 The basic for Statement 449
**** 14.14.1.1 Initialization of for Statement 450
**** 14.14.1.2 Iteration of for Statement 450
**** 14.14.1.3 Abrupt Completion of for Statement 451

*** 14.14.2 The enhanced for statement 452

** 14.15 The break Statement 454
** 14.16 The continue Statement 456
** 14.17 The return Statement 458
** 14.18 The throw Statement 460
** 14.19 The synchronized Statement 462
** 14.20 The try statement 463
*** 14.20.1 Execution of try-catch 466
*** 14.20.2 Execution of try-finally and try-catch-finally 468
*** 14.20.3 try-with-resources 470
**** 14.20.3.1 Basic try-with-resources 472
**** 14.20.3.2 Extended try-with-resources 475

** 14.21 Unreachable Statements 475

* TODO 15 Expressions - 483
** 15.1 Evaluation, Denotation, and Result 483
** 15.2 Forms of Expressions 484
** 15.3 Type of an Expression 485
** 15.4 FP-strict Expressions 486
** 15.5 Expressions and Run-Time Checks 486
** 15.6 Normal and Abrupt Completion of Evaluation 488
** 15.7 Evaluation Order 490
*** 15.7.1 Evaluate Left-Hand Operand First 490
*** 15.7.2 Evaluate Operands before Operation 492
*** 15.7.3 Evaluation Respects Parentheses and Precedence 493
*** 15.7.4 Argument Lists are Evaluated Left-to-Right 494
*** 15.7.5 Evaluation Order for Other Expressions 495

** 15.8 Primary Expressions 495
*** 15.8.1 Lexical Literals 496
*** 15.8.2 Class Literals 497
*** 15.8.3 this 498
*** 15.8.4 Qualified this 499
*** 15.8.5 Parenthesized Expressions 499

** 15.9 Class Instance Creation Expressions 500
*** 15.9.1 Determining the Class being Instantiated 502
*** 15.9.2 Determining Enclosing Instances 503
*** 15.9.3 Choosing the Constructor and its Arguments 505
*** 15.9.4 Run-Time Evaluation of Class Instance Creation Expressions 509
*** 15.9.5 Anonymous Class Declarations 510
**** 15.9.5.1 Anonymous Constructors 511

** 15.10 Array Creation and Access Expressions 512
*** 15.10.1 Array Creation Expressions 512
*** 15.10.2 Run-Time Evaluation of Array Creation Expressions 513
*** 15.10.3 Array Access Expressions 517
*** 15.10.4 Run-Time Evaluation of Array Access Expressions 517

** 15.11 Field Access Expressions 520
*** 15.11.1 Field Access Using a Primary 520
*** 15.11.2 Accessing Superclass Members using super 523

** 15.12 Method Invocation Expressions 525
*** 15.12.1 Compile-Time Step 1: Determine Class or Interface to Search 526
*** 15.12.2 Compile-Time Step 2: Determine Method Signature 528
**** 15.12.2.1 Identify Potentially Applicable Methods 534
**** 15.12.2.2 Phase 1: Identify Matching Arity Methods Applicable by Strict Invocation 537
**** 15.12.2.3 Phase 2: Identify Matching Arity Methods Applicable by Loose Invocation 538
**** 15.12.2.4 Phase 3: Identify Methods Applicable by Variable Arity Invocation 539
**** 15.12.2.5 Choosing the Most Specific Method 539
**** 15.12.2.6 Method Invocation Type 543

*** 15.12.3 Compile-Time Step 3: Is the Chosen Method Appropriate? 544
*** 15.12.4 Run-Time Evaluation of Method Invocation 547
**** 15.12.4.1 Compute Target Reference (If Necessary) 547
**** 15.12.4.2 Evaluate Arguments 549
**** 15.12.4.3 Check Accessibility of Type and Method 550
**** 15.12.4.4 Locate Method to Invoke 551
**** 15.12.4.5 Create Frame, Synchronize, Transfer Control 555

** 15.13 Method Reference Expressions 557
*** 15.13.1 Compile-Time Declaration of a Method Reference 560
*** 15.13.2 Type of a Method Reference 565
*** 15.13.3 Run-Time Evaluation of Method References 567

** 15.14 Postfix Expressions 570
*** 15.14.1 Expression Names 571
*** 15.14.2 Postfix Increment Operator ~++~ 571
*** 15.14.3 Postfix Decrement Operator ~--~ 571

** 15.15 Unary Operators 572
*** 15.15.1 Prefix Increment Operator ~++~ 574
*** 15.15.2 Prefix Decrement Operator ~--~ 574
*** 15.15.3 Unary Plus Operator ~+~ 575
*** 15.15.4 Unary Minus Operator ~-~ 575
*** 15.15.5 Bitwise Complement Operator ~~~ 576
*** 15.15.6 Logical Complement Operator ~!~ 576

** 15.16 Cast Expressions 576
** 15.17 Multiplicative Operators 578
*** 15.17.1 Multiplication Operator * 579
*** 15.17.2 Division Operator / 580
*** 15.17.3 Remainder Operator % 581

** 15.18 Additive Operators 584
*** 15.18.1 String Concatenation Operator + 584
*** 15.18.2 Additive Operators (+ and -) for Numeric Types 587

** 15.19 Shift Operators 589
** 15.20 Relational Operators 590
*** 15.20.1 Numerical Comparison Operators <, <=, >, and >= 590
*** 15.20.2 Type Comparison Operator instanceof 592

** 15.21 Equality Operators 593
*** 15.21.1 Numerical Equality Operators ~==~ and ~!=~ 593
*** 15.21.2 Boolean Equality Operators == and != 594
*** 15.21.3 Reference Equality Operators == and != 595

** 15.22 Bitwise and Logical Operators 595
*** 15.22.1 Integer Bitwise Operators &, ^, and | 596
*** 15.22.2 Boolean Logical Operators &, ^, and | 597

** 15.23 Conditional-And Operator ~&&~ 597
** 15.24 Conditional-Or Operator ~||~ 598
** 15.25 Conditional Operator ~? :~ 599
*** 15.25.1 Boolean Conditional Expressions 606
*** 15.25.2 Numeric Conditional Expressions 606
*** 15.25.3 Reference Conditional Expressions 607

** 15.26 Assignment Operators 608
*** 15.26.1 Simple Assignment Operator = 609
*** 15.26.2 Compound Assignment Operators 615
** 15.27 Lambda Expressions 621
*** 15.27.1 Lambda Parameters 623
*** 15.27.2 Lambda Body 626
*** 15.27.3 Type of a Lambda Expression 629
*** 15.27.4 Run-Time Evaluation of Lambda Expressions 631

** 15.28 Constant Expressions 632

* TODO 16 Definite Assignment - 635
** 16.1 Definite Assignment and Expressions 641
*** 16.1.1 Boolean Constant Expressions 641
*** 16.1.2 Conditional-And Operator ~&&~ 641
*** 16.1.3 Conditional-Or Operator ~||~ 642
*** 16.1.4 Logical Complement Operator ~!~ 642
*** 16.1.5 Conditional Operator ~? :~ 642
*** 16.1.6 Conditional Operator ~? :~ 643
*** 16.1.7 Other Expressions of Type boolean 643
*** 16.1.8 Assignment Expressions 643
*** 16.1.9 Operators ~++~ and ~--~ 644
*** 16.1.10 Other Expressions 644

** 16.2 Definite Assignment and Statements 646
*** 16.2.1 Empty Statements 646
*** 16.2.2 Blocks 646
*** 16.2.3 Local Class Declaration Statements 647
*** 16.2.4 Local Variable Declaration Statements 647
*** 16.2.5 Labeled Statements 648
*** 16.2.6 Expression Statements 648
*** 16.2.7 if Statements 648
*** 16.2.8 assert Statements 649
*** 16.2.9 switch Statements 649
*** 16.2.10 while Statements 650
*** 16.2.11 do Statements 650
*** 16.2.12 for Statements 650
**** 16.2.12.1 Initialization Part of for Statement 651
**** 16.2.12.2 Incrementation Part of for Statement 652

*** 16.2.13 break, continue, return, and throw Statements 652
*** 16.2.14 synchronized Statements 652
*** 16.2.15 try Statements 653

** 16.3 Definite Assignment and Parameters 654
** 16.4 Definite Assignment and Array Initializers 654
** 16.5 Definite Assignment and Enum Constants 655
** 16.6 Definite Assignment and Anonymous Classes 655
** 16.7 Definite Assignment and Member Types 656
** 16.8 Definite Assignment and Static Initializers 656
** 16.9 Definite Assignment, Constructors, and Instance Initializers 657

* TODO 17 Threads and Locks - 659
** 17.1 Synchronization 660
** 17.2 Wait Sets and Notification 660
*** 17.2.1 Wait 661
*** 17.2.2 Notification 662
*** 17.2.3 Interruptions 663
*** 17.2.4 Interactions of Waits, Notification, and Interruption 663

** 17.3 Sleep and Yield 664
** 17.4 Memory Model 665
*** 17.4.1 Shared Variables 668
*** 17.4.2 Actions 668
*** 17.4.3 Programs and Program Order 669
*** 17.4.4 Synchronization Order 670
*** 17.4.5 Happens-before Order 671
*** 17.4.6 Executions 674
*** 17.4.7 Well-Formed Executions 675
*** 17.4.8 Executions and Causality Requirements 675
*** 17.4.9 Observable Behavior and Nonterminating Executions 678

** 17.5 final Field Semantics 680
*** 17.5.1 Semantics of final Fields 682
*** 17.5.2 Reading final Fields During Construction 682
*** 17.5.3 Subsequent Modification of final Fields 683
*** 17.5.4 Write-Protected Fields 684

** 17.6 Word Tearing 685
** 17.7 Non-Atomic Treatment of double and long 686

* TODO 18 Type Inference - 687
** 18.1 Concepts and Notation 688
*** 18.1.1 Inference Variables 688
*** 18.1.2 Constraint Formulas 689
*** 18.1.3 Bounds 689

** 18.2 Reduction 691
*** 18.2.1 Expression Compatibility Constraints 691
*** 18.2.2 Type Compatibility Constraints 696
*** 18.2.3 Subtyping Constraints 697
*** 18.2.4 Type Equality Constraints 698
*** 18.2.5 Checked Exception Constraints 700

** 18.3 Incorporation 702
*** 18.3.1 Complementary Pairs of Bounds 703
*** 18.3.2 Bounds Involving Capture Conversion 703

** 18.4 Resolution 704
** 18.5 Uses of Inference 706
*** 18.5.1 Invocation Applicability Inference 706
*** 18.5.2 Invocation Type Inference 708
**** 18.5.2.1 Poly Method Invocation Compatibility 708
**** 18.5.2.2 Additional Argument Constraints 711

*** 18.5.3 Functional Interface Parameterization Inference 715
*** 18.5.4 More Specific Method Inference 716

* TODO 19 Syntax - 719
* TODO Index - 747
* TODO A Limited License Grant - 789
