#+TITLE: Java Cookbook
#+SUBTITLE: Solutions and Examples for Java Developers
#+VERSION: 3rd, Covers Java 8, 2014
#+AUTHOR: Ian F. Darwin
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - xiii
* 1. Getting Started: Compiling, Running, and Debugging - 1
** 1.0. Introduction - 1
** DONE 1.1. Compiling and Running Java: JDK - 2
   CLOSED: [2019-12-24 Tue 22:38]
*** Problem
    How to _compile_ and _run_ Java program?

*** Solution
**** JDK
     - When using JDK, you must *manually* include =.= in the =CLASSPATH= when
       compiling and running Java programs.

     - =from Jian= This book is published in 2014, and it doesn't mention OpenJDK
       in this section, though OpenJDK exists since 2007.

**** Mac OS X
     =from Jian= In 2019, no one use any specific setting JDK for Mac OS X.

** DONE 1.2. Editing and Compiling with a Syntax-Highlighting Editor - 3
   CLOSED: [2019-12-24 Tue 22:39]
   =from Jian= This section is out of date.
*** Problem
*** Solution
*** Discussion

** DONE 1.3. Compiling, Running, and Testing with an IDE - 4
   CLOSED: [2019-12-24 Tue 22:41]
   =from Jian= This section is out of date.

*** Problem
*** Solution
*** Discussion
*** See Also

** DONE 1.4. Using CLASSPATH Effectively - 14
   CLOSED: [2019-12-24 Tue 22:56]
*** Problem
    - Q :: How to use =CLASSPATH=.
      + Keep your class files in a common directory, which is, by lucky, already
        a part of =CLASSPATH=.

      + Wrestle with =CLASSPATH=

*** Solution
    - A :: Set =CLASSPATH= to the list of directories and/or JAR files that contain
      the /class files/ you want in command line or as a /environment variable/.

*** Discussion
    - On *nix, if you run one of the kernel tracing tools (=trace=, =strace=,
      =truss=, =ktrace=), you would probably see the Java program =open= (or =stat=,
      or =access=) the following files:
      + Some file(s) in the JDK directory (release-dependent)
        * Check ~sun.boot.class.path~ TODO _Recipe 2.2_

      + Then =~/classes/HelloWorld.class=, which it probably wouldn't find
      + Finally, =./HelloWorld.class=, which it would find, open, and read into memory

    - Rules of where to find /class files/ can be changed with customized ~ClassLoader~.
      TODO ??? TODO ??? TODO

    - You may need some scripts to setup and change =CLASSPATH= (or sometimes *nix
      provided "alternatives" mechanism) if you alternate among serveral JVMs with
      different =CLASSPATH=.

*** See Also

** TODO 1.5. Downloading and Using the Code Examples - 17
*** Problem
*** Solution
*** Discussion
**** javasrc
**** darwinsys-api
**** General notes
**** Caveat Lector
     - *CSV, Subversion, Git, Oh My!*

** TODO 1.6. Automating Compilation with Apache Ant - 22
*** Problem
*** Solution
*** Discussion
*** See Also
    - *make Versus Java Build Tools*

** TODO 1.7. Automating Dependencies, Compilation, Testing, and Deployment with Apache Maven - 25
*** Problem
*** Solution
*** Discussion
**** Maven pros and cons

*** See Also
    - *Maven Central: Mapping the World of Java Software*

** TODO 1.8. Automating Dependencies, Compilation, Testing, and Deployment with Gradle - 29
*** Problem
*** Solution
*** Discussion
*** See Also

** DONE 1.9. Dealing with Deprecation Warnings - 31
   CLOSED: [2019-12-24 Tue 23:05]
*** Problem
*** Solution
*** Discussion
*** See Also

** DONE 1.10. Conditional Debugging Without #ifdef - 33
   CLOSED: [2019-12-24 Tue 23:42]
*** Problem
*** Solution
*** Discussion
**** Conditional compilation?
     - Not recommended:
       + Compile time:
         #+begin_src java
           final boolean DEBUG = false;
           if (DEBUG) {
               System.out.println("Life is a voyage, not a destination");
           }
         #+end_src
         * pros: Code like this will not show up in the output /class file/.

         * cons: BUT you need to modify the source code ~DEBUG~ to enable the
           debug message.

       + Runtime: 
         #+begin_src java
           String name = "poem";
           if (System.getProperty("debug.fetch") != null) {
               System.err.println("Fetching " + name);
           }
           value = fetch(name);
         #+end_src
         * NOT Trigger the debug message:
           ~java starting.Fetch~

         * Trigger the debug message
           ~java -Ddebug.fetch starting.Fetch~

     - Recommended:
       + TODO Recipe 16.9 /Log4J/
       + TODO Recipe 16.10 ~java.util.logging~

     - In Java,
       making a /method/ ~final~
       ENABLES
       the compiler to know that it can be /inlined/, or emitted in line. This
       is an optional optimization that the compiler is _not obliged_ to perform,
       but may for efficiency.

*** TODO See Also
    - Recipe 1.11
    - Recipe 16.7, 16.9, and 16.10

** 1.11. Maintaining Program Correctness with Assertions - 35
*** Problem
*** Solution
*** Discussion

** 1.12. Debugging with JDB - 36
*** Problem
*** Solution
*** Discussion

** 1.13. Avoiding the Need for Debuggers with Unit Testing - 38
*** Problem
*** Solution
*** Discussion
*** See Also

** 1.14. Maintaining Your Code with Continuous Integration - 41
*** Problem
*** Solution
*** Discussion
*** See Also

** 1.15. Getting Readable Tracebacks - 45
*** Problem
*** Solution
*** Discussion

** 1.16. Finding More Java Source Code: Programs, Frameworks, Libraries - 46
*** Problem
*** Solution
*** Discussion

* 2. Interacting with the Environment - 51
** 2.0. Introduction - 51
** 2.1. Getting Environment Variables - 51
*** Problem
*** Solution
*** Discussion

** 2.2. Getting Information from System Properties - 52
*** Problem
*** Solution
*** Discussion
*** See Also

** 2.3. Learning About the Current JDK Release - 54
*** Problem
*** Solution
*** Discussion

** 2.4. Dealing with Operating System–Dependent Variations - 55
*** Problem
*** Solution
*** Discussion

** 2.5. Using Extensions or Other Packaged APIs - 58
*** Problem
*** Solution
*** Discussion

** 2.6. Parsing Command-Line Arguments - 59
*** Problem
*** Solution
*** Discussion
*** See Also

* 3. Strings and Things - 67
** 3.1. Taking Strings Apart with Substrings - 69
** 3.2. Breaking Strings Into Words - 70
** 3.3. Putting Strings Together with StringBuilder - 74
** 3.4. Processing a String One Character at a Time - 76
** 3.5. Aligning Strings - 78
** 3.6. Converting Between Unicode Characters and Strings - 81
** 3.7. Reversing a String by Word or by Character - 83
** 3.8. Expanding and Compressing Tabs - 84
** 3.9. Controlling Case - 89
** 3.10. Indenting Text Documents - 90
** 3.11. Entering Nonprintable Characters - 91
** 3.12. Trimming Blanks from the End of a String - 92
** 3.13. Parsing Comma-Separated Data - 93
** 3.14. Program: A Simple Text Formatter - 98
** 3.15. Program: Soundex Name Comparisons - 100

* 4. Pattern Matching with Regular Expressions - 105
** 4.1. Regular Expression Syntax - 107
** 4.2. Using regexes in Java: Test for a Pattern - 114
** 4.3. Finding the Matching Text - 117
** 4.4. Replacing the Matched Text - 120
** 4.5. Printing All Occurrences of a Pattern - 121
** 4.6. Printing Lines Containing a Pattern - 123
** 4.7. Controlling Case in Regular Expressions - 125
** 4.8. Matching “Accented” or Composite Characters - 126
** 4.9. Matching Newlines in Text - 127
** 4.10. Program: Apache Logfile Parsing - 129
** 4.11. Program: Data Mining - 131
** 4.12. Program: Full Grep - 133

* 5. Numbers - 139
** 5.1. Checking Whether a String Is a Valid Number - 141
** 5.2. Storing a Larger Number in a Smaller Number - 143
** 5.3. Converting Numbers to Objects and Vice Versa - 144
** 5.4. Taking a Fraction of an Integer Without Using Floating Point - 146
** 5.5. Ensuring the Accuracy of Floating-Point Numbers - 147
** 5.6. Comparing Floating-Point Numbers - 149
** 5.7. Rounding Floating-Point Numbers - 151
** 5.8. Formatting Numbers - 152
** 5.9. Converting Between Binary, Octal, Decimal, and Hexadecimal - 154
** 5.10. Operating on a Series of Integers - 155
** 5.11. Working with Roman Numerals - 157
** 5.12. Formatting with Correct Plurals - 161
** 5.13. Generating Random Numbers - 163
** 5.14. Calculating Trigonometric Functions - 165
** 5.15. Taking Logarithms - 166
** 5.16. Multiplying Matrices - 167
** 5.17. Using Complex Numbers - 169
** 5.18. Handling Very Large Numbers - 171
** 5.19. Program: TempConverter - 174
** 5.20. Program: Number Palindromes - 175

* 6. Dates and Times—New API - 179
** 6.1. Finding Today's Date - 182
** 6.2. Formatting Dates and Times - 183
** 6.3. Converting Among Dates/Times, YMDHMS, and Epoch Seconds - 185
** 6.4. Parsing Strings into Dates - 186
** 6.5. Difference Between Two Dates - 187
** 6.6. Adding to or Subtracting from a Date or Calendar - 188
** 6.7. Interfacing with Legacy Date and Calendar Classes - 189

* 7. Structuring Data with Java - 191
** 7.1. Using Arrays for Data Structuring - 192
** 7.2. Resizing an Array - 193
** 7.3. The Collections Framework - 195
** 7.4. Like an Array, but More Dynamic - 196
** 7.5. Using Generic Collections - 199
** 7.6. Avoid Casting by Using Generics - 200
** 7.7. How Shall I Iterate Thee? Let Me Enumerate the Ways - 204
** 7.8. Eschewing Duplicates with a Set - 206
** 7.9. Using Iterators or Enumerations for Data-Independent Access - 207
** 7.10. Structuring Data in a Linked List - 208
** 7.11. Mapping with Hashtable and HashMap - 212
** 7.12. Storing Strings in Properties and Preferences - 214
** 7.13. Sorting a Collection - 218
** 7.14. Avoiding the Urge to Sort - 222
** 7.15. Finding an Object in a Collection - 224
** 7.16. Converting a Collection to an Array - 226
** 7.17. Rolling Your Own Iterator - 227
** 7.18. Stack - 230
** 7.19. Multidimensional Structures - 234
** 7.20. Program: Timing Comparisons - 236

* 8. Object-Oriented Techniques - 239
** 8.1. Formatting Objects for Printing with ~toString()~ - 241
** 8.2. Overriding the ~equals()~ and ~hashCode()~ Methods - 243
** 8.3. Using Shutdown Hooks for Application Cleanup - 248
** 8.4. Using Inner Classes - 250
** 8.5. Providing Callbacks via Interfaces - 251
** 8.6. Polymorphism/Abstract Methods - 255
** 8.7. Passing Values - 256
** 8.8. Using Typesafe Enumerations - 259
** 8.9. Enforcing the Singleton Pattern - 263
** 8.10. Roll Your Own Exceptions - 266
** 8.11. Using Dependency Injection - 267
** 8.12. Program: Plotter - 270

* 9. Functional Programming Techniques: Functional Interfaces, Streams, Parallel Collections - 275
** 9.1. Using Lambdas/Closures Instead of Inner Classes - 278
** 9.2. Using Lambda Predefined Interfaces Instead of Your Own - 282
** 9.3. Simplifying Processing with Streams - 283
** 9.4. Improving Throughput with Parallel Streams and Collections - 285
** 9.5. Creating Your Own Functional Interfaces - 286
** 9.6. Using Existing Code as Functional with Method References - 289
** 9.7. Java Mixins: Mixing in Methods - 293

* 10. Input and Output - 295
** 10.1. Reading Standard Input - 298
** 10.2. Reading from the Console or Controlling Terminal; Reading Passwords Without Echoing - 300
** 10.3. Writing Standard Output or Standard Error - 302
** 10.4. Printing with Formatter and printf - 304
** 10.5. Scanning Input with StreamTokenizer - 308
** 10.6. Scanning Input with the Scanner Class - 312
** 10.7. Scanning Input with Grammatical Structure - 316
** 10.8. Opening a File by Name - 317
** 10.9. Copying a File - 318
** 10.10. Reading a File into a String - 325
** 10.11. Reassigning the Standard Streams - 325
** 10.12. Duplicating a Stream as It Is Written - 326
** 10.13. Reading/Writing a Different Character Set - 329
** 10.14. Those Pesky End-of-Line Characters - 330
** 10.15. Beware Platform-Dependent File Code - 331
** 10.16. Reading “Continued” Lines - 332
** 10.17. Reading/Writing Binary Data - 336
** 10.18. Seeking to a Position within a File - 337
** 10.19. Writing Data Streams from C - 338
** 10.20. Saving and Restoring Java Objects - 340
** 10.21. Preventing ClassCastExceptions with SerialVersionUID - 344
** 10.22. Reading and Writing JAR or ZIP Archives - 346
** 10.23. Finding Files in a Filesystem-Neutral Way with ~getResource()~ and ~getResourceAsStream()~ - 349
** 10.24. Reading and Writing Compressed Files - 351
** 10.25. Learning about the Communications API for Serial and Parallel Ports - 352
** 10.26. Save User Data to Disk - 357
** 10.27. Program: Text to PostScript - 360

* 11. Directory and Filesystem Operations - 365
** 11.1. Getting File Information - 365
** 11.2. Creating a File - 368
** 11.3. Renaming a File - 369
** 11.4. Deleting a File - 370
** 11.5. Creating a Transient File - 372
** 11.6. Changing File Attributes - 373
** 11.7. Listing a Directory - 375
** 11.8. Getting the Directory Roots - 377
** 11.9. Creating New Directories - 378
** 11.10. Using Path instead of File - 379
** 11.11. Using the FileWatcher Service to Get Notified about File Changes - 380
** 11.12. Program: Find - 382

* 12. Media: Graphics, Audio, Video - 387
** 12.1. Painting with a Graphics Object - 388
** 12.2. Showing Graphical Components Without Writing Main - 389
** 12.3. Drawing Text - 390
** 12.4. Drawing Centered Text in a Component - 391
** 12.5. Drawing a Drop Shadow - 393
** 12.6. Drawing Text with 2D - 395
** 12.7. Drawing Text with an Application Font - 397
** 12.8. Drawing an Image - 400
** 12.9. Reading and Writing Images with javax.imageio - 404
** 12.10. Playing an Audio/Sound File - 405
** 12.11. Playing a Video File - 406
** 12.12. Printing in Java - 411
** 12.13. Program: PlotterAWT - 415
** 12.14. Program: Grapher - 417

* 13. Network Clients - 421
** 13.1. Contacting a Server - 423
** 13.2. Finding and Reporting Network Addresses - 424
** 13.3. Handling Network Errors - 426
** 13.4. Reading and Writing Textual Data - 427
** 13.5. Reading and Writing Binary Data - 430
** 13.6. Reading and Writing Serialized Data - 432
** 13.7. UDP Datagrams - 433
** 13.8. Program: TFTP UDP Client - 436
** 13.9. URI, URL, or URN? - 441
** 13.10. REST Web Service Client - 442
** 13.11. SOAP Web Service Client - 444
** 13.12. Program: Telnet Client - 448
** 13.13. Program: Chat Client - 450
** 13.14. Program: Simple HTTP Link Checker - 454

* 14. Graphical User Interfaces - 457
** 14.1. Displaying GUI Components - 458
** 14.2. Run Your GUI on the Event Dispatching Thread - 460
** 14.3. Designing a Window Layout - 462
** 14.4. A Tabbed View of Life - 464
** 14.5. Action Handling: Making Buttons Work - 465
** 14.6. Action Handling Using Anonymous Inner Classes - 467
** 14.7. Action Handling Using Lambdas - 469
** 14.8. Terminating a Program with “Window Close” - 470
** 14.9. Dialogs: When Later Just Won’t Do - 475
** 14.10. Catching and Formatting GUI Exceptions - 477
** 14.11. Getting Program Output into a Window - 480
** 14.12. Choosing a Value with JSpinner - 486
** 14.13. Choosing a File with JFileChooser - 487
** 14.14. Choosing a Color - 489
** 14.15. Formatting JComponents with HTML - 492
** 14.16. Centering a Main Window - 493
** 14.17. Changing a Swing Program’s Look and Feel - 496
** 14.18. Enhancing Your Swing GUI for Mac OS X - 500
** 14.19. Building Your GUI Application with JavaFX - 503
** 14.20. Program: Custom Font Chooser - 505


** 14.21. Program: Custom AWT/Swing Layout Manager 510
* 15. Internationalization and Localization - 517
** 15.1. Creating a Button with I18N Resources - 518
** 15.2. Listing Available Locales - 520
** 15.3. Creating a Menu with I18N Resources - 521
** 15.4. Writing Internationalization Convenience Routines - 521
** 15.5. Creating a Dialog with I18N Resources - 523
** 15.6. Creating a Resource Bundle - 525
** 15.7. Extracting Strings from Your Code - 526
** 15.8. Using a Particular Locale - 527
** 15.9. Setting the Default Locale - 528
** 15.10. Formatting Messages with MessageFormat - 529
** 15.11. Program: MenuIntl - 531
** 15.12. Program: BusCard - 533

* 16. Server-Side Java - 539
** 16.1. Opening a Server Socket for Business - 540
** 16.2. Returning a Response (String or Binary) - 542
** 16.3. Returning Object Information Across a Network Connection - 546
** 16.4. Handling Multiple Clients - 547
** 16.5. Serving the HTTP Protocol - 552
** 16.6. Securing a Web Server with SSL and JSSE - 554
** 16.7. Network Logging - 557
** 16.8. Network Logging with SLF4J - 558
** 16.9. Network Logging with log4j - 561
** 16.10. Network Logging with ~java.util.logging~ - 563
** 16.11. Finding Network Interfaces - 565
** 16.12. Program: A Java Chat Server - 567

* 17. Java and Electronic Mail - 573
** 17.1. Sending Email: Browser Version - 574
** 17.2. Sending Email: For Real - 578
** 17.3. Mail-Enabling a Server Program - 581
** 17.4. Sending MIME Mail - 586
** 17.5. Providing Mail Settings - 589
** 17.6. Reading Email - 590
** 17.7. Program: MailReaderBean - 595
** 17.8. Program: MailClient - 599

* 18. Database Access - 609
** 18.1. Easy Database Access with JPA and/or Hibernate - 611
** 18.2. JDBC Setup and Connection - 616
** 18.3. Connecting to a JDBC Database - 619
** 18.4. Sending a JDBC Query and Getting Results - 622
** 18.5. Using JDBC Prepared Statements - 625
** 18.6. Using Stored Procedures with JDBC - 629
** 18.7. Changing Data Using a ResultSet - 630
** 18.8. Storing Results in a RowSet - 631
** 18.9. Changing Data Using SQL - 633
** 18.10. Finding JDBC Metadata - 635
** 18.11. Program: SQLRunner - 639

* 19. Processing JSON Data - 653
** 19.1. Generating JSON Directly - 655
** 19.2. Parsing and Writing JSON with Jackson - 656
** 19.3. Parsing and Writing JSON with org.json - 657

* 20. Processing XML - 661
** 20.1. Converting Between Objects and XML with JAXB - 664
** 20.2. Converting Between Objects and XML with Serializers - 667
** 20.3. Transforming XML with XSLT - 668
** 20.4. Parsing XML with SAX - 671
** 20.5. Parsing XML with DOM - 673
** 20.6. Finding XML Elements with XPath - 677
** 20.7. Verifying Structure with Schema or DTD - 678
** 20.8. Generating Your Own XML with DOM and the XML Transformer - 681
** 20.9. Program: xml2mif - 683

* 21. Packages and Packaging - 687
** 21.1. Creating a Package - 688
** 21.2. Documenting Classes with Javadoc - 689
** 21.3. Beyond Javadoc: Annotations/Metadata - 693
** 21.4. Archiving with jar - 695
** 21.5. Running a Program from a JAR - 696
** 21.6. Preparing a Class as a JavaBean - 699
** 21.7. Pickling Your Bean into a JAR - 702
** 21.8. Packaging a Servlet into a WAR File - 704
** 21.9. "Write Once, Install Anywhere" - 705
** 21.10. “Write Once, Install on Mac OS X” - 705
** 21.11. Java Web Start - 707
** 21.12. Signing Your JAR File - 714

* 22. Threaded Java - 717
** 22.1. Running Code in a Different Thread - 719
** 22.2. Displaying a Moving Image with Animation - 724
** 22.3. Stopping a Thread - 728
** 22.4. Rendezvous and Timeouts - 731
** 22.5. Synchronizing Threads with the synchronized Keyword - 732
** 22.6. Simplifying Synchronization with Locks - 738
** 22.7. Synchronizing Threads the Hard Way with ~wait()~ and ~notifyAll()~ - 742
** 22.8. Simplifying Producer/Consumer with the Queue Interface - 748
** 22.9. Optimizing Parallel Processing with Fork/Join - 750
** 22.10. Background Saving in an Editor - 754
** 22.11. Program: Threaded Network Server - 755
** 22.12. Simplifying Servers Using the Concurrency Utilities - 762

* 23. Reflection, or "A Class Named Class" - 765
** 23.1. Getting a Class Descriptor - 766
** 23.2. Finding and Using Methods and Fields - 767
** 23.3. Accessing Private Methods and Fields via Reflection - 771
** 23.4. Loading and Instantiating a Class Dynamically - 772
** 23.5. Constructing a Class from Scratch with a ClassLoader - 774
** 23.6. Performance Timing - 776
** 23.7. Printing Class Information - 780
** 23.8. Listing Classes in a Package - 782
** 23.9. Using and Defining Annotations - 784
** 23.10. Finding Plug-in-like Classes via Annotations - 789
** 23.11. Program: CrossRef - 791
** 23.12. Program: AppletViewer - 794

* 24. Using Java with Other Languages - 801
** 24.1. Running an External Program from Java - 802
** 24.2. Running a Program and Capturing Its Output - 806
** 24.3. Calling Other Languages via javax.script - 810
** 24.4. Roll Your Own Scripting Engine - 811
** 24.5. Marrying Java and Perl - 815
** 24.6. Calling Other Languages via Native Code - 818
** 24.7. Calling Java from Native Code - 824

* Afterword - 827
* A. Java Then and Now - 829
* Index - 847
