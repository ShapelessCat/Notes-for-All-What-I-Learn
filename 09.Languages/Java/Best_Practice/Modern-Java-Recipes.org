#+TITLE: Modern Java Recipes
#+SUBTITLE: Simple Solutions to Difficult Problems in Java 8 and 9
#+VERSION: 2017
#+AUTHOR: Ken Kousen
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Foreword - ix
* TODO Preface - xi
* TODO 1. The Basics - 1
  - Java 8 adds concepts from functional programming to the language.

    Specifically, the language added
    + /lambda expressions/
    + /method references/
    + /streams/

  - The recipes in this chapter describe the _basic syntax_ for
    + /lambda expressions/
    + /method references/
    + /functional interfaces/
    + the new support for ~static~ and ~default~ /methods/ in /interfaces/.

    =TODO= /Streams/ are discussed in detail in Chapter 3.

** DONE 1.1 Lambda Expressions - 2
   CLOSED: [2018-08-03 Fri 01:22]
*** Problem
    You want to use lambda expressions in your code.

*** Solution
    Use one of the varieties of /lambda expression syntax/
    and
    ASSIGN the result to a reference of /functional interface/ type.

*** Discussion
    - /Functional interface/ \equal{}\equal{}\equal{} /single abstract method (SAM)/

    - Example:
      + The Old style that use the /anonymous inner class/
        #+BEGIN_SRC java
          public class RunnableDemo {
              public static void main(String[] args) {
                  new Thread(new Runnable() {
                          @Override
                          public void run() {
                              System.out.println(
                                  "inside runnable using an anonymous inner class");
                          }
                      }).start();
              }
          }
        #+END_SRC

      + With the lambda expression:
        #+BEGIN_SRC java
          new Thread(() -> System.out.println(
              "inside Thread constructor using lambda")).start();
        #+END_SRC

      + You can also assign the /lambda expression/ to a variable that _match the
        SAM type_.
        #+BEGIN_SRC java
          Runnable r = () -> System.out.println(
              "lambda expression implementing the run method");
          new Thread(r).start();
        #+END_SRC

    - If the /method/ of a SAM you want to implement has parameters, mostly (=Jian guess=)
      you don't need to write down the type(s), but you can do it if you want.

    - For lambda expressions,
      + single line bodies do *NOT* need ~{}~.
      + multiple lines bodies do need ~{}~.

** TODO 1.2 Method References - 6
*** Problem
*** Solution
*** Discussion
**** Syntax

*** See Also

** TODO 1.3 Constructor References - 10
*** Problem
*** Solution
*** Discussion
**** Copy constructor
**** Varargs constructor
**** Arrays

*** See Also

** TODO 1.4 Functional Interfaces - 15 - =Reading=
*** DONE Problem
    CLOSED: [2018-08-03 Fri 01:49]
    You want to use an existing functional interface, or _write your own_.

*** DONE Solution
    CLOSED: [2018-08-03 Fri 01:50]
    Create an /interface/ with a *single, abstract* /method/,
    and
    add the ~@FunctionalInterface~ /annotation/.

    =TODO= =From Jian= How does this annotation work???

*** TODO Discussion - =TODO= =NOTE=
    - Q&A
      + Q :: Why do we need the ~@FunctionalInterface~ from ~java.lang~?
      + A :: =TODO= =NOTE=

    - The rules for /functional interfaces/ say that /methods/ from ~Object~ _do
      *NOT* count against the single abstract method *limit*,_ so ~Comparator~
      is still a /functional interface/.

*** DONE See Also
    CLOSED: [2018-08-03 Fri 01:50]

** DONE 1.5 Default Methods in Interfaces - 18 - =Re-Read=
   CLOSED: [2018-08-03 Fri 01:48]
*** DONE Problem
    CLOSED: [2018-08-03 Fri 01:37]
    You want to provide an _implementation_ of a /method/ inside an /interface/.

*** DONE Solution
    CLOSED: [2018-08-03 Fri 01:38]
    Use the keyword ~default~ on the /interface method/, and add the _implementation_
    in the normal way.

*** TODO Discussion
    - Q&A
      + Q :: Why do we need /default methods/?
      + A ::
        * =TODO= 
        * Compatibility

    - What happens when a /class/ implements two /interfaces/ with the SAME /default
      method/?

      =TODO= =IMPORTANT=
      That is the subject of Recipe 5.5, but the short answer is that if the
      class implements the method itself everything is fine. See Recipe 5.5 for
      details.

*** DONE See Also
    CLOSED: [2018-08-03 Fri 01:48]
    =TODO=
    Recipe 5.5 shows the *RULES* that apply when a /class/ implements MULTIPLE
    /interfaces/ with /default methods/.

** DONE 1.6 Static Methods in Interfaces - 21
   CLOSED: [2018-08-03 Fri 01:36]
*** DONE Problem
    CLOSED: [2018-08-03 Fri 01:36]
    You want to
    1. add a /class-level utility method/ to an /interface/,
    2. along with an _implementation_.

*** DONE Solution
    CLOSED: [2018-08-03 Fri 01:36]
    Make the method ~static~ and provide the _implementation_ in the usual way.
*** DONE Discussion
    CLOSED: [2018-08-03 Fri 01:35]
    - There are a lot of design choices, the Java 8's are like:
      + *Add* the ~static~ /keyword/ to the /method/.

      + *Provide* _an IMPLEMENTATION (which *cannot* be /overridden/)._
        In this way they are LIKE /default methods/, and are included in the
        *default tab* in the /Javadocs/.

      + *Access* the /method/ using the /interface/ name.
        /Classes/ do *NOT* need to implement an /interface/ to use its /static
        methods/.

    - Example (~java.util.Comparator~):
      #+BEGIN_SRC java
        List<String> bonds = Arrays.asList("Connery", "Lazenby", "Moore",
                                           "Dalton", "Brosnan", "Craig");

        List<String> sorted = bonds.stream()
            .sorted(Comparator.naturalOrder())
            .collect(Collectors.toList());
        // [Brosnan, Connery, Craig, Dalton, Lazenby, Moore]


        sorted = bonds.stream()
            .sorted(Comparator.reverseOrder())
            .collect(Collectors.toList());
        // [Moore, Lazenby, Dalton, Craig, Connery, Brosnan]


        sorted = bonds.stream()
            .sorted(Comparator.comparing(String::toLowerCase))
            .collect(Collectors.toList());
        // [Brosnan, Connery, Craig, Dalton, Lazenby, Moore]


        sorted = bonds.stream()
            .sorted(Comparator.comparingInt(String::length))
            .collect(Collectors.toList());
        // [Moore, Craig, Dalton, Connery, Lazenby, Brosnan]


        sorted = bonds.stream()
            .sorted(Comparator.comparingInt(String::length)
                    .thenComparing(Comparator.naturalOrder()))
            .collect(Collectors.toList());
        // [Craig, Moore, Dalton, Brosnan, Connery, Lazenby]
      #+END_SRC
      
*** DONE See Also
    CLOSED: [2018-08-03 Fri 01:30]
    /Static methods/ from /interfaces/ are used throughout this book,
    but Recipe 4.1 =TODO= covers the /static methods/ from ~Comparator~ used
    here.

* TODO 2. The ~java.util.function~ Package - 25
  - The /interfaces/ in ~java.util.function~ fall into _four_ categories:
    1. /consumers/: a generic argument -> nothing
    2. /suppliers/: no argument -> a value
    3. /predicates/: an argument -> a bollean
    4. /functions/: a single argument -> value

  - Besides the basic /functional interfaces/, there are several related ones.
    For example,
    + /consumers/ for primitive types like:
      ~IntConsumer~, ~LongConsumer~, and ~DoubleConsumer~

    + ~BiConsumer~ that takes two arguments and returns ~void~.

** DONE 2.1 Consumers - 26
   CLOSED: [2019-12-25 Wed 23:00]
*** Problem
    ~Consumer~

*** Solution
    Implement the ~void accept(T t)~ /method/

*** Discussion
    - ~Consumer~ also has a /default method/:
      #+begin_src java
        default Consumer<T> andThen(Consumer<? super T> after)
      #+end_src

    - The most frequently used /method/ that need a ~Consumer~ is
      #+begin_src java
        default void forEach(Consumer<? super T> action)
      #+end_src
      It belongs to ~java.util.Iterable~

    - All linear collections implement ~Iterable~.
      #+begin_src java
        List<String> strings = Arrays.asList("this", "is", "a", "list", "of", "strings");
        string.forEach(() -> System.out::println);
      #+end_src

    - Table 2-1. Additional /Consumer/ /interfaces/:
      + ~IntConsumer~: ~void accept(int x)~

      + ~DoubleConsumer~: ~void accept(double x)~

      + ~LongConsumer~: ~void accept(long x)~

      + ~BiConsumer~: ~void accept(T t, U u)~

      + ~ObjIntConsumer~, ~ObjLongConsumer~, ~ObjDoubleConsumer~

    - Other uses of the ~Consumer~ /interface/ in the standard library include:
      + ~optional.ifPresent(Consumer<? super T> consumer)~
      + ~stream.forEach(Consumer<? super T> action)~
        * footnote 1: =IMPORTANT= =RE-READ=
          This is such a common operation that ~forEach~ was also added directly
          to ~Iterable~.
          - This ~Stream~ variation of ~forEach~ is useful
            + when the source elements do *not come from* a collection,
              =from Jian= for example, a /stream/ from an ~Optional~???
              OR
            + if you want to make the stream *parallel*.
        
      + ~stream.peek(Consumer<? super T> action)~

*** See Also
    - Recipe 5.8 ~andThen~
    - Recipe 3.5 ~peek~ /method/ in ~Stream~

** 2.2 Suppliers - 28
*** Problem
    ~Supplier~

*** Solution
    Implement the ~T get()~ /method/

*** Discussion

*** See Also

** 2.3 Predicates - 31
*** Problem
    ~Predicate~

*** Solution
    Implement the ~boolean test(T t)~ /method/

** DONE 2.4 Functions - 35
   CLOSED: [2019-12-25 Wed 23:44]
*** Problem
    ~Function~

*** Solution
    Implement the ~R apply(T t)~ /method/

*** Discussion
    - Example 2-12. Methods in the ~java.util.function.Function~ /interface/
      #+begin_src java
        default <V> Function<T, V> andThen(Function<? super R, ? extends V> after)
                                 R apply(T t)
        default <V> Function<V, R> compose(Function<? super V, ? extends T> before)
        static <T> Function<T, T>  identity()
      #+end_src

    - Example 2-13. Mapping strings to their lengths
      #+begin_src java
        List<String> names = Arrays.asList("Mal", "Wash", "Kaylee", "Inara", "Zoë",
                                           "Jayne", "Simon", "River", "Shepherd Book");
        List<Integer> nameLenghts = names.stream()
            .map(String::length)
            .collect(Collectors.toList());

      #+end_src

    - Table 2-3. Additional Function interfaces
      + ~IntFunction~:          ~R apply(int value)~
      + ~DoubleFunction~:       ~R apply(double value)~
      + ~LongFunction~:         ~R apply(long value)~
      + ~ToIntFunction~:        ~int applyAsInt(T value)~
      + ~ToDoubleFunction~:     ~double applyAsDouble(T value)~
      + ~ToLongFunction~:       ~long applyAsLong(T value)~
      + ~DoubleToIntFunction~:  ~int applyAsInt(double value)~
      + ~DoubleToLongFunction~: ~long applyAsLong(double value)~
      + ~IntToDoubleFunction~:  ~double applyAsDouble(int value)~
      + ~IntToLongFunction~:    ~long applyAsLong(int value)~
      + ~LongToDoubleFunction~: ~double applyAsDouble(long value)~
      + ~LongToIntFunction~:    ~int applyAsInt(long value)~
      + ~BiFunction~:           ~void accept(T t, U u)~

    - Example 2-13 can get a final result with ~int~ element:
      #+begin_src java
        List<Integer> nameLenghts = names.stream()
            .mapToInt(String::length)
            .toArray();
      #+end_src
      When use ~mapToInt~, the lambda type will be inferred as ~ToIntFunction~.

    - When all /input type(s)/ and /return type/ are the *same*:
      + ~UnaryOperator~
        * Its primitive types:
          ~IntUnaryOperator~, ~DoubleUnaryOperator~, and ~LongUnaryOperator~

      + ~BinaryOperator~
        * Its primitive types:
          ~IntBinaryOperator~, ~DoubleBinaryOperator~, and ~LongBinaryOperator~

    - Some primitive variations of ~BiFunction~:
      Table 2-4. Additional ~BiFucntion~ /interfaces/
      + ~ToIntBiFunction~: ~int applyAsInt(T t, U u)~
      + ~ToDoubleBiFunction~: ~double applyAsDouble(T t, U u)~
      + ~ToLongBiFunction~: ~long applyAsLong(T t, U u)~

    - Some non-~stream.map~ context uses:
      + ~map.computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)~
      + ~comparator.comparing(Function<? super T, ? extends U> keyExtractor)~
      + ~comparator.thenComparing(Function<? super T, ? extends U> keyExtractor)~

*** See Also
    - Recipe 5.8 :: examples of the ~andThen~ and ~compose~ methods in the ~Function~
                   interface.
    - Recipe 4.3 :: an example of ~Function.identity~.
    - Recipe 4.6 :: examples of using functions as downstream collectors.
    - Recipe 5.4 :: The ~computeIfAbsent~ method
    - Recipe 3.3 :: Binary operators.

* TODO 3. Streams - 39
** 3.1 Creating Streams - 39
*** Problem
*** Solution
*** Discussion
*** See Also

** 3.2 Boxed Streams - 43
** 3.3 Reduction Operations Using Reduce - 46
** 3.4 Check Sorting Using Reduce - 55
** 3.5 Debugging Streams with peek - 57
** 3.6 Converting Strings to Streams and Back - 60
** 3.7 Counting Elements - 63
** 3.8 Summary Statistics - 65
** 3.9 Finding the First Element in a Stream - 68
** 3.10 Using ~anyMatch~, ~allMatch~, and ~noneMatch~ - 73
** 3.11 Stream ~flatMap~ Versus ~map~ - 75
** 3.12 Concatenating Streams - 79
** 3.13 Lazy Streams - 83

* TODO 4. Comparators and Collectors - 87
** 4.1 Sorting Using a Comparator - 87
** 4.2 Converting a Stream into a Collection - 91
** 4.3 Adding a Linear Collection to a Map - 94
** 4.4 Sorting Maps - 97
** 4.5 Partitioning and Grouping - 100
** 4.6 Downstream Collectors - 102
** 4.7 Finding Max and Min Values - 104
** 4.8 Creating Immutable Collections - 107
** 4.9 Implementing the Collector Interface - 109

* TODO 5. Issues with ~Streams~, Lambdas, and Method References - 115
** 5.1 The ~java.util.Objects~ Class - 115
** 5.2 Lambdas and Effectively Final - 117
** 5.3 Streams of Random Numbers - 120
** 5.4 Default Methods in Map - 122
** 5.5 Default Method Conflict - 127
** 5.6 Iterating Over Collections and Maps - 130
** 5.7 Logging with a Supplier - 132
** 5.8 Closure Composition - 134
** 5.9 Using an Extracted Method for Exception Handling - 138
** 5.10 Checked Exceptions and Lambdas - 141
** 5.11 Using a Generic Exception Wrapper - 144

* TODO 6. The ~Optional~ Type - 147
  - The _Java 8 API_ introduced a new /class/ called ~java.util.Optional<T>~.

  - ~Optional~ is designed to communicate to the user when a returned value may
    legitimately be _not present_.
    + =from Jian=
      * _not present_ is *differnt from* ~null~ for an /object/.
        IN THE FUTURE, when /generics/ can use /primitive type/, ~Optional~ can be
        used to represent a primitive type value that present or not present.

      * _not present_ is *differnt from* /empty/ for a /collection/.
        ~Optional<CollectionType>~ means the collection doesn't exist.
        - However, these two senmantics are not distinguished in application.
          Distinguish them may not always useful. =???=

    + The design of ~Optional~ by accicent can help people removing
      ~NullPointerExceptions~.

  - *CAUTION*
    While ~Optional~ is a /reference type/,
    *it should never be assigned a value of ~null~.*
    _Doing so is a serious error._

  - An instance of ~Optional~ can be in one of two states:
    + a reference to an instance of type ~T~ -- called /present/
    + no reference to an instance of type ~T~ -- called /empty/

  - In the _Stream API_, the following /methods/ return an ~Optional~ if no elements
    remain in the /stream/: ~reduce~, ~min~, ~max~, ~findFirst~, ~findAny~.

** DONE 6.1 Creating an ~Optional~ - 148
   CLOSED: [2019-12-25 Wed 15:45]
*** Problem
*** Solution
    - Use ~Optional.of~, ~Optional.ofNullable~, or ~Optional.empty~.

*** Discussion
    - *Optional and Immutability*

*** See Also

** DONE 6.2 Retrieving Values from an ~Optional~ - 150
   CLOSED: [2019-12-25 Wed 15:30]
*** Problem
*** Solution
    - ~get~ if you're sure a value is present
      This is a low level operation, and it should be avoid.

    - ~orElse~

    - ~ifPresent~ if you only want to execute a ~Consumer~ when a value is present
      =from Jian= CAUTION, here is ~ifPresent~ not the predicate ~isPresent~.

*** Discussion
    - Invoke a ~get~ on a empty ~Optional~ value will throw a ~NoSuchElementException~.

    - ~orElse~ of ~Optional~ is more like ~getOrElse~ of Scala ~Option~.
      + Variations
        * ~orElse(T other)~
          The ~other~ here will always be evaluated even if it won't be used
          because of the /receiver/ has a value that is _present_.

        * ~orElseGet(Supplier<? extends T> other)~
          The calculation inside ~other~ is calculated only when the /receiver/
          has a value that is _present_.

        * ~orElseThrow(Supplier<? extends X> exceptionSuppiler)~
          When the /receiver/ has a value that is _empty_, throw the exception
          created by the ~exceptionSuppiler~.

    - ~ifPresent~ is like the ~map~ in Scala.

*** TODO See Also
    - Recipe 2.2 -- ~Supplier~'s
    - Recipe 1.3 -- /Constructor references/
    - Recipe 3.9 -- ~findAny~ and ~findFirst~ methods in ~Stream~

** TODO 6.3 ~Optional~ in Getters and Setters - 154
*** Problem
*** Solution
*** Discussion
*** See Also

** TODO 6.4 ~Optional~ ~flatMap~ Versus ~map~ - 156
** DONE 6.5 Mapping Optionals - 160
   CLOSED: [2019-12-25 Wed 15:45]
   #+begin_src java
     public List<Employee> findEmployeesByIds(List<Integer> ids) {
         return ids.stream()
             .map(this::findEmployeeById)
             .filter(Optional::isPresent)
             .map(Optional::get)
             .collect(Collectors.toList());
     }

     public List<Employee> findEmployeesByIds(List<Integer> ids) {
         return ids.stream()
             .map(this::findEmployeeById)
             .flatMap(optional ->
                      optional.map(Stream::of)
                              .orElseGet(Stream::empty))
             .collect(Collectors.toList());
     }


     // Java 9
     public List<Employee> findEmployeesByIds(List<Integer> ids) {
         return ids.stream()
             .map(this::findEmployeeById)
             .flatMap(Optional::stream)
             .collect(Collectors.toList());
     }
   #+end_src

* TODO 7. File I/O - 165
** 7.1 Process Files - 166
*** Problem
*** Solution
*** Discussion
    - *Streams and AutoCloseable*

*** See Also

** 7.2 Retrieving Files as a Stream - 169
*** Problem
*** Solution
*** Discussion
*** See Also

** 7.3 Walking the Filesystem - 170
*** Problem
*** Solution
*** Discussion
*** See Also

** 7.4 Searching the Filesystem - 172
*** Problem
*** Solution
*** Discussion
*** See Also

* TODO 8. The ~java.time~ Package - 175
** 8.1 Using the Basic Date-Time Classes - 176
** 8.2 Creating Dates and Times from Existing Instances - 180
** 8.3 Adjusters and Queries - 185
** 8.4 Convert from ~java.util.Date~ to ~java.time.LocalDate~ - 190
** 8.5 Parsing and Formatting - 194
** 8.6 Finding Time Zones with Unusual Offsets - 197
** 8.7 Finding Region Names from Offsets - 200
** 8.8 Time Between Events - 202

* TODO 9. Parallelism and Concurrency - 205
** 9.1 Converting from Sequential to Parallel Streams - 206
** 9.2 When Parallel Helps - 209
** 9.3 Changing the Pool Size - 215
** 9.4 The Future Interface - 217
** 9.5 Completing a CompletableFuture - 220
** 9.6 Coordinating CompletableFutures, Part 1 - 225
** 9.7 Coordinating CompletableFutures, Part 2 - 231

* TODO 10. Java 9 Additions - 239
  - This chapter contains recipes involving the *new additions*, like
    + ~private~ /methods/ in /interfaces/
    + /factory methods/ for /immutable collections/
    + the new methods for /streams/, ~Optional~, and ~Collectors~.

  - What *NOT covered* in this chapter
    + The ~jshell~ interactive console
    + The *modified* (=From Jian= =???=) ~try-with-resources~ block
    + The relaxed syntax for the diamond operator =TODO= =???=
    + The *new* /deprecation warnings/ =TODO=
    + The /reactive streams classes/ =TODO=
    + The stack-walking API =TODO=
    + The revised ~Process~ /class/ =TODO=

  - Several are relatively minor (like the diamond operator changes, try-withresources
    requirements, and deprecation warnings). Some are specialty topics (like
    the stack-walking API and the changes to the Process API). The new shell is covered
    heavily in the documentation, along with a tutorial.
    Finally, the reactive streams additions are fascinating, but the open source community
    already provides APIs like Reactive Streams, RxJava, and more, and it might be a
    good idea to wait to see how the community decides to support the new Java 9 API.

  - The recipes in this chapter is NOT use-case driven as in the rest of this
    book.

** TODO 10.1 Modules in Jigsaw - 240
*** DONE Problem
    CLOSED: [2018-01-19 Fri 03:58]
    - *Access* Java /modules/ from the _standard library_.

    - *Encapsulate* your own code in /modules/.

*** TODO Solution
    - =TODO=

*** TODO Discussion
    - JSR 376 -- the Java Platform Module System.

    - Q: What are changed by the /Java Platform Module System/?
      A: For example, it changes the nature of ~public~ and ~private~.

    - As a concession, Java 9 has a *default* command-line flag
      ~--illegal-access=permit~. *It will be disallowed in the feature release*.

**** TODO Modules
     - The ~module-info.java~ file is known as a /module descriptor/.

     - *NOTE*:
       The *reversed URL* pattern is currently the *recommended naming
       convention* for /modules/.

     - The *ONLY* /module/ provided by Java 9 JVM *by default* is ~java.base~.

*** TODO See Also

** DONE 10.2 Private Methods in Interfaces 245
   CLOSED: [2018-01-19 Fri 05:12]
*** DONE Problem
    CLOSED: [2018-01-19 Fri 04:22]
    You want to add ~private~ /methods/ to /interfaces/ that _can be called by
    other /methods/ in the /interface/._

*** DONE Solution
    CLOSED: [2018-01-19 Fri 04:22]
    Java SE 9 now *supports* using the ~private~ keyword on /interface methods/.

*** DONE Discussion
    CLOSED: [2018-01-19 Fri 05:12]
    - In Java SE 8,
      1. for the _FIRST TIME_ developers could _add_ *implementations* to
         /interface methods/, labeling them as ~default~ or ~static~. =TODO=

      2. The next logical step was to _add_ /private methods/ as well.

    - In Java, all the /private methods/
      + use the ~private~ keywrod;

      + MUST have an *implementation* -- in another words, MUSTN'T be /abstract
        method/.

      + Like /private methods/ in /classes/, they *CANNOT* be _overridden_.
        The can be *ONLY* invoked from within the same source file.

    - Example

      =From Jian= NOT a good way to use /interfaces/. A better example should be
      created.

      #+BEGIN_SRC java
        // Example 10-8. Private method in an interface
        import java.util.function.IntPredicate;
        import java.util.stream.IntStream;

        public interface SumNumbers {
            default int addEvens(int... nums) {
                return add(n -> n % 2 == 0, nums);
            }
            default int addOdds(int... nums) {
                return add(n -> n % 2 != 0, nums);
            }
            private int add(IntPredicate predicate, int... nums) {
                return IntStream.of(nums).
                         filter(predicate).
                         sum();
            }
        }


        // Example 10-9. Testing the private interface method
        class PrivateDemo implements SumNumbers {}

        import org.junit.Test;
        import static org.junit.Assert.*;

        public class SumNumbersTest {
            private SumNumbers demo = new PrivateDemo();

            @Test
            public void addEvens() throws Exception {
                assertEquals(2 + 4 + 6, demo.addEvens(1, 2, 3, 4, 5, 6));
                //                      |<---------------------------->|
            }

            @Test
            public void addOdds() throws Exception {
                assertEquals(1 + 3 + 5, demo.addOdds(1, 2, 3, 4, 5, 6));
                //                      |<--------------------------->|
            }
        }
      #+END_SRC

** 10.3 Creating Immutable Collections 247
*** DONE Problem
    CLOSED: [2018-01-19 Fri 05:11]
    Create *immutable* /lists/, /sets/, or /maps/.

*** DONE Solution
    CLOSED: [2018-01-19 Fri 05:11]
    Use the Java 9 new added /static factory methods/:
    + ~List.of~
    + ~Set.of~
    + ~Map.of~

*** TODO Discussion
*** TODO See Also

** 10.4 Stream: ofNullable, iterate, takeWhile, and dropWhile 252
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

** 10.5 Downstream Collectors: filtering and flatMapping 255
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

** 10.6 ~Optional~: stream, or, ~ifPresentOrElse~ 259
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

** 10.7 Date Ranges 262
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

* TODO A. Generics and Java 8 - 267
* Index - 287
