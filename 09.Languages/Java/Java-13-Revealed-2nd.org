#+TITLE: Java 13 Revealed
#+SUBTITLE: For Early Adoption and Migration
#+VERSION: 2019, 2nd edition
#+AUTHOR: Kishori Sharan
#+STARTUP: overview
#+STARTUP: entitiespretty

* About the Author - xi
* About the Technical Reviewer - xiii
* Acknowledgments - xv
* Introduction - xvii
* Chapter 1: Local Variable Type Inference - 1
** What Is Type Inference? - 1
** What Is var? - 2
** A Quick Example - 5
** Rules of Using var - 9
*** No Uninitialized Variables - 10
*** No null Type Initializers - 10
*** No Multiple Variable Declarations - 11
*** Cannot Reference the Variable in the Initializer - 11
*** No Array Initializers by Themselves - 11
*** No Array Dimensions - 12
*** No Poly Expressions As Initializers - 12
*** Inferring Types on Both Sides - 14
*** Inferring Non-denotable Types - 14
*** Not Allowed in Fields and Methods Declarations - 17

** Using final with var - 17
** Formal Parameters in Lambda Expressions - 18
** Backward Compatibility - 20
** Summary - 21

* TODO Chapter 2: Java Versioning Scheme - 23
  In this chapter, you will learn
  - About the *OLD* and *NEW* /Java release models/
  - What the /JDK versioning scheme/ had been *before* _JDK 9_
  - About the *NEW* /JDK versioning scheme/ in JDK 9 and its *UPDATES* in JDK 10
  - How to parse a JDK version string using the ~Runtime.Version~ /class/
  - About the formats used to print the Java version string using different options with the java command

** Java Release Models - 23
** What Is a Version String? - 24
** Old Version String Scheme - 24
** New Version String Scheme - 26
*** Version Number - 26
*** Pre-release Information - 28
*** Build Information - 28
*** Additional Information - 28

** Parsing Old and New Version Strings - 29
** Changes to System Properties - 29
** Using the Runtime.Version Class - 30
** Printing Java Version Strings - 36
** Summary - 38

* Chapter 3: The HTTP Client API - 41
** What Is the HTTP Client API? - 41
** Components of the HTTP Client API - 43
** Setting Up Examples - 45
** A Quick Example - 46
** Creating HTTP Clients - 49
** Processing HTTP Requests - 52
*** Obtaining an HTTP Request Builder - 52
*** Setting Up HTTP Request Parameters - 53
*** Setting Up Request Method and Body Publisher - 53
*** Overriding HTTP Version - 56
*** Setting Up a Timeout - 57
*** Setting Expect Continue Header - 57
*** Setting Request Headers - 58
*** Creating HTTP Requests - 59

** Processing HTTP Responses - 59
*** Processing Response Status and Headers - 60
*** Processing the Response Body - 63

** Using HTTP Basic Authentication - 91
** Using WebSockets - 96
*** WebSocket Server Endpoint - 97
*** Creating a Client Endpoint - 97
*** Running the WebSocket Program - 106

** Summary - 110

* Chapter 4: Launching Single File Source Code Programs - 111
** What Is the Java Launcher? - 111
** Setting Up Examples - 113
** Source-File Mode Selection - 114
** Must Be a Single Source File - 115
** The First Top-Level Class Is Run - 118
** Passing Arguments to the Program - 121
** Passing Options to the Compiler - 122
** Class Loading Mechanism - 123
** Non-standard Source File Names - 134
** Supporting Shebang Files - 135
** Summary - 140

* TODO Chapter 5: Enhanced Switch - 143
  In this chapter, you will learn
  - What a *preview feature* is
  - What a /switch statement/ and a /switch expression/ are
  - Enhancements to the traditional ~switch~ (=from Jian= /switch statement/)
  - About the *new syntax* for ~switch~
  - About the _rules_ of using *new switch*
  - About the ~yield~ statement

** DONE What Is a Preview Feature? - 143
   CLOSED: [2019-12-20 Fri 10:58]
   - preview feature (Java SE Platform) :: a _fully specified_ and _fully implemented_
        language or virtual machine feature, which is available in a JDK feature
        release, but is _not yet a permanent feature_ of the JDK .

   - A /preview feature/ is provided to solicit developer feedback.
     Base on the feedback, the /preview feature/ can be adjusted or even removed.

   - _A /preview feature/ is *NOT* backward compatible._
     There is no promise that you can run class files that contain /preview
     features/ from Java 12 using Java 13 runtime.

   - Since a /preview feature/ is _not meant to be used in production_,
     it is _not enabled_ in the compiler *and* runtime _by default_.
     + =from Jian= later we can see, if you use this feature in your code, both
       compile time and runtime you need to use some options to enable it.

     + You must use the ~--enable-preview~ option with the compiler and runtime
       to use a preview feature. You will need to use the ~--release~ or ~-source~
       option when you use the ~--enable-preview~ option to compile the source
       code.

     + When you use ~--enable-preview~ in compile time, the compiler also suggest
       the ~-Xlint:preview~ option -- it will print a warning for each usage of
       the /preview features/.

   - In summary, to compile source code with /preview features/ in JDK 13, you
     + At /compile time/ with /preview features/ in JDK 13, you need
       ~javac --enable-preview -Xlint:preview --release 13 <other-options-and-arguments>~

     + At /runtime/ in JDK 13, you need
       ~java --enable-preview <other-options-and-arguments>~

     + Use /jshell/:
       ~jshell --enable-preview~

** DONE Example Programs - 145
   CLOSED: [2019-12-20 Fri 11:03]

** DONE The Background - 145
   CLOSED: [2019-12-20 Fri 11:33]
   - /Syntax/ and /semantics/ for the Java /TRADITIONAL switch statement/ were
     copied from C/C++, which is simply irritating to use and is also error-prone:
     + The fall-through semantics.
       Mostly we don't want this.

     + The ~case~ of switch doesn't support or-pattern like ~case 1, 2~.
       Must write like:
       #+begin_src java
         case 1:
         case 2:
       #+end_src

     + All switch labels occur in one scope.
       If you want to create variables with the same name under lables, you need to
       manually use ~{}~ to create /blocks/.

     + Can't be an /expression/.

   - It is a preparation for future /pattern matching/ (see JEP305).

*** The Fall-Through Semantics - 146
*** One Constant per Case Label - 147
*** One Scope for the Switch Block - 148
*** A Switch Was a Statement - 149

** DONE Enhanced Switch - 150
   CLOSED: [2019-12-20 Fri 16:39]
   - There are two types of changes to ~switch~:
     + Enhancements to Traditional Switch
     + New Switch Syntax
       * The _NEW switch syntax_ provides features of the _TRADITIONAL switch
         statement_ and _many more_. =from Jian= I think, it's actually everything,
         except /fall-through semantics/.

*** DONE Enhancements to Traditional Switch - 150
    CLOSED: [2019-12-20 Fri 12:05]
    - Changes:
      + Multiple constants in a ~case~ label.
        For example, ~case 'a', 'b', 'c'~.

      + Use ~switch~ as an expression.
          New ~yield~ statement -- =from Jian= consider this as a ~return~ for the
        switch body.
        #+begin_src java
          int count = 2;

          // More code goes here...
          // Declare desc here and use a switch expression to assign it a value
          String desc = switch (count) {
          case 1:  yield "One";
          case 2:  yield "Two";
          case 3:  yield "Three";
          default: yield "Out-of-range";
          };
        #+end_src
        Any statements after a case ~yield~ is unreachable, and the compiler will
        print an error message.

*** DONE New Switch Syntax - 155
    CLOSED: [2019-12-20 Fri 16:39]
    - We call the traditional one _switch-with-colon_ syntax
      (JSL:switch labeled statement groups)

    - We call the new one _switch-with-arrow_ syntax
      (JSL:switch labeled rules)

    - Syntax:
      #+begin_src text
        switch(selector-expresion) {
        case label1[, label2, label3...] -> [expression|block|throw-statement]
        case label4[, label5, label6...] -> [expression|block|throw-statement]
        // ...
        default                          -> [expression|block|throw-statement]
        }
      #+end_src
      + NO /fall-through semantics/

      + Only one "thing" can be executed as part of a matched switch label.
        That "thing" can be
        * an expression
        * a block statement
        * a throw statement

      + it is a expression

      + Each case has its own scope.

    - Example:
      #+begin_src java
        char c = 'W';
        // More code goes here
        String desc = switch(Character.toLowerCase(c)) {
        case 'a', 'e', 'i', 'o', 'u' -> "Vowel";
        default -> {
            if (Character.isLetter(c)) {
                yield "Consonant";
            } else {
                yield "Not-a-Letter";
            }
        }
        };
      #+end_src
      The ~default~ branch block is for illustration, not the best practice!
      We usually not use /block/ and  write it like
      #+begin_src java
        Character.isLetter(c) ? "Consonant" : "Not-a-Letter";
      #+end_src

** TODO Does New switch Replace the Old One - 160
** DONE Exhaustiveness of Case Labels - 162
   CLOSED: [2019-12-20 Fri 17:41]
   - The /switch labels/ for a /switch expression/, NOT a /switch statement/, *must
     be exhaustive*.
     + If the labels are _INFINITE enumerations_ like ~int~, you always need a
       ~default~ label at the end.

     + =from Jian= If the labels are _FINITE enumerations_ like /enums/,
       1 in below is more safer and better for further code maintenance and evolution.
       When one more enum constant is added, the maintainer need to consider it need
       a new case and corresponding evaluation or just added to the leftover case
       (the last one). 2 use ~default~, the maintainer may forget to considering
       the new added /enum constants/, and create a bug.

       1. When there are _few_ /enum constants/, you may use enumerate the LEFT
          /enum constants/ as the last case like ~case left1, left2, left3 -> ...~.

       2. When there are _many_ /enum constants/, and it is not easy to enumerate
          the left /enum constants/, you should use a ~default~ label.

   - When a /switch expression/ is based on an /enum/ and ALL /enum constants/ are
     covered by /case labels/, the compiler adds a ~default~ label with the code
     ~default -> throw new IncompatibleClassChangeError();~
     + *The compiler assists you when you use ~switch~ as an expression,
       including _new swtich_ and _old switch with ~yiled~ form_.*

   - In Java ,an expression must _return a value_ or _throw an exception_.
     + This rule is enforced for /switch expressions/, if it is not satisfied, a
       ~SwitchExpressionCompletion~ will be thrown.
       #+begin_src java
         case 3 -> {
             if (LocalDate.now().getYear() == 2019) {
                 yield "Three";
             }
             // A compile-time error
         }
       #+end_src
       Single branch ~if~ (with ~yield~) CAN'T be an /expression/!

     + This rule also implies that the /control transfer statements/ such as ~break~,
       ~continue~, and ~return~ *CANNOT* be used in /swtich expressions/.
       No such restriction for /switch statements/.
       * /swtich statements/: ONLY ~break~, NEVER ~yield~
       * /swtich expressions/: ONLY ~yield~, NEVER ~break~

** TODO A Switch Expression Is a Poly Expression - 167
** DONE The ~yield~ Statement - 170
   CLOSED: [2019-12-20 Fri 17:14]
   - After introducing the ~yield~ keyword, if by accident there is a /method/
     named ~yield~, you *can no longer use* its in /unquanlified form/.
     + Assume you have a method invocation ~yield(10)~, after introducing ~yield~,
       this will be identified as a equivalent form of ~yield 10~.

   - With the introduction of the NEW /switch expressions syntax/, ~yield~ is a
     /restricted identifier/.
     + Its use is restricted in certain contexts.

     + *CANNOT*:
       use ~yield~ as a _type name_ such as a _class name_ or an _interface name_.

     + *CAN*:
       use ~yield~ as a _method name_ and a _variable name_.
       * _Using ~yield~ as a method is allowed for BACKWARD COMPATIBILITY_
         because the Java ~Thread~ /class/ contains a ~yield~ /method/ and, in
         rare cases, you might have named _your methods_ as ~yield~.

** TODO Mixing Switch Label Syntax - 172
   Code with the /switch expression form/, _labels must be *exhaustive*._
** TODO Summary - 173

* Chapter 6: Text Blocks - 175
*** The Background - 175
*** What Is a Text Block? - 178
*** Text Blocks Are a Preview Feature - 180
*** Text Blocks Are Transformed - 181
*** Transformation Rules - 186
**** Transforming Line Terminators - 186
**** Transforming Incidental Whitespaces - 188
**** Transforming Escape Sequences - 195
**** A Complete Example - 200

*** Concatenating Text Blocks - 204
*** Addition to the String API - 205
*** Detecting Inconsistent Whitespaces - 209
*** Summary - 211

* Chapter 7: Class Data Sharing - 213
*** Class Data Sharing - 214
**** Creating a Shared Archive - 214
**** Using a Shared Archive - 215
**** Knowing the Loaded Class Location - 219

*** Application Class Data Sharing (AppCDS) - 220
**** Creating a Class List - 221
**** Generating a Shared Archive for AppCDS - 222
**** Running Application Using AppCDS - 223
**** Class Path and Module Path Rules - 225

*** Default CDS Archives - 227
*** Dynamic CDS Archives - 228
*** Summary - 230

* Chapter 8: Tools and APIs Changes - 233
** Deprecated Tools - 233
*** The Nashorn JavaScript Engine - 234
*** The rmic Tool - 234
*** The Pack200 Tools and API - 234
*** The Swing Motif Look and Feel - 235

** Removed Tools - 235
*** The appletviewer Tool - 235
*** The javah Tool - 235

** The Runtime Class - 235
** The Thread Class - 236
** The JVM Constants API - 236
** The String Class - 238
*** Stripping Whitespaces - 239
*** Testing for a Blank String - 239
*** Obtaining Stream of Lines - 239
*** Repeating a String - 240
*** Transforming Strings - 241

** Optional and Predicate - 245
** Compact Number Format - 248
** Unicode Support - 250
** The Files Class - 250
** Collections - 253
*** Creating Unmodifiable Copies of Collections - 253
*** Converting Collections to an Array - 255

** New Collectors - 258
*** Unmodifiable Collectors - 258
*** The Teeing Collector - 259

** The Buffer API - 262
** Creating File Systems from a Path - 263
** Other Significant Changes in JDK11 - 266
** Summary - 266

* Index - 269
