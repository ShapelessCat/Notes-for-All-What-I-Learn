#+TITLE: SLF4J Tutorial: Example of How to Configure It for Logging Java Applications
#+VERSION: 2021-03-12
#+AUTHOR: RAFAL KUĆ
#+STARTUP: indent
#+STARTUP: overview
#+STARTUP: entitiespretty

- /Logging/ is a crucial part of the /observability/ of your Java applications.

- /Java logs/ combined with /JVM metrics/ and /traces/ give full /observability/
  into the application behavior and are invaluable when troubleshooting.
  * Together, they shorten the time needed to find the root cause and allows for
    quick and efficient resolutions of problems.

- FACT:
  Choosing the right logging library for your Java application is one of the
  steps to enable logging. As we explained in our Java logging tutorial, there
  are various frameworks available and there will be new ones that will enable
  faster, more powerful, and less resource expensive logging.

- BEST PRACTICE:
  That's why it's a good practice to use a _logging API_ in your code – an
  abstraction layer that hides the implementation details and allows *compile
  time logging framework binding*.

- In this article, we'll introduce you to *SLF4J*, an abstraction layer allowing
  you to *change* the /logging library/ without the need of changing the code of
  your Java application.
  * We'll talk about
    + its benefits
    + how to configure and use it with the /logging framework/ of your choice.

* What Is SLF4J
- Simple Logging Facade for Java (SLF4J) ::
  an abstraction layer for various _Java logging frameworks_, like
  * Log4j 2
  * Logback

- This abstraction layer allows for plugging different logging frameworks at
  deployment time *WITHOUT* the need for code changes.

* Why Should You Use It
SLF4J allows us to *decouple* the code that is used to create log events *from*
the implementation that will be responsible for processing and storing them in a
way we want:
- For example,
  * in a file
  * in an /external log centralization system/.

- This kind of approach allows choosing the _logging framework_ such as
  * Log4j 2 or
  * Loback
  during compilation just by using a different library that uses the /SLF4J API/.

* SLF4J Configuration Example
** Using SLF4J With Logging Framework at the Deploy Time
** Using Log4j 2
** Using Logback
** Using Log4j
** Using JCL
** Additional Considerations

* SLF4J Loggers
* SLF4J Levels
* DONE Mapped Diagnostic Context in SLF4J
CLOSED: [2023-07-02 Sun 11:07]
- Mapped Diagnostic Context (MDC) ::
  A map where the application code provides key-value pairs which can be
  inserted by the logging framework in the log messages.
  * If the underlying logging framework supports the /MDC/
    then SLF4J facade will pass the maintained key-value pairs to the used
    logging framework.

  * Properly displaying the data associated with the log event using the /Mapped
    Diagnostic Context/
    *IS UP TO*
    the logging framework.

* TODO SLF4J Markers
* DONE Parameterized Logging - =from Jian= _Scala doesn't need this!_
CLOSED: [2023-07-02 Sun 13:32]
The SLF4J allows /simple log messages/ and /parameterized log messages/.

- Example:
  #+BEGIN_SRC java
    public class SLF4JParameterized {
        private static Loggerr LOGGER = LoggerFactory.getLogger(SLF4JParameterized.class);

        public static void main(String[] args) {
            int currentValue = 36;
            LOGGER.info("The parameter value in the log message is {}", currrentValue);
        }
    }

    // [main] INFO com.sematext.blog.logging.SLF4JParametrized - The parameter value in the log message is 36
  #+END_SRC

- This allows for efficient log message building without the need of
  * ~String~ concatenation
  * buffers and writers usage.

- We don't need this feature in Scala!
  Use string interpolation!

* TODO Java Logging Using Log Management Tools: How Sematext Logs Can Help
* TODO Conclusion
