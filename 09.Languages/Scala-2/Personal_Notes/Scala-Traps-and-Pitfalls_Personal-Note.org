#+TITLE: Scala Traps and Pitfalls
#+VERSION: 2017
#+AUTHOR: Jian Lan
#+STARTUP: overview
#+STARTUP: entitiespretty

* Notable packages
** scala.collection and its sub-packages contain Scala's collections framework
*** ~Iterable~
**** ~sameElements~ - A Misleading Name
     - ~sameElements~ is used to compare /arrays/.
       Q: WHY NOT ~==~?
       A: ~==~ in ~Array~ is not overridden, it is /identity check/.

     - It seems ~sameElements~ doesn't check orders, _BUT it acutally DOES check ORDER_.
       The documentation mentions this after https://issues.scala-lang.org/browse/SI-888 is discussed and closed (NO fix in plan).

     - More details and the reason why SI-888 was submitted is explained here:
       https://stackoverflow.com/questions/29008500/scala-sets-contain-the-same-elements-but-sameelements-returns-false

     - The last link also mentioned a debate:
       https://groups.google.com/forum/#!topic/scala-debate/je4vZbR3WbA

       There are responses from Martin.

     - An expedient from me:
       For now, since there is NOT a perfect solution,
       + plan 1 :: create an alias method named ~sameElementsInOrder~, and annotate ~sameElements~ as ~@deprecated~
       + plan 2 :: create (or use a existed) annotation like ~@readDocumentBeforeUsing~ or ~@misleadingName~

** scala.collection.immutable - Immutable, sequential data-structures such as Vector, List, Range, HashMap or HashSet
** scala.collection.mutable - Mutable, sequential data-structures such as ArrayBuffer, StringBuilder, HashMap or HashSet
** scala.collection.concurrent - Mutable, concurrent data-structures such as TrieMap
** scala.collection.parallel.immutable - Immutable, parallel data-structures such as ParVector, ParRange, ParHashMap or ParHashSet
** scala.collection.parallel.mutable - Mutable, parallel data-structures such as ParArray, ParHashMap, ParTrieMap or ParHashSet
** scala.concurrent - Primitives for concurrent programming such as Futures and Promises
** scala.io - Input and output operations
** scala.math - Basic math functions and additional numeric types like BigInt and BigDecimal
** scala.sys - Interaction with other processes and the operating system
** scala.util.matching - Regular expressions

* Other packages exist. See the complete list on the right.

* Additional parts of the standard library are shipped as separate libraries. These include:
** scala.reflect - Scala's reflection API (scala-reflect.jar)
** scala.xml - XML parsing, manipulation, and serialization (scala-xml.jar)
** scala.swing - A convenient wrapper around Java's GUI framework called Swing (scala-swing.jar)
** scala.util.parsing - Parser combinators (scala-parser-combinators.jar)


