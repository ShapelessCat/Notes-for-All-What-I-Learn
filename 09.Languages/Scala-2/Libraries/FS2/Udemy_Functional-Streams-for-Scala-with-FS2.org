#+TITLE: Functional Streams for Scala with FS2
#+SUBTITLE: Dealing with flows of data the right way
#+INSTRUCTOR: Leandro Galvan
#+STARTUP: entitiespretty
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Course Info
** What you'll learn
   - Understand the differences between Lists and Streams
   - Implement memory efficient tasks via streaming (e.g. file i/o)
   - Build complex flows for your application with streams
   - Handle concurrency and resource safety declaratively

** Description
   - Many applications involve dealing with large flows of data. Examples are
     processing files in ETL jobs, reading results from a database or getting a
     big response from http calls. Handling large amounts of data often means
     sacrificing either readability or performance.

   - With /streams/, you can get the best of both worlds:
     * Data is processed using a constant amount of memory, even if the total
       amount of data is very large

     * The processing is built declaratively as if you were dealing with regular
       Lists or Sequences, with high level methods such as map, filter and
       flatMap

   - Furthermore, streams in FS2 are effect-aware. They work in the context of an
     effect monad like ~IO~, which enables them to do all sorts of useful stuff
     such as processing elements in parallel, throttling, retrying on failure
     and many more.

   - In this course we will turn streams inside out and learn things like:
     * Create and combine pure streams
     * Add effects to our streams and learn how to compose them
     * Handle errors & resources safely
     * Apply patterns involving time, such as retries, throttling and debouncing.
     * Build our own stream transformations with ~Pull~'s and ~Pipe~'s
     * Handle concurrency using many different patterns
     * Communicate between streams using primitives such as
       + ~Signal~'s
       + ~Channel~'s
       + ~Topic~'s
       + ~Queue~'s

   - Join me in this journey and add yet another amazing tool to your functional
     programming toolkit!

** Who this course is for:
   Scala functional developers with some experience who want to add functional
   stream to their toolkit

** Instructor
   *Leandro Galvan*
   Senior Software Engineer

   My name is Leandro Galvan.

   I'm a computer scientist from Rosario, Argentina and have been a software
   engineer for over a decade.

   I'm a fierce believer of constant learning, reason why I'm constantly reading
   books, blogs, taking courses, and trying new and fun stuff!

   Over the years I've grown particularly fond of sharing my knowledge with
   other people in a pragmatic and approachable way.

   My current interests are Scala and functional programming. Also Japanese and
   languages in general :).

** Requirements
   - Working knowledge of the Scala language
   - Knowledge of the Cats Effect library

* DONE Section 1: Introduction
  CLOSED: [2023-06-13 Tue 21:17]
  - Skills:
    * Create & compose _PURE_ /streams/
    * Create & compose _EFFECTFUL_ /streams/
    * Write /stream/ TRANSFORMATIONS
    * Launch /streams/ CONCURRENTLY
    * COMMUNICATE between /streams/

  - Requirements:
    * Scala fluency

    * cats & cats-effect

    * functional programming

* DONE Section 2: Setting up environment
  CLOSED: [2023-06-13 Tue 21:17]
** 4. Processing a CSV File - Imperative Version
** 5. Processing a CSV File - Imperative Version - Part 2
** 6. Processing a CSV File - List Version
** 7. Processing a CSV File - Iterator Version
** 8. Processing a CSV File - Stream Version
** 9. Processing a CSV File - Stream Version - Part 2
** Quiz 1: Streams Motivation Quiz

* DONE Section 3: Pure Streams
  CLOSED: [2023-06-13 Tue 21:17]
** 10. Introduction
   - Finite streams
     * ~apply~
     * ~empty~
     * ~emit~
     * ~emits~
     * ~range~

   - Infinite streams
     * ~iterate~
     * ~unfold~
     * ~constant~

   - Stream combinators
     * ~map~
     * ~flatMap~
     * ~filteer~
     * ~zip~
     * ~zipWith~
     * ~fold~
     * ~++~

** 11. Creating finite streams
** 12. Iterate
** 13. Unfold
** 14. Range & Constant
** 15. Exercise: Producing the alphabet with Iterate
** 16. Exercise: Producing the alphabet with Unfold
** 17. Exercise: Implementing Iterate in terms of Unfold
** 18. Concatenate
** 19. Map
** 20. FlatMap
** 21. Filter & For Comprehensions
** 22. Zip & ZipWith
** 23. Fold
** 24. Exercise: produce the odds number using Map
** 25. Exercise: implement the repeat method
** 26. Exercise: implement the unNone method
** 27. Summary
   - Streams can be *finite* or *infinite*

   - Streams can be *pure* or *effectful*

   - Pure streams are basically *lazy* collections

   - The stream interface has a lot of list-like methods

   - Methods like ~toList~ will get all the elements from the stream.
     Be careful with infinite streams!

** Quiz 2: Pure Streams Quiz

* DONE Section 4: Effectful Steams
  CLOSED: [2023-06-14 Wed 00:12]
** 28. Introduction
   Agenda

   - Creating effectful streams
     * From an existing effect (~eval~ & ~exec~)
     * From a pure stream (~covary~)
     * By iterating (~iterateEval~)
     * By iterating while keeping a state (~unfoldEval~)

   - Combinators
     * ~repeat~
     * ~map~ & ~flatMap~
     * ~evalMap~, ~evalTap~ & ~evalFilter~
     * ~++~

   - Compiling streams
     * To get their values (~toList~)
     * To get ony the effects (~drain~)

   - Error handling
     * ~raiseError~
     * ~handleErrorWith~

   - Resources
     * ~bracket~
     * ~resource~
     * ~fromAutoCloseable~

   - Time related methods
     * ~timeout~
     * ~interruptAfter~
     * ~delayBy~
     * ~metered~
     * ~debounce~

   - Retry

** 29. Eval
** 30. Exec
** 31. Covary
** 32. IterateEval
** 33. UnfoldEval
** 34. Exercise: Pagination
** 35. RepeatEval
** 36. For comprehensions
** 37. EvalMap, EvalTap and EvalFilter
** 38. Concatenation
** 39. Exercise: EvalEvery
** 40. Error Handling
** 41. Resources
** 42. Basic Time Methods
** 43. Throttling
** 44. Debouncing
** 45. Retry
** 46. Exercise: Searching
** 47. Summary
   - Streams do not only produce *values* but also *effects*

   - There are multiple ways to *create* a stream from an effect type (~IO~ in our examples)

   - There are many effect-awere ways to *combine* streams

   - *Compiling* a stream gives us an interface to go back to our effect type

   - Streams are ~MonadError~'s

   - We can handle resources safely

   - We can interrupt streams, force them to emit every certain period of time, timeout and more.

   - Built-in retry capability!

** Quiz 3: Effectful Streams Quiz
* DONE Section 5: Transforming steams
  CLOSED: [2023-06-15 Thu 04:34]
** 48. Introduction
   Agenda

   - Pull based vs Push based

   - Chunks

   - Pulls

   - Pipes

** 49. Pull based vs push based
   - Pull based streams
     * The stream contains a *recipe* to produce more elements.
     * Elements are *pulled* from the stream *when needed*.
     * When our process needs no more elements, we can stop.

   - Push based streams
     * The producer emits elements *at its own pace* and notifies subscribers.
     * The consumers subscriber to updates and provide *callbacks*.

   - Icons used to illustrate the pull based and push based concepts:
     * https://www.flaticon.com/free-icons/list
     * https://www.flaticon.com/free-icons/factory
     * https://www.flaticon.com/free-icons/credit-limit
     * https://www.flaticon.com/free-icons/filter
     * https://www.flaticon.com/free-icons/ear

** 50. Chunk structure of a stream
** 51. Chunk methods
   - Fast concatenation: O(1)
   - Fast indexing: ???
   - Avoid copying
   - List-like interface

** 52. Exercise: compact
** 53. Creating pulls via factory methods
** 54. Turning streams into pulls
** 55. Exercise: skipLimit
** 56. First chunk pipe
** 57. Drop pipe
** 58. Exercise: filter
** 59. Running sum pipe
** 60. Exercise: running max
** 61. Summary
   - Fs2 streams are pull based (only emit when asked to)

   - Streams emit values in chunks

   - Pulls represent processes
     * Useful when transforming streams

   - Pipes are functions from stream to streams
     * Then ~through~ operator can be used to transform a stream with a pipe

   - Pipes are functions from stream to streams

** Quiz 4: Transforming Streams Quiz

* DONE Section 6: Concurrency
  CLOSED: [2023-06-16 Fri 13:17]
** 62. Introduction
   Agenda
   - Running streams concurrency
     * ~merge~
     * ~parJoinUnbounded~
     * Concurrently

   - processing elements in parallel
     * ~parEvalMap~

   - Zipping streams
     * ~zip~
     * ~zipRight~
     * ~parZip~

   - Timed behavior
     * ~fixedRate~
     * ~fixedDelay~
     * ~awakeEvery~
     * ~awakeDelay~

** 63. Merge
** 64. MergeHaltL & MergeHaltBoth
** 65. Exercise: Fetching quotes from two sources
** 66. ParJoinUnbounded
** 67. ParJoin
** 68. Exercise: Multiple producers and multiple consumers
** 69. Concurrently
** 70. Exercise: Progress tracker
** 71. ParEvalMap
** 72. Exercise: ParEvalMapSeq
** 73. Zip
** 74. ZipRight
** 75. ParZip
** 76. FixedRate
** 77. FixedDelay
** 78. AwakeEvery & AwakeDelay
** 79. Summary
   - There are many ways to "launch" streams concurrently

   - Elements in a stream can be processed in parallel

   - Zipping can hep implement interesting patterns (such as metered)

   - ~fixedDelay~ and ~fixedRate~ are at the core of most time related methods/patterns

** Quiz 5: Concurrency Quiz
* DONE Section 7: Communication
  CLOSED: [2023-06-18 Sun 04:36]
** 80. Introduction
   Agenda
   - Signals
     * Interruption
     * Sending values from one stream and consuming from another

   - Channels
     * Multiple producers
     * Buffering

   - Topic
     * Pub/Sub model
     * Buffering (in each subscriber)

   - Queues
     * Multiple producer / Multiple consumer
     * Buffering
     * Communication with outside world

** 81. Signals
** 82. Exercise: Cooler
** 83. Channels
** 84. Exercise: Improved Cooler
** 85. Topics
** 86. Backpressure with Topics
** 87. Exercise: Car position tracker & notifier
** 88. Queues
** 89. Handling backpressure with Queues
** 90. Signalling termination with None
** 91. Exercise: simulating a server
** 92. Summary
   - Many ways to send messages between streams
   - Buffering helps deal with fast producers / slow consumers
   - We can connect to the outside world

** Quiz 6: Communication Quiz
* TODO Section 8: Final project: a tiny http server
** 93. Implementing an http serve

* DONE Section 9: Conclusion
  CLOSED: [2023-06-18 Sun 04:36]
** 94. Conclusion
