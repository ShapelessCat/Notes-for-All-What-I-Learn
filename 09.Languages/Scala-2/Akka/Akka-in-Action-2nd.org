#+TITLE: Akka in Action
#+VERSION: 2nd
#+AUTHOR: Francisco Lopez-SanCho Abraham
#+STARTUP: overview
#+STARTUP: entitiespretty

* welcome
* 1 Introducing Akka - 1
** 1.1 What is Akka? - 2
** 1.2 Actors: A quick overview - 4
** 1.3 Two approaches to scaling: Setting up the example - 5
** 1.4 Traditional scaling - 7
*** Traditional scaling and durability: Moving everything to the database - 7
*** Traditional scaling and interactive use: Polling - 10
*** Traditional scaling: Transactions - 11

** 1.5 Scaling with Akka - 12
*** Scaling with Akka and durability: Sending and receiving messages - 13
*** Scaling with Akka and interactive use: Pushing messages - 15
*** Scaling with Akka and failure: Asynchronous decoupling - 16
*** The Akka approach: Sending and receiving messages - 16

** 1.6 Actors: One programming model to rule up and out - 18
*** An asynchronous model - 18
*** Actor operations - 19

** 1.7 Akka actors - 22
*** ActorSystem - 23
*** ActorRef, mailboxes, and actors - 24
*** Dispatchers - 24
*** Actors and the network - 26

* 2 Up and running - 27
** 2.1 Printing money - 28
** 2.2 Starting to code - 28
*** The protocol of the actor - 28
*** Creating an application and instantiating the actor - 29
*** Sending messages - 29
*** Implementing the actor: Receiving messages - 30
*** Terminating the system - 31
*** The application - 31
*** The solution in Git - 32
*** Running the app - 32

** 2.3 Keeping state with a variable - 33
** 2.4 Keeping state with behaviors - 37
** 2.5 Scheduling a message - 41

* 3 One actor is no actor - 44
** 3.1 Simple parser example - 45
*** Coding the app - 46
*** Coding the guardian and spawning - 47
*** Sending messages back and forth: Adapting responses - 48
*** The protocol with the adapter’s message - 49
*** The adapter’s function - 49
*** Delegating - 49
*** A protocol with commands and responses as traits - 51
*** Coding the worker - 51

** 3.2 Asking and expecting a reply - 52
*** A simple question - 53
*** Coding the manager - 55
*** The protocols - 56
*** Asking - 56
*** Coding the worker - 58
*** Using context - 59
*** Ask signature - 59

** 3.3 Ask with a payload - 61

* 4 Akka test kit - 65
** 4.1 Testing approaches - 66
** 4.2 Sync testing - 67
*** Effects - 67
*** More than one actor - 70
*** Testing the logs - 71

** 4.3 Async testing - 72
*** Using probes - 72
*** Fishing for messages - 75
*** Logging - 77
*** Log capturing - 79

* 5 Fault tolerance - 82
** 5.1 What fault tolerance is (and what it isn’t) - 83
*** Plain old objects and exceptions - 85
*** Wrap it up and let it crash - 89

** 5.2 Actor lifecycle events: Signals - 91
** 5.3 Supervision strategies and signals - 92
*** Uneventful resuming - 92
*** Stopping and the PostStop signal - 94
*** Restart and the PreRestart signal - 95
*** Custom strategy - 97

** 5.4 Watching signals from an actor - 98
** 5.5 Back to the initial use case - 100
*** Supervisor hierarchy initial design - 100
*** Supervision hierarchy alternative design - 101

* 6 Discovery and routing - 108
** 6.1 Discovery: The receptionist - 109
** 6.2 The built-in integration router pattern - 112
** 6.3 Balancing load using built-in routers - 114
*** Akka pool router - 116
*** Changing strategies - 117
*** Akka group router - 118
*** Consistent hashing strategy - 120

** 6.4 Implementing the router pattern using actors - 123
*** Content-based routing - 123
*** State-based routing - 123

* 7 Configuration - 126
** 7.1 Trying out Akka configuration - 127
*** Order - 127
*** Subtrees - 128
*** Substitutions - 129
*** Using defaults - 130

** 7.2 Akka configuration - 132
** 7.3 Multiple systems - 133
*** Lifting with Fallback - 133

** 7.4 Configuration in tests - 135
*** Lifting in tests - 135

* 8 Clustering - 138
** 8.1 On top of Akka Cluster - 138
** 8.2 Why use clustering? - 140
*** Cluster membership: Joining a cluster - 141
*** Minimal cluster example - 143
*** Starting the cluster - 145
*** Leaving the cluster - 148
*** Unreachable - 150
*** Downing a reachable node - 151

** 8.3 Akka Management and the Cluster HTTP extension - 153
*** Cluster subscriptions - 156

** 8.4 Clustered job processing - 157
*** In practice - 159
*** The code - 160
*** Work distribution in the master - 162
*** Starting the cluster - 166

** 8.5 Resilient job - 166
*** Serialization - 167
*** Testing is no different - 168

* 9 Sharding and persistence - 171
** 9.1 Akka sharding and stateful systems - 172
*** The big picture - 172
*** An example: A shipping container - 174
*** The simplicity of the sharded entities - 176
*** Rebalancing configuration - 178
*** Passivation - 179
*** Remembering entities - 179

** 9.2 Persistence - 180
*** The ingredients - 180
*** Persistence combined with sharding: A persistent entity - 184
*** Available effects - 184

** 9.3 Customizing the persistent entity - 186
*** Failure - 186
*** Recovery - 186
*** Snapshotting - 187
*** Tagging - 188
*** A peek at serialization and schema evolution - 188

** 9.4 Running example - 189

* 10 Streams, persistence query, and projections - 192
** 10.1 Akka Streams - 193
*** Basic semantics - 194
*** Finite streams - 194
*** Source - 194
*** Flow - 195
*** Sink - 195
*** Blueprint - 195
*** Materialization - 196
*** Infinite streams - 197

** 10.2 Akka Persistence Query - 198
*** Where the rubber meets the road - 202

** 10.3 Projections - 204
*** Reading - 205
*** Writing - 205
*** Putting everything together - 207
*** The ShardedDaemonProcess - 209
*** Back to the SPContainer projection - 211
*** All the main parts - 212

** 10.4 Projections in action - 213

* 11 Akka ports - 217
** 11.1 Akka HTTP - 217
*** Akka HTTP servers - 218
*** The path - 218
*** Directives - 220
*** Route directives - 221
*** Marshalling and unmarshalling - 224
*** Akka HTTP communicating with actors - 225

** 11.2 Akka gRPC - 228
*** The Protocol Buffers side - 229
*** The RPC side - 229
*** The plugin and the .proto file - 229
*** Akka gRPC in action - 231
*** Running the service - 233
*** Akka gRPC with an actor - 233
*** Running the example - 236

* 12 Real-world example: An Akka betting house - 238
** 12.1 The actors - 239
*** The wallet - 239
*** The market - 243
*** The bet - 248

** 12.2 The ports - 259
*** The market - 259

* 13 Clustering, part 2 - 264
** 13.1 Clustering, part 2 - 264
** 13.2 Clustering, part 2 - 264
** 13.3 Split Brain Resolver - 277
*** An unreachable problem - 277
*** SBR strategies - 280

** 13.4 Clustering singletons - 281

* 14 Connecting to systems with Alpakka - 284
** 14.1 Alpakka Kafka - 285
*** Consuming from Kafka in action - 287
*** Detecting consumer failures - 290
*** Auto-commit - 290
*** Committable sources - 290

** 14.2 Pushing to Kafka - 293
*** At-most-once delivery guarantee - 293
*** At-least-once delivery guarantee - 295

** 14.3 Effectively-once delivery - 298
** 14.4 Alpakka CSV - 300
*** Mapping by column - 302
*** Reading and writing with FileIO - 303

* 15 Akka Betting house, part 2 - 306
** 15.1 Projections - 307
*** Database projection - 307
*** Kafka projection - 312
*** The betting-house entry point - 316

** 15.2 Configuration - 317
*** Persistence - 317
*** Cluster local - 319
*** Cluster Kubernetes - 319
*** Services, sharding, and projections - 320

** 15.3 Deployment - 321
*** Running local - 321
*** Running in Kubernetes - 322

* 16 Akka Streams, part 2 - 325
** 16.1 Processing elements through services - 326
*** CPU-bounded services - 326
*** Non-CPU bounded services - 328

** 16.2 Connecting to an actor - 334
** 16.3 Dealing with exceptions - 337
*** Alternative 1: Deciders - 338
*** Alternative 2: Modeling exceptions as data - 339
*** divertTo - 340
*** Restarting the source - 341

** 16.4 Adding elements dynamically to a stream - 346

* Appendix A. Setting up - 350
* Appendix B. Akka microservices - 352
* index - 365
