#+TITLE: The Python Tutorial
#+VERSION: 3.12.2
#+STARTUP: overview
#+STARTUP: entitiespretty
#+STARTUP: indent

- Python is an ideal language for
  _scripting and rapid application development in many areas on most platforms_
  because of its:
  * _elegant syntax_
  * _dynamic typing_
  * _interpreted nature_

- The _Python interpreter_ is easily *extended with* new functions and data types
  implemented in *C* or *C++* (or other languages callable from C).

- Python is also suitable as an extension language for customizable applications.

- This tutorial introduces the reader *INFORMALLY* to
  _the basic concepts and features of the Python language and system._

- For a description of standard objects and modules, see
  _The Python Standard Library_.

- _The Python Language Reference_ gives a more _formal definition of the language_.

- =IMPORTANT=
  To write extensions in C or C++, read
  * [[https://docs.python.org/3/extending/index.html#extending-index][Extending and Embedding the Python Interpreter]] and
  * [[https://docs.python.org/3/c-api/index.html#c-api-index][Python/C API Reference Manual]].

- The [[https://docs.python.org/3/glossary.html#glossary][Glossary]] is also worth going through.

* 1. Whetting Your Appetite
- =from Jian=
  The first two paragraphs talked about why you may want to use Python.
  I'm NOT agree with this discussion, because I leanred 

- =TODO= =LEARN MORE=
  Python is extensible:
  * if you know how to program in C
    it is easy to add a new built-in function or module to the interpreter,
    + either to perform critical operations at maximum speed,
    + or to link Python programs to libraries that may only be available in binary
      form (such as a vendor-specific graphics library).

  * Once you are really hooked, you can link the Python interpreter into an
    application written in C and use it as
    + an extension
      OR
    + command language

    of that application.

* 2. Using the Python Interpreter
** 2.1. Invoking the Interpreter
*** 2.1.1. Argument Passing
*** 2.1.2. Interactive Mode

** 2.2. The Interpreter and Its Environment
*** 2.2.1. Source Code Encoding

* 3. An Informal Introduction to Python
** 3.1. Using Python as a Calculator
*** 3.1.1. Numbers
*** 3.1.2. Strings
*** 3.1.3. Lists

** 3.2. First Steps Towards Programming

* 4. More Control Flow Tools
** 4.1. ~if~ Statements
** 4.2. ~for~ Statements
** 4.3. The ~range()~ Function
** 4.4. ~break~ and ~continue~ Statements, and ~else~ Clauses on Loops
** 4.5. ~pass~ Statements
** DONE 4.6. ~match~ Statements
CLOSED: [2024-02-11 Sun 10:54]
- If you are using classes to structure your data you can
  _use the class name followed by an argument list resembling a constructor_,
  but with the ability to capture attributes into variables:
  #+begin_src python
    class Point:
        def __init__(self, x, y):
            self.x = x
            self.y = y

    def where_is(point: Point):
        match point:
            case Point(x=0, y=0):
                print("Origin")
            case Point(x=0, y=y):
                print(f"Y={y}")
            case Point(x=x, y=0):
                print(f"x={x}")
            case Point():
                print("Somewhere else")
            case _:
                print("Not a point")
  #+end_src

- You can use /positional parameters/ with
  _some builtin classes that provide an ordering for their attributes_ (e.g.
  /dataclasses/).

- You can also
  _define a specific position for attributes in patterns_
  BY SETTING the ~__match_args__~ special attribute in your classes.

  * If it's set to ~("x", "y")~,
    #+begin_src python
      class Point:
          __match_args__ = ('x', 'y')
          def __init__(self, x, y):
              self.x = x
              self.y = y
    #+end_src

    the following patterns are all equivalent (and
    all bind the ~y~ attribute to the ~var~ variable):

    #+begin_src python
      Point(1, var)
      Point(1, y=var)
      Point(x=1, y=var)
      Point(y=var, x=1)
    #+end_src
    + =IMPORTANT=
      - *ONLY* the standalone names (like ~var~ above) are _ASSIGNED_ to by a
        /match statement/.

      - Dotted names (like ~foo.bar~),
        attribute names (the ~x=~ and ~y=~ above) or
        class names (recognized by the ~"(…)"~ next to them like ~Point~ above)
        are *NEVER assigned to*.

- /Guard/:
  #+begin_src python
    match point:
        case Point(x, y) if x == y:
            print(f"Y=X at {x}")
        case Point(x, y):
            print(f"Not on the diagonal")  # FIXME: improvement, remove the prefixed `f`
  #+end_src

- Several other key features of this statement:
  * /tuple/ and /list/ patterns can match *ARBITRARY sequences*.
    =from Jian= What is the contract for /sequences/???
    + An important exception: /iterator/ or /strings/.

  * Sequence patterns:
    + ~[x, y, *rest]~, ~(x, y, *rest)~,
    + ~[x, y, *_]~, ~(x, y, *_)~.

  * Mapping patterns (ignore the keys not listed in the given pattern):
    + ~{"bandwidth": b, "latency": l}~
    ~**rest~ is also supported, but ~**_~ would redundant, so it is *NOT* allowed.

  * Subpatterns (use the ~as~ keywword):
    ~case (Point(x1, y1), Point(x2, y2) as p2): ...~

  * Most /literals/ are _compared by *EQUALITY*,_
    however the singletons ~True~, ~False~ and ~None~ are _compared by *IDENTITY*._
    + =from Jian=
      DON'T MATCH /floating numbers/.

  * Patterns may use /named constants/.
    These *must be* _dotted names_ to prevent them from being interpreted as capture variable:
    #+begin_src python
      from enum import Enum

      class Color(Enum):
          RED = 'red'
          GREEN = 'green'
          BLUE = 'blue'

      color = Color(input("Enter your choice of 'red', 'blue' or 'green': "))

      match color:
          case Color.RED:
              print("I see red!")
          case Color.GREEN:
              print("Grass is green")
          case Color.BLUE:
              print("I'm feeling the blues :(")
    #+end_src

- For a more detailed explanation and additional examples, you can look into
  [[https://peps.python.org/pep-0636/][PEP 636]] which is written in a tutorial format.
  =TODO=

** DONE 4.7. Defining Functions
CLOSED: [2024-02-11 Sun 11:16]
- Formal parameters <-> parameters
- Actual parameters <-> arguments

- _The EXECUTION of a function_ introduces
  _a new symbol table_ used for the locals variables of the function.
  * More precisely,
    + all _variable assignments_ in a function store the value in the /local
      symbol table/;

    + WHEREAS _variable references_
      first look in the /local symbol table/,
      then in the /local symbol tables of enclosing functions/,
      then in the /global symbol table/, and
      finally in /the table of built-in names/.

  * =IMPORTANT=
    _Thus, /global variables/ and /variables of enclosing functions/ *CANNOT be
    directly assigned* a value within a function_ (unless, for /global variables/,
    named in a ~global~ statement, or, for /variables/ of enclosing functions,
    named in a ~nonlocal~ statement), although they may be referenced.

** TODO 4.8. More on Defining Functions
*** DONE 4.8.1. Default Argument Values
CLOSED: [2024-02-11 Sun 11:32]
- *Important warning*:
  The default value is evaluated only once. This makes a difference when the
  default is a mutable object such as a list, dictionary, or instances of most
  classes. For example, the following function accumulates the arguments passed
  to it on subsequent calls:
  #+begin_src python
    def f(a, L=[]):
        L.append(a)
        return L

    print(f(1))
    print(f(2))
    print(f(3))

    # [1]
    # [1, 2]
    # [1, 2, 3]
  #+end_src

  =IMPORTANT=
  This is why you should *NEVER* use a _mutable value_ as a _default argument value_.

  Mostly, you don't really want the behavior in the above example.
  Then the recommended way:
  #+begin_src python
    def f(a, L=None):
        if L is None:
            L = []
        L.append(a)
        return L
  #+end_src

*** TODO 4.8.2. Keyword Arguments
*** TODO 4.8.3. Special parameters
**** 4.8.3.1. Positional-or-Keyword Arguments
**** 4.8.3.2. Positional-Only Parameters
**** 4.8.3.3. Keyword-Only Arguments
**** 4.8.3.4. Function Examples
**** 4.8.3.5. Recap
~def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):~

As guidance:
- Use _positional-only_
  if you want the name of the parameters to *NOT* be available to the user.

  * This is useful
    + when parameter names have no real meaning,
    + if you want to enforce the order of the arguments when the function is
      called or
      if you need to take some positional parameters and arbitrary keywords.

- Use _keyword-only_ when names have meaning and the function definition is more
  understandable by being explicit with names or you want to prevent users
  relying on the position of the argument being passed.

- =IMPORTANT=
  For an API,
  use _positional-only_ to *PREVENT* breaking API changes
  if the parameter's name is modified in the future.

*** TODO 4.8.4. Arbitrary Argument Lists
*** TODO 4.8.5. Unpacking Argument Lists
*** TODO 4.8.6. Lambda Expressions
*** TODO 4.8.7. Documentation Strings
*** TODO 4.8.8. Function Annotations

** DONE 4.9. Intermezzo: Coding Style
CLOSED: [2024-02-11 Sun 11:22]
=from Jian=
In practice, this coding style is ridiculous:
#+begin_quote
Wrap lines so that they don’t exceed 79 characters.

This helps users with small displays and makes it possible to have several code
files side-by-side on larger displays.
#+end_quote

WHY should I do this only for pleasing small displays user?!?!
79 is too narrow!!!

* 5. Data Structures
** 5.1. More on Lists
*** 5.1.1. Using Lists as Stacks
*** 5.1.2. Using Lists as Queues
*** 5.1.3. List Comprehensions
*** 5.1.4. Nested List Comprehensions

** 5.2. The ~del~ statement
** 5.3. Tuples and Sequences
** 5.4. Sets
** 5.5. Dictionaries
** 5.6. Looping Techniques
** 5.7. More on Conditions
** 5.8. Comparing Sequences and Other Types

* 6. Modules
** 6.1. More on Modules
*** 6.1.1. Executing modules as scripts
*** 6.1.2. The Module Search Path
*** 6.1.3. “Compiled” Python files

** 6.2. Standard Modules
** 6.3. The ~dir()~ Function
** 6.4. Packages
*** 6.4.1. Importing ~*~ From a Package
*** 6.4.2. Intra-package References
*** 6.4.3. Packages in Multiple Directories

* 7. Input and Output
** 7.1. Fancier Output Formatting
*** 7.1.1. Formatted String Literals
*** 7.1.2. The String ~format()~ Method
*** 7.1.3. Manual String Formatting
*** 7.1.4. Old string formatting

** 7.2. Reading and Writing Files
*** 7.2.1. Methods of File Objects
*** 7.2.2. Saving structured data with ~json~

* 8. Errors and Exceptions
** 8.1. Syntax Errors
** 8.2. Exceptions
** 8.3. Handling Exceptions
** 8.4. Raising Exceptions
** 8.5. Exception Chaining
** 8.6. User-defined Exceptions
** 8.7. Defining Clean-up Actions
** 8.8. Predefined Clean-up Actions
** 8.9. Raising and Handling Multiple Unrelated Exceptions
** 8.10. Enriching Exceptions with Notes

* 9. Classes
** 9.1. A Word About Names and Objects
** 9.2. Python Scopes and Namespaces
*** 9.2.1. Scopes and Namespaces Example

** 9.3. A First Look at Classes
*** 9.3.1. Class Definition Syntax
*** 9.3.2. Class Objects
*** 9.3.3. Instance Objects
*** 9.3.4. Method Objects
*** 9.3.5. Class and Instance Variables

** 9.4. Random Remarks
** 9.5. Inheritance
*** 9.5.1. Multiple Inheritance

** 9.6. Private Variables
** 9.7. Odds and Ends
** 9.8. Iterators
** 9.9. Generators
** 9.10. Generator Expressions

* 10. Brief Tour of the Standard Library
** 10.1. Operating System Interface
** 10.2. File Wildcards
** 10.3. Command Line Arguments
** 10.4. Error Output Redirection and Program Termination
** 10.5. String Pattern Matching
** 10.6. Mathematics
** 10.7. Internet Access
** 10.8. Dates and Times
** 10.9. Data Compression
** 10.10. Performance Measurement
** 10.11. Quality Control
** 10.12. Batteries Included

* 11. Brief Tour of the Standard Library — Part II
** 11.1. Output Formatting
** 11.2. Templating
** 11.3. Working with Binary Data Record Layouts
** 11.4. Multi-threading
** 11.5. Logging
** 11.6. Weak References
** 11.7. Tools for Working with Lists
** 11.8. Decimal Floating Point Arithmetic

* 12. Virtual Environments and Packages
** DONE 12.1. Introduction
   CLOSED: [2021-04-07 Wed 11:30]
   Create /virtual environments/ to *isolate* the environemnts of different
   projects.

** 12.2. Creating Virtual Environments
   - ~venv~: The /module/ in the _standard library_ that
     *create* and *manage* /virtual environments/.

   - ~venv~ will usually install the _most recent version_ of Python that you
     have available.

   - If you have MULTIPLE versions of Python on your system, you can select a
     specific Python version by running ~python3~ or whichever version you want.
     =TODO= =???= =TODO=

   - To create a /virtual environment/, decide upon a directory where you want to
     palce it, and run the ~venv~ /module/ as a script with the directory path:
     ~python -m venv tutorial-env~.
     * This will create the =tutorial-env= directory if it doesn't exist, and also
       create directories inside it CONTAINING a copy of
       + the Python interpreter,
       + the standard library, and
       + various supporting files.

   - A common directory location for a /virtual environment/ is =.venv=.

   - Activate a virtual environment:
     * TODO

** 12.3. Managing Packages with pip

* 13. What Now?
* 14. Interactive Input Editing and History Substitution
** 14.1. Tab Completion and History Editing
** 14.2. Alternatives to the Interactive Interpreter

* 15. Floating Point Arithmetic: Issues and Limitations
** 15.1. Representation Error

* 16. Appendix
** 16.1. Interactive Mode
*** 16.1.1. Error Handling
*** 16.1.2. Executable Python Scripts
*** 16.1.3. The Interactive Startup File
*** 16.1.4. The Customization Modules
