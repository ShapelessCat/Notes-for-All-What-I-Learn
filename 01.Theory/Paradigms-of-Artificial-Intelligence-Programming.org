#+TITLE: Paradigms of Artificial Intelligence Programming
#+SUBTITLE: Case Studies in Common Lisp
#+VERSION: 1992
#+AUTHOR: Peter Norvig
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Preface
* TODO PART I INTRODUCTION TO COMMON LISP
** TODO CHAPTER 1  Introduction to Lisp
*** TODO 1.1 Symbolic Computation
    - There are _FOUR_ important points to make about symbols:
      + 

      + 

      + NOT case sensitive in /Common Lisp/
        =footnote=: The variable ~*print-case*~ controls how symbols will be
                    printed.
                      By default, the value of this variable is ~:UPCASE~, but it
                    can be changed to ~:downcase~ or ~:capitalize~.
                    =TODO= How to change it???

      + The exact rules for what constitutes a symbol are a little complicated.
        =TODO=
        but the normal convention:
        * letters
        * dash (-)
        * numbers
        * characters like: ? 1 $/<=>
        * There are a few exceptions to these naming conventions, =TODO=
          which will be dealt with as they come up. =TODO=

*** DONE 1.2 Variables
    CLOSED: [2017-05-01 Mon 01:43]
    - give a value to a variable:
      #+BEGIN_SRC lisp
      (setf p '(John 0 Public)
      #+END_SRC
      =TODO= warning

    - In /common lisp/,
      variable names and function names are in _DIFFERENT_ /name spaces/.
      =TODO=

*** DONE 1.3 Special Forms
    CLOSED: [2017-05-01 Mon 01:43]
    - Besides the syntax of atoms and function calls.
      Lisp has a small number of syntactic expressions. They are known as /special forms/.

    - They serve the same purpose as statements in other programming languages,
      and indeed have some of the same syntactic markers, such as ~if~ and
      ~loop~.

    - There are _TWO_ main differences between Lisp's syntax and other languages:
      1. _Lisp's syntactic forms are always lists_ (even the /special forms/)
         in which _the first element is_ one of a small number of
         _privileged symbols_.
           For example:
         ~setf~ is one of these symbols, so ~(setf x 10)~ is a special form.

      2. /special forms/ are expressions that return a value.

    - The philosophy of Lisp is:
      provide _a small number of_ /special forms/ to do the things that could not
      otherwise be done, and then to expect the user to write everthing else as
      functions.

    - Terminology:
      ~setf~ is a /special form operator/
      ~(setf x 3)~ is a /special form expression/

    - OLD Terminology (_DEPRECATED_):
      In the book /Common LISPcraft/ Wilensky resolves the ambiguity by calling
      + ~setf~ a /special function/, and reserving the term
      + /special form/ for ~(setf Ï‡ 3 )~.

      This terminology implies that ~setf~ is just another function, but a
      special one in that _its first argument is NOT evaluated_.
        Such a view made sense in the days when Lisp was primarily an interpreted
      language.
        The modern view is that ~setf~ should not be considered some kind of
      abnormal function but rather _a marker of special syntax_ that will be
      handled specially by the compiler.

    - The /special form/ operators used _in THIS chapter_ are:
      | name               | definition                                   |
      |--------------------+----------------------------------------------|
      | ~def~              | define function                              |
      | ~defparameter~     | define special variable                      |
      | ~setf~             | set variable or field to new value           |
      | ~let~              | bind local variable(s)                       |
      | ~case~             | choose one of several alternatives           |
      | ~if~               | do one thing or another, depending on a test |
      | ~function~ or ~#'~ | refer to a function                          |
      | ~quote~ or ~'~     | introduce constant data                      |

*** DONE 1.4 Lists
    CLOSED: [2017-04-30 Sun 22:42]
    - ~first~, ~last~, ~second~, ~third~, ~fourth~, ~length~
      =COMMENT=: the return value of ~last~ is the last /cons cell/,
                 NOT the last elment of a list or /cons cell/
                 _THIS IS DIFFERENT FROM_ scheme/racket

    - empty list: ~()~ or ~nil~

    - ~cons~, ~append~

*** DONE 1.5 Defining New Functions
    CLOSED: [2017-04-30 Sun 22:54]
    - ~defun~ (/special form/)
      #+BEGIN_SRC lisp
      (defun function-name (parameter ...)
        "documentation string"
        function-body...)
      #+END_SRC

*** DONE 1.6 Using Functions
    CLOSED: [2017-04-30 Sun 23:29]
    - ~mapcar~
      #+BEGIN_SRC lisp
      (mapcar #'last-name names)
      (mapcar #'- '(1 2 3 4))  ; => (-1 -2 -3 -4)
      (mapcar #'+ '(1 2 3 4) '(10 20 30 40))  ; => (11 22 33 44)
      #+END_SRC

    - ~car~ and ~cdr~ are the instructions that were used in the first
      implementation of Lisp on IBM 704, and they are the abbreviations of
      _"contents of the address register"_ and
      _"contents of the decrement register"_, respectively.

    - ~defparameter~ (a /special form/)

    - _CONVENTION_: mark special variables by spelling their names with asterisks
      on either end.

    - _ONLY_ the value ~nil~ is considered _false_.

    - Better ~first-name~:
      #+BEGIN_SRC lisp
      (defparameter *titles*
        '(Mr Mrs Miss Ms Sir Madam Dr Admiral Major General)
        "A list of titles that can appear at the start of a name.")
      
      (defun first-name (name)
        "Select the first name from a name represented as a list."
        (if (member (first name) *title*)
            (first-name (rest name))
            (first name)))
      #+END_SRC

    - =TODO= =TODO= =TODO=
      http://stackoverflow.com/questions/8927741/whats-difference-between-defvar-defparameter-setf-and-setq
      Both ~defvar~ and ~defparameter~ will declare a variable as a _"dynamically
      scoped variable"_, and there is _no chance_ to define a lexical scope
      variable in common lisp (except using maroc in some way that I don't know).

        In addition, ~defparameter~ will _ALWAYS_ set the value of the variable
      to the value you pass in as the second argument.
        This is _DIFFERENT_ from ~defvar~, it will _ONLY_ set the value of the
      variable _if it previously hasn't been set_.

    - Two /special forms/: ~trace~, ~untrace~

*** DONE 1.7 Higher-Order Functions
    CLOSED: [2017-05-01 Mon 01:31]
    - ~apply~:
      #+BEGIN_SRC lisp
      (apply #'+ '(1 2 3 4))
      ; => 10
      #+END_SRC

    - ~funcall~: this is similar to ~apply~, but the arguments are listed
      separately.
      #+BEGIN_SRC lisp
      (funcall #'+ 2 3)  ;=> 5
      #+END_SRC

    - Lambda derives from the notation in Russell and Whitehead's
      /Principia Mathematica/, which used a caret over bound variables. =CAN'T TYPE=
        Church wanted a one-dimensional string, so he moved the caret in front.
      This is a little wired, so Church switched to the closest thing, and upper-
      case lambda, ~\Lambda{}x(x + x)~. This \Lambda was easily confused with other symbols, so
      eventually the lowercase lambda was substituted: ~\lambda{}x(x + x)~.

    - lambda expression:
      #+BEGIN_SRC lisp
      (lambda (parameters...) body...)
      #+END_SRC

    - A list is evaluated in one of two ways.
      1. If the first element of the list is a /special form/ operator,
         then the list is evaluated according to the syntax rule for that
         /special form/.

      2. Otherwise, the list represents a function call.
         The first element is evaluated in a unique way, as a function.

    - If we want to refer to a function in a position other than the first
      element of a function call, we have to use the ~#'~ notation.
        Otherwise, the expressions will be evaluated by the normal evaluation
      rule, and will not be treated as functions.
      #+BEGIN_SRC lisp
      ; #1
      ; prompt>
      append  ; => Error: APPEND is not a bound variable

      ; #2
      ; prompt>
      (lambda (x) (+ x 2))  ; => Error: LAMBDA is not a function
       ;; this is not the case in sbcl
      #+END_SRC
      =IMPORTANT=
      For #2 this is not the case in sbcl.

    - For the current version of sbcl:
      #+BEGIN_SRC lisp
      ; #1
      ; prompt>
      (mapcar #'(lambda (x) (+ x x))
              '(1 2 3 4 5))  ;=> (2 4 6 8 10)

      (mapcar (lambda (x) (+ x x))
              '(1 2 3 4 5))  ;=> (2 4 6 8 10)

      ; #2
      ; prompt>
      (mapppend #'(lambda (l) (list l (reverse l)))
                '((1 2 3) (a b c))  ;=> ((1 2 3) (3 2 1) (A B C) (C B A))
      
      (mapppend (lambda (l) (list l (reverse l)))
                '((1 2 3) (a b c))  ;=> ((1 2 3) (3 2 1) (A B C) (C B A))
      #+END_SRC

    - run-time functions, known as /closures/, will be covered in section 3.16.
      =TODO= =???=
      
*** DONE 1.8 Other Data Types
    CLOSED: [2017-05-01 Mon 01:34]
    - numbers, symbols, lists, functions, vectors, arrays, structures,
      characters, streams, hash tables, and others.

    - Lisp actually defined about _25_ different types of objects.

*** TODO 1.9 Summary: The Lisp Evaluation Rule
    - Summary:
      + Every expression is either a ~list~ or an ~atom~.

      + Every list to be evaluated is
        * a /special form expression/
        * a /function application/.
        =FROM JIAN= it seems ~lambda~ is special, =TOOD=
                    it will be prefixed with ~#'~ automatically.

      + /special form expressoin/

      + /function application/

      + Every /atom/ is either a _symbol_ or a _nonsymbol_

      + A /symbol/ evaluates to the most recent value that has been assigned to the
        variable named by that symbol. =TODO= =???= =closure???=
          Symbol name rules.

      + A /nonsymbol atom/ evaluates to itself.

    - Evaluation Rule:
      =TODO=

*** TODO 1.10 What Makes Lisp Different?
    - At least _EIGHT_ important factors:
      + Built-in Support for Lists
      + Automatic Storage Management (garbage collection)
      + Dynamic Typing
      + First-Class Functions
      + Uniform Syntax
      + Interactive Environment
      + Extensibility
      + History

*** TODO 1.11 Exercises
*** 1.12 Answers

** TODO CHAPTER 2  A Simple Lisp Program
*** 2.1 A Grammar for a Subset of English
    - A simple grammer for a tiny portion of English:

      Sentence => Noun-Phrase + Verb-Phrase
      Noun-Phrase => Article + Noun
      Verb-Phrase => Verb + Noun-Phrase
      Article => the, a,...
      Noun => man, ball, woman, table...
      Verb => hit, took, saw, liked...

    - /context-free phrase-structure grammer/

    - /generative syntax/
      

*** 2.2 A Straightforward Solution
*** 2.3 A Rule-Based Solution
*** 2.4 Two Paths to Follow
*** 2.5 Changing the Grammar without Changing the Program
*** 2.6 Using the Same Data for Several Programs
*** 2.7 Exercises
*** 2.8 Answers
** TODO CHAPTER 3  Overview of Lisp
*** 3.1 A Guide to Lisp Style
*** 3.2 Special Forms
*** 3.3 Functions on Lists
*** 3.4 Equality and Internal Representation
*** 3.5 Functions on Sequences
*** 3.6 Functions for Maintaining Tables
*** 3.7 Functions on Trees
*** 3.8 Functions on Numbers
*** 3.9 Functions on Sets
*** 3.10 Destructive Functions
*** 3.11 Overview of Data Types
*** 3.12 Input/Output
*** 3.13 Debugging Tools
*** 3.14 Antibugging Tools
*** 3.15 Evaluation
*** 3.16 Closures
*** 3.17 Special Variables
*** 3.18 Multiple Values
*** 3.19 More about Parameters
*** 3.20 The Rest of Lisp
*** 3.21 Exercises
*** 3.22 Answers
* TODO PART II EARLY AI PROGRAMS
** CHAPTER 4 GPS: The General Problem Solver
*** 4.1 Stage 1: Description
*** 4.2 Stage 2: Specification
*** 4.3 Stage 3: Implementation
*** 4.4 Stage 4: Test
*** 4.5 Stage 5: Analysis, or ''We Lied about the C
*** 4.6 The Running Around the Block Problem
*** 4.7 The Clobbered Sibling Goal Problem
*** 4.8 The Leaping before You Look Problem
*** 4.9 The Recursive Subgoal Problem
*** 4.10 The Lack of Intermediate Information Problem
*** 4.11 GPS Version 2: A More General Problem Solver
*** 4.12 The New Domain Problem: Monkey and Bananas
*** 4.13 The Maze Searching Domain
*** 4Â·14 The Blocks World Domain
*** 4.15 Stage 5 Repeated: Analysis of Version 2
*** 4.16 The Not Looking after You Don^tLeap Problem
*** 4.17 The Lack of Descriptive Power Problem
*** 4.18 The Perfect Information Problem
*** 4.19 The Interacting Goals Problem
*** 4.20 The End of GPS
*** 4.21 History and References
*** 4.22 Exercises
*** 4.23 Answers
** CHAPTER 5 ELIZA: Dialog with a Machine
*** 5.1 Describing and Specifying ELIZA
*** 5.2 Pattern Matching
*** 5.3 Segment Pattern Matching
*** 5.4 The ELIZA Program: A Rule-Based Translator
*** 5.5 History and References
*** 5.6 Exercises
*** 5.7 Answers
** CHAPTER 6 Building Software Tools
*** 6.1 An Interactive Interpreter Tool
*** 6.2 A Pattern-Matching Tool
*** 6.3 A Rule-Based Translator Tool
*** 6.4 A Set of Searching Tools
*** 6.5 GPS as Search
*** 6.6 History and References
*** 6.7 Exercises
*** 6.8 Answers
** CHAPTER 7 STUDENT: Solving Algebra Word Problems
*** 7.1 Translating English into Equations
*** 7.2 Solving Algebraic Equations
*** 7.3 Examples
*** 7.4 History and References
*** 7.5 Exercises
*** 7.6 Answers
** CHAPTER 8 Symbolic Mathematics: A Simplification Program
*** 8.1 Converting Infix to Prefix Notation
*** 8.2 Simplification Rules
*** 8.3 Associativity and Commutativity
*** 8.4 Logs, Trig, and Differentiation
*** 8.5 Limits of Rule-Based Approaches
*** 8.6 Integration
*** 8.7 History and References
*** 8.8 Exercises
* TODO PART III TOOLS AND TECHNIQUES
** CHAPTER 9  Efficiency issues
*** 9.1 Caching Results of Previous Computations: Memoization
*** 9.2 Compiling One Language into Another
*** 9.3 Delaying Computation
*** 9.4 Indexing Data
*** 9.5 Instrumentation: Deciding What to Optimize
*** 9.6 A Case Study in Efficiency: The SIMPLIFY Program
*** 9.7 History and References
*** 9.8 Exercises
*** 9.9 Answers
** CHAPTER 10  Low-Level Efficiency Issues
*** 10.1 Use Declarations
*** 10.2 Avoid Generic Functions
*** 10.3 Avoid Complex Argument Lists
*** 10.4 Avoid Unnecessary Consing
*** 10.5 Use the Right Data Structures
*** 10.6 Exercises
*** 10.7 Answers
** CHAPTER 11  Logic Programming
*** 11.1 Idea 1: A Uniform Data Base
*** 11.2 Idea 2: Unification of Logic Variables
*** 11.3 Idea 3: Automatic Backtracking
*** 11.4 The Zebra Puzzle
*** 11.5 The Synergy of Backtracking and Unification
*** 11.6 Destructive Unification
*** 11.7 Prolog in Prolog
*** 11.8 Prolog Compared to Lisp
*** 11.9 History and References
*** 11.10 Exercises
** CHAPTER 12  Compiling Logic Programs
*** 12.1 A Prolog Compiler
*** 12.2 Fixing the Errors in the Compiler
*** 12.3 Improving the Compiler
*** 12.4 Improving the Compilation of Unification
*** 12.5 Further Improvements to Unification
*** 12.6 The User Interface to the Compiler
*** 12.7 Benchmarking the Compiler
*** 12.8 Adding More Primitives
*** 12.9 The Cut
*** 12.10 "Real" Prolog
*** 12.11 History and References
*** 12.12 Exercises
*** 12.13 Answers
** CHAPTER 13  Object-Oriented Programming
*** 13.1 Object-Oriented Programming
*** 13.2 Objects
*** 13.3 Generic Functions
*** 13.4 Classes
*** 13.5 Delegation
*** 13.6 Inheritance
*** 13.7 CLOS: The Common Lisp Object System
*** 13.8 A CLOS Example: Searching Tools
*** 13.9 Is CLOS Object-Oriented?
*** 13.10 Advantages of Object-Oriented Programming
*** 13.11 History and References
*** 13.12 Exercises
** CHAPTER 14  Knowledge Representation and Reasoning Knowledge
*** 14.1 A Taxonomy of Representation Languages
*** 14.2 Predicate Calculus and its Problems
*** 14.3 A Logical Language: Prolog
*** 14.4 Problems with Prolog's Expressiveness
*** 14.5 Problems with Predicate Calculus's Expressiveness
*** 14.6 Problems with Completeness
*** 14.7 Problems with Efficiency: Indexing
*** 14.8 A Solution to the Indexing Problem
*** 14.9 A Solution to the Completeness Problem
*** 14.10 Solutions to the Expressiveness Problems
*** 14.11 History and References
*** 14.12 Exercises
*** 14.13 Answers
* TODO PART IV ADVANCED AI PROGRAMS
** CHAPTER 15  Symbolic Mathematics with Canonical Forms
** CHAPTER 16  Expert Systems
** CHAPTER 17  Line-Diagram Labeling by Constraint Satisfaction
** CHAPTER 18  Search and the Game of Othello
** CHAPTER 19  Introduction to Natural Language
** CHAPTER 20  Unification Grammars
** CHAPTER 21  A Grammar of English
* TODO PART V THE REST OF LISP
** TODO CHAPTER 22  Scheme: An Uncommon Lisp
   =TODO= =TODO= =TODO=
*** 22.1 A Scheme Interpreter
*** 22.2 Syntactic Extension with Macros
*** 22.3 A Properly Tail-Recursive Interpreter
*** 22.4 Throw, Catch, and Call/cc
*** 22.5 An Interpreter Supporting Call/cc
*** 22.6 History and References
*** 22.7 Exercises
*** 22.8 Answers
** TODO CHAPTER 23  Compiling Lisp
** TODO CHAPTER 24  ANSI Common Lisp
** TODO CHAPTER 25  Troubleshooting
*** 25.1 Nothing Happens
*** 25.2 Change to Variable Has No Effect
*** 25.3 Change to Function Has No Effect
*** 25.4 Values Change "by Themselves"
*** 25.5 Built-in Functions Don't Find Elements
*** 25.6 Multiple Values Are Lost
*** 25.7 Declarations Are Ignored
*** 25.8 My Lisp Does the Wrong Thing
*** 25.9 How to Find the Function You Want
*** 25.10 Syntax of LOOP
*** 25.11 Syntax of COND
*** 25.12 Syntax of CASE
*** 25.13 Syntax of LET and LET*
*** 25.14 Problems with Macros
*** 25.15 A Style Guide to Lisp
*** 25.16 Dealing with Files, Packages, and Systems
*** 25.17 Portability Problems
*** 25.18 Exercises
*** 25.19 Answers

* TODO Appendix: Obtaining the code in this Book
** FTP: The File Transfer Protocol
** Available Software
* TODO Bibliography
* Tips
