#+TITLE: PostgreSQL Mistakes and How to Avoid Them
#+AUTHOR: Jimmy Angelakos
#+FOREWORD BY: Gianni Ciolli
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* foreword - xi
* preface - xiii
* acknowledgments - xv
* about this book - xvii
* about the author - xxi
* about the cover illustration - xxii
* 1 Why PostgreSQL mattersâ€”and why talking about mistakes does too - 1
** 1.1 Why learning about PostgreSQL matters - 1
** 1.2 Why talking about PostgreSQL mistakes matters - 2
** 1.3 What you will learn - 3
** 1.4 Typical kinds of PostgreSQL mistakes - 4
*** Coming with expectations from other databases - 4
*** Misunderstanding PostgreSQL - 4
*** Misunderstanding the documentation - 5
*** Using relics from the SQL Standard - 5
*** Not following best practices - 5

** 1.5 How this book works - 5
*** Mental models - 6
*** Example mistake - 7

** 1.6 Sample database: Frogge Emporium - 11

* 2 Bad SQL usage - 12
** 2.1 Using NOT IN to exclude - 12
*** Performance implications - 15
*** Alternative - 16

** 2.2 Selecting ranges with BETWEEN - 17
** 2.3 Not using CTEs - 19
** 2.4 Using uppercase identifiers - 22
** 2.5 Dividing INTEGERs - 24
** 2.6 COUNTing NULL values - 27
** 2.7 Querying indexed columns with expressions - 28
** 2.8 Upserting NULLs in a composite unique key - 30
** 2.9 Selecting and fetching all the data - 33
** 2.10 Not taking advantage of checkers/linters or large language models - 35
*** Code checkers/linters - 36
*** Large language models - 39

* 3 Improper data type usage - 43
** 3.1 TIMESTAMP (WITHOUT TIME ZONE) - 43
** 3.2 TIME WITH TIME ZONE - 46
** 3.3 ~CURRENT_TIME~ - 47
** 3.4 ~CHAR(n)~ - 47
** 3.5 ~VARCHAR(n)~ - 49
** 3.6 ~MONEY~ - 51
** 3.7 ~SERIAL~ data type - 53
** 3.8 XML - 55

* 4 Table and index mistakes - 58
** 4.1 Table inheritance - 58
** 4.2 Neglecting table partitioning - 62
** 4.3 Partitioning by multiple keys - 66
** 4.4 Using the wrong index type - 68

* 5 Improper feature usage - 75
** 5.1 Selecting ~SQL_ASCII~ as the encoding - 75
** 5.2 CREATE RULE - 81
** 5.3 Relational JSON - 83
** 5.4 Putting UUIDs everywhere - 86
** 5.5 Homemade multi-master replication - 89
** 5.6 Homemade distributed systems - 94

* 6 Performance bad practices - 98
** 6.1 Default configuration in production - 99
** 6.2 Improper memory allocation - 101
** 6.3 Having too many connections - 104
** 6.4 Having idle connections - 108
*** What is MVCC? - 108
*** The problem with idle connections - 108

** 6.5 Allowing long-running transactions - 110
*** Idle in transaction - 110
*** Long-running queries in general - 112

** 6.6 High transaction rate - 113
*** XID wraparound - 113
*** Burning through lots of XIDs - 114

** 6.7 Turning off autovacuum/autoanalyze - 115
** 6.8 Not using EXPLAIN (ANALYZE) - 117
** 6.9 Locking explicitly - 118
** 6.10 Having no indexes - 119
** 6.11 Having unused indexes - 121
** 6.12 Removing indexes used elsewhere - 121

* 7 Administration bad practices - 124
** 7.1 Not tracking disk usage - 124
*** Deleting the Write-Ahead Log - 126
*** What can eat up your disk space? - 126
*** What can you do? - 127

** 7.2 Logging to PGDATA - 127
** 7.3 Ignoring the logs - 130
*** Bad configuration - 130
*** Performance issues - 131
*** Locks - 131
*** Corruption - 132
*** Security - 132

** 7.4 Not monitoring the database - 133
** 7.5 No tracking of statistics over time - 135
** 7.6 Not upgrading Postgres - 137
** 7.7 Not upgrading your system - 139

* 8 Security bad practices - 142
** 8.1 Specifying ~psql -W~ or ~--password~ - 143
** 8.2 Setting ~listen_addresses = '*'~ - 144
** 8.3 trust-ing in =pg_hba.conf= - 145
** 8.4 Database owned by a superuser - 146
** 8.5 Setting SECURITY DEFINER carelessly - 149
** 8.6 Choosing an insecure search path - 150

* 9 High availability bad practices - 153
** 9.1 Not taking backups - 154
** 9.2 No Point-in-Time Recovery - 156
** 9.3 Backing up manually - 158
** 9.4 Not testing backups - 160
** 9.5 Not having redundancy - 162
** 9.6 Using no HA tool - 164

* 10 Upgrade/migration bad practices - 167
** 10.1 Not reading all release notes - 167
** 10.2 Performing inadequate testing - 171
** 10.3 Succumbing to encoding chaos - 174
** 10.4 Not using proper BOOLEANs - 176
** 10.5 Mishandling differences in data types - 178

* 11 PostgreSQL, best practices, and you: Final insights - 180
** 11.1 What type of user are you? - 180
*** The dabbler - 181
*** The cautious steward - 182
*** The oblivious coder - 182
*** The freefaller - 183

** 11.2 Be proactive: Act early - 184
** 11.3 All right, so you inherited a bad database - 185
*** "Historical reasons" - 185
*** What now? - 185
*** First things first - 186

** 11.4 Treat Postgres well, and it will treat you well - 187

* appendix A Frogge Emporium database - 191
* appendix B Cheat sheet - 196
* index - 203
