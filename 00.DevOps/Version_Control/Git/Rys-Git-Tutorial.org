#+TITLE: Ry's Git Tutorial
#+AUTHOR: Ryan Hodson
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Introduction
** TODO A Brief History of Revision Control
** TODO The Birth of Git
** DONE Installation
   CLOSED: [2017-07-16 Sun 02:57]
** TODO Get Ready!
* DONE The Basics
  CLOSED: [2017-07-09 Sun 05:10]
  - /working directory/

  - This module explores the fundamental Git workflow:
    + Step 1. creating a repository,
    + Step 2. staging and commiting snapshots
    + Step 3. configuring options, and
    + Step 4. viewing the state of a repository.

** DONE Create the Example Site
   CLOSED: [2017-07-09 Sun 04:06]
   - Create a new folder called =my-git-repo= for our project as a repository.

** DONE Initialize the Git Repository
   CLOSED: [2017-07-09 Sun 04:09]
   - ~git init~
      The =.git= folder is the only difference between a Git repository and an
      ordinary folder.

** DONE View the Repository Status
   CLOSED: [2017-07-09 Sun 04:10]
   - ~git status~
     #+BEGIN_SRC text
       On branch master

       Initial commit

       Untracked files:
         (use "git add <file>..." to include in what will be committed)

               index.html

       nothing added to commit but untracked files present (use "git add" to track)
     #+END_SRC

     =TODO= =On branch master= explain later.

   - /untracked file/

** DONE Stage a Snapshot
   CLOSED: [2017-07-09 Sun 04:23]
   - Step 1. ~git add index.html~

   - Step 2. ~git status~ again and you can see:
      #+BEGIN_SRC text
        On branch master

        Initial commit

        Changes to be committed:
          (use "git rm --cached <file>..." to unstage)

                new file:   index.html
      #+END_SRC

   - /snapshot/ represents the state of your project at a given point in time.

     In this case, we create a snapshot with one file: =index.html=.

     If we ever told Git to revert to this /snapshot/, it would replace the
     entire project folder with the one file, containing the exact same HTML as
     it does right now.

   - /staging/ is a term of Git used to represent "creating a snapshot".

     Use this word because we can add or remove multiple files before actually
     commiting it to the project history. Staging gives us _the opportunity to
     group related changes into distinct snapshots_ -- a practice that makes it
     possible to track the meaningful progression of a software project (instead
     of just arbitrary lines of code).

     For example, six files are changed, and they should belong to two meaningful
     changes. We can ~add~ the first three, ~commit~ (next section) the
     /snapshot/, and ~add~ the other three, ~commit~ another /snapshot/ ----
     different stages.

** DONE Commit the Snapshot
   CLOSED: [2017-07-09 Sun 04:37]
   - The ~commit~'s between each /snapshot/'s is required.
     Without a ~commit~ and ~add~ multiple times actually means _NO staging_.

     ~add~ won't ~commit~ automatically, and the no-commit intermediate
     /snapshot/'s acutally DO NOT exist ---- you can imagine a them, but without
     ~commit~'s they won't show up in history, for the other people the
     /snapshot/'s in your mind never exist.

     From this point of view, I have to say one /staging/ acutally implies that
     there is one ~commit~ after it. A ~commit~ guarantees the /staging/ before
     will be recorded in the history.

   - ~git commit~
     Without the ~-m <message>~ part, this command will open a text editor and
     prompt you to enter a message for the commit.
     #+BEGIN_SRC text
       [master (root-commit) eca657e] Create index page
        1 file changed, 15 insertions(+)
        create mode 100755 index.html
     #+END_SRC

     + /root-commit/

   - Now you know, saving a version of your project (a /snapshot/) is a two step
     process:
     1. /Staging/: Telling Git what files to include in the next commit.
     2. /Committing/: Recording the staged snapshot with a descriptive message.

** DONE View the Repository History
   CLOSED: [2017-07-09 Sun 04:45]
   - ~git log~
     #+BEGIN_SRC text
       commit eca657ec851744863f04cdb07365726e29788653
       Author: lanjiann <lanjiann1985@gmail.com>
       Date:   Sun Jul 9 04:40:07 2017 -0600

           Create index page
     #+END_SRC
     The random-looking string after =commit= above is an _SHA-1 checksum_ of the
     commit's contents, which ensures that the commit will never be corrupted
     without Git knowing about it. =TODO=

** DONE Configure Git
   CLOSED: [2017-07-09 Sun 04:45]
   - ~git config --global user.name "Your Name"~
   - ~git config --global user.email your.email@example.com~
** DONE Create New HTML Files
   CLOSED: [2017-07-09 Sun 04:50]
   Create =orange.html= and =blue.html=
** DONE Stage the New Files
   CLOSED: [2017-07-09 Sun 04:53]
   - Step 1.
     ~git add orange.html blue.html~

   - Now ~git status~ can show you /staged changes/, but you won't see them in
     the output of ~git log~ before you ~commit~.

** DONE Commit the New Files
   CLOSED: [2017-07-09 Sun 05:01]
** DONE Modify the HTML Pages
   CLOSED: [2017-07-09 Sun 05:01]
   - ~add~ command can stage both _new_ files and _modified_ files.
** DONE Stage and Commit the Snapshot
   CLOSED: [2017-07-09 Sun 05:02]
   #+BEGIN_SRC bash
     git status
     git add index.html orange.html blue.html
     git status
     git commit -m "Add navigation links"

   #+END_SRC
** DONE Explore the Repository
   CLOSED: [2017-07-09 Sun 05:06]
   - ~git log --oneline~
     #+BEGIN_SRC text
       91093ac Add navigation links
       505d596 Create blue and orange pages
       eca657e Create index page
     #+END_SRC

   - ~git log --oneline blue.html~
     Only inspect the history =blue.html=.
     You can see the "Create index page" commit in this command output.
     #+BEGIN_SRC text
       91093ac Add navigation links
       505d596 Create blue and orange pages
     #+END_SRC

** DONE Conclusion
   CLOSED: [2017-07-09 Sun 05:09]
   - /working directory/, /staged snapshot/, /committed snaptshot(s)/ are the
     core concepts of Git version control.
       Nearly all other Git commands manipulate one of these components in some
     way.

** DONE Quick Reference
   CLOSED: [2017-07-09 Sun 05:10]
   - ~git init~

   - ~git status~

   - ~git add <file(s)>~

   - ~git commit~

   - ~git log~

   - ~git config --global user.name "<name>"~

   - ~git config --global user.email "<email>"~

* DONE Undoing Changes
  CLOSED: [2017-07-09 Sun 22:46]
** DONE Display Commit Checksums
   CLOSED: [2017-07-09 Sun 17:43]
   - ~git log --oneline~ only prints out the first 7 characters of the checksum.
** DONE View an Old Revision
   CLOSED: [2017-07-09 Sun 18:15]
   - Suppose that the output of your ~git log --oneline~ is
     #+BEGIN_SRC text
       1c310d2 Add navigation links
       54650a3 Create blue and orange pages
       b650e4b Create index page
     #+END_SRC

   - ~git checkout 54650a3~
     #+BEGIN_SRC text
       Note: checking out '54650a3'.

       You are in 'detached HEAD' state. You can look around, make experimental
       changes and commit them, and you can discard any commits you make in this
       state without impacting any branches by performing another checkout.

       If you want to create a new branch to retain commits you create, you may
       do so (now or later) by using -b with the checkout command again. Example:

         git checkout -b <new-branch-name>

       HEAD is now at 54650a3... Create blue and orange pages
     #+END_SRC

   - The _navigation links_ we added in the third commit have _disappeared_.

   - =TOOD= /detached HEAD/

** DONE View an Older Revision
   CLOSED: [2017-07-09 Sun 18:19]
   - ~git checkout b650e4b~
     Now, the =blue.html= and =orange.html= files are gone.

   - ~git status~
     #+BEGIN_SRC text
       HEAD detached at b650e4b
       nothing to commit, working directory clean
     #+END_SRC

     Compare this to our newest snapshot:
     #+BEGIN_SRC text
       On branch master
       nothing to commit, working directory clean
     #+END_SRC

** DONE Return to Current Revision
   CLOSED: [2017-07-09 Sun 18:21]
   - ~git checkout master~
     #+BEGIN_SRC text
       Previous HEAD position was b650e4b... Create index page
       Switched to branch 'master'
     #+END_SRC
** DONE Tag a Release
   CLOSED: [2017-07-09 Sun 18:31]
   - We can all the newest snapshot of our project a stable version of the
     example website.
       We can make it official by /tagging/ the most recent commit with a version
     number: ~git tag -a v1.0 -m "Stable version of the website"~

   - _Tags_ are convenient references to
     + official releases
       and
     + other significant milestones.

     You can use the tag =v1.0= to refer to the third commit instead of its
     random ID -- this lets developers easily browse and check out important
     revisions.

   - Use ~git tag~ without any arguments to list all existing tags.

   - /annotated tag/: in the above snippet, the ~-a~ flag tells Git to create an
     /annotated tag/, which lets us record our name, the date, and a descriptive
     message (specified via the ~-m~ flag).

   - We'll use this tag to find the stable version after we try some crazy
     experiments.

** DONE Try a Crazy Experiment
   CLOSED: [2017-07-09 Sun 18:32]
   Create a new file called =crazy.html= and add the following HTML.
** DONE Stage and Commit the Snapshot
   CLOSED: [2017-07-09 Sun 18:44]
   #+BEGIN_SRC bash
     git add crazy.html
     git status
     git commit -m "Add a crazzzy experiment"
     git log
   #+END_SRC

   - It's a good practice to run ~git status~ to see exactly what you're
     committing before running ~git commit -m~, which can help you to avoid
     unintentionally committing a file that doesn't belong in the current
     snapshot.

   - If the log history takes up more than one screen, you can scroll down by
     pressing =Space= (=From Jian= Or try vim' =j= and =k=) and return to the
     command line by pressing the letter =q=.

** DONE View the Stable Commit
   CLOSED: [2017-07-09 Sun 18:50]
   - Got back and take a look at our stable revision.
     ~git checkout v1.0~

   - Now we decide to scrap the crazy experiment.
     But, before we undo the changes, we need to return to the ~master~ branch
     (we are in the ~v1.0~). If we did NOT, all of our updates would be on some
     non-existent branch.

     =IMPORTANT= As we'll discover next module, you should never make changes
     directly to a previous revision.

   - ~git checkout master~
     ~git log --oneline~
     #+BEGIN_SRC text
       514fbe7 Add a crazzzy experiment
       1c310d2 Add navigation links
       54650a3 Create blue and orange pages
       b650e4b Create index page
     #+END_SRC

** DONE Undo Committed Changes
   CLOSED: [2017-07-09 Sun 18:59]
   - ~git revert 514fbe7~
     A file will pop out and prompt you to add some commit message.
     There is a default message, for this case it is
     ~Revert "Add a crazzzy experiment"~. This is OK.

   - ~git status~
     #+BEGIN_SRC text
       506bb9b Revert "Add a crazzzy experiment"
       514fbe7 Add a crazzzy experiment
       1c310d2 Add navigation links
       54650a3 Create blue and orange pages
       b650e4b Create index page
     #+END_SRC

     Git is designed to never lose history.
     (=TODO= except when you are on purpose, but this is NOT the point of design
     -- this is only the flexibility of design).
     The forth commit is still there, though files in that snapshot have the same
     content as the newest commit -- just in case we want to continue developing
     it.

** DONE Start a Smaller Experiment
   CLOSED: [2017-07-09 Sun 22:06]
   - Create =dummy.html= and leave it as a blank file.
     Then, add a link in the "Navigation" section of =index.html=.

   - Now we want to abandon thi uncommitted experiment.
     Since the ~git revert~ command requires a commit ID to _undo_, we can't use
     the method discussed above.

** DONE Undo Uncommitted Changes
   CLOSED: [2017-07-09 Sun 22:21]
   - ~git status~
     #+BEGIN_SRC text
       On branch master
       Changes not staged for commit:
         (use "git add <file>..." to update what will be committed)
         (use "git checkout -- <file>..." to discard changes in working directory)

               modified:   index.html

       Untracked files:
         (use "git add <file>..." to include in what will be committed)

               dummy.html

       no changes added to commit (use "git add" and/or "git commit -a")
     #+END_SRC

   - First, let's take care the _tracked_ and _modified_ file =index.html=

     ~git reset --hard~
     The output is =HEAD is now a 506bb9b Revert "Add a crazzzy experiment"=

     + The above command changes _all tracked_ files to match the most recent commit.

       ~--hard~ flag of ~reset~ is what _actually_ updates the file.

       Running ~git reset~ without any flags will simply unstage =index.html=,
       leaving its contents as is.

     + ~git rest~ ONLY operates on
       * the working directory
         and
       * the staging area
       
       , so ~git log~ history remains unchanged.

   - Second, let's remove the =dummy.html= file.

     Use Git command to eliminates human errors, especially for the future
     several files operation. Thus, please do NOT manually remove it.

     Use command ~git clean -f~
     This will remove all /untracked/ files.

     After this step,
     NO modified tracked files (due to ~git reset --hard~) and
     NO untracked files (due to ~git clean -f~).

   - _BE CAREFUL_
     Both ~git reset~ and ~git clean~ operate on the working directory,
     NOT on the committed snapshots.

     Unlike ~git revert~, they permanently undo changes (you can't find them back
     through Git), so make sure you really want to trash what you're working on
     before you use them.

** DONE Conclusion
   CLOSED: [2017-07-09 Sun 22:40]
   - Most Git commands operate on one of the THREE main components of a Git
     repository:
     + the working directory
     + the staged snapshot
     + the committed snapshots

   - The ~git reset~ command undoes changes to the working directory and the
     staged snapshot,
     while ~git revert~ undoes changes contained in committed snapshots.

     Not surprisingly, ~git status~ and ~git log~ directly parallel this
     behavior.

   - ~git revert~ saves the commit and create a new commit, rather than remove
     this commit. We now have two reasons:
     + In case you want to come back to it later

     + When we start working with remote repositories, we'll see that altering
       the history by removing a commit has _dramatic consequences_ for
       collaborating with other developers.

** DONE Quick Reference
   CLOSED: [2017-07-09 Sun 22:46]
   - ~git checkout [<commit-id> | <tag>]~

   - ~git tag -a <tag-name> -m "<description>"~

   - ~git revert <commit-id>~

   - ~git reset --hard~

   - ~git clean -f~

   - ~git reset --hard~ and ~git clean -f~

* DONE Branches I
  CLOSED: [2017-07-10 Mon 03:04]
  - FOUR core elements to work with throughout the rest of this tutorial:
    + The Working Directory
    + The Staged Snapshot
    + Committed Snapshots
    + Development Branches

  - In Git, a /branch/ is an independent line of development.
    + Branches present an error-proof method for incorporating changes from the
      experiment.

    + Branches let you store all of your experiments in a single directory, which
      makes it much easier to keep track of them and to share them with others.

    + =TODO= Branches also lend themselves to several standardized workflows for
      both individual and collaborative development, which will be explored in
      the latter half of the tutorial.

** DONE View Existing Branches
   CLOSED: [2017-07-09 Sun 23:29]
   ~git branch~
   output: ~* mater~

   - The ~master~ branch is Git's default branch.

   - The asterisk (~*~) next to it tells us that it's currently checked out.

   - There is
     ONLY ONE /working directory/ for each project,
     ONLY ONE /branch/ can be checked out at a time.

** DONE Checkout the Crazy Experiment
   CLOSED: [2017-07-09 Sun 23:46]
   - ~git log --oneline~
     #+BEGIN_SRC text
       506bb9b Revert "Add a crazzzy experiment"
       514fbe7 Add a crazzzy experiment
       1c310d2 Add navigation links
       54650a3 Create blue and orange pages
       b650e4b Create index page
     #+END_SRC

   - ~git checkout 514fbe7~
     Output says we're in a ='detached HEAD' state= and the =HEAD= is now at
     =514fbe7=.

   - /HEAD/ is the Git's internal way of indicating the snapshot that is current-
     ly checked out.

   - ~git branch~
     #+BEGIN_SRC text
       * (HEAD detached at 514fbe7)
         master
     #+END_SRC
     We're currently NOT on branch.

** DONE Create a New Branch
   CLOSED: [2017-07-10 Mon 00:10]
   - ~checkout~ a id, do some work, and ~commit~. This commit is not on a branch,
     and when you ~checkout~ another id and ~checkout~ back, you can't find this
     ~commit~ any more. When you leave this not-on-branch ~commit~, Git will
     remind you that 

     #+BEGIN_SRC text
       Warning: you are leaving 1 commit behind, not connected to
       any of your branches:

         abedd71 no branch commit

       If you want to keep it by creating a new branch, this may be a good time
       to do so with:
     #+END_SRC

     =TODO= =FROM JIAN= I don't know if there are ways to find these ~commit~'s
     back after leaving.

   - ~git branch crazy~
     Create a branch called =crazy=. This is only a "create", and it doesn't
     check it out.

   - ~git checkout crazy~

** DONE Make a Rainbow
   CLOSED: [2017-07-10 Mon 00:25]
   - Continue developing our crazy experiment by changing =crazy.html=.
** DONE Stage and Commit the Rainbow
   CLOSED: [2017-07-10 Mon 00:25]
   - ~git log~ ONLY displays the history of the current branch.
     #+BEGIN_SRC text
       677e0e0 Add a rainbow to crazy.html
       514fbe7 Add a crazzzy experiment
       *1c310d2 Add navigation links
       *54650a3 Create blue and orange pages
       *b650e4b Create index page
     #+END_SRC
     =*='s above won't show up in the output of Git. We add them for the purpose
     of illustration.

** DONE Rename the Rainbow
   CLOSED: [2017-07-10 Mon 00:55]
   - Rename =crazy.html= to =rainbow.html=
     #+BEGIN_SRC bash
       # The version in the ebook doesn't work.
       # This versoin works
       git status
       git mv crazy.html rainbow.html
       git status
     #+END_SRC

   - The ~git mv~ command also help you staging the snapshot, and now it is ready
     to be committed:
     #+BEGIN_SRC text
       git commit -m "Rename crazy.html to rainbow.html"
       git log --oneline
     #+END_SRC

** DONE Return to the Master Branch
   CLOSED: [2017-07-10 Mon 01:47]
   - Let's switch back to the ~master~ branch:
     #+BEGIN_SRC text
       git checkout master
       git branch
       git log --oneline
     #+END_SRC

** DONE Create a CSS Branch
   CLOSED: [2017-07-10 Mon 02:03]
   #+BEGIN_SRC bash
     git branch css
     git checkout css
   #+END_SRC
** DONE Add a CSS Stylesheet
   CLOSED: [2017-07-10 Mon 02:06]
   Create a style.css file, and then
   #+BEGIN_SRC bash
     git add style.css
     git status
     git commit -m "Add CSS stylesheet"
   #+END_SRC
** DONE Link the Stylesheet
   CLOSED: [2017-07-10 Mon 02:14]
   Add the ~<link rel="stylesheet" href="style.css" />~ after the ~<title>~
   element in =index.html=, =blue.html=, and =orange.html=.
   #+BEGIN_SRC bash
     git add index.html blue.html orange.html
     git status
     git commit -m "Link HTML pages to sytlesheet"
     git log --oneline
   #+END_SRC
** DONE Return to the Master Branch (Again)
   CLOSED: [2017-07-10 Mon 02:17]
   ~git checkout master~
   ~git log --oneline~

** DONE Merge the CSS Branch
   CLOSED: [2017-07-10 Mon 02:34]
   ~git merge css~
   ~git log --oneline~

   Git WON'T re-create the commits in ~css~ branch and add them to the
   history of ~master~. Git _reuses_ the existing snapshots and simply moves the
   tip of ~master~ to match the tip of ~css~.
   _This kind of merge is called a /fast-forward merge/.

   After this merge, both branches (~master~ and ~css~) have the _exact same
   history_, which makes them redundant.
     Unless we wanted to keep developing on the ~css~ branch, we're free to get
   rid of it.

** DONE Delete the CSS Branch
   CLOSED: [2017-07-10 Mon 02:40]
   ~git branch -d css~
   ~git branch~
   #+BEGIN_SRC text
       crazy
     * master
   #+END_SRC

   ~-d~ is safe: Git will warn you if you're deleting an unmerged branch.
** DONE Conclusion
   CLOSED: [2017-07-10 Mon 03:04]
   - x
** DONE Quick Reference
   CLOSED: [2017-07-10 Mon 02:59]
   - ~git branch~

   - ~git branch <branch-name>~

   - ~git checkout <branch-name>~

   - ~git merge <branch-name>~

   - ~git branch -d <branch-name>~

   - ~git rm <file>~

* DONE Branches II
  CLOSED: [2017-07-11 Tue 14:54]
  - Instead of introducing new commands, this module covers
    + how the typical Git user applies this workflow to real projects,
      as well as
    + some of the problems that arise in a branched environment.

  - It's often useful to assign special meaning to different branches.

  - /topic branches/: temporary branches that exist to develop a certain topic,
    later they will be deleted (usually, after merging).

  - =TODO= We'll work with two types of topic branches later in this module.

  - =TODO= Some merges cannot be "fast-forworded".

  - When the history of two branches diverges, a dedicated commit is required to
    combine the branches.
      This situation may also give rise to a merge conflict, which _must be
    manually resolved_ before anything can be committed to the repository.

** DONE Continue the Crazy Experiment
   CLOSED: [2017-07-10 Mon 15:05]
   #+BEGIN_SRC bash
     git branch
     git checkout crazy
     git log --oneline
   #+END_SRC

   - /feature branch/: A _ is a longer-running type of /topic branch/
     Created with the intention of developing a specific feature.
     C

   - Rule-of-thumb for using Git branches:
     + Create a new branch for each major addition to your project.
     + Don't create a branch if you can't give it a specific name. 

** DONE Merge the CSS Updates
   CLOSED: [2017-07-11 Tue 13:39]
   #+BEGIN_SRC bash
     git merge master
     git log --oneline
   #+END_SRC
   When you ~merge~, an editor will be open and prompt you for a message
   explaining why the commit was necessary.
     The default one that is already in the file is:
   =Merge branch 'master' into crazy=

   NO fast-forwarded tip. Both branches have their own unique changes.

   - /3-way-merge/: it occurs when you try to merge two branches whose history
     has diverged. It creates an extra /merge commit/ to function as a link
     between the two branches.

     Git looks at three commits (numbered in the above figure)

     1. the start of the fork of this branch
     2. the tip of the first branch
     3. the tip of the second branch

     to generate the final state of the merge.

** DONE Style the Rainbow Page
   CLOSED: [2017-07-10 Mon 15:33]
   - Add a CSS reference line under the ~<title>~ element, and
     #+BEGIN_SRC bash
       git status
       git commit -a -m "Add CSS stylesheet to rainbow.html"
       git -log --oneline
     #+END_SRC
     Notice that we skipped the staging step this time around:
     the ~-a~ flag of ~git commit~ tells Git to _automatically_ include
     _all tracked files_ in the staged snapshot.
     However, BE CAREFUL with the ~-a~ flag and don't stage unintended files.

** DONE Link to the Rainbow Page
   CLOSED: [2017-07-11 Tue 13:44]
   Edit =index.html= and
   #+BEGIN_SRC bash
     git commit -a -m "Link index.html to rainbow.html"
     git log --oneline
   #+END_SRC
  
** DONE Fork an Alternative Rainbow
   CLOSED: [2017-07-11 Tue 13:45]
   #+BEGIN_SRC bash
     git branch crazy-alt
     git checkout crazy-alt
   #+END_SRC
** DONE Change the Rainbow
   CLOSED: [2017-07-11 Tue 14:03]
   Change the =rainbow.html=, and then add some CSS formatting to ~<head>~ on the
   line after the ~<meta>~ element.

   ~git commit -a -m "Make a REAL rainbow"~

** DONE Emergency Update!
   CLOSED: [2017-07-11 Tue 14:11]
   - /hotfix branch/: a short-term branch used to quickly patch a production
     release.

   - Create and checkout a /hotfix branch/
     #+BEGIN_SRC bash
       git checkout master
       git branch news-hotfix
       git checkout news-hotfix
     #+END_SRC

   - Change the "News" list in =index.html= to match the following.
     (add a reference to the news file)
     ...

   - Create the news file, and
     #+BEGIN_SRC bash
       git add index.html news-1.html
       git status
       git commit -m "Add 1st news item"
     #+END_SRC
     Then test the current project.

** DONE Publish the News Hotfix
   CLOSED: [2017-07-11 Tue 14:17]
   To merge into the ~master~ branch, we need:
   #+BEGIN_SRC bash
     git checkout master
     git merge news-hotfix
   #+END_SRC
   Since now the master contains the news update, we can delete the
   /hotfix branch/.

   #+BEGIN_SRC bash
     git branch -d news-hotfix
     git branch
   #+END_SRC

** DONE Complete the Crazy Experiment
   CLOSED: [2017-07-11 Tue 14:24]
   ~git checkout crazy~

   Adding a news item for it on the home page. Change the news list in
   =index.html= to the following ...

   #+BEGIN_SRC bash
     git commit -a -m "Add news item for rainbow"
     git log --oneline

     # *42fa173 Add news item for rainbow
     # *7147cc5 Link index.html to rainbow.html
     # *6aa4b3b Add CSS stylesheet to rainbow.html
     # b9ae1bc Merge branch 'master' into crazy
     # ae4e756 Link HTML pages to stylesheet
     # 98cd46d Add CSS stylesheet
     # *33e25c9 Rename crazy.html to rainbow.html
     # *677e0e0 Add a rainbow to crazy.html
     # 506bb9b Revert "Add a crazzzy experiment"
     # *514fbe7 Add a crazzzy experiment
     # 1c310d2 Add navigation links
     # 54650a3 Create blue and orange pages
     # b650e4b Create index page
   #+END_SRC
   All experimental commits are marked with asterisks (by us, NOT by Git).

** DONE Publish the Crazy Experiment
   CLOSED: [2017-07-11 Tue 14:28]
   #+BEGIN_SRC bash
     git checkout master
     git merge crazy

     # Auto-merging index.html
     # CONFLICT (content): Merge conflict in index.html
     # Automatic merge failed; fix conflicts and then commit the result.
   #+END_SRC

   Open =index.html= and you can see:
   #+BEGIN_SRC text
     <<<<<<< HEAD
     <li><a href="news-1.html">Blue Is The New Hue</a></li>
     =======
     <li><a href="rainbow.html">Our New Rainbow</a></li>
     >>>>>>> crazy
   #+END_SRC

** DONE Resolve the Merge Conflicts
   CLOSED: [2017-07-11 Tue 14:44]
   - Resolve the merge conflicts and
     #+BEGIN_SRC bash
       git add index.html
       git status
       git commit
     #+END_SRC
** DONE Cleanup the Feature Branches
   CLOSED: [2017-07-11 Tue 14:49]
   #+BEGIN_SRC bash
     git branch -d crazy

     git branch -d crazy-alt
     # error: The branch 'crazy-alt' is not fully merged.
     # If you are sure you want to delete it, run 'git branch -D crazy-alt'.

     git branch -D crazy-alt
   #+END_SRC
   =crazy-alt= was never merged, and it is lost forever.

   =crazy= branch is still accessible through its commits, which are now
   reachable via the ~master~ branch.

** DONE Conclusion
   CLOSED: [2017-07-11 Tue 14:53]
   - This module demonstrated the THREE most common uses of Git branches:
     + To develop long-running features (=crazy=)
     + To apply quick updates (=news-hotfix=)
     + To record the evolution of a project (=master=)

   - /3-way merge/

** DONE Quick Reference
   CLOSED: [2017-07-11 Tue 14:54]
   - ~git commit -a -m "<message>"~

   - ~git branch -D <branch-name>~
* DONE Rebasing
  CLOSED: [2017-07-12 Wed 22:08]
  Git includes a tool to help us clean up our commits: ~git rebase~

  /Rebasing/ lets us move branches around by changing the commit that they are
  based on.

  After /rebasing/, a branch may has a new parent commit.
** DONE Create an About Section
   CLOSED: [2017-07-11 Tue 16:37]
   We'll begin by creaint an about page for the website.
   #+BEGIN_SRC bash
     git branch about
     git checkout about
   #+END_SRC

   The next few stpes break this feature into several unnecessarily small
   commits so that we can see the effects of a /rebase/.

   #+BEGIN_SRC bash
     git add about    # `git add` can add entire directories to the staging area.
     git status
     git commit -m "Add empty page in about section"
   #+END_SRC
** DONE Add an About Page
   CLOSED: [2017-07-11 Tue 16:39]
   Add some HTML to =about/index.html=
   #+BEGIN_SRC java
     git status
     git commit -a -m "Add contents to about page"
   #+END_SRC

** DONE Another Emergency Update!
   CLOSED: [2017-07-11 Tue 17:24]
   #+BEGIN_SRC bash
     git checkout master
     git branch news-hotfix
     git checkout news-hotfix
     git branch
   #+END_SRC

   Then change the "News" section in =index.html= (add a link to =news-2.html=).

   #+BEGIN_SRC bash
     git status
     git commit -a -m "Add 2nd news item to index page"
   #+END_SRC

   Create =news-2.html=

   #+BEGIN_SRC bash
     git add news-2.html
     git status
     git commit -m "Add article for 2nd news item"
   #+END_SRC
** DONE Publish News Hotfix
   CLOSED: [2017-07-11 Tue 17:24]
   #+BEGIN_SRC bash
     git checkout master
     git merge news-hotfix
     git branch -d news-hotfix
   #+END_SRC
** DONE Rebase the About Branch
   CLOSED: [2017-07-11 Tue 17:21]
   #+BEGIN_SRC bash
     git checkout about
     git rebase master
     git log --oneline
   #+END_SRC

   - After the /rebase/, =about= is a linear extension of the master branch,
     enabling us to do a fast-forward merge later on.

     /Rebasing/ also allowed us to integrate the most up-to-date version of
     =master= WITHOUT a /merge commit/.

** DONE Add a Personal Bio
   CLOSED: [2017-07-12 Wed 20:27]
   Create the file =about/me.html= with the following contents: ...

   Then,
   #+BEGIN_SRC bash
     git add about/me.html
     git commit -m "Add HTML page for personal bio"
     git log --oneline
   #+END_SRC

   Thanks to the /rebase/, ~about~ rests on top of ~master~.

   All of our ~about~ section commits are gouped together,
   + which would NOT be the case had we merged instead of rebased.
   + This also eliminates an unnecessary fork in our project history.

** DONE Add Dummy Page for Mary
   CLOSED: [2017-07-12 Wed 20:31]
   Once anain, the next two snapshots are unnecessarily trivial.
   HOWEVER, _we'll use an INTERACTIVE rebase to combine them into a single
   commit later on_ -- ~git rabase~ NOT only lets you move branches around, it
   enables you to manipulate individual commits as you do so.

   #+BEGIN_SRC bash
     touch about/mary.html
     git add about
     git status
     git commit -m "Add empty HTML page for Mary's bio"
   #+END_SRC

** DONE Link to the About Section
   CLOSED: [2017-07-12 Wed 20:34]
   Add a link to the about page in =index.html= so that its "Navigation" section
   looks like the following: ...

   Then, ~git commit -a -m "Add link to about section in home page"~

** DONE Clean Up the Commit History
   CLOSED: [2017-07-12 Wed 21:26]
   Before ~merge~ into the ~master~ branch,
   we should make sure we have a clean, meaningful history in our feature branch.

   _By rebasing interactively_, we can choose _how_ each ~commit~ is transferred
   to the new base.

   Specify an _interactive_ ~rebase~ by passing the =-i= flag to the ~rebase~
   command: ~git rebase -i master~

   - The first opened file ask you to do something to the ~rebase~ related
     commits. You can change "pick" to "squash" according to the book.

   - After you close and save the file above, some files come out to prompt you
     to make decision of how to change the commit messages of _combined commits_.

   Interactive rebasing gives you _complete control_ over your project history,
   but this can also very _dangerous_.
     For exmaple, if you _delete a line from the rebase listing_,
   the associated commit wouldn't be transferred to the new base, and its
   content would be _lost forever_.

   =TODO= In a future module, we’ll also see how rewriting history can get you in
   trouble with public Git repositories

** DONE Stop to Amend a Commit
   CLOSED: [2017-07-12 Wed 21:57]
   ~git rebase -i master~

   Then we can see three commits, change the middle one to "edit".
   Add a message to the blank =about/mary.html= file.

   #+BEGIN_SRC bash
     git add about/mary.html
     git status
     git commit --amend
   #+END_SRC

** DONE Continue the Interactive Rebase
   CLOSED: [2017-07-12 Wed 21:59]
   #+BEGIN_SRC bash
     git rebase --continue
     git log --oneline
   #+END_SRC

   If you ever find yourself lost in the middle of a ~rebase~ and you're afraid
   to continue, you can use the ~--abort~ flag to abandon it and start over from
   scratch.

** DONE Publish the About Section
   CLOSED: [2017-07-12 Wed 22:02]
   The point of all this /interactive rebasing/ is to generate a
   _meaningful history_ that we can merge back into ~master~.

   #+BEGIN_SRC bash
     git checkout master
     git log --oneline
     git merge about
     git log --oneline

     git branch -d about
   #+END_SRC
** DONE Conclusion
   CLOSED: [2017-07-12 Wed 22:08]
** DONE Quick Reference
   CLOSED: [2017-07-12 Wed 22:03]
   ~git rebase <new-base>~
   ~git rebase -i <new-base>~
   ~git commit --amend~
   ~git rebase --continue~
   ~git rebase --abort~

   ~git merge --on-ff <branch-name>~
   _Force_ a merge commit even if Git could do a /fast-forward merge/.
* DONE Rewriting History
  CLOSED: [2017-07-13 Thu 01:13]
  =TODO= How to
  - split up commits
  - revive lost snapshots
  - completely rewrite a repository's history to our exact specifications.

** DONE Create the Red Page
   CLOSED: [2017-07-12 Wed 22:53]
   #+BEGIN_SRC bash
     git checkout -b new-pages
     git branch
   #+END_SRC

   Create a =red.html=

** DONE Create the Yellow Page
   CLOSED: [2017-07-12 Wed 22:53]
   Create a =yellow.html=

** DONE Link and Commit the New Pages
   CLOSED: [2017-07-12 Wed 22:54]
   Edit the "Navigation" section of the =index.html= file.

   #+BEGIN_SRC bash
     git add red.html yellow.html index.html
     git status
     git commit -m "Add new HTML pages"
     # This is a pretty bad commit message.
   #+END_SRC
** DONE Create and Commit the Green Page
   CLOSED: [2017-07-12 Wed 23:40]
   Create a =green.html= page, and add a link to the "Navigation" section of
   =index.html=.

   Then,
   #+BEGIN_SRC bash
     git add green.html index.html
     git status
     git commit -m "Add green page"
   #+END_SRC

** DONE Begin an Interactive Rebase
   CLOSED: [2017-07-12 Wed 23:45]
   We want to split the commit "Add new HTML pages" to two commits:
   + Add yellow page
   + Add red page

   ~git rebase -i master~

   Change the "pick" in font of "Add new HTML pages" to "edit". And save.

** DONE Undo the Generic Commit
   CLOSED: [2017-07-12 Wed 23:45]
   ~git log --oneline~
   output:
   #+BEGIN_SRC text
     db96c72 Add new HTML pages
     7070b0e Add link to about section in home page
     ...
   #+END_SRC

   #+BEGIN_SRC bash
     git reset --mixed HEAD~1
     git log --oneline
     git status
   #+END_SRC
   The ~HEAD~1~ means we reset the snapshot to the commit immediately before the
   current ~HEAD~.

   The ~mixed~ flag _preserve_ the working directory, which contains the changes
   we want to separate. This is to day, ~HEAD~ moved, but the working directory
   remained unchanged.

** DONE Split the Generic Commit
   CLOSED: [2017-07-13 Thu 00:39]
   Remove the link to =yellow.html= from the =index.html= file.

   #+BEGIN_SRC bash
     git add red.html index.html
     git status
     git commit -m "Add red page"
   #+END_SRC

   Add the link to =yellow.html= back.

   #+BEGIN_SRC bash
     git add red.html index.html
     git status
     git commit -m "Add yellow page"
   #+END_SRC

   ~git rebase --continue~

   Then, the =green.html= page also comes back.

** DONE Remove the Last Commit
   CLOSED: [2017-07-13 Thu 01:04]
   Try to "accidentally" remove the green page commit (find it back later).
   #+BEGIN_SRC bash
     git reset --hard HEAD~1
     git status
     git log --oneline
   #+END_SRC

   /dangling commit/: commits that CANNOT be reached from any branch and are thus
   in danger of being lost forever.

** DONE Open the Reflog
   CLOSED: [2017-07-13 Thu 01:05]

   #+BEGIN_SRC bash
     git reflog
     #  9b1a64f HEAD@{0}: reset: moving to HEAD~1
     #  002185c HEAD@{1}: rebase -i (finish): returning to refs/heads/new-pages
     #  002185c HEAD@{2}: rebase -i (pick): Add green page
     #  9b1a64f HEAD@{3}: commit: Add yellow page
     #  77a1cf1 HEAD@{4}: commit: Add red page
     #  7070b0e HEAD@{5}: reset: moving to HEAD~1
     #  ...
   #+END_SRC

   We can see the /dangling commit/ =002185c=.

** DONE Revive the Lost Commit
   CLOSED: [2017-07-13 Thu 01:12]
   #+BEGIN_SRC bash
     git checkout 002185c
     # Since this is was a /dangling commit/ (now a /detached HEAD/) and it NOT on
     # any branch, we need to create a branch and then manipulate it.

     git checkout -b green-page
   #+END_SRC
** DONE Filter the Log History
   CLOSED: [2017-07-13 Thu 01:12]
   #+BEGIN_SRC bash
     git log new-pages..green-page
     # Show the differences between branches. This is the log-filter-syntax of Git.

     git log HEAD~4..HEAD
     # or its equivalent form `git log -n 4`
   #+END_SRC

** DONE Merge in the Revived Branch
   CLOSED: [2017-07-13 Thu 01:13]
   #+BEGIN_SRC bash
     git checkout master
     git log HEAD..green-page --stat
     git merge green-page
     git branch -d new-pages
     git branch -d green-page
   #+END_SRC
** DONE Conclusion
   CLOSED: [2017-07-13 Thu 00:22]
   Git uses the /tip/ of a branch to represent the _entire branch_.
   That is to say, a branch is actually a pointer to a single commit -- NOT a
   container for a series of commits. For this point of view we know:

   + The history is represented by the parent of each commit (designated by
     arrows), NOT the branch itself.
     =TODO=
       (Except 3-way-merge, one commit always has one arraow to point out)
       So, to request a new branch, all Git has to do is create a reference to
     the current commit.

   + To add a snapshot to a branch is to move the branch reference to the new
     commit.

** DONE Quick Reference
   CLOSED: [2017-07-13 Thu 00:11]
   - ~git reflog~
     
   - ~git reset --mixed HEAD~<n>~

   - ~git reset --hard HEAD~<n>~

   - ~git log <since>..<until>~

   - ~git log --stat~

* DONE Remotes
  CLOSED: [2017-07-13 Thu 21:55]
  Remote branches act just like the local branches that we've been using, only
  they represent a branch in someone else's repository.

  =TODO=
  Over the next few modules we'll be exploring various _multi-user workflows_ by
  pretending to be different developers working on our example website.

** DONE Clone the Repository (Mary)
   CLOSED: [2017-07-13 Thu 19:40]
   #+BEGIN_SRC bash
     cd /path-to/my-git-repo
     cd ..
     git clone my-git-repo marys-repo
     cd marys-repo
   #+END_SRC

** DONE Configure The Repository (Mary)
   CLOSED: [2017-07-13 Thu 19:41]
   #+BEGIN_SRC bash
     cd /path-to/marys-repo
     git config user.name "Mary"
   #+END_SRC

** DONE Start Mary's Day (Mary)
   CLOSED: [2017-07-13 Thu 19:46]
   ~git checkout -b bio-page~

** DONE Create Mary's Bio Page (Mary)
   CLOSED: [2017-07-13 Thu 19:51]
   #+BEGIN_SRC bash
     git commit -a -m "Add bio page for Mary"
     git log -n 1
   #+END_SRC

** DONE Publish the Bio Page (Mary)
   CLOSED: [2017-07-13 Thu 20:38]
   #+BEGIN_SRC bash
     git checkout master
     git merge bio-page
   #+END_SRC

** DONE View Remote Repositories (Mary)
   CLOSED: [2017-07-13 Thu 20:41]
   #+BEGIN_SRC bash
     # From marys-repo
     git remote
     git remote -v  # verbose ouput version
   #+END_SRC

** DONE Return to Your Repository (You)
   CLOSED: [2017-07-13 Thu 20:42]
   ~cd ../my-git-repo~
** DONE Add Mary as a Remote (You)
   CLOSED: [2017-07-13 Thu 20:45]
   #+BEGIN_SRC bash
     # my-git-repo
     git remote  # NO output

     git remote add mary ../marys-repo

     git remote
     # mary

     git remote -v
     # mary    ../marys-repo (fetch)
     # mary    ../marys-repo (push)
   #+END_SRC

** DONE Fetch Mary's Branches (You)
   CLOSED: [2017-07-13 Thu 20:46]
   #+BEGIN_SRC bash
     git branch -r  # NO output

     git fetch mary
     # remote: Counting objects: 4, done.
     # remote: Compressing objects: 100% (4/4), done.
     # remote: Total 4 (delta 1), reused 0 (delta 0)
     # Unpacking objects: 100% (4/4), done.
     # From ../marys-repo
     # * [new branch]      bio-page   -> mary/bio-page
     # * [new branch]      master     -> mary/master

     git branch -r
     # mary/bio-page
     # mary/master
   #+END_SRC

** DONE Check Out a Remote Branch
   CLOSED: [2017-07-13 Thu 20:46]
   ~git checkout mary/master~

** DONE Find Mary's Changes
   CLOSED: [2017-07-13 Thu 20:49]
   ~git log master..mary/master --stat~
   From the result we see our history hasn't diverged -- we're just behind by a commit.

** DONE Merge Mary's Changes
   CLOSED: [2017-07-13 Thu 21:07]
   #+BEGIN_SRC bash
     git checkout master
     git merge mary/master
   #+END_SRC
** DONE Push a Dummy Branch
   CLOSED: [2017-07-13 Thu 21:13]
   #+BEGIN_SRC bash
     # my-git-repo
     git branch dummy
     git push mary dummy
   #+END_SRC

   #+BEGIN_SRC bash
     cd ../marys-repo
     git branch
   #+END_SRC

   Mary was developing in her own repository when, all of a sudden, a new ~dummy~
   branch appeared out of nowhere.

   It is obvious that pushing branches into other people's repositories can make
   for a CHAOTIC workflow.

   _A General Rule_: Never ~push~ into another developer's repository.

   ONLY use ~push~ to maintain a public repositories.

   #+BEGIN_SRC bash
     # my-git-repo
     git branch -d dummy

     cd ../my-git-repo
     git branch -d dummy
   #+END_SRC

** DONE Push a New Tag
   CLOSED: [2017-07-13 Thu 21:31]
   #+BEGIN_SRC bash
     git tag -a v2.0 -m "An even stabler version of the website"

     git push mary master  # Git will do nothing
     # Everyting up-to-date

     git push mary v2.0  # we need to manually push the tag itself
   #+END_SRC

** DONE Conclusion
   CLOSED: [2017-07-13 Thu 21:55]
   - ~git remote~ are merely bookmarks for a full path to another repository.

   - It's important to note that /remotes/ are for _people_,
     whereas /branches/ are for _topics_.

     Do NOT create separate branches for each of your developers -- give them
     separate repositories and bookmark them with ~git remote add~.

** DONE Quick Reference
   CLOSED: [2017-07-13 Thu 21:50]
   - ~git clone <remote-path>~
     Create a copy of a remote Git repository.

   - ~git remote~
     List remote repositories.

   - ~git remote add <remote-name> <remote-path>~
     Add a remote repository.

   - ~git fetch <remote-name>~
     Download remote branch information, but do not merge anything.

   - ~git merge <remote-name>/<branch-name>~
     Merge a remote branch into the checked-out branch.

   - ~git branch -r~
     List remote branches.

   - ~git push <remote-name> <branch-name>~
     Push a local branch to another repository.

   - ~git push <remote-name> <tag-name>~
     Push a tag to another repository.

* DONE Centralized Workflows
  CLOSED: [2017-07-14 Fri 03:22]
  /centralized workflow/
** DONE Create a Bare Repository (Central)
   CLOSED: [2017-07-13 Thu 22:50]
   #+BEGIN_SRC bash
     cd /path-to/my-git-repo
     cd ..
     git init --bare central-repo.git
   #+END_SRC
   ~--bare~ flag is used to tell Git that we don't want a working directory.
   This will prevent us from developing in the central repository, which
   eliminates the possibility of messing up another user's environment with
   ~git push~.

   A central repository is only supposed to act as a /storage facility/ -- NOT
   a development environment.

   The =central-repo.git= folder contains the exact same files as the =.git=
   folder in our =my-git-repo= project. Git has literally gotten rid of our
   working directory. The conventional =.git= extension in the directory name is
   a way to convey this property.

** TODO Update Remotes (Mary and You)
   #+BEGIN_SRC bash
     cd marys-repo
     git remote rm origin
     git remote add origin ../central-repo.git

     cd ../my-git-repo
     git remote add origin ../central-repo.git
     git remote rm mary
   #+END_SRC

   If the central repository is on a server, you'll need to change the
   =central-repo.git= path to: =ssh://user@example.com/path-to/central-repo.git=.
   Substitute your SSH username and server location for =user@example.com=.

** DONE Push the Master Branch (You)
   CLOSED: [2017-07-13 Thu 22:59]
   #+BEGIN_SRC bash
     git push origin master

     cd ../central-repo.git
     git log
   #+END_SRC

** DONE Add News Update (You)
   CLOSED: [2017-07-13 Thu 23:13]
   #+BEGIN_SRC bash
     cd ../my-git-repo
     git checkout -b news-item
   #+END_SRC

   Create a file =news-3.html=.
   Add a link to it in the =index.html= file.

   #+BEGIN_SRC bash
     git add news-3.html index.html
     git status
     git commit -m "Add 3rd news item"
   #+END_SRC

** DONE Publish the News Item (You)
   CLOSED: [2017-07-13 Thu 23:14]
   #+BEGIN_SRC bash
     git checkout master
     git merge news-item
     git branch -d news-item
     git push origin master
   #+END_SRC

** DONE Update CSS Styles (Mary)
   CLOSED: [2017-07-13 Thu 23:15]
   #+BEGIN_SRC bash
     cd ../marys-repo
     git checkout -b css-edits
   #+END_SRC

   Edit =style.css= and add styles about level 1 and 2 headings.

   ~git commit -a -m "Add CSS styles for headings and links"~
   
** DONE Update Another CSS Style (Mary)
   CLOSED: [2017-07-13 Thu 23:18]
   Oops, Mary forgets ~h3~. Add a style to ~h3~ in the =style.css= file.

   ~git commit -a -m "Add CSS styles for 3rd level headings"~

** DONE Clean Up Before Publishing (Mary)
   CLOSED: [2017-07-14 Fri 03:10]
   =IMPORTANT=
   Before Mary considers pushing her updates to the central repository, she
   needs to make sure she has a clean history. This must be done by Mary,
   because it's near-impossible to change history after it has been made public.

   - Mary should ~rebase~ first, and then ~push~. NOT in opposite direction.

   - ~git rebase -i master~ and edit to get
     #+BEGIN_SRC text
       pick 681bd1c Add CSS styles for headings and links
       squash eabac68 Add CSS styles for 3rd level headings
     #+END_SRC
     Then, combine commit with the message
     "Add CSS styles for headings and links"


   - A _RULE_: Never, ever rebase commits that have been pushed to a shared
     repository.

** DONE Publish CSS Changes (Mary)
   CLOSED: [2017-07-14 Fri 01:34]
   #+BEGIN_SRC bash
     git checkout master
     git merge css-edits
     git branch -d css-edits
     git push origin master
   #+END_SRC

   Mary shouldn't push the css-edits branch to the server, since it's NO longer
   under development, and other collaborators wouldn't know what it contains.

   However, if in a scenario that CSS is still in development, and some
   developers decide to work on it together, then keep this branch is
   reasonable.

** DONE Pull in Changes (Mary)
   CLOSED: [2017-07-14 Fri 03:20]
   #+BEGIN_SRC bash
     # download the `origin`, but do NOT merge
     git fetch origin

     # See what's in `origin/master` and NOT in Mary's `master`
     git log master..origin/master

     # See what's in Mary's `master` and NOT in `origin/master`
     git log origin/master..master

     git rebase origin/master

     git push origin master
   #+END_SRC

** DONE Pull in Changes (You)
   CLOSED: [2017-07-14 Fri 03:21]
   #+BEGIN_SRC bash
     cd ../my-git-repo
     git fetch origin
     git log master..origin/master --stat
     git log origin/master..master --stat
     # Always check before `merge` in a remote branch
     git merge origin/master
   #+END_SRC
** DONE Conclusion
   CLOSED: [2017-07-14 Fri 03:22]
   - ~--bare~
     /Bare repositories/ provide a "safe" location to push branches to, as long
     as you remember NOT to ~rebase~ the commits that it already contains.

** DONE Quick Reference
   CLOSED: [2017-07-14 Fri 01:31]
   - ~git init --bare <repository-name>~
     Create a Git repository, but omit the working directory.

   - ~git remote rm <remote-name>~
     Remove the specified remote from your bookmarked connections.

* DONE Distributed Workflows
  CLOSED: [2017-07-16 Sun 02:51]
** DONE Create a Bitbucket Account
   CLOSED: [2017-07-16 Sun 01:40]
** DONE Create a Public Repository (You)
   CLOSED: [2017-07-16 Sun 01:47]
   - The steps of creating a public repository
     1. Clik (Left bar) _+_ and then _Repository_. Use ~my-git-repo~ as the
        Repository Name.

     2. Add some words to the "Description" box.

     3. For simplicity, uncheck "a private repository" field.

     4. Select HTML/CSS for Language field, then go a head and click "Create
        repository".

   - The above steps is essentially just like run ~git init --bare~ on a
     Bitbucket server.

   - Now we can use this repository as the =central-repo.git= in the previous
     module.

** DONE Push to the Public Repository (You)
   CLOSED: [2017-07-16 Sun 01:49]
   #+BEGIN_SRC bash
     cd /path-to/my-git-repo

     git remote rm origin  # remote the old orgin central-repo.git
     git remote add origin https://<username>@bitbucket.org/<username>/my-git-repo.git
     #  https://lanjiann@bitbucket.org/lanjiann/my-git-repo.git

     git push origin master
   #+END_SRC
** DONE Browse the Public Repository (You)
   CLOSED: [2017-07-16 Sun 01:51]
** DONE Clone the Repository (John)
   CLOSED: [2017-07-16 Sun 01:54]
   #+BEGIN_SRC bash
     cd /path-to/my-git-repo
     cd ..
     git clone http://bitbucket.org/<username>/my-git-repo.git johns-repo
     cd johns-repo

     git config user.name "John"
     git config user.email john.example@rypress.com
   #+END_SRC

** DONE Add the Pink Page (John)
   CLOSED: [2017-07-16 Sun 01:57]
   #+BEGIN_SRC bash
     git checkout -b pink-page
   #+END_SRC

   Create a file =pink.html= and add a link to it to =index.html=.

** DONE Publish the Pink Page (John)
   CLOSED: [2017-07-16 Sun 02:07]
   - Simulate the untrusted developer John, and he does NOT have the permission
     of push-access to our repository.

   - =TODO= https, http =RE-READ=
     Note that John used a different path for pushing to his public repository
     than the one he gave us for fetching from it. The most important
     distinction is the transport protocol: the former used https:// while the
     latter used http://. Accessing a repository over HTTPS (or SSH) lets you
     fetch or push, but as we saw, requires a password. This prevents unknown
     developers from overwriting commits. On the other hand, fetching over HTTP
     requires no username or password, but pushing is not possible. This lets
     anyone fetch from a repository without compromising its security. In the
     integrator workflow, other developers access your repository via HTTP,
     while you publish changes via HTTPS. This is also the reason why John can’t
     push to his origin remote. Of course, if you’re working on a private
     project, anonymous HTTP access would be disabled for that repository.

** DONE View John's Contributions (You)
   CLOSED: [2017-07-16 Sun 02:10]
   #+BEGIN_SRC bash
     cd ../my-git-repo
     git remote add john http://bitbucket.org/<username>/johns-repo.git

     git fetch john
     git branch -r
     git log master..john/pink-page --stat

     git diff master..john/pink-page
     # Always do content check to the untrusted developers pushed code
   #+END_SRC

   - RULE:
     _NEVER_ blindly merge content from a third-party contributor.

** DONE Integrate John's Contributions (You)
   CLOSED: [2017-07-16 Sun 02:34]
   #+BEGIN_SRC bash
     # After confirming that the code from John is safe, merge.
     git merge john/pink-page
   #+END_SRC

** DONE Publish John's Contributions (You)
   CLOSED: [2017-07-16 Sun 02:38]
   ~git push origin master~
** DONE Update Mary's Repository (Mary)
   CLOSED: [2017-07-16 Sun 02:41]
   #+BEGIN_SRC bash
     cd ../marys-repo
     git remote rm origin
     git remote add origin http://bitbucket.org/<username>/my-git-repo.git

     git checkout master
     git fetch origin
     git rebase origin/master  # fast-forward merge, no commit message required.
   #+END_SRC

** DONE Update John's Repository (John)
   CLOSED: [2017-07-16 Sun 02:49]
   John shouldn't merge. If he wanted, he should do merge before push.

   Use pull
   #+BEGIN_SRC bash
     cd ../johns-repo
     git checkout master
     git fetch origin
     git rebase origin/master
   #+END_SRC

   If John had updated ~master~ directly from his local ~pink-page~ (BAD idea:
   change after push -- remember! John pushed ~pink-page~ rather than ~master~),
   it could have wound up out-of-sync from the main project. For this reason,
   the /integrator workflow/ requires that
   + everyone _pull_ from a single, official repository,
   + while they all _push_ to _their own_ public repositories.

** DONE Conclusion
   CLOSED: [2017-07-16 Sun 02:51]
   - /integrator workflow/
* DONE Patch Workflows
  CLOSED: [2017-07-19 Wed 21:56]
** DONE Change the Pink Page (Mary)
   CLOSED: [2017-07-19 Wed 21:43]
   #+BEGIN_SRC bash
     cd /path-to/marys-repo
     git checkout -b pink-page

     # Edit `pink.html`

     git commit -a -m "Change pink to a manly color"
   #+END_SRC

** DONE Create a Patch (Mary)
   CLOSED: [2017-07-19 Wed 21:48]
   The command is ~git format-patch~.

   Use ~git format-patch master~ to tell Git to generate patches for every commit
   in the current branch that's missing from =master=.

   We'll use this command later.

** DONE Add a Pink Block (Mary)
   CLOSED: [2017-07-19 Wed 21:46]
   #+BEGIN_SRC bash
     # Edit `pink.html` again

     git commit -a -m "Add a pink block of color"
   #+END_SRC

** DONE Create Patch of Entire Branch (Mary)
   CLOSED: [2017-07-19 Wed 21:48]
   #+BEGIN_SRC bash
     git format-patch master
   #+END_SRC

   Two patch files are generated (one for each commit):
   + =0001-Change-pink-to-a-manly-color.patch=
   + =0002-Add-a-pink-block-of-color.patch=

** DONE Mail the Patches (Mary)
   CLOSED: [2017-07-19 Wed 21:51]
   Three ways:
   + Copy and past patches into your email, and send. 

     This isn't the recommended way. With this method, you must pay much
     attention to the format after pasting.

   + Sending the patch file as an attachment to a normal email.

   + Use ~git send-email~ command. Check the /official Git documentation/ for
     details.

** DONE Apply the Patches (You)
   CLOSED: [2017-07-19 Wed 21:54]
   =IMPORTANT= Assume you are the project maintainer

   #+BEGIN_SRC bash
     cd /path-to/my-git-repo
     git checkout -b patch-integration
     git am < 0001-Change-pink-to-a-manly-color.patch
     git log master..HEAD --stat

     git am < 0002-Add-a-pink-block-of--color.patch
     git log master..HEAD --stat
   #+END_SRC

** DONE Integrate the Patches (You)
   CLOSED: [2017-07-19 Wed 21:55]
   #+BEGIN_SRC bash
     # inside my-git-repo

     git checkout master
     git merge patch-integration
     git branch -d patch-integration
     git clean -f
     git push origin master
   #+END_SRC
** DONE Update Mary's Repository (Mary)
   CLOSED: [2017-07-19 Wed 21:56]
   #+BEGIN_SRC bash
     cd /path-to/mary-repo

     git checkout master
     git fetch origin
     git rebase origin/master
     git branch -D pink-page
     git clean -f
   #+END_SRC

** DONE Conclusion
   CLOSED: [2017-07-19 Wed 21:38]
   - Whereas remote repositories are a way to share entire branches,

     patches are a way to send individual commits to another developer.

   - Keep in mind:
     patches are usually only sent to a project maintainer.

     This is important! You MUSTN'T send your patches to multiple user, who may
     apply these patches in different order.
** DONE Quick Reference
   CLOSED: [2017-07-19 Wed 21:40]
   - ~git format-patch <branch-name>~
     Create a patch for each commit contained in the current branch but not in
     =<branch-name>=. You can also specify a commit ID instead of
     =<branch-name>=.

   - ~git am < <patch-file>~
     Apply a patch to the current branch.

* TODO Tips & Tricks
** DONE Archive The Repository
   CLOSED: [2017-07-19 Wed 22:12]
   Use ~archive~, the result is the indicated version, and NO =.git= folder.
   This is NOT the way used to send git repository.

   #+BEGIN_SRC bash
     git archieve master --format=zip --output=../website-12-10-2012.zip

     git archieve master --format=tar --output=../website-12-10-2012.tar
   #+END_SRC

** DONE Bundle the Repository
   CLOSED: [2017-07-19 Wed 22:14]
   A =.bundle= includes =.git= folder, and it can be used as a git repository.

   #+BEGIN_SRC bash
     git bundle create ../repo.bundle master
     cd ..
     git clone repo.bundle repo-copy -b master  # `clone`, and checkout to the `master` branch
     cd repo-copy
     git log
     cd ../my-git-repo
   #+END_SRC
** DONE Ignore a File
   CLOSED: [2017-07-19 Wed 22:19]
   #+BEGIN_SRC bash
     # create a `.gitignore` file
     # Add something like *.o, *.out, or *.exe to it
     git add .gitignore
     git commit -m "Add .gitignore file"
     git status
   #+END_SRC

** DONE Stash Uncommitted Changes
   CLOSED: [2017-07-19 Wed 22:23]
   #+BEGIN_SRC bash
     git stash

     # retrive, can be applied to any branch,
     # NOT only the one we use the `git stash` command.
     git stash apply
   #+END_SRC

   ~git stash~ takes the uncommitted modificatoins, stores them internally, then
   does a ~git reset --hard~ to give us a clean working directory.

** TODO Hook into Git's Internals
** DONE View Diffs Between Commits
   CLOSED: [2017-07-19 Wed 23:00]
   #+BEGIN_SRC bash
     git diff HEAD~2..HEAD~1

     git diff master..john/pink-page

     # EDIT `blue.html`

     # compare the HEAD and the current working directory
     git diff

     # I you have `git add` the changed file, `git diff` won't work.
     # Use the command below

     # compare the staged snapshot and the most recent commit:
     git add blue.html
     git diff --cached
   #+END_SRC
** TODO Reset and Checkout Files
   ~git reset~ and ~git checkout~ can NOT only work with branches/commits,
   but also work with individual files, which slightly alters the behavior of
   both commands.

   x
** DONE Aliases and Other Configurations
   CLOSED: [2017-07-19 Wed 22:40]
   - Alias
      #+BEGIN_SRC bash
        git config --global alias.co checkout
        git config --global alias.ci commit
        git config --global alias.br branch
      #+END_SRC

   - The location of git global configuration file: =~/.gitconfig=

   - The git repository configuration file: =<repository>/.git/config=

   - Content of the git configuration file:
     #+BEGIN_SRC text
       [user]
           name = Ryan
           email = ryan.example@rypress.com
       [alias]
           co = checkout
           ci = commit
           br = branch
       [color]
           status = always
       [core]
           editor = vim
     #+END_SRC


** TODO Conclusion
** TODO Quick Reference
* TODO Plumbing
** TODO Examine Commit Details
** TODO Examine a Tree
** TODO Examine a Blob
** TODO Examine a Tag
** TODO Inspect Git's Branch Representation
** TODO Explore the Object Database
** TODO Collect the Garbage
** TODO Add Files to the Index
** TODO Store the Index in the Database
** TODO Create a Commit Object
** TODO Update HEAD
** TODO Conclusion
** TODO Quick Reference
