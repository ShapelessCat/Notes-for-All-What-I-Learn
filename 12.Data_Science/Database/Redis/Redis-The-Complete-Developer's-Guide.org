#+TITLE: Redis
#+SUBTITLE: The Complete Developer's Guide
#+VERSION: latest
#+STARTUP: overview
#+STARTUP: entitiespretty

* Section 1: Get Started Here!
** 1. Hello and Welcome!
** 2. Join Our Community!
** 3. Course Resources
** 4. Why Use Redis?
** 5. Initial Setup
** 6. A Touch More Setup
** 7. Running RBook Locally

* Section 2: Commands for Adding and Querying Data
** 8. Basic Commands
** 9. Documentation on Commands
** Quiz 1: Essentials of Commands
** 10. Variations of SET
** 11. Use Case of Expiration Options
** 12. Setting Multiple Keys
** 13. GET and MGET
** 14. String Ranges
** 15. Are These Commands Even Useful?
** 16. Dealing with Numbers
** 17. Again... Why do These Commands Exist?
** 18. Completed Notes
** 19. Using a Completed Notebook
** 20. Exercises
** 21. A Few Exercises
** 22. Exercise Solutions

* Section 3: E-Commerce App Setup
** 23. E-Commerce App Source Code Download
** 24. Don't Skip This Video
** 25. Redis Client Libraries
** 26. First Implementation Task
** 27. Redis Design Methodology
   - SQL Database Design Methodology
     1. Put the data in tables
     2. Figure out how we will query it

   - Redis Design Methodology
     1. Figure out whatt queries we need to answer
     2. Structure data to best answer those queries

   - Design Considerations
     | Question                                         | Answer                                                     |
     |--------------------------------------------------+------------------------------------------------------------|
     | What type of data are we storing?                | Strings                                                    |
     | Should we be concerned about the size of data    | YES! Only cache certain pageas (illustraion example exist) |
     | Do we need to expire this data?                  | Yes! Expire based on scenario                              |
     | What will the key naming policy be for this data | =TODO= next section                                      |
     | Any business-logic concerns?                     | Nope                                                      |

** 28. Key Naming Methodology
   - Key Naming Methodology
     * Key need to be unique

     * Meaningful key name for other engineers

     * Tip: use functitons to generate your key names so you never make a typo.

     * Extremely common practice is to use a ~:~ to separate different parts of the
       key. For instance, ~users:45~, ~items:19~, ~users:posts:901~, and ~posts;jqip25jnm~.
       + Small twist on common practice: we are going to use a # before unique ID's
         to make implementing search easier. For instance, ~users#45~, ~items#19~,
         ~users:posts#901~, and ~posts#jqip25jnm~.

   - For the example practice in this section:
     | Page Name     | Address                    | Unique Route |
     |---------------+----------------------------+--------------|
     | Privacy Page  | localhost:3000/privacy     | /privacy     |
     | About Us Page | localhost:3000/about       | /about       |
     | Sign In Page  | localhost:3000/auth/signin | /auth/signin |
     | Sign Up Page  | localhost:3000/auth/signup | /auth/signup |


     | Key                    |
     |------------------------|
     | pagecache#/privacy     |
     | pagecache#/about       |
     | pagecache#/auth/signin |
     | pagecache#/auth/signup |

** 29. Adding Page Caching
** 30. Better Key Generation
   For a fixed key pattern in a scenario, it's better to create a key generation function.
   This can help avoid typos when typing keys.
   #+begin_src typescript
     export const pageCacheKey = (id: string) => `pagecache#${id}`;
   #+end_src

* Section 4: Local Redis Setup
** 31. Installing on MacOS - =RE-READ=
   Below are instructions to run Redis locally on MacOS. The next lecture has
   install directions for Windows

   You do not need to install Redis locally. You can complete the entire course
   using the Redis instance we already created on Redis Labs. These instructions
   are only here incase you want to run a copy on your own machine.

   - First, a few notes:
     * There are two different versions of Redis. They are called _Redis_ and
       _Redis Stack_.

     * _Redis_ contains the core Redis database

     * _Redis Stack_ contains the core Redis database and some additional modules
       that extend the functionality of Redis.

     * When we created an instance on Redis Labs, we got a copy of _Redis Stack_
       - it has these extra modules already installed.

     * Later sections in this course will require you to run _Redis Stack_,
       because we eventually use these extra modules

   - Installation Guide for MacOS
     These are the same install directions listed at
     https://redis.io/docs/stack/get-started/install/mac-os/

     1. If you do not already have HomeBrew installed, navigate to https://brew.sh/
        and run the command at the top in your terminal to install HomeBrew

     2. At your terminal, run brew tap redis-stack/redis-stack

     3. At your terminal, run brew install redis-stack

     4. To start Redis, run redis-stack-server

     5. To connect to your local Redis server and execute commands, run redis-cli

   - If you want to connect the RBay e-commerce app to your local copy of Redis,
     update the =.env= file in the root project directory to the following:
     #+begin_src text
       REDIS_HOST=localhost
       REDIS_PORT=6379
       REDIS_PW=
     #+end_src

   - If you want to connect RBook to your local copy of Redis, you will need to
     run RBook locally.
     1. To run RBook locally, run ~npx rbook~ at your terminal.

     2. Navigate to _localhost:3050_

     3. Open the connection settings window

     4. Enter a host of 'localhost'

     5. Enter a port of 6379

     6. Leave the password blank

     When running RBook locally, any notebooks you create will be added to the
     folder you ran npx rbook in.

** 32. Installing on Windows

* Section 5: Hash Data Structures
** 33. Hashes in Redis
** 34. Storing and Retrieving Hashes
   - ~HSET~ returns the numbmer of new added/updated keys

** 35. Deleting Hash Data
   - ~HEXISTS~ returns '1' if a key exists, '0' if not.

   - ~DEL~ deletes the whole /hash/.

   - ~HDEL~

** 36. Numbers in Hashes
** 37. Completed Notes

* Section 6: Redis Has Gotcha's!
** 38. Slightly Unpredictable ~HSET~ and ~HGETALL~
** 39. Issues with ~HSET~
** 40. Issues with ~HGETALL~

* Section 7: Powerful Design Patterns
** 41. App Overview
   1. Deep walkthrough of th ecommerce app we're building

   2. Do some design work on how we're going to store data in Redis

   3. Figure out what data should be stored as hashes

   4. Write code!

** 42. Reducing the Design to Queries
   - SQL Database Design Methodology
     1. Put the data in tables
     2. Figure out how we will query it


   - Redis Design Methodology
     1. Figure out what queries we need to answer
     2. Structure data to best answer those queries

** 43. What Data Type for Each Resource
   - _Reasons to Store as Hash_
     * The record has many attributes
     * A collection of these records have to be sorted many different ways
     * Often need to access a single record at a time

   - _Don't Use Hashes When ..._
     * The record is only for counting or enforcing uniqueness
     * Record stores only one or two attributes
     * Used only for creating relations between different records
     * The record is only used for time series data

** Quiz 2: When to use Hashes
** 44. Create User Implementation
** 45. Serialization and Deserialization
   - Serialization
     * Get an object ready to go INTO Redis as a hash
     * Removes ID
     * Turns dates into a queryable format

   - Deserialization
     * Formats data coming OUT of Redis
     * Add in ID
     * Parse string numbers into plain numbers

** 46. Adding Serialize
** 47. Fetching a User
** 48. Implementing Sessions
** 49. Fetching a Saved Session
** 50. Creating Sessions
** 51. Serializing Date Times
** 52. Storing Items
** 53. Fetching a Single Item

* Section 8: Pipelining Commands
** 54. Batching Commands with Pipelines
** 55. Running Multiple Commands at the Same Time
** 56. Executing a Pipeline

* Section 9: Enforcing Uniqueness with Sets
** 57. Basics of Sets
   - ~SADD key4set value { value }~: Add a string to a set.
     * returns '1' if element added, '0' if not.

   - ~SMEMBERS key4set~

   - Kind of do the same thing:
     * ~SMEMBERS~, ~SSCAN~
     * ~SMISMEMBER~, ~SISMEMBERS~
     * ~SUNION~, ~SUNIONSTORE~
     * ~SDIFF~, ~SDIFFSTORE~
     * ~SINTER~, ~SINTERSTORE~, ~SINTERCARD~
     * ~SMOVE~ =???=
     * ~SPOP~ =???=
     * ~SRANDMEMBER~ =???=

** 58. Union of Sets
** 59. Intersection of Sets
** 60. Difference of Sets
** 61. Store Variations
   - The ~STORE~ suffixed commands ~<X>STORE~:
     do ~<X>~ and save the result for a given key

** 62. Checking for an Element in a Set
   - ~SISMEMBERS key4set toBeChecked~: return 1 if the element exists in the set, 0 if not

   - ~SMISMEMBERS key4set toBeChecked0 { toBeChecked }~: Runs multiple ~SISMEMBER~ at the same time
     * return an array whoes elements are 1's or 0's.

** 63. Scanning a Set
   - ~SCARD key4set~: return the cardinality of the target set

   - ~SREM key4set value~: remove an element from a set

   - ~SSCAN key4set cursorId numberOfElementsToReturn~: return the cardinality of the target set
     * For example: ~SSCAN colors:1 0 COUNT 2~
       =TODO= a little bit tricky!!!

** 64. Completed Notes
** 65. Most Common Use Cases of Sets
   - Enforcing uniqueness of any value
   - Creating a relatiionship between different records
   - Finding common attributes between different things
   - General list of elements where order doesn't matter

* Section 10: A Little Set Implementation
** 66. Requiring Unique User Names
** 67. Adding a Like System
** 68. How to Count the Number of Likes?
** 69. Updating Like Quantities
** 70. Showing Liked Items
** 71. Showing Common Liked Items

* Section 11: Organizing Data with Sorted Sets
** 72. Sorted Sets
** 73. Adding and Removing Members
** 74. Finding a Range of Scores
** 75. Removing the Highest and Lowest Members
** 76. Updating Scores
** 77. Querying a Sorted Set
** 78. Completed Notes

* Section 12: Practice Time with Sorted Sets!
** 79. Sorted Set Use Cases
** 80. Reminder on the Auth Flow
** 81. Storing Usernames
** 82. Kind of Storing Strings in Sorted Sets
** 83. Converting User IDs
** 84. Plan for Showing Most Viewed Items
** 85. Initializing Views on Item Creation
** 86. Incrementing View Counters
** 87. Items by Ending Soonest
** 88. Querying for Ending Soonest

* Section 13: From Relational Data to Redis
** 89. Loading Relational Data
** 90. Relational Data with SORT
** 91. The Sort Command
** 92. Terminology Around Sort
** 93. Specifying the BY Argument
** 94. Joining Data with Sort
** 95. A Few More Arguments
** 96. Parsing SORT Output
** 97. Completed Notes

* Section 14: HyperLogLog Structures
** 98. HyperLogsLogs
   - Algorithms for approximately counting the number of unique elements
   - Similar to a set, but doesn't store the elements
   - Will seem useless at first glance

   - Commands:
     * ~PFADD key value~ returns 1 if the value is new 0 if not

     * ~PFCOUNT key~ returns the approximate count of the elements in the value
       of the given ~key~.

** 99. When to use HyperLogsLogs
   - =IMPORTANT=
     A /HyperLogsLog/ instance has a constant size *12kb*,s
     not matter how many elements are added.

   - 0.81% error in ~PFCOUNT~ results.

** 100. HyperLogsLogs in Action

* Section 15: Storing Collections with Lists
** 101. Lists
** 102. Reading and Writing Data to a List
** 103. Ranges and Searches
** 104. Trimming Lists
** 105. Removing Elements
** 106. List Use Cases
** 107. Using Lists in Our App
** 108. Serializing and Deserializing Bids
** 109. Retrieving Bid Histories

* Section 16: More Practice with the E-Commerce App
** 110. More on Bids
** 111. Validating Bids
** 112. Updating Items with Bids
** 113. Issues with Bids
** 114. Understanding Concurrency Issues
** 115. Applying Atomic Updates
** 116. Transactions
** 117. Watching a Key with Transactions
** 118. Isolated Connections for Transactions
** 119. Solving Multiple Bids with a Transaction
** 120. Items by Price
** 121. More on Items by Price

* Section 17: Extending Redis with Scripting
** 122. Lua Scripting
** 123. Basics of Lua
** 124. Handling Arrays
** 125. Handling Tables
** 126. Loading and Executing Scripts
** 127. Providing Arguments
** 128. Providing Key lists
** 129. When to Use Scripts
** 130. Custom Scripts with Node-Redis
** 131. Lua Script Integration
** 132. Creating a View-Incrementing Script
** 133. Code Cleanup

* Section 18: Understanding and Solving Concurrency Issues
** 134. Concurrency Revisited
** 135. Issues with WATCH
** 136. Overview of a Lock
** 137. Understanding the Goal
** 138. Implementing WithLock
** 139. Using WithLock
** 140. It Works!
** 141. Automatically Expiring Locks
** 142. Another Lock Issue
** 143. Solving Accidental Unlocks
** 144. Adding an Unlock Script
** 145. One Last Issue
** 146. Providing Expiration Signals
** 147. Alternate Expiration Solution

* Section 19: Querying Data with RediSearch
** 148. Redis Modules
** 149. Redis Core vs Redis Stack
** 150. Using Modules in Production
** 151. Overview on Search
** 152. Creating and Using an Index
** 153. Details on Indexes
** 154. Index Field Types
** 155. Numeric Queries
** 156. Tag Queries
** 157. Text Queries
** 158. Fuzzy Search
** 159. Prefix Search
** 160. Pre-Processing Search Criteria

* Section 20: Search in Action
** 161. Search Implementation
** 162. The Create Index Function
** 163. When to Create the Index?
** 164. Parsing the Search Term
** 165. Executing the Search
** 166. Seeding Some Fake Data
** 167. RediSearch and TF-IDF
** 168. Applying Weights to Fields
** 169. Understanding Queries with EXPLAIN
** 170. Query Performance with PROFILE
** 171. Sorting and Searching
** 172. Updating an Existing Index
** 173. Executing the Search
** 174. Deserializing Search Results

* Section 21: Service Communication with Streams
** 175. Streams
** 176. Use Case of Streams
** 177. Adding Messages to a Stream
** 178. Consuming Streams with XREAD
** 179. Blocking Reads
** 180. An XREAD Shortcut
** 181. A Little Gotcha Around Streams
** 182. Reading Streams with XRANGE
** 183. Issues with Standard Streams
** 184. Consumer Groups
** 185. Creating and Inspecting Consumer Groups
** 186. Consumer Groups in Action
** 187. Claiming Expired Messages

* Section 22: Bonus!
** 188. Bonus!
