#+TITLE: Database Management Systems
#+VERSION: 3rd
#+AUTHOR: Raghu Ramakrishnan, Johannes Gehrke
#+STARTUP: entitiespretty

* PREFACE
* Part I FOUNDATIONS
** Chapter 1 OVERVIEW OF DATABASE SYSTEMS
*** 1.1 Managing Data
*** 1.2 A Historical Perspective
*** 1.3 File Systems versus a DBMS
*** 1.4 Advantages of a DBMS
*** 1.5 Describing and Storing Data in a DBMS
**** 1.5.1 The Relational Model
**** 1.5.2 Levels of Abstraction in a DBMS
**** 1.5.3 Data Independence
*** 1.6 Queries in a DBMS
*** 1.7 Transaction Management
**** 1.7.1 Concurrent Execution of Transactions
**** 1.7.2 Incomplete Transactions and System Crashes
**** 1.7.3 Points to Note
*** 1.8 Structure of a DBMS
*** 1.9 People Who Work with Databases
*** 1.10 Review Questions

** Chapter 2 INTRODUCTION TO DATABASE DESIGN
*** 2.1 Database Design and ER Diagrams
**** 2.1.1 Beyond ER Design
*** 2.2 Entities, Attributes, and Entity Sets
*** 2.3 Relationships and Relationship Sets
*** 2.4 Additional Features of the ER Model
**** 2.4.1 Key Constraints
**** 2.4.2 Participation Constraints
**** 2.4.3 Weak Entities
**** 2.4.4 Class Hierarchies
**** 2.4.5 Aggregation
*** 2.5 Conceptual Design With the ER Model
**** 2.5.1 Entity versus Attribute
**** 2.5.2 Entity versus Relationship
**** 2.5.3 Binary versus Ternary Relationships
**** 2.5.4 Aggregation versus Ternary Relationships
*** 2.6 Conceptual Design for Large Enterprises
*** 2.7 The Unified Modeling Language
*** 2.8 Case Study: The Internet Shop
**** 2.8.1 Requirements Analysis
**** 2.8.2 Conceptual Design
*** 2.9 Review Questions

** Chapter 3 THE RELATIONAL MODEL
   - /SQL/
     _Our coverage of SQL is based on SQL:1999_, but is applicable to SQL-92 as
     well; features unique to SQL:1999 are explicitly noted.

   - History

   - Data Definition Language (DDL) :: =TODO=

   - 

*** 3.1 Introduction to the Relational Model
**** 3.1.1 Creating and Modifying Relations Using SQL
*** 3.2 Integrity Constraints over Relations
**** 3.2.1 Key Constraints
**** 3.2.2 Foreign Key Constraints
**** 3.2.3 General Constraints
*** 3.3 Enforcing Integrity Constraints
**** 3.3.1 Transactions and Constraints
*** 3.4 Querying Relational Data
*** 3.5 Logical Database Design: ER to Relational
**** 3.5.1 Entity Sets to Tables
**** 3.5.2 Relationship Sets (without Constraints) to Tables
**** 3.5.3 Translating Relationship Sets with Key Constraints
**** 3.5.4 Translating Relationship Sets with Participation Constraints
**** 3.5.5 Translating Weak Entity Sets
**** 3.5.6 cn'anslating Class Hierarchies
**** 3.5.7 Translating ER Diagrams with Aggregation
**** 3.5.8 ER to Relational: Additional Examples
*** 3.6 Introduction to Views
**** 3.6.1 Views, Data Independence, Security
**** 3.6.2 Updates on Views
*** 3.7 Destroying/Altering Tables and Views
*** 3.8 Case Study: The Internet Store
*** 3.9 Review Questions

** Chapter 4 RELATIONAL ALGEBRA AND CALCULUS
*** 4.1 Preliminaries
*** 4.2 Relational Algebra
**** 4.2.1 Selection and Projection
**** 4.2.2 Set Operations
**** 4.2.3 Renaming 106
**** 4.2.4 Joins 107
**** 4.2.5 Division 109
**** 4.2.6 1\'lore Examples of Algebra Queries 110
*** 4.3 Relational Calculus 116
**** 4.3.1 Tuple Relational Calculus 117
**** 4.3.2 Domain Relational Calculus 122
*** 4.4 Expressive Power of Algebra and Calculus 124
*** 4.5 Review Questions 126

** Chapter 5 SQL: QUERIES, CONSTRAINTS, TRIGGERS 130
*** 5.1 Overview 131
**** 5.1.1 Chapter Organization 132
*** 5.2 The Form of a Basic SQL Query 133
**** 5.2.1 Examples of Basic SQL Queries 138
**** 5.2.2 Expressions and Strings in the SELECT Command 139
*** 5.3 UNION, INTERSECT, and EXCEPT 141
*** 5.4 Nested Queries 144
**** 5.4.1 Introduction to Nested Queries 145
**** 5.4.2 Correlated Nested Queries 147
**** 5.4.3 Set-Comparison Operators 148
**** 5.4.4 More Examples of Nested Queries 149
*** 5.5 Aggregate Operators 151
**** 5.5.1 The GROUP BY and HAVING Clauses 154
**** 5.5.2 More Examples of Aggregate Queries 158
*** 5.6 Null Values 162
**** 5.6.1 Comparisons Using Null Values 163
**** 5.6.2 Logical Connectives AND, OR, and NOT 163
**** 5.6.3 Impact 011 SQL Constructs 163
**** 5.6.4 Outer Joins 164
**** 5.6.5 Disallowing Null Values 165
*** 5.7 Complex Integrity Constraints in SQL 165
**** 5.7.1 Constraints over a Single Table 165
**** 5.7.2 Domain Constraints and Distinct Types 166
**** 5.7.3 Assertions: ICs over Several Tables 167
*** 5.8 Triggers and Active Databases 168
**** 5.8.1 Examples of Triggers in SQL 169
*** 5.9 Designing Active Databases 171
**** 5.9.1 Why Triggers Can Be Hard to Understand 171
**** 5.9.2 Constraints versus Triggers 172
**** 5.9.3 Other Uses of Triggers 172
*** 5.10 Review Questions 173

* Part II APPLICATION DEVELOPMENT 183
** Chapter 6 DATABASE APPLICATION DEVELOPMENT 185
*** 6.1 Accessing Databases from Applications 187
**** 6.1.1 Embedded SQL 187
**** 6.1.2 Cursors 189
**** 6.1.3 Dynamic SQL 194
*** 6.2 An Introduction to JDBC 194
**** 6.2.1 Architecture 196
*** 6.3 JDBC Classes and Interfaces 197
**** 6.3.1 JDBC Driver Management 197
**** 6.3.2 Connections 198
**** 6.3.3 Executing SQL Statements 200
**** 6.3.4 ResultSets 201
**** 6.3.5 Exceptions and Warnings 203
**** 6.3.6 Examining Database Metadata 204
*** 6.4 SQLJ 206
**** 6.4.1 Writing SQLJ Code 207
*** 6.5 Stored Procedures 209
**** 6.5.1 Creating a Simple Stored Procedure 209
**** 6.5.2 Calling Stored Procedures 210
**** 6.5.3 SQL/PSM 212
*** 6.6 Case Study: The Internet Book Shop 214
*** 6.7 Review Questions 216

** Chapter 7 INTERNET APPLICATIONS 220
*** 7.1 Introduction 220
*** 7.2 Internet Concepts 221
**** 7.2.1 Uniform Resource Identifiers 221
**** 7.2.2 The Hypertext Transfer Protocol (HTTP) 223
*** 7.3 HTML Documents 226
*** 7.4 XML Documents 227
**** 7.4.1 Introduction to XML 228
**** 7.4.2 XML DTDs 231
**** 7.4.3 Domain-Specific DTDs 234
*** 7.5 The Three-Tier Application Architecture 236
**** 7.5.1 Single-Tier and Client-Server Architectures 236
**** 7.5.2 Three-Tier Architectures 239
**** 7.5.3 Advantages of the Three-Tier Architecture 241
*** 7.6 The Presentation Layer 242
**** 7.6.1 HTrvlL Forms 242
**** 7.6.2 JavaScript 245
**** 7.6.3 Style Sheets 247
*** 7.7 The Middle Tier
**** 7.7.1 CGI: The Common Gateway Interface
**** 7.7.2 Application Servers
**** 7.7.3 Servlets
**** 7.7.4 JavaServer Pages
**** 7.7.5 Maintaining State
*** 7.8 Case Study: The Internet Book Shop
*** 7.9 Review Questions

* Part III STORAGE AND INDEXING 271
** Chapter 8 OVERVIEW OF STORAGE AND INDEXING
*** 8.1 Data on External Storage
*** 8.2 File Organizations and Indexing
**** 8.2.1 Clustered Indexes
**** 8.2.2 Primary and Secondary Indexes
*** 8.3 Index Data Structures
**** 8.3.1 Hash-Based Indexing
**** 8.3.2 Tree-Based Indexing
*** 8.4 Comparison of File Organizations
**** 8.4.1 Cost Model
**** 8.4.2 Heap Files
**** 8.4.3 Sorted Files
**** 8.4.4 Clustered Files
**** 8.4.5 Heap File with Unclustered Tree Index
**** 8.4.6 Heap File With Unclustered Hash Index
**** 8.4.7 Comparison of I/O Costs
*** 8.5 Indexes and Performance Tuning
**** 8.5.1 Impact of the Workload
**** 8.5.2 Clustered Index Organization
**** 8.5.3 Composite Search Keys
**** 8.5.4 Index Specification in SQL:1999
**** 8.5.1 Impact of the Workload
**** 8.5.2 Clustered Index Orgnization
**** 8.5.3 Composite Search Keys
**** 8.5.4 Index Specification in SQL:1999
*** 8.6 Review Questions

** Chapter 9 STORING DATA: DISKS AND FILES
*** 9.1 The Memory Hierarchy
**** 9.1.1 Magnetic Disks
**** 9.1.2 Performance Implications of Disk Structure
*** 9.2 Redundant Arrays of Independent Disks
**** 9.2.1 Data Striping
**** 9.2.2 Redundancy
**** 9.2.3 Levels of Redundancy
**** 9.2.4 Choice of RAID Levels
*** 9.3 Disk Space Management
**** 9.3.1 Keeping Track of Free Blocks
**** 9.3.2 Using as File Systems to il/ranage Disk Space
*** 9.4 Buffer Manager
**** 9.4.1 Buffer Replacement Policies
**** 9.4.2 Buffer Management in DBMS versus OS
*** 9.5 Files of Records
**** 9.5.1 Implementing Heap Files
*** 9.6 Page Formats
**** 9.6.1 Fixed-Length Records
**** 9.6.2 Variable-Length Records
*** 9.7 Record Formats
**** 9.7.1 Fixed-Length Records
**** 9.7.2 Variable-Length Records
*** 9.8 Review Questions

** TODO Chapter 10 TREE-STRUCTURED INDEXING
   - Topics:
     + What is the intuition behind tree-structured indexes?
       Why are they good for range selections?

     + How does an ISAM index handle search, insert, and delete?

     + How does a B+ tree index handle search, insert, and delete?

     + What is the impact of duplicate key values on index implementation'?

     + What is key compression, and why is it important?

     + What is bulk-loading, and why is it important?

     + What happens to record identifiers when dynamic indexes are updated?

     + How does this affect clustered indexes?

   - Key concepts:
     + ISAM, static indexes, overflow pages, locking issues;

     + B+ trees, dynamic indexes, balance, sequence sets, node format;

     + B+ tree insert operation, node splits, delete operation, merge versus
       redistribution, minimum occupancy;

     + duplicates, overflow pages, including rids in search keys;

     + key compression;

     + bulk-loading;

     + effects of splits on rids in clustered indexes.

   - ISAM tree :: a static index structure
     + effective when the file is not frequently updated
     + unsuitable for files that grow and shrink a lot

     =TODO= 10.2

   - 

*** 10.1 Intuition For Tree Indexes
*** 10.2 Indexed Sequential Access Method (ISAM)
**** 10.2.1 Overflow Pages, Locking Considerations
*** 10.3 B+ Trees: A Dynamic Index Structure
**** 10.3.1 Format of a Node
     - The defect of /static structures of searching/ as the /ISAM index/:
       it suffers from the problem that _LONG overflow chains_ can develop as the
       file grows, leading to POOR performance.

     - B+ tree :: a kind of balanced tree =TOOD= =more details=
       + the internal nodes direct the search
       + the leaf nodes contain the data entries

     - Since the tree structure grows and shrinks dynamically,
       it is NOT feasible to allocate the leaf pages sequentially as in ISAM,
       where the set of primary leaf pages was static.

       + Solution:
         To retrieve all leaf pages efficiently, we have to link them using page
         pointers.

       + Implementation:
         By organizing them into a /doubly linked list/, we can easily traverse
         the sequence of leaf pages (sometimes called the /sequence set/) in
         EITHER direction. See Figure 10.7

     - The following are some of the _main characteristics_ of a /B+ tree/: 
       + Operations (insert, delete) on the tree keep it balanced.

       + A minimum occupancy of 50 percent is guaranteed for each node
         except the root if the deletion algorithm discussed in Section 10.6 is
         implemented.

         However, deletion is often implemented by _simply locating the data
         entry and removing it_, =WITHOUT= adjusting the tree as needed to
         guarantee the 50 percent occupancy, because files typically grow rather
         than shrink.

       + Searching for a record requires just a traversal from the root to the
         appropriate leaf. We refer to the length of a path from the root to a
         leaJ any leaf, because the tree is balanced as the height of the tree.

         For example,
         * a tree with ouly a leaf level and a single index level, such as the
           tree shown in Figure 10.9, has height 1,

         * a tree that has only the root node has height 0.

         Because of high fan-out, the height of a B+ tree is rarely more than 3
         or 4.

     - We will study B+ trees in which every node contains _m_ entries, where
       d \le{} m \le{} 2d. The value d is a parameter of the B+ tree, called the /order/
       of the tree, and is a measure of the capacity of a tree node.

       The /root node/ is the ONLY _exception_ to this requirement on the number
       of entries; for the root, it is simply required that 1 \le{} m \le{} 2d.

     - If a file of records is updated frequently and sorted access is important,
       maintaining a B+ tree index with data records stored as data entries is
       almost always superior to maintaining a sorted file.

       For the space overhead of storing the index entries, we obtain all the
       advantages of a sorted file plus efficient insertion and deletion
       algorithms. B+ trees typically maintain 67 percent space occupancy. B+
       trees are usually also preferable to ISAM indexing because inserts are
       handled gracefully without overflow chains. However, if the dataset size
       and distribution remain fairly static, overflow chains may not be a major
       problem. In this case, two factors favor ISAM: the leaf pages are
       allocated in sequence ( making scans over a large range more efficient
       than in a B+ in which pages are likely to out of sequence on disk over
       time, even if they were in sequence after bulk-loading), and the locking
       overhead ofISAM is lower than that for B+ trees. As a general rule,
       however, B+ trees are likely to perform better than ISAM.

**** 10.3.1 Format of a Node

*** 10.4 Search
*** 10.5 Insert
*** 10.6 Delete
*** 10.7 Duplicates
*** 10.8 B+ Trees in Practice
**** 10.8.1 Key Compression
**** 10.8.2 Bulk-Loading a B+ Tl'ee
**** 10.8.3 The Order Concept
**** 10.8.4 The Effect of Inserts and Deletes on Rids
*** 10.9 Review Questions

** Chapter 11 HASH-BASED INDEXING
*** 11.1 Static Hashing
**** 11.1.1 Notation and Conventions
*** 11.2 Extendible HCkshing
*** 11.3 Line~r Hashing
*** 11.4 Extendible vs. Linear Ha"lhing
*** 11.5 Review Questions

* Part IV QUERY EVALUATION
** Chapter 12 OVERVIEW OF QUERY EVALUATION
*** 12.1 The System Catalog
**** 12.1.1 Information in the Catalog
*** 12.2 Introduction to Operator Evaluation
**** 12.2.1 Three Common Techniques
**** 12.2.2 Access Paths
*** 12.3 Algorithms for Relational Operations
**** 12.3.1 Selection
**** 12.3.2 Projection
**** 12.3.3 Join
**** 12.3.4 Other Operations
*** 12.4 Introduction to Query Optimization
**** 12.4.1 Query Evaluation Plans
**** 12.4.2 Multi-operator Queries: Pipelined Evaluation
**** 12.4.3 The Iterator Interface
*** 12.5 Alternative Plans: A Motivating Example
**** 12.5.1 Pushing Selections
**** 12.5.2 Using Indexes
*** 12.6 What a Typical Optimizer Does
**** 12.6.1 Alternative Plans Considered
**** 12.6.2 Estimating the Cost of a Plan
*** 12.7 Review Questions
** Chapter 13 EXTERNAL SORTING
   - *Sorting in Commercial RDBMSs* =TODO=

*** DONE 13.1 When Does a DBMS Sort Data?
    CLOSED: [2017-12-04 Mon 17:12]
    Include (NOT be limited to) the following important ones:
    - Users may want answer in some order (Sec 5.2)

    - Sorting records is the first step in bulk loading a tree index (Sec 10.8.2)

    - It is useful for eliminating duplicate copies (Sec 14.3)

    - /join/ operation requires a sorting step (Sec 14.4.2)

*** DONE 13.2 A Simple Two-Way Merge Sort
    CLOSED: [2017-12-04 Mon 18:51]
    - When sorting a file, several sorted subfiles are typically generated in
      intermediate steps.

      In this chapter,
      + run :: each sorted subfile

    - If the number of pages in the input file is 2^{k}, for some k, then:
      + Pass 0 produces 2^{k} sorted runs of 2^0 page each,
      + Pass 1 produces 2^{k-1} sorted runs of 2^{2} page each,
      + Pass 2 produces 2^{k-2} sorted runs of 2^{2} page each,
      + ...
      + Pass k produces 2^{0} sorted runs of 2^{k} page.

    - Cost 2*N*(ceiling(log_2 N) + 1) I/O's.
      + Everytime read, sort, and write every pages.
        2I/O's for each page of N pages -- 2*N I/O's.

      + (ceiling(log_2 N) + 1) passes.

      In summary, 2*N*(ceiling(log_2 N) + 1) I/O's.

    - This algorithm requires just _THREE_ buffer pages in main memory.

      This means with this algorithm, even if we have more buffer space
      available, this simple algorithm does _NOT utilize it effectively_.

*** TODO 13.3 External Merge Sort
    - The intuition behind the generalized algorithm:
      _retain the basic structure of making multiple passes_ while _trying to
      MINIMIZE the number of passes._

    - _TWO_ Important modifications to the two-way merge sort algorithm:
      1. _In Pass 0_,
         read in _B pages_ (in Feifei's lecture this is ???) at a
         time and _sort internally_ to produce _celing(N/B)_ runs of _B_ pages
         each (except for the last run -- it may contain fewer pages).

         Figure 13.2 (use input file from Figure 13.4)

      2. In Passes i = 1, 2, ...,
         + *Settings*:
           * use _B - 1_ buffer pages for input
           * use the remaining (ONE) page for output;

         Hence, you do a _(B - 1)-way merge_ in each pass.

         Figure 13.5

    - Cost Comparison: =IMPORTANT=
      - Pass 0 (less important):
        N1 = ceiling(N Page / Buffer size in page)
           = ceiling(N / B)

        N1 =vs= N

      - Pass 1 (more important): (Assume _(B - 1)-way merge_) 
        ceiling(log_{B - 1} N1) + 1 =vs= ceiling(log_{2} N) + 1

        Since B is typically quite large, the savings can be substantial.

      - =TODO=

      - For large values of B, more sophisticated techniques can be used (_NOT_
        discussed here).

**** 13.3.1 Minimizing the Number of Runs

*** TODO 13.4 Minimizing I/O Cost versus Number of I/O's
**** 13.4.1 Blocked I/O
**** 13.4.2 Double Buffering
*** TODO 13.5 Using B+ Trees for Sorting
**** 13.5.1 Clustered Index
**** 13.5.2 Unclustered Index
*** TODO 13.6 Review Questions
** Chapter 14 EVALUATING RELATIONAL OPERATORS
*** 14.1 The' Selection Operation
**** 14.1.1 No Index, Unsorted Data
**** 14.1.2 No Index, Sorted Data
**** 14.1.3 B+ Tree Index
**** 14.1.4 Hash Index, Equality Selection
*** 14.2 General Selection Conditions
**** 14.2.1 CNF and Index Matching
**** 14.2.2 Evaluating Selections without Disjunction
**** 14.2.3 Selections with Disjunction
*** 14.3 The Projection Operation
**** 14.3.1 Projection Based on Sorting
**** 14.3.2 Projection Based on Hashing
**** 14.3.3 Sorting Versus Hashing for Projections
**** 14.3.4 Use of Indexes for Projections
*** 14.4 The Join Operation
**** 14.4.1 Nested Loops Join
**** 14.4.2 Sort-Merge Join
**** 14.4.3 Hash Join
**** 14.4.4 General Join Conditions
*** 14.5 The Set Operations
**** 14.5.1 Sorting for Union and Difference
**** 14.5.2 Hashing for Union and Difference
*** 14.6 Aggregate Operations
**** 14.6.1 Implementing Aggregation by Using an Index
*** 14.7 The Impact of Buffering
*** 14.8 Review Questions

** Chapter 15 A TYPICAL RELATIONAL QUERY OPTIMIZER 478
*** 15.1 Translating SQL Queries into Algebra 479
**** 15.1.1 Decomposition of a Query into Blocks 479
**** 15.1.2 A Query Block as a Relational Algebra Expression 481
*** 15.2 Estimating the Cost of a Plan 482
**** 15.2.1 Estimating Result Sizes 483
*** 15.3 Relational Algebra Equivalences 488
**** 15.3.1 Selections 488
**** 15.3.2 Projections 488
**** 15.3.3 Cross-Products and Joins 489
**** 15.3.4 Selects, Projects, and Joins 490
**** 15.3.5 Other Equivalences 491
*** 15.4 Enumeration of Alternative Plans 492
**** 15.4.1 Single-Relation Queries 492
**** 15.4.2 Multiple-Relation Queries 496
*** IS.5 Nested Subqueries 504
*** 15.6 The System R Optimizer 506
*** 15.7 Other Approaches to Query Optimization S07
*** 15.8 Review Questions 507

* Part V TRANSACTION MANAGEMENT
** Chapter 16 OVERVIEW OF TRANSACTION MANAGEMENT 519
*** 16.1 The ACID Properties 520
**** 16.1.1 Consistency and Isolation 521
**** 16.1.2 Atomicity and Durability 522
*** 16.2 Transactions and Schedules 523
*** 16.3 Concurrent Execution of Transactions 524
**** 16.3.1 rvlotivation for Concurrent Execution 524
**** 16.3.2 Serializability 525
**** 16.3.3 Anomalies Due to Interleaved Execution 526
**** 16.3.4 Schedules Involving Aborted Transactions 529
*** 16.4 Lock-Based Concurrency Control 530
**** 16.4.1 Strict Two-Phase Locking (Strict 2PL) 531
**** 16.4.2 Deadlocks 533
*** 16.5 Performance of Locking 533
*** 16.6 Transaction Support in SQL 535
**** 16.6.1 Creating and Terminating Transactions 535
**** 16.6.2 What Should We Lock? 537
**** 16.6.3 Transaction Characteristics in SQL 538
*** 16.7 Introduction to Crash Recovery 540
**** 16.7.1 Stealing Frames and Forcing Pages 541
**** 16.7.2 Recovery-Related Steps during Normal Execution 542
**** 16.7.3 Overview of ARIES 543
**** 16.7.4 Atomicity: Implementing Rollback 543
*** 16.8 Review Questions 544

** Chapter 17 CONCURRENCY CONTROL 549
*** 17.1 2PL, Serializability, and Recoverability 550
**** 17.1.1 View Serializability 553
*** 17.2 Introduction to Lock Management 553
**** 17.2.1 Implementing Lock and Unlock Requests 554
*** 17.3 Lock Conversions 555
*** 17.4 Dealing With Deadlocks 556
**** 17.4.1 Deadlock Prevention 558
*** 17.5 Specialized Locking Techniques 559
**** 17.5.1 Dynamic Databases and the Phantom Problem 560
**** 17.5.2 Concurrency Control in B+ Trees 561
**** 17.5.3 Multiple-Granularity Locking 564
*** 17.6 ConClurency Control without Locking 566
**** 17.6.1 Optimistic Concurrency Control 566
**** 17.6.2 Timestamp-Based Concurrency Control 569
**** 17.6.3 Multiversion Concurrency Control 572

** Chapter 18 CRASH RECOVERY
*** 18.1 Introduction to ARIES
*** 18.2 The Log
*** 18.3 Other Recovery-Related Structures
*** 18.4 The Write-Ahead Log Protocol
*** 18.5 Checkpointing
*** 18.6 Recovering from a System Crash
**** 18.6.1 Analysis Phase
**** 18.6.2 Redo Phase
**** 18.6.3 Undo Phase
*** 18.7 Media Recovery
*** 18.8 Other Approaches and Interaction with Concurrency Control
*** 18.9 Review Questions

* Part VI DATABASE DESIGN AND TUNING
** Chapter 19 SCHEMA REFINEMENT AND NORMAL FORMS 605
*** 19.1 Introduction to Schema Refinement 606
**** 19.1.1 Problems Caused by Redundancy 606
**** 19.1.2 Decompositions 608
**** 19.1.3 Problems Related to Decomposition 609
*** 19.2 Functional Dependencies 611
*** 19.3 Reasoning about FDs 612
**** 19.3.1 Closure of a Set of FDs 612
**** 19.3.2 Attribute Closure 614
*** 19.4 Normal Forms 615
**** 19.4.1 Boyce-Codd Normal Form 615
**** 19.4.2 Third Normal Form 617
*** 19.5 Properties of Decompositions 619
**** 19.5.1 Lossless-Join Decomposition 619
**** 19.5.2 Dependency-Preserving Decomposition 621
*** 19.6 Normalization 622
**** 19.6.1 Decomposition into BCNF 622
**** 19.6.2 Decomposition into 3NF 625
*** 19.7 Schema Refinement in Database Design 629
**** 19.7.1 Constraints on an Entity Set 630
**** 19.7.2 Constraints on a Relationship Set 630
**** 19.7.3 Identifying Attributes of Entities 631
**** 19.7.4 Identifying Entity Sets 6:33
*** 19.8 Other Kinds of Dependencies 633
**** 19.8.1 Multivalued Dependencies 634
**** 19.8.2 Fourth Normal Form 636
**** 19.8.3 Join Dependencies 638
**** 19.8.4 Fifth Normal Form 638
**** 19.8.5 Inclusion Dependencies 639
*** 19.9 Case Study: The Internet Shop 640
*** 19.10 Review Questions 642

** Chpater 20 PHYSICAL DATABASE DESIGN AND TUNING 649
*** 20.1 Introduction to Physical Database Design 650
**** 20.1.1 Database Workloads 651
**** 20.1.2 Physical Design and Tuning Decisions 652
**** 20.1.3 Need for Database Tuning 653
*** 20.2 Guidelines for Index Selection 653
*** 20.3 Basic Examples of Index Selection 656
*** 20.4 Clustering and Indexing 658
**** 20.4.1 Co-clustering Two Relations 660
*** 20.5 Indexes that Enable Index-Only Plans 662
*** 20.6 Tools to Assist in Index Selection 663
**** 20.6.1 Automatic Index Selection 663
**** 20.6.2 How Do Index Tuning Wizards Work? 664
*** 20.7 Overview of Database Tuning 667
**** 20.7.1 Tuning Indexes 667
**** 20.7.2 Tuning the Conceptual Schema 669
**** 20.7.3 Tuning Queries and Views 670
*** 20.8 Choices in Tuning the Conceptual Schema 671
**** 20.8.1 Settling for a Weaker Normal Form 671
**** 20.8.2 Denormalization 672
**** 20.8.3 Choice of Decomposition 672
**** 20.8.4 Vertical Partitioning of BCNF Relations 674
**** 20.8.5 Horizontal Decomposition 674
*** 20.9 Choices in Tuning Queries and Views 675
*** 20.10 Impact of Concurrency 678
**** 20.10.1 Reducing Lock Durations 678
**** 20.10.2 Reducing Hot Spots 679
*** 20.11 Case Study: The Internet Shop 680
**** 20.11.11\ming the Database 682
*** 20.12 DBMS Benchmarking 682
**** 20.12.1 Well-Known DBMS Benchmarks 683
**** 20.12.2 Using a Benchmark 684
*** 20.13 Review Questions 685

** Chapter 21 SECURITY AND AUTHORIZATION 692
*** 21.1 Introduction to Datab~"e Security 693
*** 21.2 Access Control 694
*** 21.3 Discretionary Access Control 695
**** 21.3.1 Grant and Revoke on Views and Integrity Constraints
*** 21.4 Mandatory Access Control
**** 21.4.1 Multilevel Relations and Polyinstantiation
**** 21.4.2 Covert Channels, DoD Security Levels
*** 21.5 Security for Internet Applications
**** 21.5.1 Encryption
**** 21.5.2 Certifying Servers: The SSL Protocol
**** 21.5.3 Digital Signatures
*** 21.6 Additional Issues Related to Security
**** 21.6.1 Role of the Database Administrator
**** 21.6.2 Security in Statistical Databases
*** 21.7 Design Case Study: The Internet Store
*** 21.8 Review Questions

* Part VII ADDITIONAL TOPICS
** Chapter 22 PARALLEL AND DISTRIBUTED DATABASES
*** 22.1 Introduction
*** 22.2 Architectures for Parallel Databases
*** 22.3 Parallel Query Evaluation
**** 22.3.1 Data Partitioning
**** 22.3.2 Parallelizing Sequential Operator Evaluation Code
*** 22.4 Parallelizing Individual Operations
**** 22.4.1 Bulk Loading and Scanning
**** 22.4.2 Sorting
**** 22.4.3 Joins
*** 22.5 Parallel Query Optimization
*** 22.6 Introduction to Distributed Databases
**** 22.6.1 Types of Distributed Databases
*** 22.7 Distributed DBMS Architectures
**** 22.7.1 Client-Server Systems
**** 22.7.2 Collaborating Server Systems
**** 22.7.3 Midclleware Systems
*** 22.8 Storing Data in a Distributed DBMS
**** 22.8.1 Fragmentation
**** 22.8.2 Replication
*** 22.9 Distributed Catalog Management
**** 22.9.1 Naming Objects
**** 22.9.2 Catalog Structure
**** 22.9.3 Distributed Data Independence
*** 22.10 Distributed Query Processing
**** 22.10.1 Nonjoin Queries in a Distributed DBMS
**** 22.10.2 Joins in a Distributed DBMS
**** 22.10.3 Cost-Based Query Optimization 749
*** 22.11 Updating Distributed Data 750
**** 22.11.1 Synchronous Replication 750
**** 22.11.2 Asynchronous Replication 751
*** 22.12 Distributed Transactions 755
*** 22.13 Distributed Concurrency Control 755
**** 22.13.1 Distributed Deadlock 756
*** 22.14 Distributed Recovery 758
**** 22.14.1 Normal Execution and Commit Protocols 758
**** 22.14.2 Restart after a Failure 760
**** 22.14.3 Two-Phase Commit Revisited 761
**** 22.14.4 Three-Phase Commit 762
*** 22.15 Review Questions 763

** Chapter 23 OBJECT-DATABASE SYSTEMS 772
*** 23.1 Motivating Example 774
**** 23.1.1 New Data Types 775
**** 23.1.2 Manipulating the New Data 777
*** 23.2 Structured Data Types 779
**** 23.2.1 Collection Types 780
*** 23.3 Operations on Structured Data 781
**** 23.3.1 Operations on Rows 781
**** 23.3.2 Operations on Arrays 781
**** 23.3.3 Operations on Other Collection Types 782
**** 23.3.4 Queries Over Nested Collections 783
*** 23.4 Encapsulation and ADTs 784
**** 23.4.1 Defining Methods 785
*** 23.5 Inheritance 787
**** 23.5.1 Defining Types with Inheritance 787
**** 23.5.2 Binding Methods 788
**** 23.5.3 Collection Hierarchies 789
*** 23.6 Objects, aIDs, and Reference Types 789
**** 23.6.1 Notions of Equality 790
**** 23.6.2 Dereferencing Reference Types 791
**** 23.6.3 URLs and OIDs in SQL:1999 791
*** 23.7 Database Design for an ORDBMS 792
**** 23.7.1 Collection Types and ADTs 792
**** 23.7.2 Object Identity 795
**** 23.7.3 Extending the ER Model 796
**** 23.7.4 Using Nested Collections 798
*** 23.8 ORDBMS Implementation Challenges 799
**** 23.8.1 Storage and Access Methods 799
**** 23.8.2 Query Processing 801
**** 23.8.3 Query Optimization
*** 23.9 OODBMS
**** 23.9.1 The ODMG Data Model and ODL
**** 23.9.2 OQL
*** 23.10 Comparing RDBMS, OODBl'vlS, and ORDBMS
**** 23.10.1 RDBMS versus ORDBMS
**** 23.10.2 OODBMS versus ORDBMS: Similarities
**** 23.10.3 OODBMS versus ORDBMS: Differences
*** 23.11 Review Questions

** Chapter 24 DEDUCTIVE DATABASES 817
*** 24.1 Introduction to Recursive Queries 818
**** 24.1.1 Datalog 819
*** 24.2 Theoretical Foundations 822
**** 24.2.1 Least Model Semantics 823
**** 24.2.2 The Fixpoint Operator 824
**** 24.2.3 Safe Datalog Programs 825
**** 24.2.4 Least Model = Least Fixpoint 826
*** 24.3 Recursive Queries with Negation 827
**** 24.3.1 Stratification 828
*** 24.4 From Datalog to SQL 831
*** 24.5 Evaluating Recursive Queries 834
**** 24.5.1 Fixpoint Evaluation without Repeated Inferences 835
**** 24.5.2 Pushing Selections to Avoid Irrelevant Inferences 837
**** 24.5.3 The Magic Sets Algorithm 838
*** 24.6 Review Questions 841

** Chapter 25 DATA WAREHOUSING AND DECISION SUPPORT 846
*** 25.1 Introduction to Decision Support 848
*** 25.2 OLAP: Multidimensional Data Model 849
**** 25.2.1 Multidimensional Database Design 853
*** 25.3 Multidimensional Aggregation Queries 854
**** 25.3.1 ROLLUP and CUBE in SQL:1999 856
*** 25.4 Window Queries in SQL:1999 859
**** 25.4.1 Framing a Window 861
**** 25.4.2 New Aggregate Functions 862
*** 25.5 Findipg Answers Quickly 862
**** 25.5.1 Top N Queries 863
**** 25.5.2 Online Aggregation 864
*** 25.6 Implementation Techniques for OLAP 865
**** 25.6.1 Bitmap Indexes 866
**** 25.6.2 Join Indexes 868
**** 25.6.3 File Organizations 869
*** 25.7 Data 'Warehousing
**** 25.7.1 Creating and Ivlaintaining a Warehouse
*** 25.8 Views and Decision Support
**** 25.8.1 Views, OLAP, and \Varehousing
**** 25.8.2 Queries over Views
*** 25.9 View Materialization
**** 25.9.1 Issues in View Materialization
*** 25.10 Maintaining Materialized Views
**** 25.10.1 Incremental View Maintenance
**** 25.10.2 Maintaining Warehouse Views
**** 25.10.3 When Should We Synchronize Views?
*** 25.11 Review Questions
 
** Chapter 26 DATA MINING 889
*** 26.1 Introduction to Data Mining 890
**** 26.1.1 The Knowledge Discovery Process 891
*** 26.2 Counting Co-occurrences 892
**** 26.2.1 Frequent Itemsets 892
**** 26.2.2 Iceberg Queries 895
*** 26.3 Mining for Rules 897
**** 26.3.1 Association Rules 897
**** 26.3.2 An Algorithm for Finding Association Rules 898
**** 26.3.3 Association Rules and ISA Hierarchies 899
**** 26.3.4 Generalized Association Rules 900
**** 26.3.5 Sequential Patterns 901
**** 26.3.6 The Use of Association Rules for Prediction 902
**** 26.3.7 Bayesian Networks 903
**** 26.3.8 Classification and Regression Rules 904
*** 26.4 Tree-Structured Rules 906
**** 26.4.1 Decision Trees 907
**** 26.4.2 An Algorithm to Build Decision Trees 908
*** 26.5 Clustering 911
**** 26.5.1 A Clustering Algorithm 912
*** 26.6 Similarity Search over Sequences 913
**** 26.6.1 An Algorithm to Find Similar Sequences 915
*** 26.7 Incremental Mining and Data Streams 916
**** 26.7.1 Incremental Maintenance of Frequent Itemsets 918
*** 26.8 Additional Data Mining Tasks 920
*** 26.9 Review Questions 920
** Chapter 27 INFORMATION RETRIEVAL AND XML DATA 926
***  27.1 Colliding Worlds: Databa'3es, IR, and XML
****  27.1.1 DBMS versus IR Systems
***  27.2 Introduction to Information Retrieval 929
****  27.2.1 Vector Space Model 930
****  27.2.2 TFjIDF Weighting of Terms 931
****  27.2.3 Ranking Document Similarity 932
****  27.2.4 :Measuring Success: Precision and Recall 934
***  27.3 Indexing for Text Search 934
****  27.3.1 Inverted Indexes 935
****  27.3.2 Signature Files 937
***  27.4 Web Search Engines 939
****  27.4.1 Search Engine Architecture 939
****  27.4.2 Using Link Information 940
***  27.5 Managing Text in a DBMS 944
****  27.5.1 Loosely Coupled Inverted Index 945
***  27.6 A Data Model for XML 945
****  27.6.1 Motivation for Loose Structure 945
****  27.6.2 A Graph Model 946
***  27.7 XQuery: Querying XML Data 948
****  27.7.1 Path Expressions 948
****  27.7.2 FLWR Expressions 949
****  27.7.3 Ordering of Elements 951
****  27.7.4 Grouping and Generation of Collection Values 951
***  27.8 Efficient Evaluation of XML Queries 952
****  27.8.1 Storing XML in RDBMS 952
****  27.8.2 Indexing XML Repositories 956
***  27.9 Review Questions 959

** Chapter 28 SPATIAL DATA MANAGEMENT 968
***  28.1 Types of Spatial Data and Queries 969
***  28.2 Applications Involving Spatial Data 971
***  28.3 Introduction to Spatial Indexes 973
****  28.3.1 Overview of Proposed Index Structures 974
***  28.4 Indexing Based on Space-Filling Curves 975
****  28.4.1 Region Quad Trees and Z-Ordering: Region Data 976
****  28.4.2 Spatial Queries Using Z-Ordering 978
***  28.5 Grid Files 978
****  28.5.1 Adapting Grid Files to Handle Regions 981
***  28.6 R Trees: Point and Region Data 982
****  28.6.1 Queries 983
****  28.6.2 Insert and Delete Operations 984
****  28.6.3 Concurrency Control 986
****  28.6.4 Generalized Search Trees 987
***  28.7 Issues in High-Dimensional Indexing 988
***  28.8 Review Questions 988

** Chapter 29 FURTHER READING
***  29.1 Advanced Tl"ansaction Processing
****  29.1.1 Transaction Processing Monitors
****  29.1.2 New Transaction Models
****  29.1.3 Real-Time DBlvISs
***  29.2 Data Integration
***  29.3 Mobile Databases
***  29.4 Main Memory Databases
***  29.5 Multimedia Databases
***  29.6 Geographic Information Systems
***  29.7 Temporal Databases
***  29.8 Biological Databases
***  29.9 Information Visualization
***  29.10 Summary

** Chapter 30 THE MINIBASE SOFTWARE
***  30.1 What Is Available
***  30.2 Overview of Minibase Assignments
***  30.3 Acknowledgments

* REFERENCES
* AUTHOR INDEX
* SUBJECT INDEX
* Lecture Notes to CS6530 Advanced Database System (University of Utah)
  - B :: block size

  - M :: memory size

  - N :: data size

  - (From wiki) the operating system retrieves data from /secondary storage/ in
    /same-size blocks/ called /pages/.
