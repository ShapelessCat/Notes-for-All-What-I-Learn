#+TITLE: The Elements of Computing Systems
#+SUBTITLE: Building a Modern Computer from First Principles
#+VERSION: 2021, 2nd
#+AUTHOR: Noam Nisan, Shimon Schocken
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Preface - ix
* TODO I. Hardware
** 1 Boolean Logic
*** 1.1 Boolean Algebra
***** Boolean Functions
***** Truth Tables and Boolean Expressions

*** 1.2 Logic Gates
***** Primitive and Composite Gates

*** 1.3 Hardware Construction
**** 1.3.1 Hardware Description Language
***** Testing

**** 1.3.2 Hardware Simulation

*** 1.4 Specification
**** 1.4.1 Nand
**** 1.4.2 Basic Logic Gates
**** 1.4.3 Multi-Bit Versions of Basic Gates
**** 1.4.4 Multi-Way Versions of Basic Gates

*** 1.5 Implementation
**** 1.5.1 Behavioral Simulation
**** 1.5.2 Hardware Implementation
**** 1.5.3 Built-In Chips

*** 1.6 Project
*** 1.7 Perspective

** 2 Boolean Arithmetic
*** 2.1 Arithmetic Operations
*** 2.2 Binary Numbers
*** 2.3 Binary Addition
*** 2.4 Signed Binary Numbers
*** 2.5 Specification
**** 2.5.1 Adders
**** 2.5.2 The Arithmetic Logic Unit

*** 2.6 Implementation
*** 2.7 Project
*** 2.8 Perspective

** 3 Memory
*** 3.1 Memory Devices
*** 3.2 Sequential Logic
**** 3.2.1 Time Matters
**** 3.2.2 Flip-Flops
**** 3.2.3 Combinational and Sequential Logic

*** 3.3 Specification
**** 3.3.1 Data Flip-Flop
**** 3.3.2 Registers
**** 3.3.3 Random Access Memory
**** 3.3.4 Counter

*** 3.4 Implementation
**** 3.4.1 Data Flip-Flop
**** 3.4.2 Registers
**** 3.4.3 RAM
**** 3.4.4 Counter

*** 3.5 Project
*** 3.6 Perspective

** 4 Machine Language - 57
*** 4.1 Machine Language: Overview
**** 4.1.1 Hardware Elements
**** 4.1.2 Languages
**** 4.1.3 Instructions

*** 4.2 The Hack Machine Language
**** 4.2.1 Background
**** 4.2.2 Program Example
**** 4.2.3 The Hack Language Specification
***** The A-instruction
***** The C-instruction

**** 4.2.4 Symbols
**** 4.2.5 Input/Output Handling
**** ???
**** 4.2.7 Syntax Conventions and File Formats

*** 4.3 Hack Programming
*** 4.4 Project
*** 4.5 Perspective

** 5 Computer Architecture - 79
*** 5.1 Computer Architecture Fundamentals
**** 5.1.1 The Stored Program Concept
**** 5.1.2 The von Neumann Architecture
**** 5.1.3 Memory
**** 5.1.4 Central Processing Unit
**** 5.1.5 Input and Output

*** 5.2 The Hack Hardware Platform: Specification
**** 5.2.1 Overview
**** 5.2.2 Central Processing Unit
**** 5.2.3 Instruction Memory
**** 5.2.4 Input/Output
**** 5.2.5 Data Memory
**** 5.2.6 Computer

*** 5.3 Implementation
**** 5.3.1 The Central Processing Unit
**** 5.3.2 Memory
**** 5.3.3 Computer

*** 5.4 Project
*** 5.5 Perspective

** 6 Assembler - 103
*** 6.1 Background
*** 6.2 The Hack Machine Language Specification
**** 6.2.1 Programs
**** 6.2.2 Symbols
**** 6.2.3 Syntax Conventions

*** 6.3 Assembly-to-Binary Translation
**** 6.3.1 Handling Instructions
**** 6.3.2 Handling Symbols

*** 6.4 Implementation
**** 6.4.1 Developing a Basic Assembler
***** The Parser
***** The Code Module
***** The Hack Assembler

**** 6.4.2 Completing the Assembler
***** The Symbol Table

*** 6.5 Project
*** 6.6 Perspective

* II. Software
*** II.1 A Taste of Jack Programming
*** II.2 Program Compilation

** TODO 7 Virtual Machine I: Processing - 121
*** 7.1 The Virtual Machine Paradigm
*** 7.2 Stack Machine
**** 7.2.1 Push and Pop
**** 7.2.2 Stack Arithmetic
**** 7.2.3 Virtual Memory Segments

*** 7.3 VM Specification, Part I
*** 7.4 Implementation
**** 7.4.1 Standard VM Mapping on the Hack Platform, Part I
***** Memory Segments Mapping

**** 7.4.2 The VM Emulator
**** 7.4.3 Design Suggestions for the VM Implementation
***** Program Structure
***** The Parser
***** The CodeWriter
***** The VM Translator
***** Implementation Tips

*** 7.5 Project
**** Testing and Implementation Stages

*** 7.6 Perspective

** TODO 8 Virtual Machine II: Control - 153
*** 8.1 High-Level Magic
*** 8.2 Branching
*** 8.3 Functions
*** 8.4 VM Specification, Part II
***** Branching Commands
***** Function Commands
***** VM Program

*** 8.5 Implementation
**** 8.5.1 Function Call and Return
**** 8.5.2 Standard VM Mapping on the Hack Platform, Part II
**** 8.5.3 Design Suggestions for the VM Implementation
***** The VMTranslator
***** The Parser
***** The CodeWriter

*** 8.6 Project
**** Testing and Implementation Stages
**** Implementation Tips

*** 8.7 Perspective

** 9 High-Level Language - 173
** 10 Compiler I: Syntax Analysis - 199
** 11 Compiler II: Code Generation - 223
** 12 Operating System - 247
** 13 More Fun to Go - 277

* Appendices
** Appendix 1: Boolean Function Synthesis
** Appendix 2: Hardware Description Language
** Appendix 3: Test Description Language
** Appendix 4: The Hack Chip Set
** Appendix 5: The Hack Character Set
** Appendix 6: The Jack OS API

* Index - 315
