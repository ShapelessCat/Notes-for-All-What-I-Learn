#+TITLE: Essential Play
#+AUTHOR: Dave Gurnell and Noel Welsh
#+VERSION: 1.0
#+COPYRIGHT: April 2015 -
#+PUBLISHER: underscore
#+STARTUP: overview
#+STARTUP: entitiespretty

* DONE Introduction - 5
  CLOSED: [2018-11-20 Tue 20:46]
  - This book is for beginner-to-intermediate Scala developers

  - Play 2.3

  - Your gain from this course:
    + /Routing/, /controllers/, and /actions/
    + *Manipulating* /requests/ and /responses/
    + *Generating* HTML
    + *Parsing* and *validating* /form data/
    + *Reading* and *writing* JSON
    + /Asynchronous request/ *handling*
    + *Calling* EXTERNAL web services

** TODO Conventions Used in This Book - 5
*** Typographical Conventions - 5
*** Source Code - 5
*** Callout Boxes - 6

* DONE 1 Getting Started - 7
  CLOSED: [2018-11-21 Wed 01:34]
** TODO 1.1 Installing the Exercises - 7
*** 1.1.1 Other Exercises in this Book - 8

** TODO 1.2 Installing SBT - 9
*** 1.2.1 How Does SBT Work? - 9
*** 1.2.2 Flavours of SBT - 10

** TODO 1.3 Using SBT - 10
*** 1.3.1 Interative and Batch Modes - 11
*** 1.3.2 Common SBT Commands - 12
*** 1.3.3 Comiling and Cleaning Code - 12
*** 1.3.4 Watch Mode - 14
*** 1.3.5 Running a Development Web Server - 15
**** 1.3.5.1 Running Unit Tests - 16

*** 1.3.6 Packaging and Deploying the Application - 17
*** 1.3.7 Working With Eclipse - 18
*** 1.3.8 Working With Intellij IDEA - 18
*** 1.3.9 Configuring SBT - 18

* TODO 2 The Basics - 19
** TODO 2.1 Directory Structure - 19
** TODO 2.2 Actions, Controllers, and Routes - 20
*** TODO 2.2.1 Hello, World! - 20
*** DONE 2.2.2 The Anatomy of a Controller - 21
    CLOSED: [2018-11-21 Wed 02:36]
    - In the example above, /controller/ comes from _TWO_ places:
      + the ~play.api.mvc~ package; 
      + the ~play.api.mvc.Controller~ /trait/.

    - ~Controller~'s and ~Action~'s have different lifetime:
      + ~Controller~'s
        * created when our application boots
        * persist until our application shuts down.

      + ~Action~'s are created and executed in response to incoming ~Request~'s
        and have a much shorter lifespan.

    - Play passes parameters from our routes to the /method/ that creates the
      ~Action~, not to the action itself.

    - Each of the ~Action~, in our example, creates an ~Ok~ response containing
      a simple message.

    - ~Ok~ is a _helper object_ inherited from ~Controller~.
      It has an ~apply~ /method/ that creates ~Result~'s with /HTTP status/ 200.

      The actual return type of ~Ok.apply~ is ~play.api.mvc.Result~.

*** DONE 2.2.3 Take Home Points - 21
    CLOSED: [2018-11-21 Wed 02:40]
    - The backbone of a Play web applica on is made up of ~Action~'s, ~Controller~'s,
      and /routes/:
      + ~Action~'s are *functions* FROM ~Request~'s TO ~Result~'s;

      + ~Controller~'s are *COLLECTIONS* of /action-producing methods/;

      + ~Route~'s *map* incoming ~Request~'s to ~Action~-producing method calls
        on our ~Controller~'s.

    - We typically place controllers in a ~Controller~'s /package/ in the
      =app/controllers= folder.

      ~Routes~ go in the =conf/routes= file (_NO filename extension_).
      =TODO=
      In the next section we will take a closer look at =routes=.

*** TODO 2.2.4 Exercise: Time is of the Essence - 21

** TODO 2.3 Routes in Depth - 22
*** 2.3.1 Path Parameters - 23
*** 2.3.2 Matching Requests to Routes - 23
*** 2.3.3 Query Parameters - 24
*** 2.3.4 Typed Parameters - 25
*** 2.3.5 Reverse Routing - 26
*** 2.3.6 Take Home Points - 27
*** 2.3.7 Exercise: Calculator-as-a-Service - 27

** TODO 2.4 Parsing Requests - 28
*** 2.4.1 Request Bodies - 28
*** 2.4.2 Headers and Cookies - 30
*** 2.4.3 Methods and URIs - 31
*** 2.4.4 Take Home Points - 31

** TODO 2.5 Constructing Results - 31
*** 2.5.1 Setting The Status Code - 32
*** 2.5.2 Adding Content - 32
*** 2.5.3 Tweaking the Result - 33
*** 2.5.4 Take Home Points - 34
*** 2.5.5 Exercise: Comma Separated Values - 34

** TODO 2.6 Handling Failure - 35
*** 2.6.1 Compilation Errors - 35
*** 2.6.2 Runtime Errors - 36
*** 2.6.3 Routing Errors - 37
*** 2.6.4 Take Home Points - 38

** TODO 2.7 Extended Exercise: Chat Room Part 1 - 38
*** 2.7.1 Application Structure - 38
*** 2.7.2 Completing the Exercise - 40
*** 2.7.3 Chat Services - 40
*** 2.7.4 Auth Services - 40
*** 2.7.5 Controllers - 41
*** 2.7.6 Exercise Summary - 41

* TODO 3 HTML and Forms - 43
** TODO 3.1 Twirl Templates - 43
*** 3.1.1 A First Template - 43
*** 3.1.2 File Names and Compiled Names - 44
*** 3.1.3 Parameters and Expressions - 44
**** 3.1.3.1 Simple Expressions - 45
**** 3.1.3.2 Wrapped Expressions - 45
**** 3.1.3.3 Method Calls - 46
**** 3.1.3.4 Conditionals - 46
**** 3.1.3.5 Match Expressions - 46
**** 3.1.3.6 For-Comprehensions - 47
**** 3.1.3.7 Pre-Defined Helpers - 47

*** 3.1.4 Nesting Templates - 47
*** 3.1.5 Take Home Points - 48
*** 3.1.6 Exercise: Much Todo About Nothing - 48

** TODO 3.2 Form Handling - 48
*** 3.2.1 ~Forms~ and ~Mappings~ - 49
*** 3.2.2 Handling Form Data - 50
*** 3.2.3 Form Validation - 51
*** 3.2.4 Take Home Points - 51

** TODO 3.3 Generating Form HTML - 51
*** 3.3.1 Forms and Inputs - 51
*** 3.3.2 Pre-Filling Forms - 52
*** 3.3.3 Displaying Validation Errors - 53
*** 3.3.4 Customising the HTML - 54
*** 3.3.5 Take Home Points - 55
*** 3.3.6 Exercise: A Simple Formality - 55

** TODO 3.4 Serving Static Assets - 56
*** 3.4.1 The ~Assets~ Controller - 56
*** 3.4.2 Compiling Assets - 56

** TODO 3.5 Extended Exercise: Chat Room Part 2 - 56
*** 3.5.1 The Login Page - 57
*** 3.5.2 The Chat Page - 57

* TODO 4 Working with JSON - 59
** TODO 4.1 Modelling JSON - 59
*** 4.1.1 Representing JSON in Scala - 59
*** 4.1.2 JSON ~Requests~ and ~Results~ - 61
*** 4.1.3 Deconstructing and Traversing JSON Data - 61
**** 4.1.3.1 Pattern Matching - 62
**** 4.1.3.2 Traversal Methods - 62
**** 4.1.3.3 Parsing Methods - 63
**** 4.1.3.4 Putting It All Together - 64

*** 4.1.4 Take Home Points - 64

** TODO 4.2 Writing JSON - 64
*** 4.2.1 Meet ~Writes~ - 65
*** 4.2.2 Implicit ~Writes~ - 65
*** 4.2.3 The ~Json.toJson~ Method - 66
*** 4.2.4 Take Home Points - 67

** TODO 4.3 Reading JSON - 67
*** 4.3.1 Meet ~Reads~ - 67
*** 4.3.2 Embracing Failure - 68
*** 4.3.3 Errors and ~JsPaths~ - 68
*** 4.3.4 Take Home Points - 70

** TODO 4.4 JSON Formats - 71
*** 4.4.1 Meet ~Format~ - 71
*** 4.4.2 Take Home Points - 71
*** 4.4.3 Exercise: Message in a Bottle - 71

** TODO 4.5 Custom Formats: Part 1 - 72
*** 4.5.1 Writing Formats by Hand - 72
*** 4.5.2 Take Home Points - 73
*** 4.5.3 Exercise: Red Light, Green Light - 73
 
** TODO 4.6 Custom Formats: Part 2 - 73
*** 4.6.1 Using Play's Format DSL - 74
**** 4.6.1.1 Dissecting the DSL - 74
**** 4.6.1.2 Applying the DSL to a Java Class - 77

*** 4.6.2 Take Home Points - 77
*** 4.6.3 Exercise: A Dash of Colour - 78

** TODO 4.7 Custom Formats: Part 3 - 78
*** 4.7.1 ~OFormats~ and ~OWrites~ - 78
*** 4.7.2 Handling Type Hierarchies - 79
*** 4.7.3 Take Home Points - 79
*** 4.7.4 Exercise: Stable Codebase - 80

** TODO 4.8 Handling Failure - 80
*** 4.8.1 The ~Global~ Object - 80
*** 4.8.2 Custom Routing Error Pages - 80
*** 4.8.3 Custom Applica on Error Pages - 81
*** 4.8.4 Other Methods - 81
*** 4.8.5 Take Home Points - 82

** TODO 4.9 Extended Exercise: Chat Room Part 3 - 82
*** 4.9.1 Overview of the API - 82
*** 4.9.2 The ~login~ Endpoint - 83
*** 4.9.3 The ~whoami~ Endpoint - 84
*** 4.9.4 The ~messages~ and ~chat~ Endpoint - 84

* TODO 5 Async and Concurrency - 85
** TODO 5.1 ~Future~'s - 85
*** 5.1.1 The Ultimate Answer - 85
*** 5.1.2 Composing ~Future~'s - 86
**** 5.1.2.1 ~map~ - 86
**** 5.1.2.2 ~flatMap~ - 87
**** 5.1.2.3 Wait... ~Future~ is a Monad? - 88

*** 5.1.3 ~Future.sequence~ - 89
*** 5.1.4 Take Home Points - 90
*** 5.1.5 Exercise: The Value of (Con)Currency - 90

** TODO 5.2 Thread Pools and ~ExecutionContext~'s - 91
*** 5.2.1 ~ExecutionContext~'s - 91
*** 5.2.2 Play's ~ExecutionContext~ - 93
*** 5.2.3 Take Home Points - 93

** TODO 5.3 Asynchronous Actions - 93
*** 5.3.1 Synchronous vs Asynchronous Actions - 93
*** 5.3.2 ~Action.async~ - 94
*** 5.3.3 Blocking I/O - 95
*** 5.3.4 Take Home Points - 95

** TODO 5.4 Calling Remote Web Services - 95
*** 5.4.1 Using Play WS - 95
*** 5.4.2 A Complete Example - 96
*** 5.4.3 Take Home Points - 97

** TODO 5.5 Exercise: Oh, The Weather Outside is Frightful! - 97
** TODO 5.6 Handling Failure - 98
*** 5.6.1 Failed Futures - 98
*** 5.6.2 Transforming Failures - 99
**** 5.6.2.1 ~recover~ - 99
**** 5.6.2.2 ~recoverWith~ - 99
**** 5.6.2.3 ~transform~ - 100

*** 5.6.3 Creating Failures - 100
*** 5.6.4 Failures in For-Comprehensions - 100
*** 5.6.5 Take Home Points - 100

** TODO 5.7 Extended Exercise: Chat Room Part 4 - 101
*** 5.7.1 Directory and Project Structure - 101
*** 5.7.2 Using SBT - 101
*** 5.7.3 Auth API - 102
*** 5.7.4 Auth API Client - 103
*** 5.7.5 Chat API - 103
*** 5.7.6 Chat API Client - 104
*** 5.7.7 Putting it All Togehter - 104

* TODO 6 Summary - 105
* TODO A Solutions to Exercises - 107
** TODO A.1 The Basics - 107
*** A.1.1 Solution to: Time is of the Essence - 107
*** A.1.2 Solution to: Calculator-as-a-Service - 108
*** A.1.3 Solution to: Comma Separated Values - 110
*** A.1.4 Solution to: Chat Services - 111
*** A.1.5 Solution to: Auth Services - 111
*** A.1.6 Solution to: Controllers - 112

** TODO A.2 HTML and Forms - 113
*** A.2.1 Solution to: Much Todo About Nothing - 113
*** A.2.2 Solution to: A Simple formality - 114
*** A.2.3 Solution to: The Login Page - 116
*** A.2.4 Solution to: The Chat Page - 117
*** A 2.5 Solution to: The Chat Page Part 2 - 117

** TODO A.3 Working with JSON - 119
*** A.3.1 Solution to: Message in a Bottle - 119
*** A.3.2 Solution to: Red Light, Green Light - 119
*** A.3.3 Solution to: A Dash of Colour - 120
*** A.3.4 Solution to: Stable Codebase - 120
*** A.3.5 Solution to: The login Endpoint - 120
*** A.3.6 Solution to: The whoami Endpoint - 121
*** A.3.7 Solution to: The messages and chat Endpoint - 122

** TODO A.4 Async and Concurrency - 122
*** A.4.1 Solution to: The Value of (Con)Currency - 122
*** A.4.2 Solution to: The Value of (Con)Currency Part 2 - 123
*** A.4.3 Solution to: Oh, The Weather Outside is Frigh ul! - 124
*** A.4.4 Solution to: Auth API Client - 125
*** A.4.5 Solution to: Chat API - 126
*** A.4.6 Solution to: Chat API Client - 127
