#+TITLE: Play documentation
#+VERSION:  2.8.x
#+STARTUP: overview
#+STARTUP: entitiespretty

* Home
* Latest release
** What's new in Play 2.8?
** Play 2.8 Migration Guide
** Other Play releases

* TODO Getting started
** 1. What is Play?
** 2. Play Requirements
*** Verifying and installing Java
*** Verifying and installing sbt
*** Congratulations!

** 3. Learning from Play Examples
** 4. Creating a New Application
** 5. Anatomy of a Play application
*** The Play application layout
*** The =app/= directory
*** The =public/= directory
*** The =conf/= directory
*** The =lib/= directory
*** The =build.sbt/= file
*** The =project/= directory
*** The =target/= directory
*** Typical =.gitignore/= file
*** Default sbt layout

** 6. Using the Play console
*** Single commands
*** Interactive mode
*** Development mode
*** Compiling only
*** Testing options
*** Launch the Scala console
*** Debugging
*** Using sbt features
*** Using the play commands directly
*** Getting help

** 7. Setting-up your preferred IDE
*** Eclipse
**** Setup sbteclipse
**** Generate configuration

*** IntelliJ IDEA
**** Navigate from an error page to the source code

*** NetBeans
**** Generate configuration

*** ENSIME
**** Install ENSIME
**** Generate configuration
**** Start ENSIME
**** More Information

*** All Scala Plugins if needed

* TODO Hello World Tutorial
** 1. Hello World Tutorial
*** Starting the project
*** Introduction to Play

** 2. Play Application Overview
*** Explore the project

** 3. Implementing Hello World
*** 1. Create the Hello World page
*** 2. Add an action method
*** 3. Define a route
*** 4. Customize the greeting
*** Summary

** 4. Play Tutorials
*** Java
*** Scala
*** Third Party Tutorials and Templates
**** 2.6.x
***** Play Framework Tutorials and other contents

**** 2.5.x
***** Play Framework Tutorial Video Series
***** Dependency Injection
***** Akka Streams
***** Database
***** Forms and Validators
***** REST APIs
***** Sub-projects
***** Upgrading

**** 2.4.x
***** Semisafe
***** Minimal Play
***** Dependency Injection
***** REST APIs
***** Slick
***** RethinkDB
***** Forms
***** AngularJS, RequireJS and sbt-web
***** React JS

**** 2.3.x
***** REST APIs
***** Anorm
***** Forms

**** 2.2.x
***** Advanced Routing
***** Path Bindables
***** Templates
***** User Interface
***** Play in Practice

* TODO Working with Play
** TODO 1. Play for Java developers
*** 1.1 Main concepts
**** Section contents
**** Configuration API
**** HTTP programming
**** Asynchronous HTTP programming
**** The Twirl template engine
**** Form submission and validation
**** Working with Json
**** Working with XML
**** Handling file upload
**** Accessing an SQL database
**** Using the Cache
**** Calling REST APIs with Play WS
**** Integrating with Akka
**** Internationalization with Messages
**** Dependency Injection
**** Application Settings
**** Testing your application
**** Logging

*** 1.2 Advanced topics
**** Section contents
**** Advanced routing
**** Extending Play
**** Embedding Play

** TODO 2. Play for Scala developers
*** 2.1 Main concepts
**** Configuration API
***** 1. The Configuration API

**** HTTP programming
***** 1. Actions, Controllers and Results
***** 2. HTTP Routing
***** 3. Manipulating results
***** 4. Session and Flash scopes
***** 5. Body parsers
***** 6. Actions composition
***** 7. Content negotiation
***** 8. Handling errors

**** Asynchronous HTTP programming
***** 1. Asynchronous results
***** 2. Streaming HTTP responses
***** 3. Comet
***** 4. WebSockets

**** The Twirl template engine
***** 1. Templates syntax
***** 2. Dependency Injection with Templates
***** 3. Common use cases
***** 4. Custom format

**** Form submission and validation
***** 1. Handling form submission
***** 2. Protecting against CSRF
***** 3. Custom Validations
***** 4. Custom Field Constructors

**** Working with Json
***** 1. JSON basics
****** The Play JSON library
******* ~JsValue~
        Valid JSON type:
        - ~JsString~
        - ~JsNumber~
        - ~JsBoolean~
        - ~JsObject~
        - ~JsArray~
        - ~JsNull~

******* ~Json~
******* ~JsPath~

****** Converting to a ~JsValue~
******* Using string parsing
******* Using class construction
******* Using Writes converters

****** Traversing a ~JsValue~ structure
******* Simple path ~\~
******* Recursive path ~\\~
******* Direct lookup

****** Converting from a ~JsValue~
******* Using String Utilities
******* Using ~JsValue.as/asOpt~
******* Using ~validation~
******* ~JsValue~ to a model

***** 2. JSON with HTTP
****** Serving a list of entities in JSON
****** Creating a new entity instance in JSON
****** Summary

***** 3. JSON Reads/Writes/Format Combinators
****** ~JsPath~
****** ~Reads~
******* Path Reads
******* Complex Reads
******* Validation with Reads
******* Putting in all together

****** ~Writes~
****** ~Recursive Types~
****** ~Format~
******* Creating Format from ~Reads~ and ~Writes~
******* Creating Format using combinators

***** 4. JSON automated mapping
******* Requirements

****** Custom Naming Strategies
******* Implementing your own Naming Strategy

****** Customize the macro to output ~null~

***** 5. JSON Transformers
****** Introducing JSON coast-to-coast design
******* Are we doomed to convert JSON to OO?
******* Is OO conversion really the default use case?
******* New tech players change the way of manipulating JSON
******* JSON coast-to-coast design

****** JSON transformers are ~Reads[T <: JsValue]~
******* Use ~JsValue.transform~ instead of ~JsValue.validate~
******* The details
******* Case 1: Pick JSON value in ~JsPath~
******** Pick value as ~JsValue~
         - *Reminder*

******** Pick value as Type
         - *Reminder*

******* Case 2: Pick branch following ~JsPath~
******** Pick branch as ~JsValue~
         - *Reminder*

******* Case 3: Copy a value from input ~JsPath~ into a new ~JsPath~
        - *Reminder*

******* Case 4: Copy full input Json & update a branch
        - *Reminder*

******* Case 5: Put a given value in a new branch
        - *Reminder*

******* Case 6: Prune a branch from input JSON
        - *Reminder*

****** More complicated cases
******* Case 7: Pick a branch and update its content in 2 places
        - *Reminder*

******* Case 8: Pick a branch and prune a sub-branch

****** What about combinators?

**** Working with XML
***** 1. Handling and serving XML requests

**** Handling file upload
***** 1. Direct upload and multipart/form-data

**** Accessing an SQL database
***** 1. Configuring and using JDBC
***** 2. Using Slick to access your database
****** 2.1 Using Play Slick
****** 2.2 Play Slick migration guide
****** 2.3 Play Slick advanced topics
****** 2.4 Play Slick FAQ

***** 3. Using Anorm to access your database

**** Using the Cache
****** 1. Using the Cache

**** Calling REST APIs with Play WS
***** 1. The Play WS API
***** 2. Connecting to OpenID services
***** 3. Accessing resources protected by OAuth

**** Integrating with Akka
***** 1. Integrating with Akka

**** Internationalization with Messages
***** 1. Internationalization with Messages

**** Dependency injection
***** 1. Runtime dependency injection
***** 2. Compile time dependency injection

**** Application Settings
***** 1. Application Settings
***** 2. HTTP request handlers
***** 3. Essential Actions
***** 4. HTTP filters

**** Testing your application
***** 1. Testing your Application
***** 2. Testing with ScalaTest
***** 3. Writing functional tests with ScalaTest
***** 4. Testing with specs2
***** 5. Writing functional tests with specs2
***** 6. Testing with Guice
***** 7. Testing with compile-time Dependency Injection
***** 8. Testing with databases
***** 9. Testing web service clients

**** Logging
***** 1. Logging

*** 2.2 Advanced topics
**** Handling data streams reactively
**** Advanced routing
**** Extending Play
**** Embedding Play

** TODO 3. Common topics
*** 3.1 The build system
**** Contents
**** Overview of the build system
**** About sbt settings
**** Manage application dependencies
**** Working with sub-projects
**** Play enhancer
**** Aggregating reverse routers
**** Improving Compilation Times
**** Cookbook
**** Debugging your build

*** 3.2 Configuration
**** Configuration
**** Configuration file syntax and features
**** Configuring the application secret
**** Configuring the session cookie
**** Configuring the JDBC connection pool
**** Configuring Play's thread pools
**** Configuring Akka Http Server Backend
**** Configuring Netty Server Backend
**** Configuring logging
**** Configuring WS SSL
**** Configuring WS Cache

*** 3.3 Static assets
**** Static assets
**** Working with public assets
**** Using CoffeeScript
**** Using LESS CSS
**** Using Sass
**** Using JSHint
**** Using RequireJs

*** 3.4 Built-in HTTP filters
**** Play HTTP filters
**** Configuring gzip encoding
**** Configuring security headers
**** Configuring CORS
**** Configuring CSP
**** Configuring allowed hosts
**** Configuring HTTPS redirect

*** 3.5 Extending Play with modules
**** The build system
**** Configuration
**** Static assets
**** Built-in HTTP filters
**** Extending Play with modules
**** Working with Databases
**** Server Backends
**** Deploying your application
**** Scheduling tasks
**** Application Shutdown
**** Integrating with Akka Typed & Cluster Sharding

*** 3.6 Working with Databases
**** Working with Databases
**** Accessing an SQL Database
**** Using an in memory H2 database
**** Managing database evolutions

*** 3.7 Server Backends
**** Section contents
**** Play with Akka HTTP Server
**** Play with Netty Server

*** 3.8 Deploying your application
**** Using Play in production
**** Deploying your application
**** Production configuration
**** Setting up a front end HTTP server
**** Configuring HTTPS
**** Deploying to a cloud service

*** 3.9 Scheduling tasks
**** Scheduling Recurring Tasks

*** 3.10 Application Shutdown
**** Application Shutdown

*** 3.11 Integrating with Akka Typed & Cluster Sharding
**** Akka Advanced Integrations
**** Integrating with Akka Typed
**** Akka Cluster Sharding for Akka Typed (incubating)

* TODO Contributing to Play
** 1. Building Play from source
** 2. Repositories
** 3. Issue tracker
** 4. Documentation guidelines
** 5. Translating documentation
** 6. Working with git
** 7. 3rd party tools

* TODO About Play
** 1. Play philosophy
** 2. Play user groups

* Play releases
** 1. About Play releases
** 2. Play 2.7
** 3. Play 2.6
** 4. Play 2.5
** 5. Play 2.4
** 6. Play 2.3
** 7. Play 2.2
** 8. Play 2.1

* Modules
** Module directory
