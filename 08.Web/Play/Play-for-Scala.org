#+TITLE: Essential Play
#+COMMENT: Covers Play 2
#+AUTHOR: Peter Hilton, Erik Bakker, Francisco Canedo
#+FORWARD BY: James Ward
#+COPYRIGHT: 2014
#+STARTUP: overview
#+STARTUP: entitiespretty

* foreword - xi
* preface - xii
* acknowledgments - xv
* about this book - xvi
* about the cover illustration - xx
* TODO PART 1 GETTING STARTED - 1
** TODO 1 Introduction to Play 2 - 3
*** 1.1 What Play is - 4
**** 1.1.1 Key features - 4
     - A /full-stack framework/
       gives you
       everything you need to build a typical web application.

     - Figure 1.1 Play framework stack

**** 1.1.2 Java and Scala - 5
     - *Play 2 for Java*

**** TODO 1.1.3 Play isn't Java EE - 5

*** 1.2 High-productivity web development - 7
**** Working with HTTP - 7
**** Simplicity, productivity, and usability - 7

*** 1.3 Why Scala needs Play - 8
*** 1.4 Type-safe web development—why Play needs Scala - 8
*** 1.5 Hello Play! - 9
**** Getting Play and setting up the Play environment - 9
**** Creating and running an empty application - 10
**** Play application structure - 11
**** Accessing the running application - 12
**** Add a controller class - 13
**** Add a compilation error - 13
**** Use an HTTP request parameter - 14
**** Add an HTML page template - 14 

*** 1.6 The console - 15
*** 1.7 Summary - 16

** TODO 2 Your first Play application - 17
*** 2.1 The product list page - 18
    - This is only a prototype.
        A list of products without requirements for doing filtering, sorting, or
      paging the list.

    - To make the product list page work, we’ll need a combination of the following:
      + A view template
        A template that generates HTML

      + A controller action
        A Scala function that renders the view

      + Route configuration
        Configuration to map the URL to the action

      + The model
        Scala code that defines the product structure, and some test data

    - Figure 2.2
      MVC

**** 2.1.1 Getting started - 19
**** 2.1.2 Stylesheets - 19
**** 2.1.3 Language localization configuration - 20
**** 2.1.4 Adding the model - 21
**** 2.1.5 Product list page - 22
     Listing 2.7 The list page template -- =app/views/products/list.scala.html=
     #+BEGIN_SRC html
       @(products: List[Product](implicit lang: Lang)

       @main(Messages("application.name")) {
         <dl class="products">
           @for (p <- products) {
             <dt>@p.name</dt>
             <dd>@p.description</dd>
           }
         <dl>
       }
     #+END_SRC

     - You'll learn more about the /template syntax/ in section 6.3.

       For now,
       there are two things worth noticing about the template.
       1. it _starts with_ /parameter lists/, like a Scala function.

       2. the products parameter is used in a ~for~ loop to generate an HTML
          definition list of products.

**** 2.1.6 Layout template - 23
**** 2.1.7 Controller action method - 24
**** 2.1.8 Adding a routes configuration - 24
**** 2.1.9 Replacing the welcome page with a redirect - 25
**** 2.1.10 Checking the language localizations - 25

*** 2.2 Details page - 27
**** Model finder method - 27
**** Details page template - 27
**** Additional message localizations - 28
**** Adding a parameter to a controller action - 29
**** Adding a parameter to a route - 30
**** Generating a bar code image - 30

*** 2.3 Adding a new product - 32
**** Additional message localizations - 32
**** Form object - 33
**** Form template - 34
**** Saving the new product - 37
**** Validating the user input - 38
**** Adding the routes for saving products - 40

*** 2.4 Summary - 41

* TODO PART 2 CORE FUNCTIONALITY - 43
** TODO 3 Deconstructing Play application architecture - 45
*** 3.1 Drawing the architectural big picture - 46
**** The Play server - 46
**** HTTP - 47
**** MVC - 47
**** REST - 48

*** 3.2 Application configuration -- enabling features and changing defaults - 49
**** Creating the default configuration - 49
**** Configuration file format - 50
**** Configuration file overrides - 52
**** Configuration API -- programmatic access - 52
**** Custom application configuration - 53 

*** 3.3 The model -- adding data structures and business logic - 54
**** Database-centric design - 54
**** Model class design - 55
**** Defining case classes - 56
**** Persistence API integration - 57
**** Using Slick for database access - 57

*** 3.4 Controllers -- handling HTTP requests and responses - 58
**** URL-centric design - 59
**** Routing HTTP requests to controller action methods - 60
**** Binding HTTP data to Scala objects - 61 
**** Generating different types of HTTP response - 62

*** 3.5 View templates -- formatting output - 62
**** UI-centric design - 63
**** HTML-first templates - 63
**** Type-safe Scala templates - 65
**** Rendering templates -- Scala template functions - 67 

*** 3.6 Static and compiled assets - 69
**** Serving assets - 69
**** Compiling assets - 69

*** 3.7 Jobs -- starting processes - 70
**** Asynchronous jobs - 70
**** Scheduled jobs - 72
**** Asynchronous results and suspended requests - 74

*** 3.8 Modules -- structuring your application - 75
**** Third-party modules - 76
**** Extracting custom modules - 77
**** Module-first application architecture - 77
**** Deciding whether to write a custom module - 78
**** Module architecture - 78 

*** 3.9 Summary - 79

** TODO 4 Defining the application's HTTP interface - 80
*** 4.1 Designing your application's URL scheme - 81
**** Implementation-specific URLs - 81
**** Stable URLs - 82
**** Java Servlet API -- limited URL configuration - 83
**** Benefits of good URL design - 83

*** 4.2 Controllers -- the interface between HTTP and Scala - 84
**** Controller classes and action methods - 84
**** HTTP and the controller layer's Scala API - 87
**** Action composition - 88 

*** 4.3 Routing HTTP requests to controller actions - 89
**** Router configuration - 90
**** Matching URL path parameters that contain forward slashes - 93
**** Constraining URL path parameters with regular expressions - 93

*** 4.4 Binding HTTP data to Scala objects - 94
*** 4.5 Generating HTTP calls for actions with reverse routing - 97
**** Hardcoded URLs - 97
**** Reverse routing - 98

*** 4.6 Generating a response - 101
**** Debugging HTTP responses - 102
**** Response body - 102
**** HTTP status codes - 106
**** Response headers - 106
**** Serving static content - 110  

*** 4.7 Summary - 113

** TODO 5 Storing data—the persistence layer - 114
*** 5.1 Talking to a database - 115
**** What are Anorm and Squeryl? - 115
**** Saving model objects in a database - 115
**** Configuring your database - 116 

*** 5.2 Creating the schema - 116
*** 5.3 Using Anorm - 118
**** Defining your model - 118
**** Using Anorm’s stream API - 119 
**** Pattern matching results - 119
**** Parsing results - 120
**** Inserting, updating, and deleting data - 122 

*** 5.4 Using Squeryl - 123
**** Plugging Squeryl in - 124
**** Defining your model - 125 
**** Extracting data—queries - 128
**** Saving records - 130 
**** Handling transactions - 131
**** Entity relations - 133 

*** 5.5 Caching data - 135
*** 5.6 Summary - 136

** TODO 6 Building a user interface with view templates - 137
*** 6.1 The why of a template engine - 138
*** 6.2 Type safety of a template engine - 139
**** A not type-safe template engine - 139
**** A type-safe template engine - 141
**** Comparing type-safe and not type-safe templates - 143

*** 6.3 Template basics and common structures - 144
**** @, the special character - 144
**** Expressions - 145
**** Displaying collections - 146
**** Security and escaping - 149
**** Using plain Scala - 152

*** 6.4 Structuring pages: template composition - 154
**** Includes - 154
**** Layouts - 157
**** Tags - 159

*** 6.5 Reducing repetition with implicit parameters - 160
*** 6.6 Using LESS and CoffeeScript: the asset pipeline - 163
**** LESS - 164
**** CoffeeScript - 164
**** The asset pipeline - 165

*** 6.7 Internationalization - 166
**** Configuration and message files - 166
**** Using messages in your application - 167

*** 6.8 Summary - 169

** TODO 7 Validating and processing input with the forms API - 170
*** 7.1 Forms—the concept - 171
**** Play 1.x forms reviewed - 171
**** The Play 2 approach to forms - 173

*** 7.2 Forms basics - 173
**** Mappings - 173
**** Creating a form - 174
**** Processing data with a form - 175
**** Object mappings - 178
**** Mapping HTTP request data - 179

*** 7.3 Creating and processing HTML forms - 179
**** Writing HTML forms manually - 179
**** Generating HTML forms - 182
**** Input helpers - 185
**** Customizing generated HTML - 186 

*** 7.4 Validation and advanced mappings - 188
**** Basic validation - 188
**** Custom validation - 189
**** Validating multiple fields - 190
**** Optional mappings - 191
**** Repeated mappings - 191
**** Nested mappings - 192
**** Custom mappings - 193
**** Dealing with file uploads - 196

*** 7.5 Summary - 198

* TODO PART 3 ADVANCED CONCEPTS - 201
** TODO 8 Building a single-page JavaScript application with JSON - 203
*** 8.1 Creating the single-page Play application - 204
**** Getting started - 205
**** Adding stylesheets - 205
**** Adding a simple  model - 206
**** Page template - 207
**** Client-side script - 208

*** 8.2 Serving data to a JavaScript client 208
**** Constructing JSON data value objects - 208
**** Converting model objects to JSON objects - 213

*** 8.3 Sending JSON data to the server - 219
**** Editing and sending client data - 219
**** Consuming JSON - 221
**** Consuming JSON in more detail - 223
**** Reusable consumers - 225 
**** Combining JSON formatters and consumers - 226

*** 8.4 Validating JSON - 227
**** Mapping the JSON structure to a model - 228
**** Handling “empty” values - 229
**** Adding validation rules and validating input - 229
**** Returning JSON validation errors - 230
**** Alternative JSON libraries - 232

*** 8.5 Authenticating JSON web service requests - 232
**** Adding authentication to action methods - 233
**** Using basic authentication - 236
**** Other authentication methods - 238

*** 8.6 Summary - 238

** TODO 9 Play and more - 240
*** 9.1 Modules - 240
**** Using modules - 241
**** Creating modules - 244

*** 9.2 Plugins - 250
*** 9.3 Deploying to production - 255
**** Production mode - 256
**** Working with multiple configurations - 256
**** Creating native packages for a package manager - 258
**** Setting up a front-end proxy - 259
**** Using SSL - 261
**** Deploying to a cloud provider - 262
**** Deploying to an application server - 263

*** 9.4 Summary - 263

** TODO 10 Web services, iteratees, and WebSockets - 264
*** 10.1 Accessing web services - 265
**** Basic requests - 265
**** Handling responses asynchronously - 266
**** Using the cache - 267
**** Other request methods and headers - 269
**** Authentication mechanisms - 270

*** 10.2 Dealing with streams using the iteratee library - 272
**** Processing large web services responses with an iteratee - 272
**** Creating other iteratees and feeding them data - 275
**** Iteratees and immutability - 276

*** 10.3 WebSockets: Bidirectional communication with the browser - 277
**** A real-time status page using WebSockets - 280
**** A simple chat application - 282

*** 10.4 Using body parsers to deal with HTTP request bodies - 286
**** Structure of a body parser - 287
**** Using built-in body parsers - 288
**** Composing body parsers - 289
**** Building a new body parser - 291

*** 10.5 Another way to look at iteratees - 294
*** 10.6 Summary - 294

* index 297
