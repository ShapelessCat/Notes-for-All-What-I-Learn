#+TITLE: Monadic Design Patterns for the Web
#+VERSION: Pre-Print 2012 (NOT the newest Pre-Print Ver 4)
#+AUTHOR: L. G. Meredith
#+STARTUP: overview
#+STARTUP: entitiespretty

* Contents - vii
* List of Figures - x
* List of Tables - xi
* List of Listings - xii
* Acknowledgments - xiii
* 1 Motivation and Background - 16
** 1.1 Where are we? - 16
** 1.2 Where are we going? - 23
** 1.3 How will we get there? - 27

* 2 Toolbox - 36
** 2.1 Practice - 36
** 2.2 Notation and terminology - 36
** 2.3 Core design patterns - 36
** 2.4 Variations in presentation - 40
** 2.5 Foundations - 47

* 3 An I/O Monad for HTTP Streams - 55
** 3.1 Practice - 55
** 3.2 Code first, ask questions later - 59
** 3.3 A session with the code - 61
** 3.4 What’s behind the curtain? - 61
** 3.5 Synchrony, asynchrony, and buffering - 68
** 3.6 State, statelessness, and continuations - 70
** 3.7 Foundations - 70

* 4 Parsing Requests, Monadically - 76
** 4.1 Practice - 77
** 4.2 The trade-offs of embedded versus external parsing - 77
** 4.3 Parsing monadically - 80
** 4.4 Concrete versus abstract syntax - 93
** 4.5 Foundations - 93

* 5 The Domain Model as Abstract Syntax - 94
** 5.1 Practice - 95
** 5.2 Our abstract syntax - 95
** 5.3 Our application domain model - 95
** 5.4 Translating concrete syntax to abstract syntax - 99
** 5.5 What does this have to do with monads? - 111
** 5.6 The project model - 113
** 5.7 A transform pipeline - 114
** 5.8 Foundations - 114

* 6 Zippers and Contexts and URIs, Oh My! - 115
** 6.1 Practice - 116
** 6.2 Zipper and one-holed contexts - 128
** 6.3 Differentiation and contexts - 128
** 6.4 Generic zipper – differentiating navigation - 128
** 6.5 Species of structure - 135
** 6.6 Constructing contexts and zippers from data types - 135
** 6.7 Mapping URIs to zipper-based paths and back - 140
** 6.8 Applying zippers to our project - 140
** 6.9 Foundations - 142

* 7 A Review of Collections as Monads - 143
** 7.1 Practice - 143
** 7.2 Conway games - 144
** 7.3 Recap of the monad API - 150
** 7.4 Realizing the monad API - 151
** 7.5 Foundations - 160
** 7.6 Sets, lists, and languages - 160
** 7.7 Containers and syntax - 168
** 7.8 Algebras - 169
** 7.9 Monad as container - 169
** 7.10 Monads and takeout - 170
** 7.11 Co-monad and take-out - 174
** 7.12 Hopf structure - 174
** 7.13 Container and control - 174

* 8 Domain Model, Storage, and State - 175
** 8.1 Practice - 176
** 8.2 Mapping our domain model to storage - 176
** 8.3 Storage and language-integrated query - 177
** 8.4 Continuations revisited - 178
** 8.5 Foundations - 178
** 9 Putting it All Together - 179
** 9.1 Practice - 180
** 9.2 Our web application end-to-end - 180
** 9.3 Deploying our application - 180
** 9.4 From one web application to web framework - 180
** 9.5 Foundations - 180

* 10 The Semantic We b - 181
** 10.1 Practice - 182
** 10.2 Referential transparency - 182
** 10.3 Composing monads - 183
** 10.4 Semantic application queries - 186
** 10.5 Searching for programs - 192
** 10.6 Foundations - 192

* Glossary - 194
* Bibliography - 210
* About the Author - 213
