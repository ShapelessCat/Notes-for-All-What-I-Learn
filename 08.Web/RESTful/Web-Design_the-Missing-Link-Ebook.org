#+TITLE: Web API Design: The Missing Link
#+SUBTITLE: Best Practices for Crafting Interfaces that Developers Love
#+AUTHOR: apigee
#+STARTUP: overview
#+STARTUP: entitiespretty


* Foreword | 4
* Introduction | 6
* Web APIs and REST | 7
** The job of the API designer | 7
** What is a web API? | 7
** What is REST? | 7

* HTTP and REST: A data-oriented design paradigm | 9
** Why is a data-oriented approach useful? | 9 
** API design elements | 10

* Designing representations | 11
** Use JSON | 11
** Keep your JSON simple | 11
** Include links | 12
*** Why is this better?
*** Are URI templates still needed when you have links?
*** An analogy with the World Wide Web
*** Including links, step 2
*** A word of caution
*** How should I represent links in my resources?
*** Who uses links?
*** More later

* Designing URLs | 21
** In URLs, nouns are good; verbs are bad | 21
** Well-known URLs | 21
** Designing entity URLs | 21
*** Permalinks
*** The web is flat
*** Solutions to the renaming dilemma
*** Stability of types

** Designing query URLs | 25
*** Representing relationships in query URLs
*** Express relationships symmetrically in URLs and representations
*** A general model for query URLs
*** Path parameters, or matrix parameters
*** Filtering collections

** What about responses that donâ€™t involve persistent resources? | 28

* More on representation design | 30
** Include self-reference and kind properties | 30
** Why are the self and the kind properties good ideas? | 30
** How should I represent collections? | 30
*** Paginated collections

** Custom resource types and using URLs for resource types | 34
** Supporting multiple formats | 35
** What about property names? | 35
** Date and time formats | 36
* Chatty APIs | 37
** Pagination and partial response | 37
*** Add optional fields in a comma-delimited list
*** Make it easy for application developers to paginate objects in a database

* Handling errors | 39
** Message for people | 40

* Modeling actions | 41
* Authentication | 43
* Complement with an SDK | 44
* Versioning | 45
** Doing nothing for versioning | 45
** Links and version identifiers in URLs make awkward bedfellows | 46

* Conclusion | 48
* Appendix: Other approaches to representing links | 49
