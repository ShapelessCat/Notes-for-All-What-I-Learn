#+TITLE: RESTful Web APIs
#+AUTHOR: Leonard Richardson & Mike Amundsen
#+FORWARD BY: Sam Ruby
#+YEAR: 2013
#+STARTUP: overview
#+STARTUP: entitiespretty

* Foreword - xiii
* Introduction - xv
* 1. Surfing the Web - 1
** Episode 1: The Billboard - 2
*** Resources and Representations - 2
*** Addressability - 3

** Episode 2: The Home Page - 3
*** Short Sessions - 4
*** Self-Descriptive Messages - 5

** Episode 3: The Link - 6
*** Standardized Methods - 8

** Episode 4: The Form and the Redirect - 9
** Application State - 10
** Resource State - 11
** Connectedness - 13
** The Web Is Something Special - 14
** Web APIs Lag Behind the Web - 15
** The Semantic Challenge - 16

* 2. A Simple API - 17
** HTTP GET: Your Safe Bet - 18
** How to Read an HTTP Response - 18
** JSON - 20
** Collection+JSON - 21
** Writing to an API - 22
** HTTP POST: How Resources Are Born - 24
** Liberated by Constraints - 25
** Application Semantics Create the Semantic Gap - 27

* 3. Resources and Representations - 29
** A Resource Can Be Anything - 30
** A Representation Describes Resource State - 30
** Representations Are Transferred Back and Forth - 31
** Resources with Many Representations - 32
** The Protocol Semantics of HTTP - 33
*** GET - 34
*** DELETE - 35
*** Idempotence - 36
*** POST-to-Append - 37
*** PUT - 37
*** PATCH - 38
*** LINK and UNLINK - 39
*** HEAD - 40
*** OPTIONS - 40
*** Overloaded POST - 41

** Which Methods Should You Use? - 42

* 4. Hypermedia - 45
** HTML as a Hypermedia Format - 46
** URI Templates - 49
** URI Versus URL - 50
** The Link Header - 51
** What Hypermedia Is For - 52
*** Guiding the Request - 52
*** Promises About the Response - 53
*** Workflow Control - 54

** Beware of Fake Hypermedia! - 55
** The Semantic Challenge: How Are We Doing? - 56

* 5. Domain-Specific Designs - 59
** Maze+XML: A Domain-Specific Design - 60
** How Maze+XML Works - 61
*** Link Relations - 62
*** Follow a Link to Change Application State - 64
*** The Collection of Mazes - 65

** Is Maze+XML an API? - 67
** Client #1: The Game - 68
** A Maze+XML Server - 72
** Client #2: The Mapmaker - 74
** Client #3: The Boaster - 76
** Clients Do the Job They Want to Do - 77
** Extending a Standard - 77
** The Mapmaker’s Flaw - 80
*** The Fix (and the Flaw in the Fix) - 81

** Maze as Metaphor - 83
** Meeting the Semantic Challenge - 83
** Where Are the Domain-Specific Designs? - 83
*** The Prize at the End - 84
*** Hypermedia in the Headers - 84
*** Steal the Application Semantics - 84

** If You Can’t Find a Domain-Specific Design, Don’t Make One - 86
** Kinds of API Clients - 86
*** Human-Driven Clients - 86
*** Automated Clients - 87

* 6. The Collection Pattern - 91
** What’s a Collection? - 93
*** Collections Link to Items - 93

** Collection+JSON - 94
*** Representing the Items - 95
*** The Write Template - 98
*** Search Templates - 99

** How a (Generic) Collection Works - 100
*** GET - 100
*** POST-to-Append - 100
*** PUT and PATCH - 101
*** DELETE - 101
*** Pagination - 101
*** Search Forms - 102

** The Atom Publishing Protocol (AtomPub) - 102
*** AtomPub Plug-in Standards - 104
*** Why Doesn’t Everyone Use AtomPub? - 105

** The Semantic Challenge: How Are We Doing? - 106

* 7. Pure-Hypermedia Designs - 109
** Why HTML? - 109
** HTML’s Capabilities - 110
*** Hypermedia Controls - 110
*** Plug-in Application Semantics - 111

** Microformats - 113
** The hMaze Microformat - 114
** Microdata - 116
** Changing Resource State - 117
*** Adding Application Semantics to Forms - 119

** The Alternative to Hypermedia Is Media - 122
** HTML’s Limits - 124
*** HTML 5 to the Rescue? - 124

** The Hypertext Application Language - 125
** Siren - 129
** The Semantic Challenge: How Are We Doing? - 130

* 8. Profiles - 133
** How Does A Client Find the Documentation? - 134
** What’s a Profile? - 135
** Linking to a Profile - 135
*** The profile Link Relation - 135
*** The profile Media Type Parameter - 136
*** Special-Purpose Hypermedia Controls - 136

** Profiles Describe Protocol Semantics - 137
** Profiles Describe Application Semantics - 138
*** Link Relations - 138
*** Unsafe Link Relations - 139
*** Semantic Descriptors - 140

** XMDP: The First Machine-Readable Profile Format - 141
** ALPS - 143
*** Advantages of ALPS - 148
*** ALPS Doesn’t Do Everything - 150

** JSON-LD - 150
** Embedded Documentation - 154
** In Summary - 155

* 9. The Design Procedure - 157
** Two-Step Design Procedure - 157
** Seven-Step Design Procedure - 158
*** Step 1: List the Semantic Descriptors - 159
*** Step 2: Draw a State Diagram - 161
*** Step 3: Reconcile Names - 164
*** Step 4: Choose a Media Type - 167
*** Step 5: Write a Profile - 169
*** Step 6: Implementation - 169
*** Step 7: Publication - 170

** Example: You Type It, We Post It - 173
*** List the Semantic Descriptors - 173
*** Draw a State Diagram - 174
*** Reconcile Names - 174
*** Choose a Media Type - 175
*** Write a Profile - 176

** Some Design Advice - 177
*** Resources Are Implementation Details - 178
*** Don’t Fall into the Collection Trap - 178
*** Don’t Start with the Representation Format - 179
*** URL Design Doesn’t Matter - 180
*** Standard Names Are Probably Better Than Your Names - 182
*** If You Design a Media Type - 183
*** When Your API Changes - 185
*** Don’t Keep All the Hypermedia in One Place - 189

** Adding Hypermedia to an Existing API - 190
*** Fixing Up an XML-Based API - 191
*** Is It Worth It? - 192

** Alice’s Second Adventure - 192
*** Episode 1: The Nonsense Representation - 192
*** Episode 2: The Profile - 194
*** Alice Figured It Out - 196

* 10. The Hypermedia Zoo - 199
** Domain-Specific Formats - 200
*** Maze+XML - 200
*** OpenSearch - 201
*** Problem Detail Documents - 201
*** SVG - 202
*** VoiceXML - 204

** Collection Pattern Formats - 206
*** Collection+JSON - 206
*** The Atom Publishing Protocol - 207
*** OData - 208

** Pure Hypermedia Formats - 215
*** HTML - 215
*** HAL - 216
*** Siren - 217
*** The Link Header - 218
*** The Location and Content-Location Headers - 218
*** URL Lists - 219
*** JSON Home Documents - 219
*** The Link-Template Header - 220
*** WADL - 221
*** XLink - 222
*** XForms - 223

** GeoJSON: A Troubled Type - 224
*** GeoJSON Has No Generic Hypermedia Controls - 226
*** GeoJSON Has No Media Type - 228
*** Learning from GeoJSON - 229

** The Semantic Zoo - 230
*** The IANA Registry of Link Relations - 230
*** The Microformats Wiki - 230
*** Link Relations from the Microformats Wiki - 232
*** schema.org - 233
*** Dublin Core - 234
*** Activity Streams - 234
*** The ALPS Registry - 235

* 11. HTTP for APIs - 237
** The New HTTP/1.1 Specification - 238
** Response Codes - 238
** Headers - 238
** Choosing Between Representations - 239
*** Content Negotiation - 239
*** Hypermedia Menus - 240
*** The Canonical URL - 241

** HTTP Performance - 241
*** Caching - 241
*** Conditional GET - 242
*** Look-Before-You-Leap Requests - 244
*** Compression - 245
*** Partial GET - 246
*** Pipelining - 247

** Avoiding the Lost Update Problem - 248
** Authentication - 249
*** The WWW-Authenticate and Authorization Headers - 250
*** Basic Auth - 251
*** OAuth 1.0 - 252
*** Where OAuth 1.0 Falls Short - 255
*** OAuth 2.0 - 256
*** When to Give Up on OAuth - 256

** Extensions to HTTP - 257
*** The PATCH Method - 257
*** The LINK and UNLINK Methods - 258
*** WebDAV - 259

** HTTP 2.0 - 260

* 12. Resource Description and Linked Data - 263
** RDF - 264
*** RDF Treats URLs as URIs - 265

** When to Use the Description Strategy - 266
** Resource Types - 269
** RDF Schema - 270
** The Linked Data Movement - 272
** JSON-LD - 274
*** JSON-LD as a Representation Format - 275

** Hydra - 276
** The XRD Family - 280
*** XRD and JRD - 281
*** Web Host Metadata Documents - 282
*** WebFinger - 283

** The Ontology Zoo - 284
*** schema.org RDF - 284
*** FOAF - 285
*** vocab.org - 285

** Conclusion: The Description Strategy Lives! - 286

* 13. CoAP: REST for Embedded Systems - 287
** A CoAP Request - 288
** A CoAP Response - 288
** Kinds of Messages - 289
** Delayed Response - 290
** Multicast Messages - 291
** The CoRE Link Format - 291
** Conclusion: REST Without HTTP - 293

* A. The Status Codex - 295
* B. The Header Codex - 317
* C. An API Designer’s Guide to the Fielding Dissertation - 341
* Glossary - 357
* Index - 361
