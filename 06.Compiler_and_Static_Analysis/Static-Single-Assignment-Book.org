#+TITLE: Static Single Assignment Book
#+Authors: Lots of authors
#+Date: Wednesday 30th May, 2018 16:12
#+STARTUP: overview
#+STARTUP: entitiespretty

* Part I Vanilla SSA
* 1 Introduction - (J. Singer) - 5
** 1.1 Definition of SSA
** 1.2 Informal semantics of SSA
** 1.3 Comparison with classical data-flow analysis
** 1.4 SSA in context
** 1.5 About the rest of this book
*** 1.5.1 Benefits of SSA
*** 1.5.2 Fallacies about SSA

* 2 Properties and Flavors - (P. Brisk, F. Rastello) - 15
** 2.1 Def-use and use-def chains
** 2.2 Minimality
** 2.3 Strict SSA formand dominance property
** 2.4 Pruned SSA form
** 2.5 Conventional and transformed SSA form
** 2.6 A stronger definition of interference
** 2.7 Further readings

* 3 Standard Construction and Destruction Algorithms - (J. Singer, F. Rastello) - 27
** 3.1 Construction
*** 3.1.1 Join sets and dominance frontiers
*** 3.1.2 \phi{} function insertion
*** 3.1.3 Variable renaming
*** 3.1.4 Summary

** 3.2 Destruction
** 3.3 SSA property transformations
*** 3.3.1 Pessimistic \phi{}-function insertion

** 3.4 Further readings

* 4 Advanced Construction Algorithms for SSA — (D. Das, U. Ramakrishna, V. Sreedhar) - 45
** 4.1 Basic algorithm
** 4.2 Computation of DF+(S) using DJ-graphs
*** 4.2.1 Key observations
*** 4.2.2 Main algorithm

** 4.3 Data-flow computation of DF+-graph using DJ-graph
*** 4.3.1 Top down DF+ set computation

** 4.4 Computing iterated dominance frontier using loop nesting forests
*** 4.4.1 Loop nesting forest
*** 4.4.2 Main algorithm

** 4.5 Concluding remarks and further readings

* 5 SSA Reconstruction - (S. Hack) - 59
** 5.1 General considerations
** 5.2 Reconstruction based on the dominance frontier
** 5.3 Search-based reconstruction
** 5.4 Further readings

* 6 Functional Representations of SSA - (L. Beringer) - 67
** 6.1 Low-level functional program representations
*** 6.1.1 Variable assignment versus binding
*** 6.1.2 Control flow: continuations
*** 6.1.3 Control flow: direct style
*** 6.1.4 Let-normal form

** 6.2 Functional construction and destruction of SSA
*** 6.2.1 Initial construction using liveness analysis
*** 6.2.2 \lambda{}-dropping
*** 6.2.3 Nesting, dominance, loop-closure
*** 6.2.4 Destruction of SSA

** 6.3 Refined block sinking and loop nesting forests
** 6.4 Concluding remarks and further readings

* Part II Analysis
* 7 Liveness - (B. Boissinot, F. Rastello) - 95
** 7.1 Definitions
** 7.2 Data-flow approaches
*** 7.2.1 Liveness sets on reducible graphs
*** 7.2.2 Liveness sets on irreducible flow graphs
*** 7.2.3 Computing the outermost excluding loop (OLE)

** 7.3 Liveness check using loop nesting forest and forward reachability
*** 7.3.1 Computing the modified-forward reachability

** 7.4 Liveness sets using path exploration
** 7.5 Further readings

* 8 Loop Tree and Induction Variables - (S. Pop, A. Cohen) - 111
** 8.1 Part of the CFG and loop tree can be exposed from the SSA
*** 8.1.1 An SSA representation without the CFG
*** 8.1.2 Natural loop structures on the SSA
*** 8.1.3 Improving the SSA pretty printer for loops

** 8.2 Analysis of Induction Variables
*** 8.2.1 Stride detection
*** 8.2.2 Translation to chains of recurrences
*** 8.2.3 Instantiation of symbols and region parameters
*** 8.2.4 Number of iterations and computation of the end of loop value

** 8.3 Further readings

* 9 Redundancy Elimination - (F. Chow) - 121
** 9.1 Why partial redundancy elimination and SSA are related
** 9.2 How SSAPRE works
*** 9.2.1 The safety criterion
*** 9.2.2 The computational optimality criterion
*** 9.2.3 The lifetime optimality criterion

** 9.3 Speculative PRE
** 9.4 Register promotion via PRE
*** 9.4.1 Register promotion as placement optimization
*** 9.4.2 Load placement optimization
*** 9.4.3 Store placement optimization

** 9.5 Value-based redundancy elimination
*** 9.5.1 Value numbering
*** 9.5.2 Redundancy elimination under value numbering

** 9.6 Further readings

* Part III Extensions
* 10 Introduction - (V. Sarkar, F. Rastello) - 143
** 10.1 Static single information form
** 10.2 Control dependencies
** 10.3 Gated-SSA forms
** 10.4 Psi-SSA form
** 10.5 Array SSA form
** 10.6 Memory based data flow

* 11 Static Single Information Form - (F. Pereira, F. Rastello) - 149
** 11.1 Static single information
*** 11.1.1 Sparse analysis
*** 11.1.2 Partitioned lattice per variable (PLV) problems
*** 11.1.3 The static single information property
*** 11.1.4 Special instructions used to split live-ranges
*** 11.1.5 Propagating information forward and backward
*** 11.1.6 Examples of sparse data-flow analyses

** 11.2 Construction and destruction of the intermediate program representation
*** 11.2.1 Splitting strategy
*** 11.2.2 Splitting live-ranges
*** 11.2.3 Variable renaming
*** 11.2.4 Dead and undefined code elimination
*** 11.2.5 Implementation details

** 11.3 Further readings

* 12 Graphs and Gating Functions - (J. Stanier) - 169
** 12.1 Data-flow graphs
** 12.2 The SSA graph
*** 12.2.1 Finding induction variables with the SSA graph

** 12.3 Program dependence graph
*** 12.3.1 Detecting parallelism with the PDG

** 12.4 Gating functions and GSA
** 12.4.1 Backwards symbolic analysis with GSA
** 12.5 Value state dependence graph
*** 12.5.1 Definition of the VSDG
*** 12.5.2 Dead node elimination with the VSDG

** 12.6 Further readings

* 13 Psi-SSA Form - (F. de Ferrière) - 185
** 13.1 Definition and construction
** 13.2 SSA algorithms
** 13.3 Psi-SSA algorithms
** 13.4 Psi-SSA destruction
*** 13.4.1 Psi-normalize
*** 13.4.2 Psi-web

** 13.5 Further readings

* 14 Array SSA Form - (V. Sarkar, K. Knobe, S. Fink) - 199
** 14.1 Array SSA form
** 14.2 Sparse constant propagation of array elements
*** 14.2.1 Array lattice for sparse constant propagation
*** 14.2.2 Beyond constant indices

** 14.3 Extension to objects: redundant load elimination
*** 14.3.1 Analysis framework
*** 14.3.2 Definitely-same and definitely-different analyses for heap array indices
*** 14.3.3 Scalar replacement algorithm

** 14.4 Further readings

* Part IV Machine Code Generation and Optimization
* 15 SSA Formand Code Generation - (B. Dupont de Dinechin) - 219
** 15.1 SSA formengineering issues
*** 15.1.1 Instructions, operands, operations, and operators
*** 15.1.2 Representation of instruction semantics
*** 15.1.3 Operand naming constraints
*** 15.1.4 Non-kill target operands
*** 15.1.5 Program representation invariants

** 15.2 Code generation phases and the SSA form
*** 15.2.1 Classic if-conversion
*** 15.2.2 If-conversion under SSA form
*** 15.2.3 Pre-pass instruction scheduling

** 15.3 SSA formdestruction algorithms

* 16 If-Conversion - (C. Bruel) - 233
*** 16.0.1 Architectural requirements
** 16.1 Basic transformations
*** 16.1.1 SSA operations on basic blocks
*** 16.1.2 Handling of predicated execution model

** 16.2 Global analysis and transformations
*** 16.2.1 SSA incremental if-conversion algorithm
*** 16.2.2 Tail duplication
*** 16.2.3 Profitability

** 16.3 Concluding remarks and further readings

* 17 SSA Destruction forMachine Code - (F. Rastello) - 249
** 17.1 Correctness
** 17.2 Code quality
** 17.3 Speed and memory footprint
** 17.4 Further readings

* 18 Hardware Compilation using SSA - (P. C. Diniz, P. Brisk) - 267
** 18.1 Brief history and overview
** 18.2 Why use SSA for hardware compilation?
** 18.3 Mapping a control-flow graph to hardware
*** 18.3.1 Basic block mapping
*** 18.3.2 Basic control-flow graph mapping
*** 18.3.3 Control-flow graph mapping using SSA
*** 18.3.4 \phi{}-function and multiplexer optimizations
*** 18.3.5 Implications of using SSA-formin floor-planing

** 18.4 Existing SSA-based hardware compilation efforts

* 19 Building SSA in a Compiler for PHP — (P. Biggar, D. Gregg) - 285
** 19.1 SSA formin statically-typed languages
** 19.2 PHP and aliasing
** 19.3 Our whole-program analysis
*** 19.3.1 The analysis algorithm
*** 19.3.2 Analysis results
*** 19.3.3 Building def-use sets
*** 19.3.4 HSSA

** 19.4 Other challenging PHP features
*** 19.4.1 Run-time symbol tables
*** 19.4.2 Execution of arbitrary code
*** 19.4.3 Object handlers

** 19.5 Concluding remarks and further readings

* References - 299
