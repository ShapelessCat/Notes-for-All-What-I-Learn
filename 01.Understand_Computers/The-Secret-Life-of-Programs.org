#+TITLE: The Secret Life of Programs
#+SUBTITLE: Understand computers -- craft BETTER code
#+VERSION: 2019
#+AUTHOR: Jonathan E. Steinhart
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* ACKNOWLEDGMENTS
* PREFACE
* DONE INTRODUCTION
CLOSED: [2025-02-22 Sat 20:28]
Safe programming environments make getting started less scary, but you also need
to prepare for the outside world. This book helps you make that transition.

** DONE Why Good Programming is Important
CLOSED: [2025-02-22 Sat 09:27]
It's problematic to teach computer programming without also teaching about
computers.

Strange thing about computer programming is that unlike in medicine, in
programming you can become a specialist *WITHOUT* ever being a generalist --
you probably wouldn’t want a heart surgeon who never learned anatomy, but the
equivalent has become normal for many programmers today.

** DONE Learning to Code is Only a Starting Place
CLOSED: [2025-02-22 Sat 09:37]
** DONE Importance of Low-Level Knowledge
CLOSED: [2025-02-22 Sat 10:19]
- An interesting and somewhat contrary view about

  _how to teach programming_ was expressed in a blog post titled “How to Teach
  Computational Thinking” by Stephen Wolfram, the creator of Mathematica and the
  Wolfram language.

  Wolfram defines /computational thinking/ as
  _"formulating things with enough clarity, and in a systematic enough way, that
  one can tell a computer how to do them."_

  I (=from Jian= The author of this book) completely agree with this definition.
  In fact, it's in large part my motivation for writing this book.

- =IMPORTANT=
  But I *strongly disagree* with Wolfram's position that those learning to program
  should develop computational thinking skills using powerful high-level tools,
  such as those that he's developed, instead of learning the underlying
  foundational technologies.
  * MANY EXAMPLES support his opinion!!!

- Understanding underlying technologies helps you develop a sense of what can go
  wrong.

  Only knowing high-level tools makes it easy to ask the wrong questions.

  Another reason for learning underlying systems and tools is that it gives you
  the power to build new tools, which is important because there will always be
  a need for tool builders, even if tool users are more common.

  Learning about computers so that the behavior of programs isn't a mystery
  enables you to craft better code.

** DONE Who Should Read This Book?
CLOSED: [2025-02-22 Sat 10:51]
This book is for people who want to become good programmers.

- Q :: What makes a good programmer?

  1. Good programmers have good critical thinking and analysis skills.
     To solve complex problems, a programmer needs the ability to evaluate
     whether or not programs actually solve the right problem correctly.

  2. Good programmers also have some degree of artistry, like skilled
     craftspeople.
     Good programmers write code that not only works but is also easy for others
     to understand and maintain.

  3. Good programmers need a deep understanding of how computers work.
     You can't solve complex problems well using a shallow base of knowledge.

This book is for people who are learning programming but are unsatisfied with
the lack of depth. It's also for people who are already programming but want
more.

** DONE What Are Computers?
CLOSED: [2025-02-22 Sat 10:54]
** DONE What Is Computer Programming?
CLOSED: [2025-02-22 Sat 19:34]
Computer programming is a two-step process:
1. Understand the universe.
2. Explain it to a three-year-old.

This book focuses on _the FIRST step_.
While it can't cover the universe in general, it examines problems and their
solutions in the computer universe instead of dwelling on the exact programming
syntax needed to implement those solutions.

** DONE Coding, Programming, Engineering, and Computer Science
CLOSED: [2025-02-22 Sat 19:55]
** DONE The Landscape
CLOSED: [2025-02-22 Sat 20:10]
- System programmers are techno-yogis who unify the hardware and software.

- You don't have to learn system programming in order to work at one of the
  other levels.
  However, an understanding of the core technology also leads to better
  solutions at higher levels.
  * =TODO=
    This isn't just my opinion; check out the 2014 blog post “The Resource Leak
    Bug of Our Civilization” by Ville-Matias Heikkilä for a similar view.

- This book also aims to cover a lot of retro history.
  Knowing some of the history allows you to at least make new and better
  mistakes rather than repeat past ones.

- Learning to solve problems that nobody else has solved is a crucial skill.

- COMMENT:
  Many of the examples in this book are based on OLD technology such as 16-bit
  computers. That's because you can learn almost everything you need to know
  from them and they’re easier to fit on a page.

** DONE What's in This Book
CLOSED: [2025-02-22 Sat 20:28]
- The book is conceptually divided into *THREE* parts.
  * The first part explores computer hardware,
    BOTH _what it is_ and _how it's built_.

  * The second part examines _the behavior of software running on hardware_.

  * The last part covers _the art of programming -- working with others to
    produce good programs._

- Summary of each chapters.

- _When reading this book_,
  bear in mind that
  many of the explanations are simplified and therefore not correct down to the
  smallest detail.
  Making the explanations perfect would require too much distracting detail.

  Don't be surprised if you discover this as you learn more. You can consider
  this book to be a glossy travel brochure for a trip to computer-land. It can't
  cover everything in detail, and when you go visit, you'll find plenty of
  subtle differences.

* TODO 1 THE INTERNAL LANGUAGE OF COMPUTERS - 1
- The whole point of language is to be able to communicate information.

  Your job as a programmer is to give instructions to computers.
  They don't understand our language, so you have to learn theirs.

** DONE What Is Language?
CLOSED: [2025-02-23 Sun 18:06]
** DONE Written Language
CLOSED: [2025-02-23 Sun 18:06]
- _THREE_ components frame the technology of written language, including computer
  language:
  * The containers that hold symbols
  * The symbols that are allowed in the containers
  * The ordering of the containers

- Some languages include more complicated rules that constrain the permitted
  symbols in containers based on the symbols in other containers.
  * For example, some symbols can't occupy adjacent containers.

** DONE The Bit
CLOSED: [2025-02-23 Sun 18:37]
- We'll begin with the /container/.
  * This might be called a character in a human language and a bit for
    computers.

- =TODO=
  You'll learn why we use bits in the next chapter; for now, it's enough to
  know that they're cheap and easy to build.

- The concept of symbols is abstract.
  It really doesn't matter what they stand for.
  But remember, *language doesn't work without /context/.*

  * Things would get weird fast if a sender thought they were saying U
    (dot-dot-dash), but the recipient heard duck-duck-goose.

- In the remainder of this chapter, you'll learn about some of the common ways
  in which meaning is assigned to bits for computing.
  * Keep in mind that there is a lot of _make-believe involved_ -- for example,
    you may run into things like, “Let's pretend that this bit means blue.”

    Even though you'll be learning some standard bit uses, don't be afraid to
    invent your own when appropriate.

** DONE Logic Operations
CLOSED: [2025-02-23 Sun 19:05]
One use of bits is to represent the answers to yes/no questions.

*** Boolean Algebra
- Three basic Boolean operations:
  * NOT
  * AND
  * OR

- One composite operation: XOR (exclusive-or)

- NOTE:
  The XOR operation is built from other operations.

*** De Morgan's Law
De Morgan's Law can help minimize Boolean operations, and minimizing operations
minimizes costs.

** TODO Representing Integers Using Bits
Let's move up the food chain and learn how to use bits to represent numbers.

- _Numbers_
  are more COMPLICATED than _logic_
  BUT much SIMPLER than _words_.

*** DONE Representing Positive Numbers
CLOSED: [2025-03-01 Sat 18:40]
- The rightmost bit in a binary number is called /the least significant bit
  (LSB)/ and the leftmost bit is called /the most significant bit (MSB)/,
  BECAUSE
  * CHANGING the value of the rightmost bit has the smallest effect on the value
    of the number and
  * CHANGING the value of the leftmost bit has the greatest effect.

- Table 1-1: Powers of 2

- Table 1-2: Ranges of Binary Number Values

- =from Jian=
  Here _rightmost_ and _leftmost_ are not related to how machine save them.
  They just reflect how most human write and read numbers.

*** DONE Binary Addition
CLOSED: [2025-03-01 Sat 19:57]
- Addition is actually a bit easier in binary because there are only 4 possible
  combinations of 2 bits compared to 100 combinations of 2 digits. For example,
  Figure 1-8 shows how to add 1 and 5 using binary numbers, showing the number
  being carried above each column.

- =IMPORTANT=
  _Figure 1-9: Binary addition using logical operations_

  When we add 2 bits together,
  the value of the *result* is the _XOR_ of the 2 bits,
  and
  the value of the *carry* is the _AND_ of the 2 bits.

  See Figure 1-9

- overflow :: A carry from the most significant bit.

- Computers have a /condition code register/, which is a place that holds odd
  pieces of information.
  * One of these is an /overflow bit/, which holds the carry value from the most
    significant bit.

    We can look at this value to determine whether or not /overflow/ occurred.

- underflow :: borrow beyond the most significant bit.
  * Computers have a condition code for this too.

*** TODO Representing Negative Numbers
**** Sign and Magnitude
**** One's Complement
**** Two's Complement

** TODO Representing Real Numbers
*** Fixed-Point Representation
*** Floating-Point Representation
*** The IEEE Floating-Point Standard

** TODO Binary-Coded Decimal System
** TODO Easier Ways to Work with Binary Numbers
*** Octal Representation
*** Hexadecimal Representation
*** Representing the Context

** TODO Naming Groups of Bits
** TODO Representing Text
*** The American Standard Code for Information Interchange
*** The Evolution of Other Standards
*** Unicode Transformation Format 8-bit

** TODO Using Characters to Represent Numbers
*** Quoted-Printable Encoding
*** Base64 Encoding
*** URL Encoding

** TODO Representing Colors
*** Adding Transparency
*** Encoding Colors

** TODO Summary

* TODO 2 COMBINATORIAL LOGIC - 33
** The Case for Digital Computers
*** The Difference Between Analog and Digital
*** Why Size Matters in Hardware
*** Digital Makes for More Stable Devices
*** Digital in an Analog World
*** Why Bits Are Used Instead of Digits

** A Short Primer on Electricity
*** Using Plumbing to Understand Electricity
*** Electrical Switches

** Building Hardware for Bits
*** Relays
*** Vacuum Tubes
*** Transistors
*** Integrated Circuits

** Logic Gates
*** Improving Noise Immunity with Hysteresis
*** Differential Signaling
*** Propagation Delay
*** Output Variations
**** Totem-Pole Output
**** Open-Collector Output
**** Tri-State Output

** Building More Complicated Circuits
*** Building an Adder
*** Building Decoders
*** Building Demultiplexers
*** Building Selectors

** Summary

* TODO 3 SEQUENTIAL LOGIC - 69
** Representing Time
*** Oscillators
*** Clocks
*** Latches
*** Gated Latches
*** Flip-Flops
*** Counters
*** Registers

** Memory Organization and Addressing
*** Random-Access Memory
*** Read-Only Memory

** Block Devices
** Flash Memory and Solid State Disks
** Error Detection and Correction
** Hardware vs. Software
** Summary
* TODO 4 COMPUTER ANATOMY - 93
** Memory
** Input and Output
** The Central Processing Unit
*** Arithmetic and Logic Unit
*** Shiftiness
*** Execution Unit

** Instruction Set
*** Instructions
*** Addressing Modes
*** Condition Code Instructions
*** Branching
*** Final Instruction Set

** The Final Design
*** The Instruction Register
*** Data Paths and Control Signals
*** Traffic Control

** RISC vs. CISC Instruction Sets
** Graphics Processing Units
** Summary

* TODO 5 COMPUTER ARCHITECTURE - 117
** Basic Architectural Elements
*** Processor Cores
*** Microprocessors and Microcomputers

** Procedures, Subroutines, and Functions
** Stacks
** Interrupts
** Relative Addressing
** Memory Management Units
** Virtual Memory
** System and User Space
** Memory Hierarchy and Performance
** Coprocessors
** Arranging Data in Memory
** Running Programs
** Memory Power
** Summary

* TODO 6 COMMUNICATIONS BREAKDOWN - 141
** Low-Level I/O
*** I/O Ports
*** Push My Buttons
*** Let There Be Lights
*** Lights, Action, . . .
*** Bright Ideas
*** 2^{n} Shades of Gray
*** Quadrature
*** Parallel Communication
*** Serial Communication
*** Catch a Wave
*** Universal Serial Bus

** Networking
*** Modern LANs
*** The Internet
**** TCP/IP
**** IP Addresses
**** Domain Name System
**** The World Wide Web

** Analog in the Digital World
*** Digital-to-Analog Conversion
*** Analog-to-Digital Conversion
*** Digital Audio
*** Digital Images
*** Video

** Human Interface Devices
*** Terminals
*** Graphics Terminals
*** Vector Graphics
*** Raster Graphics
*** Keyboard and Mouse

** Summary

* TODO 7 ORGANIZING DATA - 183
** Primitive Data Types
** Arrays
** Bitmaps
** Strings
** Compound Data Types
** Singly Linked Lists
** Dynamic Memory Allocation
** More Efficient Memory Allocation
** Garbage Collection
** Doubly Linked Lists
** Hierarchical Data Structures
** Storage for the Masses
** Databases
** Indices
** Moving Data Around
** Vectored I/O
** Object-Oriented Pitfalls
** Sorting
** Making a Hash of Things
** Efficiency vs. Performance
** Summary

* TODO 8 LANGUAGE PROCESSING - 217
** Assembly Language
** High-Level Languages
** Structured Programming
** Lexical Analysis
*** State Machines
*** Regular Expressions

** From Words to Sentences
** The Language-of-the-Day Club
** Parse Trees
** Interpreters
** Compilers
** Optimization
** Be Careful with Hardware
** Summary

* TODO 9 THE WEB BROWSER - 237
** Markup Languages
** Uniform Resource Locators
** HTML Documents
** The Document Object Model
*** Tree Lexicon
*** Interpreting the DOM

** Cascading Style Sheets
** XML and Friends
** JavaScript
** jQuery
** SVG
** HTML5
** JSON
** Summary

* TODO 10 APPLICATION AND SYSTEM PROGRAMMING - 259
** Guess the Animal Version 1: HTML and JavaScript
*** Application-Level Skeleton
*** Web Page Body
*** The JavaScript
*** The CSS

** Guess the Animal Version 2: C
*** Terminals and the Command Line
*** Building the Program
*** Terminals and Device Drivers
*** Context Switching
*** Standard I/O
*** Circular Buffers
*** Better Code Through Good Abstractions
*** Some Mechanics
*** Buffer Overflow
*** The C Program
*** Training

** Summary

* TODO 11 SHORTCUTS AND APPROXIMATIONS - 283
** Table Lookup
*** Conversion
*** Texture Mapping
*** Character Classification

** Integer Methods
*** Straight Lines
*** Curves Ahead
*** Polynomials

** Recursive Subdivision
*** Spirals
*** Constructive Geometry
*** Shifting and Masking

** More Math Avoidance
*** Power Series Approximations
*** The CORDIC Algorithm

** Somewhat Random Things
*** Space-Filling Curves
*** L-Systems
*** Going Stochastic
*** Quantization

** Summary

* TODO 12 DEADLOCKS AND RACE CONDITIONS - 335
** What Is a Race Condition?
** Shared Resources
** Processes and Threads
** Locks
*** Transactions and Granularity
*** Waiting for a Lock
*** Deadlocks
*** Short-Term Lock Implementation
*** Long-Term Lock Implementation

** Browser JavaScript
** Asynchronous Functions and Promises
** Summary

* TODO 13 SECURITY - 351
** Overview of Security and Privacy
*** Threat Model
*** Trust
*** Physical Security
*** Communications Security
*** Modern Times
*** Metadata and Surveillance
*** The Social Context
*** Authentication and Authorization

** Cryptography
*** Steganography
*** Substitution Ciphers
*** Transposition Ciphers
*** More Complex Ciphers
*** One-Time Pads
*** The Key Exchange Problem
*** Public Key Cryptography
*** Forward Secrecy
*** Cryptographic Hash Functions
*** Digital Signatures
*** Public Key Infrastructure
*** Blockchain
*** Password Management

** Software Hygiene
*** Protect the Right Stuff
*** Triple-Check Your Logic
*** Check for Errors
*** Minimize Attack Surfaces
*** Stay in Bounds
*** Generating Good Random Numbers Is Hard
*** Know Thy Code
*** Extreme Cleverness Is Your Enemy
*** Understand What’s Visible
*** Don't Overcollect
*** Don't Hoard
*** Dynamic Memory Allocation Isn't Your Friend
*** Garbage Collection Is Not Your Friend Either
*** Data as Code

** Summary

* TODO 14 MACHINE INTELLIGENCE - 385
** Overview
** Machine Learning
*** Bayes
*** Gauss
*** Sobel
*** Canny
*** Feature Extraction
*** Neural Networks
*** Using Machine Learning Data

** Artificial Intelligence
** Big Data
** Summary

* TODO 15 REAL-WORLD CONSIDERATIONS - 413
** The Value Proposition
** How We Got Here
*** A Short History
*** Open Source Software
*** Creative Commons
*** The Rise of Portability
*** Package Management
*** Containers
*** Java
*** Node.js
*** Cloud Computing
*** Virtual Machines
*** Portable Devices

** The Programming Environment
*** Are You Experienced?
*** Learning to Estimate
*** Scheduling Projects
*** Decision Making
*** Working with Different Personalities
*** Navigating Workplace Culture
*** Making Informed Choices

** Development Methodologies
** Project Design
*** Writing It Down
*** Fast Prototyping
*** Interface Design
*** Reusing Code or Writing Your Own

** Project Development
*** The Talk
*** Portable Code
*** Source Control
*** Testing
*** Bug Reporting and Tracking
*** Refactoring
*** Maintenance

** Be Stylish
** Fix, Don't Re-create
** Summary

* INDEX - 445
