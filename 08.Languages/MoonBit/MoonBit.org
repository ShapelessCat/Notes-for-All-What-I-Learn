#+TITLE: MoonBit
#+VERSION: 0.1.20250428 (a65ec7f 2025-04-28)
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

MoonBit is an end-to-end programming language toolchain
FOR *cloud and edge computing using WebAssembly.*

The IDE environment is available at https://try.moonbitlang.com without any
installation; it does not rely on any server either.

* Tutorial
** A Tour of MoonBit for Beginners
*** Installation
**** the Extension
**** the toolchain

*** Start Writing
**** Variables
**** Function

*** Implementing List
**** enum type
**** Trait
**** Pattern Matching

*** Iteration
*** Closing

* MoonBit Language
- Status and aimed timeline
  * MoonBit is currently in beta-preview.
  * We expect to reach beta in 2024/11/22, and 1.0 in 2025.

- Main advantages
  * Generate significantly smaller WASM output than any existing solutions.
  * Much faster runtime performance.
  * State of the art compile-time performance.
  * Simple but practical, data-oriented language design.

** Introduction
*** Expressions and Statements
*** Variable Binding
*** Naming conventions
*** Program entrance
**** ~init~ and ~main~
**** ~test~

** Fundamentals
*** Built-in Data Structures
**** Boolean
**** Number
***** Overloaded literal

**** String
***** Overloaded literal

**** Char
***** Overloaded literal

**** Byte(s)
***** Overloaded literal

**** Tuple
***** Overloaded literal

**** ~Ref~
**** ~Option~ and ~Result~
**** ~Array~
***** ~ArrayView~

**** ~Map~
**** ~Json literal~

*** Functions
**** Top-Level Functions
**** Local Functions
**** Function Applications
**** Labelled arguments
**** Optional arguments
**** Automatically insert ~Some~ when supplying optional arguments
**** Autofill arguments
**** Function alias

*** Control Structures
**** Conditional Expressions
**** Match Expressions
**** Guard Statement
***** Guard statement and is expression

**** While loop
**** For loop
**** ~for .. in~ loop
**** Functional loop
**** Labelled Continue/Break

*** Iterator
**** Implementation details

*** Custom Data Types
**** Struct
***** Constructing Struct with Shorthand
***** Struct Update Syntax

**** Enum
***** Constructor with labelled arguments
***** Constructor with mutable fields

**** Newtype
**** Type alias
**** Local types

*** Pattern Matching
**** Simple Patterns
**** Array Pattern
**** Range Pattern
**** Map Pattern
**** Json Pattern
**** Guard condition

*** Generics
*** Special Syntax
**** Pipe operator
**** Cascade Operator
**** Is Expression
**** Spread Operator
**** TODO syntax

** Method and Trait
*** Method system
**** API design guideline

*** Operator Overloading
*** Trait system
*** Extending traits
*** Implementing traits
*** Using traits
**** Invoke trait methods directly

*** Trait objects
*** Builtin traits
**** Deriving builtin traits

** Error handling
*** Error types
*** The Default Error Type
*** Handling Errors
*** Error Inference
*** Example: Division by Zero
*** Calling an error-able function
**** As-is calling
**** Convert to Result
***** Extracting values
***** Mapping values

*** Built-in error type and functions

** Managing Projects with Packages
*** Packages and modules
**** Internal Packages

*** Access Control
**** Access control of methods and trait implementations

*** Visibility of traits and sealed traits

** Writing Tests
*** Test Blocks
*** Snapshot Tests
**** Snapshotting ~Show~
**** Snapshotting ~Json~
**** Snapshotting Anything

*** BlackBox Tests and WhiteBox Tests

** Writing Benchmarks
*** Benchmarking with Tests Blocks
*** Batch Benchmarking
*** Raw Benchmark Statistics

** Documentation
*** Doc Comments
*** Pragmas

** Foreign Function Interface (FFI)
*** Backends
*** Declare Foreign Type
*** Declare Foreign Function
**** Types
**** Callbacks
**** Customize integer value of constant enum

*** Exported Functions
*** Lifetime management
**** Lifetime management of external object
**** Lifetime management of MoonBit object
***** The calling convention of reference counting
***** The managed types
***** The borrow attribute

** Deriving traits
*** ~Show~
*** ~Eq~ and ~Compare~
*** ~Default~
*** ~Hash~
*** ~Arbitrary~
*** ~FromJson~ and ~ToJson~
*** Enum representations
*** Container arguments
*** Case arguments
*** Field arguments

** Experimental async programming support
*** Async function
*** Async primitives for suspension
*** Integrating with JS Promise/callback based API

** Error Codes Index

* Toolchains
** MoonBit's Build System
*** DONE MoonBit's Build System Tutorial - =NOTE=
CLOSED: [2025-05-01 Thu 16:31]
**** Prerequisites
**** Creating a New Module
**** Understanding the Module Directory Structure
**** Working with Packages
**** Package Importing
**** Creating and Using a New Package
**** Adding Tests
**** Stand-alone test files for blackbox tests

*** DONE MoonBit's Package Manager Tutorial
CLOSED: [2025-05-01 Thu 17:18]
**** Overview
**** Setup mooncakes.io account
**** Update index
**** Setup MoonBit project
**** Add dependencies
**** Import packages from module
**** Remove dependencies
**** Publish your module
***** Semantic versioning convention
***** Readme & metadata
***** Moondoc

*** DONE Command-Line Help for ~moon~
CLOSED: [2025-05-01 Thu 17:28]
- Command Overview:
  ???

**** ~moon~
***** ~moon new~
***** ~moon build~
***** ~moon check~
***** ~moon run~
***** ~moon test~
***** ~moon clean~
***** ~moon fmt~
***** ~moon doc~
***** ~moon info~
***** ~moon bench~
***** ~moon add~
***** ~moon remove~
***** ~moon install~
***** ~moon tree~
***** ~moon login~
***** ~moon register~
***** ~moon publish~
***** ~moon package~
***** ~moon update~
***** ~moon coverage~
****** ~moon coverage report~
****** ~moon coverage clean~

***** ~moon generate-build-matrix~
***** ~moon upgrade~
***** ~moon shell-completion~
***** ~moon version~

*** TODO Module Configuration
**** Name
**** Version
**** Deps
**** README
**** Repository
**** License
**** Keywords
**** Description
**** Source directory
**** Warning List
**** Alert List
**** Scripts
***** postadd script

*** TODO Package Configuration
**** Name
**** is-main
**** Importing dependencies
***** ~import~
***** ~test-import~
***** ~wbtest-import~

**** Conditional Compilation
**** Link Options
***** Wasm Backend Link Options
****** Common Options
****** Wasm Linear Backend Link Options
****** Wasm GC Backend Link Options

***** JS Backend Link Options
***** Native Backend Link Options
****** Default C compiler and compiler flags for the native backend
******* C Compiler

**** Pre-build
**** Warning List
**** Alert List

*** TODO Measuring code coverage
**** Running code coverage in tests
**** Visualizing the coverage results
***** Text summary
***** OCaml Bisect format
***** Coveralls JSON format
***** Cobertura XML format
***** HTML

**** Skipping coverage

* Pilot
** MoonBit Pilot
*** Getting Started
**** MoonBit Pilot
**** Model Configuration
**** Setup
**** Usage
**** Interactive Mode
**** Print/Non-Interactive Mode

*** Model Configuration
**** Model Management
**** Configuration Parameters
**** Example Models
**** Supported Models
**** Getting API Keys
**** Usage

*** Configuration
**** Ignoring Files and Directories
**** Project Configuration

*** Commands
**** Markdown Files as Executables
**** Background
**** Final Effect
**** Implementation
**** Handling Dynamic Prompts
**** Complex Scripts
**** Additional Benefits

*** Conversations
**** Background
**** List All Conversations in Current Project
**** View Conversation Details
**** Export to Markdown Format
**** Export to JSON Format
**** Use Cases

*** Git Integration
**** Background
**** Setup
**** How It Works
**** Managing Commit History
**** Best Practices

* Examples
** Sudoku Solver
** Lambda calculus
** G-Machine
*** G-Machine 1
*** G-Machine 2
*** G-Machine 3

** Myers diff
*** Myers diff
*** Myers diff 2
*** Myers diff 3

** Segment Tree
*** Segment Tree (Part 1)
*** Segment Tree (Part 2)
