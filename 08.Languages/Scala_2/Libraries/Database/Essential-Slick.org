#+TITLE: Essential Slick
#+AUTHOR: Richard Dallaway and Jonathan Ferguson
#+COPYRIGHT: 2019 Richard Dallaway and Jonathan Ferguson
#+PUBLISHED By: Underscore Consulting LLP, Brighton, UK
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Preface - 11
** What is Slick? - 11
   Slick is a Scala library for working with /relational databases/.

   - Slick allows you to
     * *model* a /schema/,
     * *run* /queries/,
     * *insert* _data_, and
     * *update* _data_.

   - Using Slick, you can
     *write* /queries/ in Scala, giving you _typed-checked database access_.
     * The style of /queries/ makes
       working with a database
       _SIMILAR TO_
       working with regular Scala collections.

   - You need to know a few key concepts, such as:
     * queries :: which *compose* using /combinators/ such as
       + ~map~,
       + ~flatMap~, and
       + ~filter~;

     * actions :: the things you can run against a database,
                  which themselves *compose*; and

     * futures :: which are the result of /actions/,
                  and also support a set of /combinators/.

   - This material is aimed at beginner-to-intermediate Scala developers.
     You need:
     * a working knowledge of Scala (we recommend _Essential Scala_ or an equivalent book);
     * experience with /relational databases/ (familiarity with concepts such as rows, columns, joins, indexes, SQL);
     * an _installed JDK 8 or later_, along with a programmer's text editor or IDE; and
     * the sbt build tool.

** How to Contact Us - 12
** Acknowledgements - 12
** Backers - 12
** Conventions Used in This Book - 13
*** Typographical Conventions - 13
*** Source Code - 13
*** REPL Output - 13
*** Callout Boxes - 14

* 1 Basics - 15
** 1.1 Orientation - 15
** 1.2 Running the Examples and Exercises - 16
** 1.3 Working Interactively in the sbt Console - 18
** 1.4 Example: A Sequel Odyssey - 19
*** 1.4.1 Library Dependencies - 19
*** 1.4.2 Importing Library Code - 20
*** 1.4.3 Defining our Schema - 21
*** 1.4.4 Example Queries - 22
*** 1.4.5 Configuring the Database - 22
*** 1.4.6 Creating the Schema - 24
*** 1.4.7 Inserting Data - 25
*** 1.4.8 Selecting Data - 26
*** 1.4.9 Combining Queries with For Comprehensions - 28
*** 1.4.10 Actions Combine - 29

** 1.5 Take Home Points - 30
** 1.6 Exercise: Bring Your Own Data - 31

* 2 Selecting Data - 33
** 2.1 Select All The Rows! - 33
** 2.2 Filtering Results: The filter Method - 34
** 2.3 The Query and TableQuery Types - 35
** 2.4 Transforming Results - 37
*** 2.4.1 The ~map~ Method - 38
*** 2.4.2 ~exists~ - 40

** 2.5 Converting Queries to Actions - 40
** 2.6 Executing Ac ons - 41
** 2.7 Column Expressions - 43
*** 2.7.1 Equality and Inequality Methods - 43
*** 2.7.2 String Methods - 44
*** 2.7.3 Numeric Methods - 45
*** 2.7.4 Boolean Methods - 45
*** 2.7.5 Date and Time Methods - 46
*** 2.7.6 Option Methods and Type Equivalence - 46

** 2.8 Controlling Queries: Sort, Take, and Drop - 48
** 2.9 Conditional Filtering - 50
** 2.10 Take Home Points - 52
** 2.11 Exercises - 50
*** 2.11.1 Count the Messages - 51
*** 2.11.2 Selecting a Message - 51
*** 2.11.3 One Liners - 51
*** 2.11.4 Checking the SQL - 51
*** 2.11.5 Is HAL Real? - 52
*** 2.11.6 Selecting Columns - 52
*** 2.11.7 First Result - 52
*** 2.11.8 Then the Rest - 52
*** 2.11.9 The Start of Something - 53
*** 2.11.10 Liking - 53
*** 2.11.11 Client-Side or Server-Side? - 53

* 3 Creating and Modifying Data - 57
** 3.1 Inserting Rows - 57
*** 3.1.1 Inserting Single Rows - 57
*** 3.1.2 Primary Key Allocation - 58
*** 3.1.3 Retrieving Primary Keys on Insert - 60
*** 3.1.4 Retrieving Rows on Insert - 60
*** 3.1.5 Inserting Specific Columns - 62
*** 3.1.6 Inserting Multiple Rows - 64
*** 3.1.7 More Control over Inserts - 65

** 3.2 Deleting Rows - 66
** 3.3 Updating Rows - 67
*** 3.3.1 Updating a Single Field - 68
*** 3.3.2 Updating Multiple Fields - 69
*** 3.3.3 Updating with a Computed Value - 70

** 3.4 Take Home Points - 71
** 3.5 Exercises - 72
*** 3.5.1 Get to the Specifics - 72
*** 3.5.2 Bulk All the Inserts - 73
*** 3.5.3 No Apologies - 73
*** 3.5.4 Update Using a For Comprehension - 73
*** 3.5.5 Selective Memory - 74

* 4 Combining Actions - 75
** 4.1 Combinators Summary - 75
** 4.2 Combinators in Detail - 76
*** 4.2.1 ~andThen~ (or ~>>~) - 76
*** 4.2.2 ~DBIO.seq~ - 77
*** 4.2.3 ~map~ - 77
*** 4.2.4 ~DBIO.successful~ and ~DBIO.failed~ - 79
*** 4.2.5 ~flatMap~ - 80
*** 4.2.6 ~DBIO.sequence~ - 82
*** 4.2.7 ~DBIO.fold~ - 83
*** 4.2.8 ~zip~ - 84
*** 4.2.9 ~andFinally~ and ~cleanUp~ - 85
*** 4.2.10 ~asTry~ - 86

** 4.3 Logging Queries and Results - 86
** 4.4 Transactions - 88
** 4.5 Take Home Points - 89
** 4.6 Exercises - 89
*** 4.6.1 And Then what? - 89
*** 4.6.2 First! - 90
*** 4.6.3 There Can be Only One - 90
*** 4.6.4 Let’s be Reasonable - 91
*** 4.6.5 Filtering - 92
*** 4.6.6 Unfolding - 92

* 5 Data Modelling - 95
** 5.1 Application Structure - 95
*** 5.1.1 Abstracting over Databases - 96
*** 5.1.2 Scaling to Larger Codebases - 97

** 5.2 Representations for Rows - 98
*** 5.2.1 Projections, ProvenShapes, mapTo, and <> - 98
*** 5.2.2 Tuples versus Case Classes - 101
*** 5.2.3 Heterogeneous Lists - 102
**** 5.2.3.1 Using HLists Directly - 104
**** 5.2.3.2 Using HLists and Case Classes - 106

** 5.3 Table and Column Representa on - 108
*** 5.3.1 Nullable Columns - 108
*** 5.3.2 Primary Keys - 110
*** 5.3.3 Compound Primary Keys - 111
*** 5.3.4 Indices - 113
*** 5.3.5 Foreign Keys - 114
*** 5.3.6 Column Options - 118

** 5.4 Custom Column Mappings - 119
*** 5.4.1 Value Classes - 122
*** 5.4.2 Modelling Sum Types - 125

** 5.5 Take Home Points - 128
** 5.6 Exercises - 129
*** 5.6.1 Filtering Optional Columns - 129
*** 5.6.2 Matching or Undecided - 130
*** 5.6.3 Enforcement - 131
*** 5.6.4 Mapping Enumerations - 131
*** 5.6.5 Alternative Enumera ons - 131
*** 5.6.6 Custom Boolean - 132
*** 5.6.7 Turning a Row into Many Case Classes - 132

* 6 Joins and Aggregates - 133
** 6.1 Two Kinds of Join - 133
** 6.2 Chapter Schema - 133
** 6.3 Monadic Joins - 135
** 6.4 Applicative Joins - 137
*** 6.4.1 More Tables, Longer Joins - 138
*** 6.4.2 Inner Join - 141
**** 6.4.2.1 Mapping Joins - 142
**** 6.4.2.2 Filter with Joins - 142

*** 6.4.3 Left Join - 143
*** 6.4.4 Right Join - 146
*** 6.4.5 Full Outer Join - 146
*** 6.4.6 Cross Joins - 147

** 6.5 Zip Joins - 148
** 6.6 Joins Summary - 150
** 6.7 Seen Any Strange Queries? - 150
** 6.8 Aggregation - 151
*** 6.8.1 Functions - 151
*** 6.8.2 Grouping - 152
**** 6.8.2.1 ~groupBy~ - 152
**** 6.8.2.2 Groups and Joins - 152
**** 6.8.2.3 More Complicated Grouping - 153
**** 6.8.2.4 Grouping by Multiple Columns - 155

** 6.9 Take Home Points - 157
** 6.10 Exercises - 157
*** 6.10.1 Name of the Sender - 158
*** 6.10.2 Messages of the Sender - 158
*** 6.10.3 Having Many Messages - 158
*** 6.10.4 Collecting Results - 159

* 7 Plain SQL - 161
** 7.1 Selects - 162
*** 7.1.1 Select with Custom Types - 165
*** 7.1.2 Case Classes - 166

** 7.2 Updates - 168
*** 7.2.1 Updating with Custom Types - 168

** 7.3 Typed Checked Plain SQL - 169
*** 7.3.1 Compile Time Database Connections - 170
*** 7.3.2 Type Checked Plain SQL - 171

** 7.4 Take Home Points - 172
** 7.5 Exercises - 173
*** 7.5.1 Plain Selects - 174
*** 7.5.2 Conversion - 174
*** 7.5.3 Substitution - 175
*** 7.5.4 First and Last - 175
*** 7.5.5 Plain Change - 176
*** 7.5.6 Robert Tables - 176

* Appendix A. Using Different Database Products - 181
** A.1 Changes - 179
** A.2 PostgreSQL - 180
*** A.2.1 Create a Database - 180
*** A.2.2 Update =build.sbt= Dependencies - 180
*** A.2.3 Update JDBC References - 181
*** A.2.4 Update Slick Profile - 181

** A.3 MySQL - 181
*** A.3.1 Create a Database - 181
*** A.3.2 Update =build.sbt= Dependencies - 182
*** A.3.3 Update JDBC References - 182
*** A.3.4 Update Slick DriverProfile - 182

* Appendix B. Solutions to Exercises - 185
** B.1 Basics - 185
*** B.1.1 Solution to: Bring Your Own Data - 185
*** B.1.2 Solution to: Bring Your Own Data Part 2 - 186

** B.2 Selecting Data - 187
*** B.2.1 Solution to: Count the Messages - 187
*** B.2.2 Solution to: Selecting a Message - 188
*** B.2.3 Solution to: One Liners - 188
*** B.2.4 Solution to: Checking the SQL - 188
*** B.2.5 Solution to: Is HAL Real? - 188
*** B.2.6 Solution to: Selecting Columns - 189
*** B.2.7 Solution to: First Result - 189
*** B.2.8 Solution to: Then the Rest - 190
*** B.2.9 Solution to: The Start of Something - 190
*** B.2.10 Solution to: Liking - 191
*** B.2.11 Solution to: Client-Side or Server-Side? - 191

** B.3 Creating and Modifying Data - 192
*** B.3.1 Solution to: Get to the Specifics - 192
*** B.3.2 Solution to: Bulk All the Inserts - 193
*** B.3.3 Solution to: No Apologies - 194
*** B.3.4 Solution to: Update Using a For Comprehension - 194
*** B.3.5 Solution to: Selective Memory - 194

** B.4 Combining Actions - 195
*** B.4.1 Solution to: And Then what? - 195
*** B.4.2 Solution to: First! - 195
*** B.4.3 Solution to: There Can be Only One - 196
*** B.4.4 Solution to: Let’s be Reasonable - 197
*** B.4.5 Solution to: Filtering - 198
*** B.4.6 Solution to: Unfolding - 198

** B.5 Data Modelling - 199
*** B.5.1 Solution to: Filtering Optional Columns - 199
*** B.5.2 Solution to: Matching or Undecided - 200
*** B.5.3 Solution to: Enforcement - 200
*** B.5.4 Solution to: Mapping Enumerations - 200
*** B.5.5 Solution to: Alternative Enumerations - 201
*** B.5.6 Solution to: Custom Boolean - 204
*** B.5.7 Solution to: Turning a Row into Many Case Classes - 202

** B.6 Joins and Aggregates - 204
*** B.6.1 Solution to: Name of the Sender - 204
*** B.6.2 Solution to: Messages of the Sender - 205
*** B.6.3 Solution to: Having Many Messages - 205
*** B.6.4 Solution to: Collecting Results - 206

** B.7 Plain SQL - 207
*** B.7.1 Solution to: Plain Selects - 207
*** B.7.2 Solution to: Conversion - 208
*** B.7.3 Solution to: Substitution - 208
*** B.7.4 Solution to: First and Last - 209
*** B.7.5 Solution to: Plain Change - 209
*** B.7.5 Solution to: Robert Tables - 210
