#+TITLE: Scala High Performance Programming
#+SUBTITLE: Leverage Scala and the functional paradigm to build performance software
#+VERSION: 2016
#+AUTHOR: Vincent Theron, Michael Diamant
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - 1
* Chapter 1: The Road to Performance - 6
** Defining performance - 7
*** Performant software - 7
*** Hardware resources - 8
*** Latency and throughput - 9
*** Bottlenecks - 10

** Summarizing performance - 11
*** The problem with averages - 11
*** Percentiles to the rescue - 15

** Collecting measurements - 15
*** Using benchmarks to measure performance - 16
*** Profiling to locate bottlenecks - 17
*** Pairing benchmarks and profiling - 17

** A case study - 18
** Tooling - 18
** Summary - 19

* Chapter 2: Measuring Performance on the JVM - 20
** A peek into the financial domain - 20
** Unexpected volatility crushes profits - 23
** Reproducing the problem - 24
*** Throughput benchmark - 25
*** Latency benchmark - 27
**** The first latency benchmark - 27
**** The coordinated omission problem - 29
**** The second latency benchmark - 30
**** The final latency benchmark - 30

*** Locating bottlenecks - 32
**** Did I test with the expected set of resources? - 34
**** Was the system environment clean during the profiling? - 36
**** Are the JVM's internal resources performing to expectations? - 38
**** Where are the CPU bottlenecks? - 41
**** What are the memory allocation patterns? - 47
**** Trying to save the day - 51
**** A word of caution - 53
**** A profiling checklist - 53

*** Taking big steps with microbenchmarks - 53
**** Microbenchmarking the order book - 55

** Summary - 61

* Chapter 3: Unleashing Scala Performance - 62
** Value classes - 63
*** Bytecode representation - 63
*** Performance considerations - 65
*** Tagged types – an alternative to value classes - 66

** Specialization - 68
*** Bytecode representation - 69
*** Performance considerations - 71

** Tuples - 76
*** Bytecode representation - 76
*** Performance considerations - 76

** Pattern matching - 79
*** Bytecode representation - 79
*** Performance considerations - 80

** Tail recursion - 86
*** Bytecode representation - 88
*** Performance considerations - 89

** The Option data type - 92
*** Bytecode representation - 93
*** Performance considerations - 94

** Case study – a more performant option - 95
** Summary - 100





















* Chapter 4: Exploring the Collection API - 101
** High-throughput systems – improving the order book - 102
** Understanding historical trade-offs – list implementation - 102
*** ~List~ - 103
*** ~TreeMap~ - 106
*** Adding limit orders - 107
*** Canceling orders - 110

** The current order book – queue implementation - 111
*** ~Queue~ - 111

** Improved cancellation performance through lazy evaluation - 113
*** ~Set~ - 114
*** Benchmarking ~LazyCancelOrderBook~ - 119
*** Lessons learned - 123
** Historical data analysis - 124
*** Lagged time series returns - 124
**** ~Vector~ - 128
**** Data clean up - 129

*** Handling multiple return series - 132
**** ~Array~ - 133
**** Looping with the Spire cfor macro - 135

** Summary - 137

* Chapter 5: Lazy Collections and Event Sourcing - 138
** Improving the client report generation speed - 138
*** Diving into the reporting code - 139
*** Using views to speed up report generation time - 142
**** Constructing a custom view - 144
**** Applying views to improve report generation performance - 147

*** View caveats - 150
**** SeqView extends Seq - 150
**** Views are not memoizers - 151
*** Zipping up report generation - 154

** Rethinking reporting architecture - 155
*** An overview of Stream - 158
*** Transforming events - 161
*** Building the event sourcing pipeline - 166
*** Streaming Markov chains - 170
*** Stream caveats - 174
**** Streams are memoizers - 174
**** Stream can be infinite - 176

** Summary - 177

* Chapter 6: Concurrency in Scala - 178
** Parallelizing backtesting strategies - 178
*** Exploring Future - 180
*** Future and crazy ideas - 184
*** Future usage considerations - 186
**** Performing side-effects - 186
**** Blocking execution - 187
**** Handling failures - 189

*** Hampering performance through executor submissions - 192

** Handling blocking calls and callbacks - 197
*** ExecutionContext and blocking calls - 197
**** Asynchronous versus nonblocking - 198
**** Using a dedicated ExecutionContext to block calls - 198
**** Using the blocking construct - 200

*** Translating callbacks with Promise - 201
**** From callbacks to a Future-based API - 202
**** Combining Future with Promise - 203

** Tasked with more backtest performance improvements - 205
*** Introducing Scalaz Task - 205
**** Creating and executing Task - 206
**** Asynchronous behavior - 208
**** The execution model - 210

*** Modeling trading day simulations with Task - 213
*** Wrapping up the backtester - 218

** Summary - 219

* Chapter 7: Architecting for Performance - 220
** Distributed automated traders - 220
*** A glimpse into distributed architectures - 221
*** The first attempt at a distributed automated trader - 222
*** Introducing CRDTs - 224
**** The state-based increase-only counter - 227
**** The operation-based increase-only counter - 228

*** CRDTs and automated traders - 230
*** When the balance is not enough - 231
**** A new CRDT – the grow-only set - 231

** Free trading strategy performance improvements - 232
*** Benchmarking the trading strategy - 234
*** The danger of unbounded queues - 236
*** Applying back pressure - 237
*** Applying load-control policies - 239
**** Rejecting work - 240
**** Interrupting expensive processing - 244

*** Free monads - 245
**** Describing a program - 246
**** Building an interpreter - 247
**** Benchmarking the new trading strategy pipeline - 249
**** A Task interpreter - 250
**** Exploring free monads further - 253

** Summary - 254

* Index - 255


