#+TITLE: Akka Concurrency
#+VERSION: published as PrePrint (TM) eBook 2012, build date of this impression 2013-02-15
#+AUTHOR: Derek Wyatt
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Introduction - xvi
** Who you are
*** What you already need to know

** How to read this book
** What you're going to learn
** EBook features
** Typographic conventions
** Content overview

* Chapter 1. Why Akka? - 23
** 1.1 Concurrent challenges - 24
*** Technological - 25
*** Cognitive - 25

** 1.2 Akka is concurrency - 26
** 1.3 Concurrency methodologies - 26
*** Shared-state concurrency - 26
*** Message passing for concurrency - 27

** 1.4 The Akka concurrency toolkit - 28
*** A short note regarding Akka and Scala - 29
*** Akka tools - 29
**** Actors - 29
**** Futures - 29
**** Timers - 30
**** Callbacks/Closures - 30

*** Error handling (a.k.a. Resiliency) - 30
*** Non-blocking by default - 31

** 1.5 So, why Akka - 31

* Chapter 2. Concurrency and Parallelism - 32
** 2.1 Parallelism versus concurrency - 32
** 2.2 A critical look at shared-state concurrency - 33
*** The product - 34
*** In the beginning - 34
*** The first concurrency round - 35
*** The real problem shows up - 36
*** The problem’s solution - 37
*** BLURGH! - 39
*** Threads - 39
*** Thread pools - 40
*** The thread balance - 41
**** Maximizing processor time - 41
**** CPU versus IO - 42

*** Blocking calls - 42
**** Nonblocking APIs - 43

** 2.3 Immutability
*** Immutability implies an altered programming model - 44
*** Immutable data structures - 48
**** The linked list - 48
**** Modification can be fast - 49
**** Immutable maps - 51
**** The speed of immutability - 52
**** But that’s not equivalent! - 53
**** Memory consumption - 54

*** Advanced immutability - 54

** 2.4 Conclusion - 56
* Chapter 3. Setting Up Akka - 57
** 3.1 Installation using the Typesafe stack - 57
*** The project file - 58

** 3.2 That's it?
* Chapter 4. Akka Does Concurrency - 60
** 4.1 The actor - 60
*** Concurrency through messaging - 61
*** Concurrency through delegation - 62
*** Delegation for safety - 64
*** While we’re on the subject of death - 65
*** Doing one thing at a time - 66
*** The /message/ is the message - 69
*** Strongly typed messages, loosely typed endpoints - 70
*** Reactive programming - 75

** 4.2 The future - 77
*** Contracting with the actor - 77
*** Futures are great at being context-free - 80
*** Futures compose, actors don’t - 81
*** Futures work with actors - 82
*** Thinking in the future - 83

** 4.3 The other stuff - 83
*** The EventBus - 83
*** The scheduler - 84
*** Dataflow concurrency - 84
*** Message routing - 86
*** Agents - 86
*** And others... - 86

** 4.4 You grabbed the right toolkit - 87
* TODO Chapter 5. Actor - 88
* TODO Chapter 6. Akka Testing - 126
* Chapter 7. Systems, Contexts, Paths, and Locations - 151
* Chapter 8. Supervision and Death Watch - 176
* Chapter 9. Being Stateful - 225
* Chapter 10. Routing Messages - 275
* Chapter 11. Dispatchers and Mailboxes - 307
* Chapter 12. Coding in the Future - 322
* Chapter 13. Networking with IO - 369
* Chapter 14. Going Multi-Node with Remote Actors - 379
* Chapter 15. Sharing Data with Agents - 414
* Chapter 16. Granular Concurrency with Dataflow - 429
* Chapter 17. Patterns for Akka Programming - 438
* Chapter 18. Antipatterns for Akka Programming - 469
* Chapter 19. Growing Your App with Add-On Modules - 482
* Chapter 20. Using Akka from Java - 491
** 20.1 Immutability - 491
** 20.2 Differences overall - 491
** 20.3 Glueclasses - 492
** 20.4 ~akka.japi.Procedure~ - 492
** 20.5 Messages - 495
** 20.6 The untyped actor - 496
** 20.7 Futures - 501
** 20.8 Manipulating agents - 507
** 20.9 Finite state machines - 507
** 20.10 Dataflow - 508
** 20.11 Chaptersummary - 508

* Chapter 21. Now that You're an Akka Coder - 509
** 21.1 ~akka.io~ - 509
** 21.2 The mailing list - 510
** 21.3 have fun! - 510

* Bibliography - 511
* About the author - 512
* Index - 513
