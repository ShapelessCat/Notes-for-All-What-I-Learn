#+TITLE: Think Less with Scala
#+AUTHOR: Daniel Sivan
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Functions
** Good function signatures: Think LESS about Implementation (when using)
** Parametricity: Think LESS about Implementation (when designing)
   - Q :: How many implementations does these function have?
     #+begin_src scala
       // 0
       def foo0[A](a: A): A = ???

       // 1
       def foo1[A](a: List[A]): List[A] = ???

       // 2
       def foo2[A](a: List[A]): Int = ???
     #+end_src
     * A (for 0) :: One! ~def foo[A](a: A): A = a~
     * A (for 1) :: Several, but not many.
                    Still we can't exploit any property of ~a~, because we know
                    nothing about ~A~.
     * A (for 2) :: The number of the members of ~Int~ (ignore the implementations
                    that can be simplified by constant folding).

*** Recap: parametric Functions
**** *Increase* abstraction, *Lower* implementation space
**** This notion is called /parametricity/.
* Data
** ADTs / Value classes: Think LESS about Correctness
*** Recap: ADTs / Value classes
**** ADTs encode *immutable data*
**** Value classes let you add *domain* knowledge
* Patterns
** Recap: Functional Patterns
   - Functional patterns are encoded as /typeclasses/

   - As oppoosed to Design patterns, functional patterns are encoded as *libraries* like /cats/
     * The _traditional design patterns_ *can't* be encoded as libraries --
       Every time you want to use them, you need to recall the implementation
       details or open a reference book. Even worse, everyone have their own
       specific implementations. Before internalizing this knowledge, it is hard
       to read code with complex design patterns.

   - They come with *free* implementations

   - *Ecosystem* of libraries working with these patterns

** One very important thing
   - As opposed to frameworks, functional patterns knowledge *does NOT get old*
   - You can carry with you through your career, *regardless of languages or platforms*
   - Some languages even support them out of the box
* Summary
  - /Function Signatures/ with *total/pure functions* and /container types/.
  - Data encoded with ~sealed trait~'s and their subtype ~case class~'es.
  - Patterns at the function level with /typeclasses/ using *parametric functions*.
