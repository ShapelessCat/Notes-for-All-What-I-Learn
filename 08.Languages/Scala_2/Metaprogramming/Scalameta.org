#+TITLE: Scalameta
#+VERSION: 4.5.0
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Trees
** Guide
   A core functionality of Scalameta is /syntax trees/,
   which ENABLE you to
   _read_, _analyze_, _transform_ and _generate_ Scala programs at a level of
   abstraction.

   - In this guide, you will learn how to
     * *parse* /source code/ *into* /syntax trees/
     * *construct* NEW /syntax trees/
     * *pattern match* /syntax trees/
     * *traverse* /syntax trees/
     * *transform* /syntax trees/

*** DONE Installation
    CLOSED: [2022-03-20 Sun 23:05]
    - Scalameta _supports_
      * Scala 2.11
      * Scala 2.12
      * Scala 2.13
      * Scala.js
      * Scala Native
      
**** DONE sbt
     CLOSED: [2022-03-20 Sun 23:02]
     #+begin_src scala
       // build.sbt
       libraryDependencies += "org.scalameta" %% "scalameta" % "4.5.0"

       // For Scala.js, Scala Native
       libraryDependencies += "org.scalameta" %%% "scalameta" % "4.5.0"
     #+end_src

     - All code examples in this document assume you have
       #+begin_src scala
         import scala.meta._
       #+end_src
     
**** DONE Ammonite REPL
     CLOSED: [2022-03-20 Sun 23:05]
     1. To make it work with scalameta it needs to be run with ~--thin~ option.
        #+begin_src bash
          amm --thin

        #+end_src
     
     2. Then in Ammonite:
        #+begin_src scala
          import $ivy.`org.scalameta::scalameta:4.5.0`, scala.meta._
        #+end_src
     
**** TODO ScalaFiddle
     =Timeout=

*** DONE What is a syntax tree?
    CLOSED: [2022-03-20 Sun 23:35]
    - Syntax trees :: a representation of _source code_ that makes it easier to
                      *programmatically analyze* programs.

      * Scalameta has /syntax trees/ that *represent* _Scala programs_.

    - =from Jian=
      /Syntax Tree/ is the short form of /Abstract Syntax Tree/.

    - =IMPORTANT=
      FIGURE - scalameta syntax tree ~Tree~ and its subtypes.

    - /Scalameta trees/ are *lossless*, meaning that they represent Scala programs in
      _SUFFICIENT DETAIL to go *from text to trees* and *vice-versa*._

      * *Lossless* /syntax trees/ are great for *fine-grained analysis* of source
        code, which is useful for a range of applications including
        + formatting,
        + refactoring,
        + linting and
        + documentation tools
      
*** TODO Parse trees
    Scalameta comes with a /parser/ to *produce* /syntax trees/ *from* _Scala
    source code_.

    - You can
      *PARSE /trees/
      _FROM_ a variety of sources _INTO_ DIFFERENT kinds of /tree nodes/.*
    
**** DONE From strings
     CLOSED: [2022-03-20 Sun 23:56]
     The SIMPLEST way to *parse* _source code_ is *from* a _string_.

     - As long as you have ~import scala.meta._~ in your scope,
       you can use the ~parse[Source]~ as an extension method of strings.
       #+begin_src scala
         val program = """object Main extends App { print("Hello!") }"""
         val tree = program.parse[Source].get
       #+end_src

     - Once parsed, you can print the tree back into its original source code
       #+begin_src scala
         println(tree.syntax)
         // object Main extends App { print("Hello!") }
       #+end_src

     - If an error happened when you parse from strings,
       the _error messages_ do *NOT INCLUDE* a _filename_:
       #+begin_src scala
         println(
           "object Main {".parse[Source]
         )
         // <input>:1: error: } expected but end of file found
         // object Main {
         //              ^
       #+end_src
       * To make _error messages_ more helpful
         =IMPORTANT=
         it's *RECOMMENDED* to *ALWAYS* use /virtual files/ when possible,
         as explained below. =NEXT=

**** DONE From files
     CLOSED: [2022-03-20 Sun 23:55]
     - To parse a _file_ into a _tree_
       it's *RECOMMENDED* to
       1. FIRST read the _file contents_ into a _string_
       2. AND THEN construct a /virtual file/

     - Example:
       #+begin_src scala
         val path = java.nio.file.Paths.get("docs", "example.scala")
         val bytes = java.nio.file.Files.readAllBytes(path)
         val text = new String(bytes, "UTF-8")
         val input = Input.VirtualFile(path.toString, text)
         val exampleTree = input.parse[Source].get

         print(exampleTree.syntax)
         // Object Example extends App { println("Hello from a file!") }
       #+end_src
     
     - The *DIFFERENCE* between ~text.parse[Source]~ and ~input.parse[Source]~:
       the _filename_ appears in error messages for ~Input.VirtualFile~.
       #+begin_src scala
         println(
           Input.VirtualFile("example.scala", "object Main {").parse[Source]
         )
         // example.scala:1: error: } expected but end of file found
         // object Main {
         //              ^
       #+end_src
       
**** TODO From expressions
**** TODO From programs with multiple top-level statements

*** TODO Construct trees
**** With normal constructors
**** With quasiquotes

*** TODO Pattern match trees
**** With normal constructors
**** With quasiquotes

*** TODO Compare trees for equality
*** TODO Traverse trees
**** Simple traversals
**** Custom traversals

*** TODO Transform trees
**** Simple transformations
**** Custom transformations

** trees/quasiquotes
*** Expressions (meta.Term)
*** Types (meta.Type)
*** Patterns (meta.Pat) and Cases (meta.Case)
*** Members (meta.Member)
**** Declarations
**** Definitions
**** Value Parameters (meta.Term.Param)
**** Type Parameters (meta.Type.Param)

*** Inits (meta.Init)
*** Selfs (meta.Self)
*** Template (meta.Template)
*** Modifiers (meta.Mod)
*** Enumerators (meta.Enum)
*** Imports (meta.Import)
*** Importer (meta.Importer)
*** Importees (meta.Importee)
*** Sources (meta.Source)
*** Legend
**** Shorthands
**** Suffixes

** trees/examples
*** Top level (~meta.Source~, ~meta.Pkg~, ~meta.Pkg.Object~)
*** Declarations (~meta.Decl~)
*** Definitions (~meta.Defn~)
*** Terms (~meta.Term~)
*** Types (~meta.Type~)
*** Patterns (~meta.Pat~) and Cases (~meta.Case~)
*** Name (~meta.Name~)
*** Literals (~meta.Lit~)

** ScalaFiddle Playground
** AST Explorer
   A great way to learn about the structure of /Scalameta syntax trees/ is
   [[https://astexplorer.net/#/gist/ec56167ffafb20cbd8d68f24a37043a9/677e43f3adb93db8513dbe4e2c868dd4f78df4b3][AST explorer]].

** Scaladoc
   Scaladoc documentation for individual modules can be browsed on
   ~static.javadoc.io~:
   - ~Trees~: syntax trees such as ~Source~, ~Term~ and ~Type~.
   - ~Scalameta~: umbrella API with extension methods such as ~.parse[Source]~.
   - ~Testkit~: utility methods for testing with Scalameta.
   - ~Parsers~: internal parser APIs and implementation.
   - ~Common~: internal APIs.

* SemanticDB
** Guide
*** Installation
*** Example
*** What is SemanticDB good for?
*** Producing SemanticDB
**** Scalac compiler plugin
**** Metac
**** sbt

*** Consuming SemanticDB
**** Scala bindings
**** Metap
**** Protoc

*** SemanticDB-based tools
**** Scalafix
**** Metadoc
**** Metals

** Specification
*** Motivation
*** Data Model
**** TextDocument
**** Language
**** URI
**** Range
**** Location
**** Symbol
**** Scope
**** Constant
**** Type
**** Signature
**** SymbolInformation
**** Annotation
**** Access
**** SymbolOccurrence
**** Diagnostic
**** Synthetic
**** Tree

*** Data Schemas
**** Protobuf

*** Languages
**** Notation

*** Scala
**** Symbol
**** Type
**** Signature
**** SymbolInformation
**** Annotation
**** Access
**** SymbolOccurrence
**** Synthetic

*** Java
**** Symbol
**** Type
**** Signature
**** SymbolInformation
**** Annotation
**** Access
**** SymbolOccurrence
**** Synthetic

* Community
** Built with Scalameta
   Feel free to add your project to this list by submitting a pull request here.
   - _Scalafmt_: code formatter.

   - _Scalafix_: refactoring and linting tool.

   - _Metals_: Language Server Protocol implementation.

   - _Metabrowse_: static site generator to browse source code with "Jump to definition"
     and "Find references".

   - _Stags_: Scala tags generator.

   - _AST explorer_: interactive explorer of Scala syntax trees.

   - _Metarpheus_: extract models and apis from a spray-based server.

   - _sbt-ammonite-classpath_: an sbt plug-in to export classpath of an sbt project
     to Ammonite Script, which can be then used in Ammonite REPL or Jupyter Scala.

   - _sbt-example_: an sbt plug-in for creating unit tests from Scaladoc.

   - _sbt-doctest_: generates tests from examples in Scaladoc.

   - _Stryker4s_: Test your tests with mutation testing.

   - _ScalaTs_: SBT plugin based on ScalaJS; generates TypeScript declaration files
     from ScalaJS sources; outputs ECMAScript modules

** Presentations
*** How We Built Tools That Scale to Millions of Lines of Code (ScalaDays New York 2018)
*** Six Steps from Zero to IDE (flatMap(Oslo) and ScalaDays Berlin 2018)
*** SemanticDB for Scala developer tools (ScalaSphere Krakow 2018)
*** Semantic Tooling at Twitter (ScalaDays Copenhagen 2017)
*** Metaprogramming 2.0 (ScalaDays Berlin 2016)
