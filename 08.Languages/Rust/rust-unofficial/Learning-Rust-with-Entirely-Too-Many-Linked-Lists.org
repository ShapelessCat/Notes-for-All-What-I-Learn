#+TITLE: Learning Rust with Entirely Too Many Linked Lists
#+VERSION: Latest update 2024-07-29 Github https://github.com/rust-unofficial/too-many-lists
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* 1. Introduction
** An Obligatory Public Service Announcement
*** Performance doesn't always matter
*** They have O(1) split-append-insert-remove if you have a pointer there
*** I can't afford amortization
*** Linked lists waste less space
*** I use linked lists all the time in <functional languaged>
*** Linked lists are great for building concurrent data structures!
*** Mumble mumble kernel embedded something something intrusive.
*** Iterators don't get invalidated by unrelated insertions/removals
*** They're simple and great for teaching!

** Take a Breath

* 2. A Bad Stack
** 2.1. Layout
*Basic Data Layout*

** 2.2. New
** 2.3. Ownership 101
** 2.4. Push
** 2.5. Pop
** 2.6. Testing
** 2.7. Drop
*** Bonus Section for Premature Optimization!

** 2.8. Final Code

* 3. An Ok Stack
*A Ok Singly-Lsnked Stack*

** 3.1. Option
*Using Option*

** 3.2. Generic
*Making it all Generic*

** 3.3. Peek
** 3.4. IntoIter
** 3.5. Iter
** 3.6. IterMut
** 3.7. Final Code

* 4. A Persistent Stack
*A Persistent Singly-Linked Stack*

** 4.1. Layout
** 4.2. Basics
** 4.3. Drop
** 4.4. Arc
** 4.5. Final Code

* 5. A Bad Safe Deque
** 5.1. Layout
** 5.2. Building
*Building Up*
*** When to choose interior mutability
**** Introducing inherited mutability roots to shared types

** 5.3. Breaking
*Breaking Down*

** 5.4. Peek
*Peeking*

** 5.5. Symmetric Cases
*Symmetric Junk*

** 5.6. Iteration
*** IntoIter
*** Iter

** 5.7. Final Code

* 6. An Ok Unsafe Queue
*An Ok Unsafe Singly-Linked Queue*

** 6.2. Unsafe
*Unsafe Rust*

** 6.1. Layout
** 6.3. Basics
** 6.4. Miri
** 6.5. Stacked Borrows
*Attempting To Understand Stacked Borrows*
*** The Motivation: Pointer Aliasing
*** Safe Stacked Borrows
*** Unsafe Stacked Borrows
*** Managing Stacked Borrows
** 6.6. Testing Stacked Borrows
*** Basic Borrows
*** Testing Arrays
*** Testing Shared References
*** Testing Interior Mutability
*** Testing Box

** 6.7. Layout + Basics Redux
*** Layout
*** Basics

** 6.8. Extras
*Extra Junk*

** 6.9. Final Code

* 7. An Production Unsafe Deque
*An Production-Quality Unsafe Doubly-Linked Deque*

** 7.1. Layout
** 7.2. Variance and Subtyping =FIXME=
*Variance and PhantomData*

** 7.3. Basics
** 7.4. Panic Safety
*Drop and Panic Safety*

** 7.5. Boring Combinatorics
** 7.6. Filling In Random Bits
** 7.7. Testing
** 7.8. Send, Sync, and Compile Tests
** 7.9. An Introduction To Cursors
** 7.10. Implementing Cursors
*** Split
*** Splice

** 7.11. Testing Cursors
** 7.12. Final Code

* 8. A Bunch of Silly Lists
** 8.1. The Double Single
*The Double Singly-Linked List*

** 8.2. The Stack-Allocated Linked List
