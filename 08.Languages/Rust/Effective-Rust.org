#+TITLE: Effective Rust
#+AUTHOR: David Drysdale
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Preface - v
* 1. Types - 1
** Item 1: Use the type system to express your data structures - 2
** Item 2: Use the type system to express common behavior - 10
** Item 3: Prefer ~Option~ and ~Result~ transforms over explicit ~match~ expressions - 20
** Item 4: Prefer idiomatic ~Error~ types - 25
** Item 5: Understand type conversions - 34
** Item 6: Embrace the newtype pattern - 40
** Item 7: Use builders for complex types - 45
** Item 8: Familiarize yourself with reference and pointer types - 51
** Item 9: Consider using iterator transforms instead of explicit loops - 64

* 2. Traits - 77
** Item 10: Familiarize yourself with standard traits - 77
Rust encodes key behavioral aspects of its type system in the type system
itself, through a collection of fine-grained standard traits that describe those
behaviors (see Item 2)

*** Common Standard Traits
**** ~Clone~
**** ~Copy~
**** ~Default~
**** ~PartialEq~ and ~Eq~
**** ~PartialOrd~ and ~Ord~
**** ~Hash~
**** ~Debug~ and ~Display~

*** Standard Traits Covered Elsewhere
*** Operator Overloads
- Rust allows various built-in unary and binary operators to be overloaded for
  /user-defined types/, by implementing various standard traits from the
  ~std::ops~ module.

  * These traits
    + are *NOT derivable* and
    + are typically needed *ONLY* for types that represent “algebraic” objects,
      where there is a natural interpretation of these operators.

- However, experience from C++ has shown that it's best to *avoid* overloading
  operators for unrelated types as it often leads to code that is _hard to maintain_
  and has unexpected performance properties (e.g., x + y silently invokes an
  expensive O(N) method).

  * To comply with the principle of least astonishment, if you implement any operator
    overloads, you should implement a *COHERENT* set of operator overloads.
    + For example,
      if x + y has an overload (Add), and -y (Neg) does too, then you should also
      implement x - y (Sub) and make sure it gives the same answer as x + (-y).

- The items passed to the operator overload traits are *moved*, which means that
  nonCopy types will be consumed by default. Adding implementations for ~&'a
  MyType~ can help with this but requires more boilerplate to cover all of the
  possibilities (e.g., there are 4 = 2 × 2 possibilities for combining
  reference/non-reference arguments to a binary operator).

*** Summary

** Item 11: Implement the ~Drop~ trait for RAII patterns - 89
** DONE Item 12: Understand the trade-offs between generics and trait objects - 93
CLOSED: [2024-08-28 Wed 23:16]
- _Item 2_ described the use of traits to encapsulate behavior in the type system,
  as a collection of related methods, and observed that there are _TWO_ ways to
  make use of traits:
  * as /trait bounds/ for generics or
  * in /trait objects/.

  This Item explores the trade-offs between these two possibilities.

- As a running example, consider a /trait/ that covers functionality for displaying
  graphical objects:
  #+begin_src rust
    #[derive(Debug, Copy, Clone)]
    pub struct Point {
        x: i64,
        y: i64,
    }

    #[derive(Debug, Copy, Clone)]
    pub struct Bounds {
        top_left: Point,
        bottom_right: Point,
    }

    /// Calculate the overlap between two rectangles, or `None` if there is no
    /// overlap.
    fn overlap(a: Bounds, b: Bounds) -> Option<Bounds> {
        // ...
    }

    /// Trait for objects that can be drawn graphically.
    pub trait Draw {
        /// Return the bounding rectangle that encompasses the object.
        fn bounds(&self) -> Bounds;
        // ...
    }
  #+end_src

*** Generics
- Specific uses of the generic code are generated at /compile time/ -- a process
  known as
  * /monomorphization/ in Rust, and
  * /template instantiation/ in C++.

- Unlike C++, Rust explicitly encodes the expectations for the type ~T~ in the
  /type system/, in the form of /trait bounds/ for the /generic/.

- For the example, a /generic function/ that uses the trait's ~bounds()~ method
  has an explicit ~Draw~ /trait bound/, *THREE* ways in syntax (same effect):
  1. Bound in ~where~ clause:
     #+begin_src rust
       pub fn on_screen<T>(draw: &T) -> bool
       where
           T: Draw,
       {
           overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
       }
     #+end_src

  2. Bound in ~where~ clause:
     #+begin_src rust
       pub fn on_screen<T: Draw>(draw: &T) -> bool {
           overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
       }
     #+end_src

  3. Bound in ~where~ clause:
     #+begin_src rust
       pub fn on_screen(draw: &impl Draw) -> bool {
           overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
       }
     #+end_src

- The programmer writes a _SINGLE_ /generic function/, but the compiler outputs a
  _DIFFERENT_ monomorphized version of that function for every different type that
  the function is invoked with.

*** Trait Objects
In comparison, /trait objects/ are /fat pointers/ (_Item 8_) that combine a
pointer to the underlying concrete item with a pointer to a /vtable/ that in
turn holds /function pointers/ for all of the /trait implementation's methods/,
as depicted in Figure 2-1:
#+begin_src rust
  let square = Square {
      top_left: Point { x: 1, y: 2 },
      size: 2,
  };

  let draw: &dyn Draw = &square;
#+end_src

This means that a function that accepts a /trait object/ _doesn't need to be
/generic/ and doesn't need /monomorphization/._

#+begin_src rust
  /// Indicate whether an object is on-screen.
  pub fn on_screen(draw: &dyn Draw) -> bool {
      overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
  }

  // Calls `on_screen(&dyn Draw) -> bool`.
  let visible = on_screen(&square);
  // Also calls `on_screen(&dyn Draw) -> bool`.
  let visible = on_screen(&circle);
#+end_src

*** Basic Comparisons
- These basic facts already allow some immediate comparisons between the two
  possibilities:
  * /Generics/ are likely to lead to *bigger code sizes*,
    because
    1. the compiler generates a fresh copy (~on_screen::<T>(&T)~) of the code for
       *EVERY* type ~T~ that uses the generic version of the ~on_screen~ function.

    2. In contrast, the /trait object/ version (~on_screen(&dyn T)~) of the
       function needs only *a single instance*.

  * _Invoking a trait method from a generic_ will generally be ever-so-slightly
    *faster than* _invoking it from code that uses a trait object,_
    BECAUSE
    the latter needs to perform *TWO* dereferences to find the location of the
    code (/trait object/ to /vtable/, /vtable/ to /implementation location/).
    + =from Jian=
      Another more significant *PENALTY* for /trait object/:
      CAN'T inline. Many optimization can't be applied a piece of code can't be
      inlined.

  * /Compile times/ for /generics/ are likely to be *LONGER*, as
    + the compiler is building more code and
    + the linker has more work to do to fold duplicates.

- *An extra flexibility for /generics/:*
  A more significant difference is that /generic trait bounds/ can be used to
  conditionally make different functionality available, depending on whether the
  /type parameter/ implements *MULTIPLE* /traits/:

  * The /trait object/ equivalent is much more awkward.
    To make life easier, you need to define a TEMPORARY /trait/, together with a
    /blanket implementation/:
    #+begin_src rust
      trait DebugDraw: Debug + Draw {}

      /// Blanket implementation applies whenever the individual traits
      /// are implemented.
      impl<T: Debug + Draw> DebugDraw for T {}
    #+end_src
    However, if there are *MULTIPLE* combinations of distinct traits, it's clear
    that the combinatorics of this approach rapidly become unwieldy!

*** More Trait Bounds
- In addition to using /trait bounds/ to RESTRICT what /type parameters/ are
  acceptable for a /generic function/, you can also apply them to /trait
  definitions/ themselves:
  #+begin_src rust
    /// Anything that implements `Shape` must also implement `Draw`.
    trait Shape: Draw {
        /// Render that portion of the shape that falls within `bounds`.
        fn render_in(&self, bounds: Bounds);

        /// Render the shape.
        fn render(&self) {
            // Default implementation renders that portion of the shape
            // that falls within the screen area.
            if let Some(visible) = overlap(SCREEN_BOUNDS, self.bounds()) {
                self.render_in(visible);
            }
        }
    }
  #+end_src
  In this example, the ~render()~ method's /default implementation/ (_Item 13_)
  makes use of the /trait bound/, relying on the availability of the ~bounds()~
  method from ~Draw~.

- Under the covers, trait objects for traits that have trait bounds:
  #+begin_src rust
    let square = Square {
        top_left: Point { x: 1, y: 2 },
        size: 2,
    };
    let draw: &dyn Draw = &square;
    let shape: &dyn Shape = &square;
  #+end_src
  * have a single combined /vtable/ that includes
    + the methods of the /top-level trait/, plus
    + the methods of all of the /trait bounds/.

  * This is shown in Figure 2-2: the /vtable/ for ~Shape~ includes the ~bounds~
    method from the ~Draw~ /trait/, as well as the two methods from the ~Shape~
    /trait/ itself.

- =IMPORTANT=
  _At the time of writing (and as of Rust 1.70),_
  this means that there is *no way* to “upcast” from ~Shape~ to ~Draw~,
  BECAUSE
  the (pure) ~Draw~ /vtable/ *can't be recovered at runtime;*
  there is no way to convert between related /trait objects/,
  which in turn means there is *NO* /Liskov substitution/.

  =CAUTION=
  =TODO=
  However, this is likely to change in later versions of Rust --
  see _Item 19_ for more on this.

- *SUMMARY*:
  * *Trait object*
    Repeating the same point in different words, a method that accepts a ~Shape~
    /trait object/ has the following _CHARACTERISTICS_:
    + It *CAN* make use of methods from ~Draw~ (because ~Shape~ also-implements
      ~Draw~, and because the relevant /function pointers/ are present in the
      ~Shape~ /vtable/).

    + It *CANNOT (yet) pass* the /trait object/ onto another method that expects
      a ~Draw~ /trait object/ (because ~Shape~ *is-not* ~Draw~, and because the
      ~Draw~ /vtable/ isn't available).

 * *Generic method*
   In contrast, a /generic method/ that accepts items that implement ~Shape~ has
   these _CHARACTERISTICS_:
   • It *CAN* use methods from ~Draw~.
   • It *CAN PASS* the item on to another /generic method/ that has a ~Draw~
     /trait bound/, because the /trait bound/ is monomorphized at compile time
   to use the ~Draw~ methods of the concrete type.

*** Trait Object Safety
- Another restriction on /trait objects/ is the requirement for /object safety/:
  only /traits/ that comply with the following TWO rules can be used as /trait
  objects/:
  * The trait's methods *MUST NOT* be /generic/.
  * The trait's methods *MUST NOT* involve a type that includes ~Self~,
    except for the /receiver/ (the object on which the method is invoked).
    +  At the time of writing, the restriction on methods that return ~Self~
      includes types like ~Box<Self>~ that could be safely stored on the stack;
      this restriction might be relaxed in the future.

- _The first restriction_ is easy to understand:
  a /generic method/ ~f~ is really an *infinite* set of methods, potentially
  encompassing ~f::<i16>~, ~f::<i32>~, ~f::<i64>~, ~f::<u8>~, etc. The /trait
  object/'s ~vtable~, on the other hand, is very much a *finite* collection of
  /function pointers/, and so it's not possible to fit the infinite set of
  monomorphized implementations into it.

- _The second restriction_ is a little bit more subtle but tends to be the
  restriction that's hit more often in practice -- traits that impose ~Copy~ or
  ~Clone~ /trait bounds/ (_Item 10_) immediately fall under this rule, because
  they return ~Self~. To see why it's disallowed, consider code that has a /trait
  object/ in its hands; what happens if that code calls (say) ~let y = x.clone()?~
  The calling code needs to reserve enough space for ~y~ on the stack, but it has
  no idea of the size of ~y~ because ~Self~ is an arbitrary type. As a result,
  return types that mention ~Self~ lead to a trait that is not object safe.

  * There is an _EXCEPTION_ to this _second restriction_.
    A method returning some ~Self~-related type does not affect /object safety/
    _IF_
    ~Self~ comes with an explicit restriction to types _whose size is known at
    compile time,_ indicated by the ~Sized~ marker trait as a /trait bound/:
    #+begin_src rust
      /// A `Stamp` can be copied and drawn multiple times.
      trait Stamp: Draw {
          fn make_copy(&self) -> Self
          where
              Self: Sized;
      }

      let square = Square {
              top_left: Point { x: 1, y: 2 },
              size: 2,
      };

      // `Square` implements `Stamp`, so it can call `make_copy()`.
      let copy = square.make_copy();

      // Because the `Self` -- returning method has a `Sized` trait bound,
      // creating a `Stamp` trait object is possible.
      let stamp: &dyn Stamp = &square;
    #+end_src
    This /trait bound/ means that the method *CAN'T be used with /trait objects/
    anyway,* BECAUSE /trait objects/ refer to something that's of unknown size
    (~dyn Trait~), and so the method is irrelevant for /object safety/:
    =DOES NOT COMPILE=
    #+begin_src rust
      // However, the method can't be invoked via a trait object.
      let copy = stamp.make_copy();

      // error: the `make_copy` method cannot be invoked on a trait object
      //    --> src/main.rs:397:22
      //     |
      // 353 |         Self: Sized;
      //     |               ----- this has a `Sized` requirement
      // ...
      // 397 | let copy = stamp.make_copy();
      //     |                  ^^^^^^^^^
    #+end_src

*** Trade-Offs
The balance of factors so far suggests that you should _PREFER /generics/ TO
/trait objects/,_ but there are situations where /trait objects/ are the right
tool for the job.

- The first is a practical consideration:
  if _generated code size_ or _compilation time_ is a CONCERN,
  then /trait objects/ will perform better (as described earlier in this Item).

- A more theoretical aspect that leads toward /trait objects/ is that they
  fundamentally involve /type erasure/:
  information about the _CONCRETE type_ is *LOST* in the conversion to a /trait
  object/.

  This can be a downside (see _Item 19_),
  BUT it can also be useful because it allows for _collections of heterogeneous
  objects_ -- BECAUSE the code just relies on the methods of the /trait/, it can
  invoke and combine the methods of items that have DIFFERENT _concrete types_.

  * The traditional OO example of rendering a list of shapes is one example of this:
    the same ~render()~ method could be used for squares, circles, ellipses, and
    stars in the same loop:
    #+begin_src rust
      let shapes: Vec<&dyn Shape> = vec![&square, &circle];
      for shape in shapes {
          shape.render()
      }
    #+end_src

- A much more obscure potential ADVANTAGE for /trait objects/ is when the
  available types are *NOT known at /compile time/.* If new code is _dynamically
  loaded at /runtime/ (e.g., via ~dlopen(3)~)_, then items that implement
  /traits/ in the new code can be invoked only via a /trait object/, because
  there's no source code to monomorphize over.

** DONE Item 13: Use default implementations to minimize required trait methods - 103
CLOSED: [2024-08-27 Tue 00:25]
- =From Jian=
  This is similar in Rust and in other languages whose interfaces
  ALLOW /default method implementation/.

- /Trait methods/ can impose /trait bounds/, indicating that a method is ONLY
  available if the types involved implement particular traits.

* TODO 3. Concepts - 105
This chapter
- The focus of the first two Items in this chapter:
  * /borrow checker/
  * /lifetime checks/

- The other _Items_ in this chapter cover concepts that are easier to grasp but
  are nevertheless a bit different from writing code in other languages. This
  includes the following:
  • _Advice on Rust's ~unsafe~ mode_ and _how to avoid it_ (Item 16)
  • Good news and bad news about writing _multithreaded code in Rust_ (Item 17)
  • Advice on avoiding /runtime aborts/ (Item 18) =TODO: ???=
  • Information about Rust's approach to /reflection/ (Item 19)
  • Advice on balancing optimization against maintainability (Item 20) =IMPORTANT=

** Item 14: Understand lifetimes - 106
*** Introduction to the Stack
*** Evolution of Lifetimes
*** Scope of a Lifetime
*** Algebra of Lifetimes
*** Lifetime Elision Rules
*** The ~'static~ Lifetime
*** Lifetimes and the Heap
*** Lifetimes in Data Structures
*** Anonymous Lifetimes
*** Things to Remember

** Item 15: Understand the borrow checker - 123
*** Access Control
*** Borrow Rules
*** Owner Operations
*** Winning Fights Against the Borrow Checker
**** Local code refactoring
**** Data structure design
**** Smart pointers
**** Self-referential data structures

*** Things to Remember

** Item 16: Avoid writing ~unsafe~ code - 142
** Item 17: Be wary of shared-state parallelism - 145
*** Data Races
**** Data races in C++
**** Data races in Rust
**** Standard marker traits

*** Deadlocks
*** Advice

** Item 18: Don't panic - 159
The title of this Item would be more accurately described as
_prefer returning a ~Result~ to using ~panic!~ (but don't panic is much
catchier)_.

- /rust's panic mechanism/ is primarily designed for *UNRECOVERABLE bugs* in your
  program, and _BY DEFAULT_ it terminates the thread that issues the ~panic!~.
  However, there are _alternatives_ to this DEFAULT.

- 
  
** Item 19: Avoid reflection - 162
*** Upcasting in Future Versions of Rust

** Item 20: Avoid the temptation to over-optimize - 169
*** Data Structures and Allocation
*** Who’s Afraid of the Big Bad Copy?
*** References and Smart Pointers

* 4. Dependencies - 175
- It's usually still easier to reuse existing code than to write it yourself,
  BUT
  there are potential pitfalls and risks that come along with dependencies on
  someone else's code. _This chapter of the book will help you be aware of these._

- The focus is specifically on Rust, and with it the use of the _cargo_ tool, but
  many of the concerns, topics, and issues covered apply equally well to other
  toolchains (and other languages).

** TODO Item 21: Understand what semantic versioning promises - 176
- Most commonly used variants:
  * 1.2.3  :=  >=1.2.3, <2.0.0

- When choosing dependency versions, Cargo will generally pick the *LARGEST*
  version that's within the combination of all of these semver ranges.

- Because semantic versioning is at the _HEART_ of cargo's dependency resolution
  process, this _Item_ explores more details about what semver means.

*** DONE Semver Essentials
CLOSED: [2024-08-29 Thu 14:27]
- One rule that _Cargo_ does *NOT* follow strictly:
  In the _Semantic Versioning 2.0.0_ standard:
  #+begin_quote
  4. Major version zero (0.y.z) is for initial development. Anything MAY change
     at any time. The public API SHOULD NOT be considered stable.
  #+end_quote
  Cargo adapts this last rule slightly, “left-shifting” the earlier rules so that
  changes in the leftmost non-zero component indicate incompatible changes. This
  means that 0.2.3 to 0.3.0 can include an incompatible API change, as can 0.0.4
  to 0.0.5.

*** TODO Semver for Crate Authors
#+begin_quote
In theory, theory is the same as practice. In practice, it's not.
#+end_quote

- As a crate author, the first of these rules is easy to comply with, in theory:
  if you touch anything, you need a new release.

*** TODO Semver for Crate Users
*** TODO Discussion

** TODO Item 22: Minimize visibility - 181
*** Visibility Syntax
*** Visibility Semantics

** TODO Item 23: Avoid wildcard imports - 186
** TODO Item 24: Re-export dependencies whose types appear in your API - 188
** TODO Item 25: Manage your dependency graph - 191
*** Version Specification
*** Solving Problems with Tooling
*** What to Depend On
*** Things to Remember

** TODO Item 26: Be wary of feature creep - 197
*** Conditional Compilation
*** Features
*** Things to Remember

* 5. Tooling - 203
** Item 27: Document public interfaces - 203
*** Tooling
*** Additional Documentation Locations
*** Published Crate Documentation
*** What Not to Document
*** Things to Remember

** Item 28: Use macros judiciously - 209
*** Declarative Macros
*** Procedural Macros
**** Function-like macros
**** Attribute macros
**** Derive macros

*** When to Use Macros
*** Disadvantages of Macros
*** Advice

** Item 29: Listen to Clippy - 223
** Item 30: Write more than unit tests - 227
*** Unit Tests
*** Integration Tests
*** Doc Tests
*** Examples
*** Benchmarks
*** Fuzz Testing
*** Testing Advice
*** Things to Remember

** Item 31: Take advantage of the tooling ecosystem - 235
*** Tools to Remember

** Item 32: Set up a continuous integration (CI) system - 237
*** CI Steps
*** CI Principles
*** Public CI Systems

* 6. Beyond Standard Rust - 243
** Item 33: Consider making library code ~no_std~ compatible - 243
*** ~core~
*** ~alloc~
*** Writing Code for ~no_std~
*** Fallible Allocation
*** Things to Remember

** Item 34: Control what crosses FFI boundaries - 249
*** Invoking C Functions from Rust
**** Linking logistics
**** Code concerns
**** Name mangling

*** Accessing C Data from Rust
*** Lifetimes
*** Invoking Rust from C
*** Things to Remember

** Item 35: Prefer bindgen to manual FFI mappings - 261
*** Beyond C

* Afterword - 265
* Index - 267
