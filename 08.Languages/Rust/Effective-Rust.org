#+TITLE: Effective Rust
#+AUTHOR: David Drysdale
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* DONE Preface - v
CLOSED: [2024-12-09 Mon 17:42]
** Rust Version - vi
2018 and 2021

* TODO 1. Types - 1
This first chapter of this book covers advice that revolves around Rust's type
system.

- One core part of this is /Rust's ~enum~ type/ allows for /algebraic data types/.

- The Items in this chapter cover
  1. the fundamental types that the language provides and
  2. how to combine them into data structures that precisely express the
     semantics of your program.

- This chapter also describes some of the ubiquitous data structures that are
  provided by Rust's standard library:
  * ~Option~
  * ~Result~
  * ~Error~
  * ~Iterator~

- Note that Items that involve Rust /traits/ are covered in the following
  chapter, but there is necessarily a degree of overlap with the Items in this
  chapter, because _/traits/ describe the behavior of /types/._

** DONE Item 1: Use the type system to express your data structures - 2
CLOSED: [2024-12-15 Sun 16:27]
*** Fundamental Types - 2
*** Aggregate Types - 4
- Arrays
- Tuples
- Structs

*** ~enum~'s - 5
#+begin_src rust
  enum HttpResultCode {
      Ok = 200,
      NotFound = 404,
      Teapot = 418,
  }
#+end_src

- Use it to improve readability and maintainability:
  Improve
  ~print_page(/* both_sides = */ true, /* color */ false);~
  by introducing enums:
  #+begin_src rust
    pub enum Sides {
        Both,
        Single,
    }

    pub enum Output {
        BlackAndWhite,
        Color,
    }

    pub fn print_page(sides: Sides, color: Output) {
        // ...
    }
  #+end_src

  * Using the ~newtype pattern~ - see Item 6 - to wrap a ~bool~ also achieves
    type safety and maintainability; it's generally best to use the /newtype
    pattern/ if the semantics will always be _Boolean_, and to use an enum if
    there's a chance that a new alternative—e.g.,
    ~Sides::BothAlternateOrientation~ - could arise in the future.

- Footnote 3:
  =TODO=: Item 21 - ~non_exhaustive~ enum.

*** ~enum~'s with Fields - 7
_The true power of Rust's enum feature_
comes from
the fact that _each /variant/ can have data that comes along with it,_ making it
an /aggregate type/ that acts as /an algebraic data type (ADT)/.

- Use _enum with fields_ to *make invalid states inexpressible in your types*.

  * Undesired behavior
    #+begin_src rust
      pub struct DisplayProps {
          pub x: u32,
          pub y: u32,
          pub monochrome: bool,
          // `fg_color` must be (0, 0, 0) if `monochrome` is true.
          pub fg_color: RgbColor,
      }
    #+end_src

  * Fixed
    #+begin_src rust
      pub enum Color {
          Monochrome,
          Foreground(RgbColor),
      }
      pub struct DisplayProps {
          pub x: u32,
          pub y: u32,
          pub color: Color,
      }
    #+end_src

  =from Jian=:
  I think many famous Rust libraries like ~syn~ doesn't do this!!!

*** Ubiquitous ~enum~ Types - 8
**** ~Option<T>~ - 9
Use this type and never fall back to using sentinel values like ~-1~ or
~nullptr~ in C++.

**** ~Result<T, E>~ - 9
- Q :: If a function fails, how should that failure be reported?
- A :: Historically, special sentinel values (e.g., -errno return values from
       Linux system calls) or global variables (~errno~ for POSIX systems) were
       used.

** TODO Item 2: Use the type system to express common behavior - 10
_Item 1_ discussed *how to express data structures in the /type system/;*
_this Item_ moves on to discuss *the encoding of _behavior_ in Rust's type
system*.

- The mechanisms described in this Item will generally feel familiar, as they all
  have direct analogs in other languages:

  * /Functions/

  * /Methods/

  * /Function pointers/ =???=
    Supported by most languages in the C family, including C++ and Go, as a
    mechanism that allows an extra level of indirection when invoking other code.

  * /Closures/

  * /Traits/

  Of course, all of these mechanisms have Rust-specific details that this Item
  will cover.

- Of the preceding list, /traits/ have the most significance for this book.
  _Chapter 2_ focuses on Items that give advice on _designing and implementing
  traits_, but their pervasiveness means that they crop up frequently in the
  other Items in this chapter too.

*** DONE Functions and Methods - 10
CLOSED: [2024-12-15 Sun 21:17]
*** DONE Function Pointers - 12 - =TODO: Read the book corresponding section=
CLOSED: [2024-12-15 Sun 22:35]
- /Functions/ and /methods/ have their names, but they can't vary at runtime.

- To satisfy the requirement of varying at runtime, /function pointer/ is a
  solution.

- Function Pointer :: a pointer to (just) some code, with a type that reflects
  the signature of the function.
  * Example 1:
    #+begin_src rust
      fn sum(x: i32, y: i32) -> i32 {
          x + y
      }

      fn sub(x: i32, y: i32) -> i32 {
          x - y
      }
      // Explicit coercion to `fn` type is required...
      let mut op: fn(i32, i32) -> i32 = sum;
      // ...
      op = if condition {
          sum
      } else {
          sub
      }
      // ...
    #+end_src

  * Example 2:
    #+begin_src rust
      // `fn` types implement `Copy`
      let op1 = op;
      let op2 = op;

      // `fn` types implement `Eq`, this compile, but the compiler will warning you.
      // It suggests to use the std::ptr::fn_addr_eq function.
      assert!(op1 == op2);

      // `fn` implements `std::fmt::Pointer`, used by the {:p} format specifier.
      println!("op = {:p}", op);
      // Example output: "op = 0x101e9aeb0"
    #+end_src

- =IMPORTANT=
  One technical detail to _WATCH OUT FOR_:
  *explicit coercion to a ~fn~ type is needed*,
  because just using the name of a function doesn't give you something of ~fn~
  type:
  =DOES NOT COMPILE!!!=
  #+begin_src rust
    let op1 = sum;
    let op2 = sum;

    // Both op1 and op2 are of a type that cannot be named in user code,
    // and this internal type does not implement `Eq`.
    assert!(std::ptr::fn_addr_eq(op1, op2));
  #+end_src
  Instead, the _compiler error_ indicates that the type is something like
  ~fn(i32, i32) -> i32 {main::sum}~, *a type that's entirely internal to the
  compiler (i.e., could not be written in user code)* and that identifies the
  specific function as well as its signature.

  To put it another way, the type of ~sum~ encodes both
  * _the function's signature_ and
  * its _location_
  *for optimization reasons*; this type can be AUTOMATICALLY coerced (Item 5) to
  a ~fn~ type.
  
*** DONE Closures - 13
CLOSED: [2024-12-15 Sun 23:26]
- The bare /function pointers/ are limiting,
  BECAUSE the _only inputs_ available to the invoked function are those that are
  _explicitly passed as parameter values_.
  * Example:
    #+begin_src rust
      // In real code, an `Iterator` method would be more appropriate.
      pub fn modify_all(data: &mut [u32], mutator: fn(u32) -> u32) {
          for value in data {
              *value = mutator(*value);
          }
      }

      fn add2(v: u32) -> u32 {
          v + 2
      }

      let mut data = vec![1, 2, 3];
      modify_all(&mut data, add2);
      assert_eq!(data, vec![3, 4, 5]);
    #+end_src

  However, a /function pointer/ can't rely on any addtional state from the
  environment.

  =DOES NOT COMPILE=
  #+begin_src rust
    let amount_to_add = 3;

    fn add_n(v: u32) -> u32 {
        v + amount_to_add
    }

    let mut data = vec![1, 2, 3];
    modify_all(&mut data, add_n);
    assert_eq!(data, vec![3, 4, 5]);
  #+end_src
  The compilation error tells you you can use /closure/.

- A /closure/ can capture parts of the environment around it.

- A /closure/ can't be used where a /function pointer/ is explicitly expected.
  Use generics and the right bound can make your function accept both /closure/
  and /function pointer/.
  * Example:
    #+begin_src rust
      pub fn modify_all<F>(data: &mut [u32], mut mutator: F)
      where
          F: FnMut(u32) -> u32,
      {
          for value in data {
              ,*value = mutator(*value);
          }
      }
    #+end_src

- Rust has three different traits, which between them express some distinctions
  around this environment-cpaturing behavior:
  * ~FnOnce~, often combined with ~move~
  * ~FnMut~
  * ~Fn~

  The compiler *AUTOMATICALLY implements* the appropriate subset of these ~Fn*~
  traits for any lambda expression in the code; *it's NOT possible* to manually
  implement any of these traits (unlike C++'s ~operator()~ overload).
  * footnote4
    At least not in stable Rust at the time of writing.
    =from Jian: Keep an eye on this=
    The ~unboxed_closures~ and ~fn_traits~ experimental features may change this
    in the future.

- Any (not-~unsafe~) ~fn~ type automatically implements _ALL of the Fn* traits_,
  because it borrows nothing from the environment.

- As a result, when writing code that accepts /closures/, _use the most general
  Fn* trait that works_, to allow the greatest flexibility for callers.

*** TODO Traits - 17
- The ~Fn*~ traits are more flexible than BARE /function pointers/,
  BUT
  they can still describe only the behavior of a single function, and even then
  only in terms of the function’s signature.

- =TODO=
  xxx

**** Trait bounds - 18
- The /trait bounds/ check happens at compile time, when the /generic/ is
  /monomorphized/.

- =IMPORTANT=
  The advice here is to use /trait bounds/ to express requirements on the types
  used in generics

  This is an easy advice to follow - the compiler will force you to comply with
  it regardless.

**** TODO Trait objects - 19

** TODO Item 3: Prefer ~Option~ and ~Result~ transforms over explicit ~match~ expressions - 20
*** Things to Remember - 25

** TODO Item 4: Prefer idiomatic ~Error~ types - 25
*** The Error Trait - 26
*** Minimal Errors - 26
*** Nested Errors - 29
*** Trait Objects - 31
*** Libraries Versus Applications - 33
*** Things to Remember - 33

** TODO Item 5: Understand type conversions - 34
*** User-Defined Type Conversions - 34
*** Casts - 38
*** Coercion - 39

** TODO Item 6: Embrace the newtype pattern - 40
*** Bypassing the Orphan Rule for Traits - 43
*** Newtype Limitations - 18

** TODO Item 7: Use builders for complex types - 45
** TODO Item 8: Familiarize yourself with reference and pointer types - 51
*** Rust References - 52
*** Pointer Traits - 54
*** Fat Pointer Types - 56
**** Slices - 56
**** Trait objects - 58

*** More Pointer Traits - 59
*** Smart Pointer Types - 60

** TODO Item 9: Consider using iterator transforms instead of explicit loops - 64
*** Iterator Traits - 66
*** Iterator Transforms - 68
*** Iterator Consumers - 70
*** Building Collections from ~Result~ Values - 73
*** Loop Transformation - 74
*** When Explicit Is Better - 76

* TODO 2. Traits - 77
** Item 10: Familiarize yourself with standard traits - 77
Rust encodes key behavioral aspects of its type system in the type system
itself, through a collection of fine-grained standard traits that describe those
behaviors (see Item 2)

*** Common Standard Traits
**** ~Clone~
**** ~Copy~
**** ~Default~
**** ~PartialEq~ and ~Eq~
**** ~PartialOrd~ and ~Ord~
**** ~Hash~
**** ~Debug~ and ~Display~

*** Standard Traits Covered Elsewhere
*** Operator Overloads
- Rust allows various built-in unary and binary operators to be overloaded for
  /user-defined types/, by implementing various standard traits from the
  ~std::ops~ module.

  * These traits
    + are *NOT derivable* and
    + are typically needed *ONLY* for types that represent “algebraic” objects,
      where there is a natural interpretation of these operators.

- However, experience from C++ has shown that it's best to *avoid* overloading
  operators for unrelated types as it often leads to code that is _hard to maintain_
  and has unexpected performance properties (e.g., x + y silently invokes an
  expensive O(N) method).

  * To comply with the principle of least astonishment, if you implement any operator
    overloads, you should implement a *COHERENT* set of operator overloads.
    + For example,
      if x + y has an overload (Add), and -y (Neg) does too, then you should also
      implement x - y (Sub) and make sure it gives the same answer as x + (-y).

- The items passed to the operator overload traits are *moved*, which means that
  nonCopy types will be consumed by default. Adding implementations for ~&'a
  MyType~ can help with this but requires more boilerplate to cover all of the
  possibilities (e.g., there are 4 = 2 × 2 possibilities for combining
  reference/non-reference arguments to a binary operator).

*** Summary

** Item 11: Implement the ~Drop~ trait for RAII patterns - 89
** DONE Item 12: Understand the trade-offs between generics and trait objects - 93
CLOSED: [2024-08-28 Wed 23:16]
- _Item 2_ described the use of traits to encapsulate behavior in the type system,
  as a collection of related methods, and observed that there are _TWO_ ways to
  make use of traits:
  * as /trait bounds/ for generics or
  * in /trait objects/.

  This Item explores the trade-offs between these two possibilities.

- As a running example, consider a /trait/ that covers functionality for displaying
  graphical objects:
  #+begin_src rust
    #[derive(Debug, Copy, Clone)]
    pub struct Point {
        x: i64,
        y: i64,
    }

    #[derive(Debug, Copy, Clone)]
    pub struct Bounds {
        top_left: Point,
        bottom_right: Point,
    }

    /// Calculate the overlap between two rectangles, or `None` if there is no
    /// overlap.
    fn overlap(a: Bounds, b: Bounds) -> Option<Bounds> {
        // ...
    }

    /// Trait for objects that can be drawn graphically.
    pub trait Draw {
        /// Return the bounding rectangle that encompasses the object.
        fn bounds(&self) -> Bounds;
        // ...
    }
  #+end_src

*** Generics
- Specific uses of the generic code are generated at /compile time/ -- a process
  known as
  * /monomorphization/ in Rust, and
  * /template instantiation/ in C++.

- Unlike C++, Rust explicitly encodes the expectations for the type ~T~ in the
  /type system/, in the form of /trait bounds/ for the /generic/.

- For the example, a /generic function/ that uses the trait's ~bounds()~ method
  has an explicit ~Draw~ /trait bound/, *THREE* ways in syntax (same effect):
  1. Bound in ~where~ clause:
     #+begin_src rust
       pub fn on_screen<T>(draw: &T) -> bool
       where
           T: Draw,
       {
           overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
       }
     #+end_src

  2. Bound in ~where~ clause:
     #+begin_src rust
       pub fn on_screen<T: Draw>(draw: &T) -> bool {
           overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
       }
     #+end_src

  3. Bound in ~where~ clause:
     #+begin_src rust
       pub fn on_screen(draw: &impl Draw) -> bool {
           overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
       }
     #+end_src

- The programmer writes a _SINGLE_ /generic function/, but the compiler outputs a
  _DIFFERENT_ monomorphized version of that function for every different type that
  the function is invoked with.

*** Trait Objects
In comparison, /trait objects/ are /fat pointers/ (_Item 8_) that combine a
pointer to the underlying concrete item with a pointer to a /vtable/ that in
turn holds /function pointers/ for all of the /trait implementation's methods/,
as depicted in Figure 2-1:
#+begin_src rust
  let square = Square {
      top_left: Point { x: 1, y: 2 },
      size: 2,
  };

  let draw: &dyn Draw = &square;
#+end_src

This means that a function that accepts a /trait object/ _doesn't need to be
/generic/ and doesn't need /monomorphization/._

#+begin_src rust
  /// Indicate whether an object is on-screen.
  pub fn on_screen(draw: &dyn Draw) -> bool {
      overlap(SCREEN_BOUNDS, draw.bounds()).is_some()
  }

  // Calls `on_screen(&dyn Draw) -> bool`.
  let visible = on_screen(&square);
  // Also calls `on_screen(&dyn Draw) -> bool`.
  let visible = on_screen(&circle);
#+end_src

*** Basic Comparisons
- These basic facts already allow some immediate comparisons between the two
  possibilities:
  * /Generics/ are likely to lead to *bigger code sizes*,
    because
    1. the compiler generates a fresh copy (~on_screen::<T>(&T)~) of the code for
       *EVERY* type ~T~ that uses the generic version of the ~on_screen~ function.

    2. In contrast, the /trait object/ version (~on_screen(&dyn T)~) of the
       function needs only *a single instance*.

  * _Invoking a trait method from a generic_ will generally be ever-so-slightly
    *faster than* _invoking it from code that uses a trait object,_
    BECAUSE
    the latter needs to perform *TWO* dereferences to find the location of the
    code (/trait object/ to /vtable/, /vtable/ to /implementation location/).
    + =from Jian=
      Another more significant *PENALTY* for /trait object/:
      CAN'T inline. Many optimization can't be applied a piece of code can't be
      inlined.

  * /Compile times/ for /generics/ are likely to be *LONGER*, as
    + the compiler is building more code and
    + the linker has more work to do to fold duplicates.

- *An extra flexibility for /generics/:*
  A more significant difference is that /generic trait bounds/ can be used to
  conditionally make different functionality available, depending on whether the
  /type parameter/ implements *MULTIPLE* /traits/:

  * The /trait object/ equivalent is much more awkward.
    To make life easier, you need to define a TEMPORARY /trait/, together with a
    /blanket implementation/:
    #+begin_src rust
      trait DebugDraw: Debug + Draw {}

      /// Blanket implementation applies whenever the individual traits
      /// are implemented.
      impl<T: Debug + Draw> DebugDraw for T {}
    #+end_src
    However, if there are *MULTIPLE* combinations of distinct traits, it's clear
    that the combinatorics of this approach rapidly become unwieldy!

*** More Trait Bounds
- In addition to using /trait bounds/ to RESTRICT what /type parameters/ are
  acceptable for a /generic function/, you can also apply them to /trait
  definitions/ themselves:
  #+begin_src rust
    /// Anything that implements `Shape` must also implement `Draw`.
    trait Shape: Draw {
        /// Render that portion of the shape that falls within `bounds`.
        fn render_in(&self, bounds: Bounds);

        /// Render the shape.
        fn render(&self) {
            // Default implementation renders that portion of the shape
            // that falls within the screen area.
            if let Some(visible) = overlap(SCREEN_BOUNDS, self.bounds()) {
                self.render_in(visible);
            }
        }
    }
  #+end_src
  In this example, the ~render()~ method's /default implementation/ (_Item 13_)
  makes use of the /trait bound/, relying on the availability of the ~bounds()~
  method from ~Draw~.

- Under the covers, trait objects for traits that have trait bounds:
  #+begin_src rust
    let square = Square {
        top_left: Point { x: 1, y: 2 },
        size: 2,
    };
    let draw: &dyn Draw = &square;
    let shape: &dyn Shape = &square;
  #+end_src
  * have a single combined /vtable/ that includes
    + the methods of the /top-level trait/, plus
    + the methods of all of the /trait bounds/.

  * This is shown in Figure 2-2: the /vtable/ for ~Shape~ includes the ~bounds~
    method from the ~Draw~ /trait/, as well as the two methods from the ~Shape~
    /trait/ itself.

- =IMPORTANT=
  _At the time of writing (and as of Rust 1.70),_
  this means that there is *no way* to “upcast” from ~Shape~ to ~Draw~,
  BECAUSE
  the (pure) ~Draw~ /vtable/ *can't be recovered at runtime;*
  there is no way to convert between related /trait objects/,
  which in turn means there is *NO* /Liskov substitution/.

  =CAUTION=
  =TODO=
  However, this is likely to change in later versions of Rust --
  see _Item 19_ for more on this.

- *SUMMARY*:
  * *Trait object*
    Repeating the same point in different words, a method that accepts a ~Shape~
    /trait object/ has the following _CHARACTERISTICS_:
    + It *CAN* make use of methods from ~Draw~ (because ~Shape~ also-implements
      ~Draw~, and because the relevant /function pointers/ are present in the
      ~Shape~ /vtable/).

    + It *CANNOT (yet) pass* the /trait object/ onto another method that expects
      a ~Draw~ /trait object/ (because ~Shape~ *is-not* ~Draw~, and because the
      ~Draw~ /vtable/ isn't available).

 * *Generic method*
   In contrast, a /generic method/ that accepts items that implement ~Shape~ has
   these _CHARACTERISTICS_:
   • It *CAN* use methods from ~Draw~.
   • It *CAN PASS* the item on to another /generic method/ that has a ~Draw~
     /trait bound/, because the /trait bound/ is monomorphized at compile time
   to use the ~Draw~ methods of the concrete type.

*** Trait Object Safety
- Another restriction on /trait objects/ is the requirement for /object safety/:
  only /traits/ that comply with the following TWO rules can be used as /trait
  objects/:
  * The trait's methods *MUST NOT* be /generic/.
  * The trait's methods *MUST NOT* involve a type that includes ~Self~,
    except for the /receiver/ (the object on which the method is invoked).
    +  At the time of writing, the restriction on methods that return ~Self~
      includes types like ~Box<Self>~ that could be safely stored on the stack;
      this restriction might be relaxed in the future.

- _The first restriction_ is easy to understand:
  a /generic method/ ~f~ is really an *infinite* set of methods, potentially
  encompassing ~f::<i16>~, ~f::<i32>~, ~f::<i64>~, ~f::<u8>~, etc. The /trait
  object/'s ~vtable~, on the other hand, is very much a *finite* collection of
  /function pointers/, and so it's not possible to fit the infinite set of
  monomorphized implementations into it.

- _The second restriction_ is a little bit more subtle but tends to be the
  restriction that's hit more often in practice -- traits that impose ~Copy~ or
  ~Clone~ /trait bounds/ (_Item 10_) immediately fall under this rule, because
  they return ~Self~. To see why it's disallowed, consider code that has a /trait
  object/ in its hands; what happens if that code calls (say) ~let y = x.clone()?~
  The calling code needs to reserve enough space for ~y~ on the stack, but it has
  no idea of the size of ~y~ because ~Self~ is an arbitrary type. As a result,
  return types that mention ~Self~ lead to a trait that is not object safe.

  * There is an _EXCEPTION_ to this _second restriction_.
    A method returning some ~Self~-related type does not affect /object safety/
    _IF_
    ~Self~ comes with an explicit restriction to types _whose size is known at
    compile time,_ indicated by the ~Sized~ marker trait as a /trait bound/:
    #+begin_src rust
      /// A `Stamp` can be copied and drawn multiple times.
      trait Stamp: Draw {
          fn make_copy(&self) -> Self
          where
              Self: Sized;
      }

      let square = Square {
              top_left: Point { x: 1, y: 2 },
              size: 2,
      };

      // `Square` implements `Stamp`, so it can call `make_copy()`.
      let copy = square.make_copy();

      // Because the `Self` -- returning method has a `Sized` trait bound,
      // creating a `Stamp` trait object is possible.
      let stamp: &dyn Stamp = &square;
    #+end_src
    This /trait bound/ means that the method *CAN'T be used with /trait objects/
    anyway,* BECAUSE /trait objects/ refer to something that's of unknown size
    (~dyn Trait~), and so the method is irrelevant for /object safety/:
    =DOES NOT COMPILE=
    #+begin_src rust
      // However, the method can't be invoked via a trait object.
      let copy = stamp.make_copy();

      // error: the `make_copy` method cannot be invoked on a trait object
      //    --> src/main.rs:397:22
      //     |
      // 353 |         Self: Sized;
      //     |               ----- this has a `Sized` requirement
      // ...
      // 397 | let copy = stamp.make_copy();
      //     |                  ^^^^^^^^^
    #+end_src

*** Trade-Offs
The balance of factors so far suggests that you should _PREFER /generics/ TO
/trait objects/,_ but there are situations where /trait objects/ are the right
tool for the job.

- The first is a practical consideration:
  if _generated code size_ or _compilation time_ is a CONCERN,
  then /trait objects/ will perform better (as described earlier in this Item).

- A more theoretical aspect that leads toward /trait objects/ is that they
  fundamentally involve /type erasure/:
  information about the _CONCRETE type_ is *LOST* in the conversion to a /trait
  object/.

  This can be a downside (see _Item 19_),
  BUT it can also be useful because it allows for _collections of heterogeneous
  objects_ -- BECAUSE the code just relies on the methods of the /trait/, it can
  invoke and combine the methods of items that have DIFFERENT _concrete types_.

  * The traditional OO example of rendering a list of shapes is one example of this:
    the same ~render()~ method could be used for squares, circles, ellipses, and
    stars in the same loop:
    #+begin_src rust
      let shapes: Vec<&dyn Shape> = vec![&square, &circle];
      for shape in shapes {
          shape.render()
      }
    #+end_src

- A much more obscure potential ADVANTAGE for /trait objects/ is when the
  available types are *NOT known at /compile time/.* If new code is _dynamically
  loaded at /runtime/ (e.g., via ~dlopen(3)~)_, then items that implement
  /traits/ in the new code can be invoked only via a /trait object/, because
  there's no source code to monomorphize over.

** DONE Item 13: Use default implementations to minimize required trait methods - 103
CLOSED: [2024-08-27 Tue 00:25]
- =From Jian=
  This is similar in Rust and in other languages whose interfaces
  ALLOW /default method implementation/.

- /Trait methods/ can impose /trait bounds/, indicating that a method is ONLY
  available if the types involved implement particular traits.

* TODO 3. Concepts - 105
This chapter
- The focus of the first two Items in this chapter:
  * /borrow checker/
  * /lifetime checks/

- The other _Items_ in this chapter cover concepts that are easier to grasp but
  are nevertheless a bit different from writing code in other languages. This
  includes the following:
  • _Advice on Rust's ~unsafe~ mode_ and _how to avoid it_ (Item 16)
  • Good news and bad news about writing _multithreaded code in Rust_ (Item 17)
  • Advice on avoiding /runtime aborts/ (Item 18) =TODO: ???=
  • Information about Rust's approach to /reflection/ (Item 19)
  • Advice on balancing optimization against maintainability (Item 20) =IMPORTANT=

** DONE Item 14: Understand lifetimes - 106 - =TODO: RE-READ, NOTE=
CLOSED: [2024-09-12 Thu 00:09]
This Item describes Rust's /lifetime/'s, which are _a more precise formulation of
a concept_ that existed in previous compiled languages like C and C++ -- in practice
if not in theory.

- =TODO=
  /Lifetime/'s are a required input for the /borrow checker/ described in _Item 15_;
  * taken together, these features form _the heart of Rust's memory safety
    guarantees._

*** Introduction to the Stack
- /Lifetime/'s _are FUNDAMENTALLY related to_ the /stack/,
  so a quick introduction/reminder is in order.

- While a program is running, the /memory/ that it uses is divided up into different
  chunks, sometimes called /segments/.

  * Some of these chunks are a *fixed size*,
    such as the ones that hold
    + the program code or
    + the program's global data,

  * Two of the chunks -- the /heap/ and the /stack/ -- *change size* as the program
    runs.

    To allow for this, they are typically arranged at *opposite ends* of the
    program's /virtual memory space/, so one can grow downward and the other can
    grow upward (at least until your program runs out of memory and crashes), as
    summarized in Figure 3-1.
    + _Figure 3-1. Program memory layout,
      including /heap/ growing up and /stack/ growing down_

- Of these two dynamically sized chunks, the /stack/ is used to hold _state_
  related to the currently executing function. This _state_ can include these
  elements:
  * The /parameters/ passed to the function
  * The /local variables/ used in the function
  * /Temporary values/ calculated within the function
  * The /return address/ within the code of the function's caller

- When a function is called, ~f()~, a new /stack frame/ is added to the /stack/,
  beyond where the /stack frame/ for the calling function ends, and the CPU
  normally updates a register -- the stack pointer -- to point to the new stack
  frame.

*** Evolution of Lifetimes
*** Scope of a Lifetime
*** Algebra of Lifetimes
- lifetime elision rules

*** DONE Lifetime Elision Rules
CLOSED: [2024-09-11 Wed 23:37]
Here's a summary of the /lifetime elision rules/ for functions:

- One input, one or more outputs:
  assume outputs have the “same” lifetime as the input:
  #+begin_src rust
    fn f(x: &Item) -> (&Item, &Item)
    // ... is equivalent to ...
    fn f<'a>(x: &'a Item) -> (&'a Item, &'a Item)
  #+end_src

- Multiple inputs, no output:
  assume all the inputs have different lifetimes:
  #+begin_src rust
    fn f(x: &Item, y: &Item, z: &Item) -> i32
    // ... is equivalent to ...
    fn f<'a, 'b, 'c>(x: &'a Item, y: &'b Item, z: &'c Item) -> i32
  #+end_src

- Multiple inputs including ~&self~, one or more outputs:
  assume output lifetime(s) are the "same" as ~&self~'s lifetime:
  #+begin_src rust
    fn f(&self, y: &Item, z: &Item) -> &Thing
    // ... is equivalent to ...
    fn f(&'a self, y: &'b Item, z: &'c Item) -> &'a Thing
  #+end_src

*** TODO The ~'static~ Lifetime
- One case that has not been covered till now:
  * Q :: What happens if there are no input lifetimes, but the output return value
         includes a reference anyway?

  * A :: The only allowed possibility is for the returned /reference/ to have a
    /lifetime/ that's guaranteed to _never go out of scope:_ ~'static~, which is
    also the only /lifetime/ that has a specific name rather than an arbitrary
    placeholder name.

- The Rust compiler guarantees that a ~static~ item always
  * has the *SAME address* for the entire duration of the program and
  * never moves.

  This means that a /reference/ to a /static/ item has a ~'static~ /lifetime/,
  logically enough.

- In many cases, a reference to a const item will also be promoted to have a 'static
  lifetime, but there are a couple of minor complications to be aware of. The first is that
  this promotion doesn’t happen if the type involved has a destructor or interior
  mutability
  =TODO: NOTE=

*** Lifetimes and the Heap
*** Lifetimes in Data Structures
*** Anonymous Lifetimes
*** Things to Remember

** TODO Item 15: Understand the borrow checker - 123
- The borrowing mechanism involves _the CREATION and USE of /references/,_
  subject to rules policed by the /borrow checker/.

- Under the covers, Rust's /references/ use the _same kind_ of /pointer values/
  (Item 8) that are so prevalent in C or C++ code but are girded with rules and
  restrictions to make sure that the sins of C/C++ are avoided. As a quick
  comparison:
  * Like a C/C++ pointer, a Rust reference is created with an ampersand: ~&value~.

  * Like a C++ reference, a Rust reference can never be ~nullptr~.

  * Like a C/C++ pointer or reference, a Rust reference can be modified after
    creation to refer to something different.

  * _UNLIKE_ C++, producing a /reference/ from a value _ALWAYS_ involves an
    *EXPLICIT* (~&~) conversion --
    if you see code like ~f(value)~, you know that ~f~ is receiving /ownership/ of
    the value. (However, it may be /ownership/ of a copy of the item, if the
    value's type implements ~Copy~ -- see Item 10.)

  * _UNLIKE_ C/C++, the _mutability_ of a newly created /reference/ is _ALWAYS_
    *EXPLICIT* (~&mut~).
    If you see code like ~f(&value)~, you know that value won't be modified
    (i.e., is ~const~ in C/C++ terminology). Only expressions like ~f(&mut value)~
    have the potential to change the contents of ~value~.
    + footnote2:
      Note that all bets are off with expressions like ~m!(value)~ that involve a
      /macro/ (_Item 28_), BECAUSE that can expand to arbitrary code.

- The MOST IMPORTANT *DIFFERENCE* between _a C/C++ pointer_ and a /Rust reference/
  is indicated by the term /borrow/:
  + you CAN take a /reference (pointer)/ to an item,
    but you CAN'T keep that /reference/ forever.
    - In particular, you can't keep it longer than the /lifetime/ of the
      underlying item, as tracked by the compiler and explored in _Item 14_.

- =IMPORTANT=
  These RESTRICTIONS on the use of /references/
  * enable Rust to make its _memory safety guarantees_,
  * BUT they also mean that you have to
    + accept the _cognitive costs_ of the /borrow rules/, and
    + accept that it will change how you design your software -- particularly its
      data structures.

- _This Item_
  1. starts by describing what Rust /references/ can do, and the /borrow checker/'s
     rules for using them.

  2. The rest of _the Item_ focuses on dealing with the consequences of those rules:
     _HOW TO_
     refactor,
     rework, and
     redesign your code
     _SO THAT_ you can win fights against the /borrow checker/.

*** Access Control
- There are _THREE_ ways to access the contents of a Rust item: via
  * the item's /owner/ (~item~),
  * a /reference/ (~&item~), or
  * a /mutable reference/ (~&mut item~).

- Each of these ways of accessing the item comes with different powers over the
  item. Putting things roughly in terms of the CRUD (create/read/update/delete)
  model for storage (using Rust's /drop/ terminology in place of _delete_):
  * The /owner/ of an item gets to _create_ it, _read_ from it, _update_ it, and
    _drop_ it.

  * A /mutable reference/ can be used to _read_ from the underlying item and
    _update_ it.

  * A (normal) /reference/ can be used only to _read_ from the underlying item.

- There's an important _Rust-specific aspect_ to these _data access rules_:
  *only the item's /owner/ can /move/ the item.*
  * This makes sense
    IF you think of a /move/ as being some combination of
    1. _CREATING_ (in the new location) and
    2. _DROPPING_ the item's memory (at the old location).

- This can lead to some _ODDITIES_ for code that has a /mutable reference/ to an
  item. For example, it's OK to overwrite an ~Option~:
  #+CANNOT_COMPILE
  #+begin_src rust
    /// Some data structure used by the code.
    #[derive(Debug)]
    pub struct Item {
        pub contents: i64,
    }
    /// Replace the content of `item` with `val`.
    pub fn replace(item: &mut Option<Item>, val: Item) {
        *item = Some(val);
    }
  #+end_src

  BUT a modification to also return the previous value falls foul of the move
  restriction:

  Use the idea from the last note entry:
  #+CANNOT_COMPILE
  #+begin_src rust
    /// Replace the content of `item` with `val`, returning the previous
    /// contents.
    pub fn replace(item: &mut Option<Item>, val: Item) -> Option<Item> {
        let previous = *item; // move out
        *item = Some(val); // replace
        previous
    }

    // error[E0507]: cannot move out of `*item` which is behind a mutable reference
    //   --> src/main.rs:34:24
    //    |
    // 34 | let previous = *item; // move out
    //    | ^^^^^ move occurs because `*item` has type
    //    | `Option<inner::Item>`, which does not
    //    | implement the `Copy` trait
    //    |
    // help: consider removing the dereference here
    //    |
    // 34 - let previous = *item; // move out
    // 34 + let previous = item; // move out
    //    |
  #+end_src

  1. The error message is not helpful

  2. Although it's VALID to _read_ from a /mutable reference/, this code is attempting
     to /move/ the value out, just _prior to_ replacing the /moved value/ with a
     new value -- in an attempt to *avoid making a copy* of the original value.

     The borrow checker has to be conservative and notices that there's a moment
     between the two lines when the /mutable reference/ isn't referring to a
     valid value.
     =from Jian= This is reasonable -- it is the duty of borrow checker.

     _HOWEVER_,
     As humans, we can see that this combined operation --
     _extracting the old value_ and _replacing it with a new value_ --
     is both safe and useful, so the standard library provides the
     ~std::mem::replace~ function to perform it. Under the covers, ~replace~ uses
     ~unsafe~ (as per _Item 16_) to perform the ~swap~ in one go:
     #+begin_src rust
       /// Replace the content of `item` with `val`, returning the previous
       /// contents.
       pub fn replace(item: &mut Option<Item>, val: Item) -> Option<Item> {
           std::mem::replace(item, Some(val)) // returns previous value
       }
     #+end_src
     For ~Option~, this is a common pattern, therefore ~Option~ actual has a
     replace /method/: ~pub const fn replace(&mut self, value: T) -> Option<T>~.

*** Borrow Rules
- There are _TWO key rules_ to remember _WHEN borrowing references in Rust_.

  * Rule 1 ::
    The /scope/ of ANY /reference/ must be smaller than the /lifetime/ of the
    item that it refers to.

  * Rule 2 ::
    For /borrowing references/ is that, in addition to the /owner/ of an item,
    there can be either of the following:
    + *Any number* of /immutable references/ to the item
    + *A single* /mutable reference/ to the item

- These borrowing rules allow the compiler to *make better decisions around
  /aliasing/:*
  =from Jian= _Here the /aliasing/ is an important concept in compiler theory!!!_

  Tracking when two different pointers may or may not refer to the same
  underlying item in memory.

  If the compiler can be sure (as in Rust) that the memory location pointed to
  by a collection of /immutable references/ *cannot be altered via an aliased
  /mutable reference/,* then it can generate code that has the following
  advantages:
  * _It's better optimized_
    Values can be, for example, cached in registers, secure in the knowledge
    that the underlying memory contents will not change in the meantime.

  * _It's safer_
    /Data races/ arising from _unsynchronized access to memory between /threads/
    (Item 17)_ are *NOT possible*.

*** Owner Operations
*** Winning Fights Against the Borrow Checker
**** Local code refactoring
**** Data structure design
**** Smart pointers
**** Self-referential data structures

*** Things to Remember

** TODO Item 16: Avoid writing ~unsafe~ code - 142
** TODO Item 17: Be wary of shared-state parallelism - 145
*** Data Races
**** Data races in C++
**** Data races in Rust
**** Standard marker traits

*** Deadlocks
*** Advice

** TODO Item 18: Don't panic - 159
The title of this Item would be more accurately described as
_prefer returning a ~Result~ to using ~panic!~ (but don't panic is much
catchier)_.

- /rust's panic mechanism/ is primarily designed for *UNRECOVERABLE bugs* in your
  program, and _BY DEFAULT_ it terminates the thread that issues the ~panic!~.
  However, there are _alternatives_ to this DEFAULT.

- 
  
** TODO Item 19: Avoid reflection - 162
*** Upcasting in Future Versions of Rust

** TODO Item 20: Avoid the temptation to over-optimize - 169
*** Data Structures and Allocation
*** Who’s Afraid of the Big Bad Copy?
*** References and Smart Pointers

* TODO 4. Dependencies - 175
- It's usually still easier to reuse existing code than to write it yourself,
  BUT
  there are potential pitfalls and risks that come along with dependencies on
  someone else's code. _This chapter of the book will help you be aware of these._

- The focus is specifically on Rust, and with it the use of the _cargo_ tool, but
  many of the concerns, topics, and issues covered apply equally well to other
  toolchains (and other languages).

** TODO Item 21: Understand what semantic versioning promises - 176
- Most commonly used variants:
  * 1.2.3  :=  >=1.2.3, <2.0.0

- When choosing dependency versions, Cargo will generally pick the *LARGEST*
  version that's within the combination of all of these semver ranges.

- Because semantic versioning is at the _HEART_ of cargo's dependency resolution
  process, this _Item_ explores more details about what semver means.

*** DONE Semver Essentials
CLOSED: [2024-08-29 Thu 14:27]
- One rule that _Cargo_ does *NOT* follow strictly:
  In the _Semantic Versioning 2.0.0_ standard:
  #+begin_quote
  4. Major version zero (0.y.z) is for initial development. Anything MAY change
     at any time. The public API SHOULD NOT be considered stable.
  #+end_quote
  Cargo adapts this last rule slightly, “left-shifting” the earlier rules so that
  changes in the leftmost non-zero component indicate incompatible changes. This
  means that 0.2.3 to 0.3.0 can include an incompatible API change, as can 0.0.4
  to 0.0.5.

*** TODO Semver for Crate Authors
#+begin_quote
In theory, theory is the same as practice. In practice, it's not.
#+end_quote

- As a crate author, the first of these rules is easy to comply with, in theory:
  if you touch anything, you need a new release.

*** TODO Semver for Crate Users
*** TODO Discussion

** TODO Item 22: Minimize visibility - 181
*** Visibility Syntax
*** Visibility Semantics

** TODO Item 23: Avoid wildcard imports - 186
** TODO Item 24: Re-export dependencies whose types appear in your API - 188
** TODO Item 25: Manage your dependency graph - 191
*** Version Specification
*** Solving Problems with Tooling
*** What to Depend On
*** Things to Remember

** TODO Item 26: Be wary of feature creep - 197
*** Conditional Compilation
*** Features
*** Things to Remember

* TODO 5. Tooling - 203
** Item 27: Document public interfaces - 203
*** Tooling
*** Additional Documentation Locations
*** Published Crate Documentation
*** What Not to Document
*** Things to Remember

** Item 28: Use macros judiciously - 209
*** Declarative Macros
*** Procedural Macros
**** Function-like macros
**** Attribute macros
**** Derive macros

*** When to Use Macros
*** Disadvantages of Macros
*** Advice

** Item 29: Listen to Clippy - 223
** Item 30: Write more than unit tests - 227
*** Unit Tests
*** Integration Tests
*** Doc Tests
*** Examples
*** Benchmarks
*** Fuzz Testing
*** Testing Advice
*** Things to Remember

** Item 31: Take advantage of the tooling ecosystem - 235
*** Tools to Remember

** Item 32: Set up a continuous integration (CI) system - 237
*** CI Steps
*** CI Principles
*** Public CI Systems

* TODO 6. Beyond Standard Rust - 243
** Item 33: Consider making library code ~no_std~ compatible - 243
*** ~core~
*** ~alloc~
*** Writing Code for ~no_std~
*** Fallible Allocation
*** Things to Remember

** Item 34: Control what crosses FFI boundaries - 249
*** Invoking C Functions from Rust
**** Linking logistics
**** Code concerns
**** Name mangling

*** Accessing C Data from Rust
*** Lifetimes
*** Invoking Rust from C
*** Things to Remember

** Item 35: Prefer bindgen to manual FFI mappings - 261
*** Beyond C

* Afterword - 265
* Index - 267
