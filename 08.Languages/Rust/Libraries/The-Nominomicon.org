#+TITLE: The Nominomicon
#+SUBTITLE: The Nom Guide
#+VERSION: 7.1.3
#+STARTUP: overview
#+STARTUP: entitiespretty
#+STARTUP: indent

* TODO Introduction
* DONE 1. The Nom Way
CLOSED: [2023-10-25 Wed 17:42]
/nom/ lets us build simple parsers, and then combine them with /combinators/.

- Q :: What a "parser" actually does?
- A :: A parser takes an input and returns a result, where:
  * ~Ok~ indicates the parser successfully found what it was looking for; or
  * ~Err~ indicates the parser could not find what it was looking for.

- ~use nom::IResult;~

- First example:
  #+begin_src rust
    pub fn do_nothing_parser(input: &str) -> IResult<&str, &str> {
        Ok((input, ""))
    }

    fn main() -> Result<(), Box<dyn Error>> {
        let (remaining_input, output) = do_nothing_parser("my_input")?;
        assert_eq!(remaining_input, "my_input");
        assert_eq!(output, "");
    }
  #+end_src
  This parser should take in an ~&str~:
  * Since it is supposed to succeed, we know it will return the ~Ok~ Variant.
  * Since it does nothing to our ~input~, the remaining input is the same as the ~input~.
  * Since it doesn't parse anything, it also should just return an EMPTY string.

* DONE 2. Tags and Character Classes
CLOSED: [2023-10-25 Wed 17:59]
- _THE SIMPLEST USEFUL PARSER_ you can write is one which has no special characters,
  it just *matches a string*.

- In nom, we call _a simple collection of bytes_ a ~tag~.

  * Because these are so common, there already exists a function called ~tag()~.
    This function returns a parser for a given string.

- *Warning*: nom has multiple different definitions of tag, make sure you use
  this one for the moment!
  ~pub use nom::bytes::complete::tag;~


** Character Classes
A selection of character classes:
- ~alpha0~, ~alpha1~

- ~alphanumeric0~, ~alphanumeric1~

- ~digit0~, ~digit1~

- ~multispace0~, ~multispace1~

- ~space0~, ~space1~

- ~line_ending~

- ~newline~

- ~tab~

* DONE 3. Alternatives and Composition
CLOSED: [2023-10-25 Wed 18:09]
** Alternatives
~nom::branch::alt~

** Composition
~nom::sequence::tuple~

** TODO Extra Nom Tools
|                  |   |   |   |   |
|------------------+---+---+---+---|
| ~delimited~      |   |   |   |   |
| ~preceded~       |   |   |   |   |
| ~terminated~     |   |   |   |   |
| ~pair~           |   |   |   |   |
| ~separated_pair~ |   |   |   |   |

* TODO 4. Custom Outputs from Functions - =NOTE=
** Nom's in-built parser functions
** Building a More Complex Example

* TODO 5. Repeating with Predicates - =NOTE=
** Parsers which use a predicate

* TODO 6. Repeating Parsers - =NOTE=
* TODO 7. Using Errors from Outside Nom - =NOTE=
** Particular Notes

* TODO 8. Streaming vs. Complete
To Be Completed

* TODO 9. Characters vs. Bytes
To Be Completed

* TODO 10. Exercises and Further Reading
To Be Completed
