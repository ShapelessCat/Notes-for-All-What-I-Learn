#+TITLE: Serde
#+SUBTITLE:
#+VERSION: v1.0.197
#+STARTUP: indent
#+STARTUP: overview
#+STARTUP: entitiespretty

* Overview
- /Serde/ is a framework for *ser*-ializing and *de*-serializing Rust data
  structures efficiently and generically

- The /Serde ecosystem/ consists of
  * _data structures_ that know how to serialize and deserialize themselves along with
  * _data formats_ that know how to serialize and deserialize other things.

- Serde provides
  the layer by which these two groups *interact* with each other,
    allowing any supported _data structure_ to be serialized and deserialized
    using any supported _data format_.

** DONE Design
CLOSED: [2023-07-24 Mon 18:31]
- Where many other languages rely on /runtime reflection/ for _SERIALIZING_ data,
  /Serde/ is instead built on Rust's powerful /trait system/.

- A _data structure_ that knows how to serialize and deserialize itself is one that
  implements Serde's ~Serialize~ and ~Deserialize~ traits (or uses Serde's
  ~derive~ attribute to AUTOMATICALLY generate implementations _at compile time_).

  * This *AVOIDS* any overhead of /reflection/ or /runtime type/ information.

- In fact in many situations
  the interaction between /data structure/ and /data format/ can be
  *completely optimized away* by the Rust compiler, leaving Serde serialization
  to _perform *THE SAME SPEED AS a handwritten serializer* for the specific
  selection of data structure and data format._

** TODO Data formats
** DONE Data structures
CLOSED: [2023-07-24 Mon 21:32]
- Out of the box, /Serde/ is able to _serialize_ and _deserialize_ common Rust
  data types in any of the above formats.
  * For example,
    + ~String~,
    + ~&str~,
    + ~usize~,
    + ~Vec<T>~,
    + ~HashMap<K,V>~
    are all supported.

  * In addition, /Serde/ provides a ~derive~ macro to *generate* _serialization
    implementations_ for ~struct~'s in your own program.


- Using the ~derive~ macro goes like this:
  #+begin_src rust
    use serde::{Serialize, Deserialize};

    #[derive(Serialize, Deserialize, Debug)]
    struct Point {
        x: i32,
        y: i32,
    }

    fn main() {
        let point = Point { x: 1, y: 2 };

        // Convert the Point to a JSON string.
        let serialized = serde_json::to_string(&point).unwrap();

        // Prints serialized = {"x":1,"y":2}
        println!("serialized = {}", serialized);

        // Convert the JSON string back to a Point.
        let deserialized: Point = serde_json::from_str(&serialized).unwrap();

        // Prints deserialized = Point { x: 1, y: 2 }
        println!("deserialized = {:?}", deserialized);
    }
  #+end_src

* TODO Getting Help
- =TODO= Check the channels mentioned!

* Serde data model
- The /Serde data model/ is the API by which _data structures_ and _data formats_ interact.
  You can think of it as /Serde's type system/.

* Using ~derive~
* Attributes
** Container attributes
** Variant attributes
** Field attributes

* Custom serialization
** Implementing Serialize
** Implementing Deserialize
** Unit testing

* Writing a data format
** Conventions
** Error handling
** Implementing a Serializer
** Implementing a Deserializer

* Deserializer lifetimes
* Examples
** Structs and enums in JSON
** Enum representations
** ~Default~ value for a field
** Struct flattening
** Handwritten generic type bounds
** Deserialize for custom map type
** Array of values without buffering
** Serialize enum as number
** Serialize fields as camelCase
** Skip serializing field
** Derive for remote crate
** Manually deserialize struct
** Discarding data
** Transcode into another format
** Either string or struct
** Convert error types
** Custom date format

* No-std support
* Feature flags
