#+TITLE: Code Like a Pro in Rust
#+AUTHOR: Brenden Matthews
#+YEAR: 2024
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

** preface - x
** acknowledgments - xi
** about this book - xii
** about the author - xvi
** about the cover illustration - xvii

** 1 Feelin' Rusty - 1
*** 1.1 What's Rust? - 2
*** 1.2 What's unique about Rust? - 4
**** Rust is safe - 4
**** Rust is modern - 5
**** Rust is pure open source - 5
**** Rust vs. other popular languages - 6

*** 1.3 When should you use Rust? - 7
**** Rust use cases - 7

*** 1.4 Tools you'll need - 8

* PART 1 PRO RUST - 9
** 2 Project management with Cargo - 11
*** 2.1 Cargo tour - 12
**** Basic usage - 12
**** Creating a new application or library - 13
**** Building, running, and testing - 14
**** Switching between toolchains - 15

*** 2.2 Dependency management - 16
**** Handling the Cargo.lock file - 18

*** 2.3 Feature flags - 19
*** 2.4 Patching dependencies - 21
**** Indirect dependencies - 23
**** Best practices for dependency patching - 23

*** 2.5 Publishing crates - 24
**** CI/CD integration - 24

*** 2.6 Linking to C libraries - 27
*** 2.7 Binary distribution - 29
**** Cross compilation - 30
**** Building statically linked binaries - 30

*** 2.8 Documenting Rust projects - 31
**** Code examples in documentation - 34

*** 2.9 Modules - 35
*** 2.10 Workspaces - 37
*** 2.11 Custom building scripts - 40
*** 2.12 Rust projects in embedded environments - 41
**** Memory allocation - 42

** 3 Rust tooling - 43
*** 3.1 Overview of Rust tooling - 44
*** 3.2 Using rust-analyzer for Rust IDE integration - 45
**** Magic completions - 46

*** 3.3 Using rustfmt to keep code tidy - 49
**** Installing rustfmt - 50
**** Configuring rustfmt - 50

*** 3.4 Using Clippy to improve code quality - 51
**** Installing Clippy - 51
**** Clippy's lints - 52
**** Configuring Clippy - 53
**** Automatically applying Clippy's suggestions - 54
**** Using Clippy in CI/CD - 54

*** 3.5 Reducing compile times with sccache - 55
**** Installing sccache - 55
**** Configuring sccache - 56

*** 3.6 Integration with IDEs, including Visual Studio Code - 56
*** 3.7 Using toolchains: Stable vs. nightly - 57
**** Nightly-only features - 57
**** Using nightly on published crates - 58

*** 3.8 Additional tools: cargo-update, cargo-expand, cargo-fuzz, cargo-watch, cargo-tree - 58
**** Keeping packages up to date date with cargo-update - 59
**** Debugging macros with cargo-expand - 59
**** Testing libFuzzer - 60
**** Iterating with cargo-watch - 60
**** Examining dependencies with cargo-tree - 61

* PART 2 CORE DATA - 63
** 4 Data structures - 65
*** 4.1 Demystifying ~String~, ~str~, ~&str~, and ~&'static str~ - 66
**** ~String~ vs ~str~ - 66
**** Using strings effectively - 67

*** 4.2 Understanding slices and arrays - 69
*** 4.3 Vectors - 72
**** Diving deeper into ~Vec~ - 72
**** Wrapping vectors - 73
**** Types related to vectors - 74

*** 4.4 Maps - 74
**** Custom hashing functions - 75
**** Creating hashable types - 76

*** 4.5 Rust types: Primitives, structs, enums, and aliases - 77
**** Using primitive types - 77
**** Using tuples - 80
**** Using structs - 81
**** Using enums - 84
**** Using aliases - 86

*** 4.6 Error handling with Result - 87
*** 4.7 Converting types with ~From~ / ~Into~ - 88
**** ~TryFrom~ and ~TryInto~ - 90
**** Best practices for type conversion using ~From~ and ~Into~ - 90

*** 4.8 Handling FFI compatibility with Rust's types - 90

** 5 Working with memory - 93
*** 5.1 Memory management: Heap and stack - 94
*** 5.2 Understanding ownership: Copies, borrowing, references, and moves - 96
*** 5.3 Deep copying - 97
*** 5.4 Avoiding copies - 99
*** 5.5 To box or not to box: Smart pointers - 100
*** 5.6 Reference counting - 103
*** 5.7 Clone on write - 106
*** 5.8 Custom allocators - 110
**** Writing a custom allocator - 110
**** Creating a custom allocator for protected memory - 113

*** 5.9 Smart pointers summarized - 117

* TODO PART 3 CORRECTNESS - 119
** 6 Unit testing - 121
*** 6.1 How testing is different in Rust - 122
*** 6.2 Review of built-in testing features - 123
*** 6.3 Testing frameworks - 125
*** 6.4 What not to test: Why the compiler knows better than you - 128
*** 6.5 Handling parallel test special cases and global state - 129
*** 6.6 Thinking about refactoring - 134
*** 6.7 Refactoring tools - 134
**** Reformatting - 135
**** Renaming - 135
**** Relocating - 136
**** Rewriting - 137

*** 6.8 Code coverage - 138
*** 6.9 Dealing with a changing ecosystem - 140

** 7 Integration testing - 141
*** 7.1 Comparing integration and unit testing - 142
*** 7.2 Integration testing strategies - 144
*** 7.3 Built-in integration testing vs. external integration testing - 146
*** 7.4 Integration testing libraries and tooling - 147
**** Using assert_cmd to test CLI applications - 147
**** Using proptest with integration tests - 149
**** Other integration testing tools - 150

*** 7.5 Fuzz testing - 150

* TODO PART 4 ASYNCHRONOUS RUST - 155
** 8 Async Rust - 157
*** 8.1 Runtimes - 159
*** 8.2 Thinking asynchronously - 159
*** 8.3 Futures: Handling async task results - 161
**** Defining a runtime with ~#[tokio::main]~ - 164

*** 8.4 The async and .await keywords: When and where to use them - 164
*** 8.5 Concurrency and parallelism with async - 166
*** 8.6 Implementing an async observer - 169
*** 8.7 Mixing sync and async - 174
*** 8.8 When to avoid using async - 176
*** 8.9 Tracing and debugging async code - 177
*** 8.10 Dealing with async when testing - 180

** 9 Building an HTTP REST API service - 182
*** 9.1 Choosing a web framework - 183
*** 9.2 Creating an architecture - 184
*** 9.3 API design - 184
*** 9.4 Libraries and tools - 185
*** 9.5 Application scaffolding - 187
**** ~main()~ - 187
**** ~init_tracing()~ 188
**** ~init_dbpool()~ - 189

*** 9.6 Data modeling - 190
**** SQL schema - 190
**** Interfacing with our data - 191

*** 9.7 Declaring the API routes - 194
*** 9.8 Implementing the API routes - 195
*** 9.9 Error handling - 197
*** 9.10 Running the service - 198

** 10 Building an HTTP REST API CLI - 204
*** 10.1 Deciding which tools and libraries to use - 205
*** 10.2 Designing the CLI - 206
*** 10.3 Declaring the commands - 207
*** 10.4 Implementing the commands - 209
*** 10.5 Implementing requests - 210
*** 10.6 Handling errors gracefully - 211
*** 10.7 Testing our CLI - 212

* TODO PART 5 OPTIMIZATIONS - 217
** 11 Optimizations - 219
*** 11.1 Zero-cost abstractions - 220
*** 11.2 Vectors - 221
**** Vector memory allocation - 221
**** Vector iterators - 223
**** Fast copies with Vec and slices - 225

*** 11.4 Parallelization with Rayon - 227
*** 11.3 SIMD - 226
*** 11.5 Using Rust to accelerate other languages - 229
*** 11.6 Where to go from here - 231

* appndix - 233
** Installing tools for this book - 233
*** Installing tools on macOS using Homebrew - 233
*** Installing tools on Linux systems - 233
*** Installing rustup on Linux- or UNIXbased systems - 233
*** Installing tools on Windows - 234

** Managing rustc and other Rust components with rustup - 234
*** Installing rustc and other components - 234
*** Switching default toolchains with rustup - 234
*** Updating Rust components - 234
*** Installing HTTPie - 235

* index - 237

