#+TITLE: The Cargo Book
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Introduction
*Cargo is the /Rust package manager/.*

- Cargo
  1. _downloads_ your Rust package's dependencies,

  2. _compiles_ your packages

  3. _makes_ distributable packages, and
     _uploads_ them to _crates.io, the Rust community's package registry_.

- You can contribute to this book on GitHub.

* TODO 1. Getting Started
To get started with Cargo, install Cargo (and Rust) and set up your first /crate/.

** 1.1. Installation
*** Install Rust and Cargo
#+begin_src shell
  curl https://sh.rustup.rs -sSf | sh
#+end_src

*** Build and Install Cargo from Source
Alternatively, you can [[https://github.com/rust-lang/cargo#compiling-from-source][build Cargo from source]].

** 1.2. First Steps with Cargo

* TODO 2. Cargo Guide - =TODO: NOTE=
The guide will give you all you need to know about
_how to use Cargo to develop Rust packages._

** 2.1. Why Cargo Exists
*** Preliminaries
*** Enter: Cargo

** 2.2. Creating a New Package
** 2.3. Working on an Existing Package
** 2.4. Dependencies
*** Adding a dependency

** 2.5. Package Layout
** 2.6. Cargo.toml vs Cargo.lock
** 2.7. Tests
** 2.8. Continuous Integration
*** Travis CI
*** GitHub Actions
*** GitLab CI
*** builds.rs.ht

** 2.9. Cargo Home
*** Files:
*** Directories:
*** Caching the Cargo home in CI - =IMPORTANT=
=TODO= =NOTE=

*** Vendoring all dependencies of a project
*** Clearing the cache
=TODO= =???= =details=

** 2.10. Build Cache
*** Dep-info files
*** Shared cache

* TODO 3. Cargo Reference
The reference covers the details of various areas of Cargo.

** 3.1. Specifying Dependencies
*** 3.1.1. Overriding Dependencies

** 3.2. The Manifest Format
*** 3.2.1. Cargo Targets

** 3.3. Workspaces
** 3.4. Features
*** 3.4.1. Features Examples

** 3.5. Profiles
** 3.6. Configuration
** 3.7. Environment Variables
** 3.8. Build Scripts
*** 3.8.1. Build Script Examples

** 3.9. Publishing on crates.io
** 3.10. Package ID Specifications
** 3.11. Source Replacement
** 3.12. External Tools
** 3.13. Registries
*** 3.13.1. Registry Authentication
**** 3.13.1.1. Credential Provider Protocol

*** 3.13.2. Running a Registry
**** 3.13.2.1. Registry Index
**** 3.13.2.2. Registry Web API

** 3.14. Dependency Resolution
** 3.15. SemVer Compatibility
** 3.16. Future Incompat report
** 3.17. Reporting build timings
** 3.18. Lints
** 3.19. Unstable Features

* TODO 4. Cargo Commands
The commands will let you interact with Cargo using its command-line interface.

** 4.1. General Commands
*** 4.1.1. cargo
*** 4.1.2. cargo help
*** 4.1.3. cargo version

** 4.2. Build Commands
*** 4.2.1. cargo bench
*** 4.2.2. cargo build
*** 4.2.3. cargo check
*** 4.2.4. cargo clean
*** 4.2.5. cargo doc
*** 4.2.6. cargo fetch
*** 4.2.7. cargo fix
*** 4.2.8. cargo run
*** 4.2.9. cargo rustc
*** 4.2.10. cargo rustdoc
*** 4.2.11. cargo test
*** 4.2.12. cargo report

** 4.3. Manifest Commands
*** 4.3.1. cargo add
*** 4.3.2. cargo generate-lockfile
*** 4.3.3. cargo locate-project
*** 4.3.4. cargo metadata
*** 4.3.5. cargo pkgid
*** 4.3.6. cargo remove
*** 4.3.7. cargo tree
*** 4.3.8. cargo update
*** 4.3.9. cargo vendor
*** 4.3.10. cargo verify-project

** 4.4. Package Commands
*** 4.4.1. cargo init
*** 4.4.2. cargo install
*** 4.4.3. cargo new
*** 4.4.4. cargo search
*** 4.4.5. cargo uninstall

** 4.5. Pblishing Commands
*** 4.5.1. cargo login
*** 4.5.2. cargo logout
*** 4.5.3. cargo owner
*** 4.5.4. cargo package
*** 4.5.5. cargo publish
*** 4.5.6. cargo yank

* TODO 5. FAQ - =TODO: NOTE=
* TODO 6. Appendix: Glossary
* TODO 7. Appendix: Git Authentication
** HTTP authentication
** SSH authentication
*** SSH Known Hosts
