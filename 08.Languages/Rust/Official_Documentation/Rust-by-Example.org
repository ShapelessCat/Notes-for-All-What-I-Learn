#+TITLE: Rust By Example
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Introduction
- Rust is a modern systems programming language _FOCUSING ON_
  safety,
  speed, and
  concurrency.

  It accomplishes these goals by being *memory safe without using garbage
  collection*.

- /Rust by Example (RBE)/ is a collection of runnable examples that illustrate
  various Rust concepts and standard libraries.

- Now let's begin!
  * Hello World - Start with a traditional Hello World program.

  * Primitives - Learn about signed integers, unsigned integers and other
                 primitives.

  * Custom Types - ~struct~ and ~enum~.

  * Variable Bindings - mutable bindings, scope, shadowing.

  * Types - Learn about changing and defining types.

  * Conversion - Convert between different types, such as strings, integers, and
                 floats.

  * Expressions - Learn about Expressions & how to use them.

  * Flow of Control - ~if~ / ~else~, ~for~, and others.

  * Functions - Learn about Methods, Closures and Higher Order Functions.

  * Modules - Organize code using modules

  * Crates - A crate is a compilation unit in Rust. Learn to create a library.

  * Cargo - Go through some basic features of the official Rust package
            management tool.

  * Attributes - An attribute is metadata applied to some module, crate or item.

  * Generics - Learn about writing a function or data type which can work for
               multiple types of arguments.

  * Scoping rules - Scopes play an important part in ownership, borrowing, and
                    lifetimes.

  * Traits - A trait is a collection of methods defined for an unknown type:
             ~Self~

  * Macros - Macros are a way of writing code that writes other code, which is
             known as metaprogramming.

  * Error handling - Learn Rust way of handling failures.

  * Std library types - Learn about some custom types provided by ~std~ library.

  * Std misc - More custom types for file handling, threads.

  * Testing - All sorts of testing in Rust.

  * Unsafe Operations - Learn about entering a block of unsafe operations.

  * Compatibility - Handling Rust's evolution and potential compatibility issues.

  * Meta - Documentation, Benchmarking.

* DONE 1. Hello World
CLOSED: [2024-09-28 Sat 21:57]
** DONE 1.1. Comments
CLOSED: [2024-09-28 Sat 15:11]
Any program requires comments, and Rust supports a few different varieties:

- Regular comments which are ignored by the compiler:
  * line comment:
    #+begin_src rust
      // Line comments which go to the end of the line.
    #+end_src

  * block comment:
    #+begin_src rust
      /* Block comments which go to the closing delimiter. */
    #+end_src

- Doc comments which are parsed into HTML library documentation:
  * Inner Documentation Comments:
    Document items such as functions, structs, enums, traits, etc.
    #+begin_src rust
      /// Generate library docs for the following item.
    #+end_src

  * Outer Documentation Comments:
    Document /modules/ or the /crate/ *as a whole*.
    #+begin_src rust
      //! Generate library docs for the enclosing item.
    #+end_src

*** See also

** DONE 1.2. Formatted print
CLOSED: [2024-09-28 Sat 21:57]
- Printing is handled by a series of macros defined in ~std::fmt~ some of which
  are:
  * ~format!~: write formatted text to ~String~
  * ~print!~: same as ~format!~ but the text is printed to the console (~io::stdout~).
  * ~println!~: same as ~print!~ but a newline is appended.
  * ~eprint!~: same as ~print!~ but the text is printed to the standard error (~io::stderr~).
  * ~eprintln!~: same as ~eprint!~ but a newline is appended.

- ~std::fmt~ contains many /traits/ which govern _the display of text_.
  The base form of two important ones are listed below:
  * ~fmt::Debug~: Uses the ~{:?}~ marker.
    Format text for debugging purposes.

  * ~fmt::Display~: Uses the ~{}~ marker.
    Format text in a more elegant, user friendly fashion.

- Here, we used ~fmt::Display~ because the std library provides implementations for
  these types. To print text for custom types, more steps are required.

- Implementing the ~fmt::Display~ /trait/ *AUTOMATICALLY* implements the ~ToString~
  /trait/ which allows us to convert the type to ~String~.

- In line 43, ~#[allow(dead_code)]~ is an attribute which only applies to the
  /module/ after it.

**** Activities
**** See also

*** 1.2.1. ~Debug~
- _Automatic implementations_ are ONLY PROVIDED for types such as in the ~std~
  library. All others must be _MANUALLY implemented_ somehow.

- ~fmt::Display~ must be manually implemented.

- *ALL* ~std~ library types are automatically printable with ~{:?}~ too.

- So ~fmt::Debug~ definitely makes this printable but sacrifices some elegance.
  Rust also provides *"pretty printing"* with ~{:#?}~.

*** 1.2.2. ~Display~
- ~fmt::Display~ uses the ~{}~ marker.

- Since it is ambiguous about what is the ideal way to display some types, many types
  in ~std~ doesn't implement ~fmt::Display~.
  * ~fmt::Display~ is not implemented for any other generic containers.

- ~fmt::Binary~ uses the ~{:b}~ marker.

***** Activity
***** See also

**** 1.2.2.1. Testcase: List
***** Activity
***** See also

*** 1.2.3. Formatting
**** Activity
**** See also

* DONE 2. Primitives
CLOSED: [2024-09-28 Sat 23:14]
*** Scalar Types
- Signed integers: ~i8~, ~i16~, ~i32~, ~i64~, ~i128~ and ~isize~ (pointer size)
- Unsigned integers: ~u8~, ~u16~, ~u32~, ~u64~, ~u128~ and ~usize~ (pointer size)
- Floating point: ~f32~, ~f64~
- ~char~ /Unicode scalar values/ like ~'a'~, ~'α'~ and ~'∞'~ (*4 bytes each*)
- ~bool~ either ~true~ or ~false~
- The /unit type/ ~()~, whose only possible value is an _empty tuple_: ~()~
  * Despite the value of a /unit type/ being a /tuple/, it is *NOT* considered a
    /compound type/ because it does not contain multiple values.

*** Compound Types
- Arrays like ~[1, 2, 3]~
- Tuples like ~(1, true)~

*** See also

** DONE 2.1. Literals and operators
CLOSED: [2024-09-28 Sat 23:03]
- Prefixes for integer:
  * hexadecimal: ~0x~
  * octal: ~0o~
  * binary: ~0b~

** DONE 2.2. Tuples
CLOSED: [2024-09-28 Sat 23:05]
*** Activity

** DONE 2.3. Arrays and Slices
CLOSED: [2024-09-28 Sat 23:14]
- An /array/ is a collection of objects of the same type ~T~,
  stored in *contiguous memory*.
  * /Arrays/ are created using brackets ~[]~, and their _length_, which is *known
    at compile time*, is part of their /type signature/ ~[T; length]~.

- /Slices/ are _SIMILAR TO_ /arrays/, but their _length_ is *not known at compile
  time*.
  * Instead, a /slice/ is a _two-word object_:
    + the first word is a pointer to the data,
    + the second word is the length of the slice.
      - ~usize~, determined by the /processor architecture/, e.g. 64 bits on an
        x86-64.

  * /Slices/ can be used to borrow a section of an array and have the /type
    signature/ ~&[T]~.

* DONE 3. Custom Types
CLOSED: [2024-09-29 Sun 00:21]
- _Rust custom data types_ are formed mainly through the two keywords:
  * ~struct~: define a structure
  * ~enum~: define an enumeration

- /Constants/ can also be created via the ~const~ and ~static~ keywords.

** DONE 3.1. Structures
CLOSED: [2024-09-29 Sun 00:08]
- There are *THREE types* of structures ("structs") that can be created using the
  ~struct~ keyword:
  * /Tuple structs/, which are, basically, /named tuples/.
  * The classic C structs
  * /Unit structs/, which are _field-less_, are useful for generics.

*** Activity
*** See also =FIXME: some have ":", and some doesn't have ":"=

** DONE 3.2. Enums
CLOSED: [2024-09-29 Sun 00:14]
**** Type aliases - =RE-READ=
- =IMPORTANT=
  =RE-READ=
  https://github.com/rust-lang/rust/pull/61682/

**** See also

*** 3.2.1. ~use~
**** See also

*** 3.2.2. C-like
#+begin_src rust
  // An attribute to hide warnings for unused code.
  #![allow(dead_code)]

  // enum with implicit discriminator (starts at 0)
  enum Number {
      Zero,
      One,
      Two,
  }

  // enum with explicit discriminator
  enum Color {
      Red = 0xff0000,
      Green = 0x00ff00,
      Blue = 0x0000ff,
  }

  fn main() {
      // `enums` can be cast as integers.
      println!("zero is {}", Number::Zero as i32);
      println!("one is {}", Number::One as i32);

      println!("roses are #{:06x}", Color::Red as i32);
      println!("violets are #{:06x}", Color::Blue as i32);
  }
#+end_src

**** See also

*** 3.2.3. Testcase: linked-list - =RE-READ=
**** See also

** DONE 3.3. constants
CLOSED: [2024-09-29 Sun 00:21]
Rust has _TWO different types of constants_ which *can be declared in any scope
including global.* Both REQUIRE *explicit type annotation*:
- ~const~: An _unchangeable_ value (the common case).

- ~static~: A *possibly mutable variable* with ~'static~ /lifetime/.
  * The /static lifetime/ is inferred and does not have to be specified.
  * _Accessing or modifying a mutable static variable is *unsafe*._

*** See also

* DONE 4. Variable Bindings
CLOSED: [2024-09-29 Sun 00:28]
** DONE 4.1. Mutability
CLOSED: [2024-09-29 Sun 00:23]
** DONE 4.2. Scope and Shadowing
CLOSED: [2024-09-29 Sun 00:23]
** DONE 4.3. Declare first
CLOSED: [2024-09-29 Sun 00:26]
It's possible to
1. declare variable bindings first, and
2. initialize them later.

_HOWEVER_, this form is *SELDOM used*, as it may lead to the use of
/uninitialized variables/.

#+begin_src rust
  fn main() {
      // Declare a variable binding
      let a_binding;

      {
          let x = 2;

          // Initialize the binding
          a_binding = x * x;
      }

      println!("a binding: {}", a_binding);

      let another_binding;

      // Error! Use of uninitialized binding
      println!("another binding: {}", another_binding);
      // FIXME ^ Comment out this line

      another_binding = 1;

      println!("another binding: {}", another_binding);
  }
#+end_src
The compiler *FORBIDS* use of /uninitialized variables/, as this would LEAD TO
/undefined behavior/.

** DONE 4.4. Freezing
CLOSED: [2024-09-29 Sun 00:28]
When data _is bound by the SAME NAME IMMUTABLY_, it also *freezes*.
/Frozen data/ can't be modified until the /immutable binding/ _goes out of_
/scope/:
#+begin_src rust
  fn main() {
      let mut _mutable_integer = 7i32;

      {
          // Shadowing by immutable `_mutable_integer`
          let _mutable_integer = _mutable_integer;

          // Error! `_mutable_integer` is frozen in this scope
          _mutable_integer = 50;
          // FIXME ^ Comment out this line

          // `_mutable_integer` goes out of scope
      }

      // Ok! `_mutable_integer` is not frozen in this scope
      _mutable_integer = 3;
  }
#+end_src

* DONE 5. Types
CLOSED: [2024-09-29 Sun 12:29]
Rust provides several mechanisms to *change* or *define* the /type/ of primitive
and user defined types. The following sections cover:

- *Casting* between /primitive types/
- *Specifying* the desired /type/ of /literals/
- Using /type inference/
- /Aliasing types/

** DONE 5.1. Casting
CLOSED: [2024-09-29 Sun 12:17]
- Rust provides *NO* _implicit type conversion (coercion)_ between /primitive types/.
  But, _explicit type conversion (casting)_ can be performed using the ~as~ keyword.

- Rules for converting between /integral types/ follow C conventions generally,
  except in cases where C has /undefined behavior/.
  * *The behavior of _all casts between integral types_ is _well defined_ in Rust.*

- Example:
  #+begin_src rust
    // Suppress all warnings from casts which overflow.
    #![allow(overflowing_literals)]

    fn main() {
        // ...
    }
  #+end_src

  * ~f32::to_int_unchecked~ and ~f64::to_int_unchecked~

** DONE 5.2. Literals
CLOSED: [2024-09-29 Sun 12:19]
- ~std::mem::size_of_val~

** DONE 5.3. Inference
CLOSED: [2024-09-29 Sun 12:26]
** DONE 5.4. Aliasing
CLOSED: [2024-09-29 Sun 12:29]
The ~type~ statement can be used to give a new name to an _existing type_.

- /Types/ must have *UpperCamelCase* names, or the compiler will raise a warning.
  * The _exception_ to this rule are the /primitive types/: ~usize~, ~f32~, etc.

*** See also

* DONE 6. Conversion
CLOSED: [2024-09-29 Sun 12:58]
- /Primitive types/ can be _CONVERTED to each other_ through /casting/.

- Rust addresses _conversion between custom types_ (i.e., ~struct~ and ~enum~) by
  the use of /traits/.
  * The /generic conversions/ will use the ~From~ and ~Into~ /traits/.
  * However there are more specific ones for the more common cases, in particular
    when _converting to and from ~String~'s._

** DONE 6.1. ~From~ and ~Into~
CLOSED: [2024-09-29 Sun 12:47]
- The ~From~ and ~Into~ /traits/ are *inherently linked*, and this is actually
  part of its implementation.
  * IF you are able to _convert type A from type B_,
    THEN it should be easy to believe that we should be able to _convert type B
    to type A_.

*** ~From~
*** ~Into~
*** ~From~ and ~Into~ are interchangable
- ~From~ and ~Into~ are designed to be COMPLEMENTARY.
  We do NOT need to provide an implementation for BOTH /traits/.

- If you have implemented the ~From~ /trait/ for your type,
  ~Into~ will call it when necessary.
  * *The converse is NOT true.*

** DONE 6.2. ~TryFrom~ and ~TryInto~
CLOSED: [2024-09-29 Sun 12:48]
** DONE 6.3. To and from Strings
CLOSED: [2024-09-29 Sun 12:58]
*** Converting to ~String~
Implement ~fmt::Display~, which automatically provides ~ToString~
implementation.

*** Parsing a ~String~
- It's useful to _convert strings into many types,_ BUT one of the more common
  string operations is to convert them _from string to number_.

  * The *idiomatic approach* to this is to use the ~parse~ function and
    + either to arrange for /type inference/
    + or to specify the type to parse using _the 'turbofish' syntax_.

- This will convert the string into the type specified as long as the ~FromStr~
  /trait/ is implemented for that type.

  * ~FromStr~ is implemented for numerous types within the standard library.

  * To obtain this functionality on a user defined type simply implement the
    ~FromStr~ /trait/ for that type.

- Example:
  #+begin_src rust
    fn main() {
        let parsed: i32 = "5".parse().unwrap();
        let turbo_parsed = "10".parse::<i32>().unwrap();

        let sum = parsed + turbo_parsed;
        println!("Sum: {:?}", sum);
    }
  #+end_src

* DONE 7. Expressions
CLOSED: [2024-09-29 Sun 00:29]
* DONE 8. Flow Control
CLOSED: [2024-09-29 Sun 14:17]
** 8.1. ~if~ / ~else~
** 8.2. ~loop~
~break~ and ~continue~

*** 8.2.1. Nesting and labels
#+begin_src rust
  #![allow(unreachable_code, unused_labels)]

  fn main() {
      'outer: loop {
          println!("Entered the outer loop");

          'inner: loop {
              println!("Entered the inner loop");

              // This would break only the inner loop
              //break;

              // This breaks the outer loop
              break 'outer;
          }

          println!("This point will never be reached");
      }

      println!("Exited the outer loop");
  }
#+end_src

*** 8.2.2. Returning from loops - =IMPORTANT: I never used this syntax (2024-09-30), should remember=
One of the uses of a ~loop~ is to _retry an operation until it succeeds_.

If the operation returns a value though, you might need to pass it to the rest
of the code: _put it after the ~break~, and it will be returned by the loop
expression._

#+begin_src rust
  fn main() {
      let mut counter = 0;

      let result = loop {
          counter += 1;

          if counter == 10 {
              break counter * 2;
          }
      };

      assert_eq!(result, 20);
  }
#+end_src

** 8.3. ~while~
** 8.4. ~for~ and ~range~ - =FIXME: for loops=
*** ~for~ and ~range~
*** ~for~ and iterators
- See the doc for ~Iterator~ trait, we learn that
  _BY DEFAULT_ the ~for~ loop will apply the ~into_iter~ function to the
  collection.

- We can manually call ~into_iter~, ~iter~ or ~iter_mut~ for different purpose.

*** See also

** 8.5. ~match~
*** 8.5.1. Destructuring
**** 8.5.1.1. tuples
***** See also

**** 8.5.1.2. arrays/slices
***** See also

**** 8.5.1.3. enums
***** See also

**** 8.5.1.4. pointers/ref - =IMPORTANT=
For /pointers/,
a *DISTINCTION* needs to be made BETWEEN /destructuring/ and /dereferencing/
AS they are different concepts which are used differently from languages like
C/C++.
- /Dereferencing/ uses ~*~
- /Destructuring/ uses ~&~, ~ref~, and ~ref mut~

***** See also

**** 8.5.1.5. structs
***** See also

*** 8.5.2. Guards
**** See also

*** 8.5.3. Binding
~@~

**** See also

** 8.6. ~if let~
- Another benefit is that ~if let~ allows us to _match /non-parameterized enum
  variants/._

  * This is true even in cases where the enum doesn't implement or derive ~PartialEq~.
    In such cases ~if Foo::Bar == a~ would fail to compile, because instances of the
    enum cannot be equated, however ~if let~ will continue to work.
    =from Jian=
    The ~if let pattern = value~ semantics is actuall _if pattern can match value_.
    It seems ~if let pattern match value~ can be a better design in the point of
    semantcis.

*** See also

** 8.7. let-else
stable since: _rust 1.65_
you can target specific edition by compiling like this ~rustc --edition=2021 main.rs~

With let-else, a /refutable pattern/ can match and bind variables in the
surrounding scope like a normal ~let~, or ~else~ diverge (e.g. ~break~,
~return~, ~panic!~) when the pattern doesn't match.
#+begin_src rust
  use std::str::FromStr;

  fn get_count_item(s: &str) -> (u64, &str) {
      let mut it = s.split(' ');
      let (Some(count_str), Some(item)) = (it.next(), it.next()) else {
          panic!("Can't segment count item pair: '{s}'");
      };
      let Ok(count) = u64::from_str(count_str) else {
          panic!("Can't parse integer: '{count_str}'");
      };
      (count, item)
  }

  fn main() {
      assert_eq!(get_count_item("3 chairs"), (3, "chairs"));
  }
#+end_src

_The /scope/ of name bindings is the main thing that makes this different from
~match~ or ~if let~-~else~ expressions._

You could previously approximate these patterns with an unfortunate bit of
repetition and an outer ~let~:
#+begin_src rust
  let (count_str, item) = match (it.next(), it.next()) {
      (Some(count_str), Some(item)) => (count_str, item),
      _ => panic!("Can't segment count item pair: '{s}'"),
  };
  let count = if let Ok(count) = u64::from_str(count_str) {
      count
  } else {
      panic!("Can't parse integer: '{count_str}'");
  };

#+end_src

*** See also

** 8.8. ~while let~
Similar to ~if let~, ~while let~ can make awkward ~match~ sequences more
tolerable. Consider the following sequence that increments i:
#+begin_src rust
  // Make `optional` of type `Option<i32>`
  let mut optional = Some(0);

  // Repeatedly try this test.
  loop {
      match optional {
          // If `optional` destructures, evaluate the block.
          Some(i) => {
              if i > 9 {
                  println!("Greater than 9, quit!");
                  optional = None;
              } else {
                  println!("`i` is `{:?}`. Try again.", i);
                  optional = Some(i + 1);
              }
              // ^ Requires 3 indentations!
          },
          // Quit the loop when the destructure fails:
          _ => { break; }
          // ^ Why should this be required? There must be a better way!
      }
  }
#+end_src

Using ~while let~ makes this sequence much nicer:
#+begin_src rust
  fn main() {
      // Make `optional` of type `Option<i32>`
      let mut optional = Some(0);

      // This reads: "while `let` destructures `optional` into
      // `Some(i)`, evaluate the block (`{}`). Else `break`.
      while let Some(i) = optional {
          if i > 9 {
              println!("Greater than 9, quit!");
              optional = None;
          } else {
              println!("`i` is `{:?}`. Try again.", i);
              optional = Some(i + 1);
          }
          // ^ Less rightward drift and doesn't require
          // explicitly handling the failing case.
      }
      // ^ `if let` had additional optional `else`/`else if`
      // clauses. `while let` does not have these.
  }
#+end_src

*** See also

* TODO 9. Fnctions
** 9.1. Methods
*Associated functions & Methods*

- Some /functions/ are connected to a particular type.
  These come in _TWO_ forms: associated functions, and methods.


- /Associated function/s are /functions/ that are *defined on a type generally*.

- /Methods/ are /associated functions/ that are called *on a _particular instance_
  of a type*.

** 9.2. Closures
- Closures :: functions that can capture the enclosing environment.

*** 9.2.1. Capturing
- ~let mut f = closure-body;~
  If we use ~mut~ to declare a /closure/, it should be able to use the /captured
  variables/ as /mutable references/. Of course, those /captured variables/
  *MUST* be declared with ~let ~mut~, even if the code in closure-body doesn't
  actual modify the /captured variables/.

- Using ~move~ before vertical pipes *forces* /closure/ to *take /ownership/ of
  /captured variables/:*
  #+begin_src rust
    fn main() {
        // `Vec` has non-copy semantics.
        let haystack = vec![1, 2, 3];

        let contains = move |needle| haystack.contains(needle);

        println!("{}", contains(&1));
        println!("{}", contains(&4));

        // println!("There're {} elements in vec", haystack.len());
        // ^ Uncommenting above line will result in compile-time error
        // because borrow checker doesn't allow re-using variable after it
        // has been moved.

        // Removing `move` from closure's signature will cause closure
        // to borrow _haystack_ variable immutably, hence _haystack_ is still
        // available and uncommenting above line will not cause an error.
    }
  #+end_src

**** See also

*** 9.2.2. As input parameters
=TODO= NOTE

=FIXME: cargo fmt=
#+begin_src rust
  // A function which takes a closure as an argument and calls it.
  // <F> denotes that F is a "Generic type parameter"
  fn apply<F>(f: F) where
      // The closure takes no input and returns nothing.
      F: FnOnce() {
      // ^ TODO: Try changing this to `Fn` or `FnMut`.

      f();
  }

  // A function which takes a closure and returns an `i32`.
  fn apply_to_3<F>(f: F) -> i32 where
      // The closure takes an `i32` and returns an `i32`.
      F: Fn(i32) -> i32 {

      f(3)
  }

  fn main() {
      use std::mem;

      let greeting = "hello";
      // A non-copy type.
      // `to_owned` creates owned data from borrowed one
      let mut farewell = "goodbye".to_owned();

      // Capture 2 variables: `greeting` by reference and
      // `farewell` by value.
      let diary = || {
          // `greeting` is by reference: requires `Fn`.
          println!("I said {}.", greeting);

          // Mutation forces `farewell` to be captured by
          // mutable reference. Now requires `FnMut`.
          farewell.push_str("!!!");
          println!("Then I screamed {}.", farewell);
          println!("Now I can sleep. zzzzz");

          // Manually calling drop forces `farewell` to
          // be captured by value. Now requires `FnOnce`.
          mem::drop(farewell);
      };

      // Call the function which applies the closure.
      apply(diary);

      // `double` satisfies `apply_to_3`'s trait bound
      let double = |x| 2 * x;

      println!("3 doubled: {}", apply_to_3(double));
  }
#+end_src
**** See also

*** 9.2.3. Type anonymity
**** See also

*** 9.2.4. Input functions
**** See also

*** 9.2.5. As output parameters
**** See also

*** 9.2.6. Examples in ~std~
**** 9.2.6.1. ~Iterator::any~
***** See also

**** 9.2.6.2. Searching through iterators
***** See also

** 9.3. Higher Order Functions
/Higher Order Functions (HOFs)/ and lazy iterators give Rust its functional
flavor.

** 9.4. Diverging functions

* TODO 10. Modules
** 10.1. Visibility
** 10.2. Struct visibility
*** See also

** 10.3. The ~use~ declaration
** 10.4. ~super~ and ~self~
** 10.5. File hierarchy

* TODO 11. Crates
** 11.1. Creating a Library
** 11.2. Using a Library

* TODO 12. Cargo
** 12.1. Dependencies
** 12.2. Conventions
** 12.3. Tests
** 12.4. Build Scripts
*** How to use a build script

* TODO 13. Attributes
** 13.1. ~dead_code~
** 13.2. Crates
** 13.3. ~cfg~
**** See also

*** 13.3.1. Custom

* TODO 14. Generics
** 14.1. Functions
*** See also

** 14.2. Implementation
*** See also

** 14.3. Traits
*** See also

** 14.4. Bounds
**** See also

*** 14.4.1. Testcase: empty bounds
**** See also

** 14.5. Multiple bounds
*** See also

** 14.6. Where clauses
*** See also

** 14.7. New Type Idiom
*** See also

** 14.8. Associated items
**** See also

*** 14.8.1. The Problem
**** See also

*** 14.8.2. Associated types

** 14.9. Phantom type parameters
**** See also

*** 14.9.1. Testcase: unit clarification
**** See also

* TODO 15. Scoping rules
** 15.1. RAII
*** Destructor
*** See also

** 15.2. Ownership and moves
*** 15.2.1. Mutability
*** 15.2.2. Partial moves
**** See also

** 15.3. Borrowing
*** 15.3.1. Mutability
**** See also

*** 15.3.2. Aliasing
*** 15.3.3. The ~ref~ pattern

** 15.4. Lifetimes
*** 15.4.1. Explicit annotation
**** See also

*** 15.4.2. Functions
**** See also

*** 15.4.3. Methods
**** See also

*** 15.4.4. Structs
**** See also

*** 15.4.5. Traits
**** See also

*** 15.4.6. Bounds
**** See also

*** 15.4.7. Coercion
*** 15.4.8. Static
**** Reference lifetime
**** Trait bound
**** See also

*** 15.4.9. Elision
**** See also

* TODO 16. Traits
** 16.1. Derive
*** See also

** 16.2. Returning Traits with ~dyn~
** 16.3. Operator Overloading
*** See also

** 16.4. ~Drop~
** 16.5. Iterators
** 16.6. ~impl Trait~
*** As an argument type
*** As a return type

** 16.7. ~Clone~
** 16.8. Supertraits
*** See also

** 16.9. Disambiguating overlapping traits
*** See also

* TODO 17. ~macro_rules!~
** 17.1. Syntax
*** 17.1.1. Designators
*** 17.1.2. Overload
*** 17.1.3. Repeat

** 17.2. DRY (Don't Repeat Yourself)
** 17.3. DSL (Domain Specific Languages)
** 17.4. Variadics

* TODO 18. Error handling
** 18.1. ~panic~
** 18.2 ~abort~ & ~unwind~
** 18.3. ~Option~ & ~unwrap~
*** 18.3.1. Unpacking options with ~?~
*** 18.3.2. Combinators: ~map~
**** See also

*** 18.3.3. Combinators: ~and_then~
**** See also

*** 18.3.4. Unpacking options and default - =FIXME=
**** ~or()~ is chainable, evaluates eagerly, keeps empty value intact
**** ~or_else()~ is chainable, evaluates lazily, keeps empty value intact
**** ~get_or_insert()~ evaluates eagerly, modifies empty value in place
**** ~get_or_insert_with()~ evaluates lazily, modifies empty value in place
**** See also

** 18.4. ~Result~
**** Using ~Result~ in ~main~

*** 18.4.1. ~map~ for ~Result~
*** 18.4.2. aliases for ~Result~
**** See also

*** 18.4.3. Early returns
*** 18.4.4. Introducing ~?~
**** The ~try!~ macro

** 18.5. Multiple error types
*** 18.5.1. Pulling ~Result~'s out of ~Option~'s
*** 18.5.2. Defining an error type
*** 18.5.3. Boxing errors
**** See also

*** 18.5.4. Other uses of ~?~
**** See also

*** 18.5.5. Wrapping errors
**** See also

** 18.6. Iterating over ~Result~'s
*** Ignore the failed items with ~filter_map()~
*** Collect the failed items with ~map_err()~ and ~filter_map()~
*** Fail the entire operation with ~collect()~
*** Collect all valid values and failures with ~partition()~

* TODO 19. Std library types
*** See also

** 19.1. ~Box~, stack and heap
** 19.2. Vectors
** 19.3. Strings
*** Literals and escapes

** 19.4. ~Option~
** 19.5. ~Result~
*** 19.5.1. ~?~

** 19.6. ~panic!~
** 19.7. ~HashMap~
*** 19.7.1. Alternate/custom key types
*** 19.7.2. ~HashSet~

** 19.8. ~Rc~
*** See also

** 19.9. ~Arc~

* TODO 20. Std misc
*** See also

** 20.1. Threads
*** 20.1.1. Testcase: map-reduce
**** Assignments
**** See also

** 20.2. Channels
** 20.3. Path
*** See also

** 20.4. File I/O
*** 20.4.1. ~open~
*** 20.4.2. ~create~
*** 20.4.3. ~read_lines~
**** A naive approach
**** A more efficient approach

** 20.5. Child processes
*** 20.5.1. Pipes
*** 20.5.2. Wait

** 20.6. Filesystem Operations
*** See also

** 20.7. Program arguments
**** Standard Library
**** Crates

*** 20.7.1. Argument parsing

** 20.8. Foreign Function Interface

* TODO 21. Testing
*** See Also

** 21.1. Unit testing
*** Tests and ~?~
*** Testing panics
*** Running specific tests
*** Ignoring tests

** 21.2. Documentation testing
*** Motivation behind documentation tests
*** See Also

** 21.3. Integration testing
** 21.4. Dev-dependencies
*** See Also

* TODO 22. Unsafe Operations
*** Raw Pointers
*** Calling Unsafe Functions

** 22.1. Inline assembly
*** Basic usage
*** Inputs and outputs
*** Late output operands
*** Explicit register operands
*** Clobbered registers
*** Symbol operands and ABI clobbers
*** Register template modifiers
*** Memory address operands
*** Labels
*** Options

* TODO 23. Compatibility
** 23.1. Raw identifiers

* TODO 24. Meta
** 24.1. Documentation
*** Doc comments
*** Doc attributes
**** ~inline~
**** ~no_inline~
**** ~hidden~

*** See also

** 24.2. Playground
*** Using it with ~mdbook~
*** Using it with docs
*** See also
