#+TITLE: The Rustonomicon
#+SUBTITLE: The Dark Arts of Advanced and Unsafe Rust Programming
#+STARTUP: overview
#+STARTUP: entitiespretty
#+STARTUP: indent

* Introduction
** The Rustonomicon
*** The Dark Arts o Unsafe Rust

* 1. Meet Safe and Unsafe
** 1.1. How Safe and Unsafe Interact
** 1.2. What Unsafe Rust Can Do
** 1.3. Working with Unsafe

* 2. Data Representation in Rust
** 2.1. repr(Rust)
** 2.2. Exotically Sized Types
*** Dynamically Sized Types (DSTs)
*** Zero Sized Types (ZSTs)
*** Empty Types
*** Extern Types

** 2.3. Alternative representations
*** repr(C)
*** repr(transparent)
*** repr(u*), repr(i*)
*** repr(packed)
*** repr(align(n))

* 3. Ownership and Lifetimes
** 3.1. References
** 3.2. Aliasing
*** Why Aliasing Matters

** 3.3. Lifetimes
*** Example: references that outlive referents
*** Example: aliasing a mutable reference
*** The area covered by a lifetime

** 3.4. Limits of Lifetimes
*** Improperly reduced borrows

** 3.5. Lifetime Elision
** 3.6. Unbounded Lifetimes
** 3.7. Higher-Rank Trait Bounds (HRTBs)
** 3.8. Subtyping and Variance
*** Subtyping
*** Variance

** 3.9. Drop Check
**** For a generic type to soundly implement drop, its generics arguments must strictly outlive it.
*** An Escape Hatch
*** A related side note about drop order
*** Is that all about drop checker?

** 3.10. PhantomData
*** Generic parameters and drop-checking
*** Table of ~PhantomData~ patterns

** 3.11. Splitting Borrows

* 4. Type Conversions
** 4.1. Coercions
** 4.2. The Dot Operator
** 4.3. Casts
*** Safety of casting
*** Some notes about casting
**** Lengths when casting raw slices
**** Transitivity

** 4.4. Transmutes

* 5. Working With Uninitialized Memory
** 5.1. Checked Uninitialized Memory
** 5.2. Drop Flags
** 5.3. Unchecked Uninitialized Memory

* 6. The Perils of Ownership Based Resource Management (OBRM)
** 6.1. Constructors
** 6.2. Destructors
*** After ~drop~ is run, Rust will recursively try to drop all of the fields of ~self~.
*** There is no stable way to prevent this behavior in Rust 1.0.

** 6.3. Leaking
*** Drain
*** Rc
*** ~thread::scoped::JoinGuard~

* 7. Unwinding
** 7.1. Exception Safety
*** ~Vec::push_all~
*** ~BinaryHeap::sift_up~

** 7.2. Poisoning

* 8. Concurrency and Parallelism
** 8.1. Data Races and Race Conditions
*** However Rust does not prevent general race conditions

** 8.2. Send and Sync
*** Example

** 8.3. Atomics
*** Compiler Reordering
*** Hardware Reordering
*** Data Accesses
**** It is literally impossible to write correct synchronized code using only data accesses.

*** Sequentially Consistent
*** Acquire-Release
*** Relaxed

* 9. Example: Implementing Vec
** 9.1. Layout
** 9.2. Allocating Memory
** 9.3. Push and Pop
** 9.4. Deallocating
** 9.5. Deref
** 9.6. Insert and Remove
** 9.7. IntoIter
** 9.8. RawVec
** 9.9. Drain
** 9.10. Handling Zero-Sized Types
*** Allocating Zero-Sized Types
*** Iterating Zero-Sized Types

** 9.11. Final Code

* 10. Implementing Arc and Mutex
** 10.1. Implementing Arc
*** 10.1.1. Layout
*** 10.1.2. Base Code
**** Constructing the Arc
**** Send and Sync
**** Getting the ~ArcInner~
**** Deref
**** Code

*** 10.1.3. Cloning
*** 10.1.4. Dropping
*** 10.1.5. Final Code

* 11. Foreign Function Interface
** Introduction
** A note about libc
** Calling foreign functions
** Creating a safe interface
** Destructors
** Calling Rust code from C
*** Rust side
*** C side

** Callbacks from C code to Rust functions
** Targeting callbacks to Rust objects
** Asynchronous callbacks
** Linking
** Unsafe blocks
** Accessing foreign globals
** Foreign calling conventions
** Interoperability with foreign code
** Variadic functions
** The "nullable pointer optimization"
** FFI and unwinding
*** Rust ~panic~ with "C-unwind"
*** C++ ~throw~ with "C-unwind"
*** ~panic~ can be stopped at an ABI boundary
*** Catching ~panic~ preemptively

** Representing opaque structs

* 12. Beneath ~std~
** 12.1. ~#[panic_handler]~
