#+TITLE: The rustdoc Book
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* DONE 1. What is rustdoc?
CLOSED: [2024-11-30 Sat 21:31]
- _The standard Rust distribution_ ships with a tool called *rustdoc*.

- rustdoc's job: *GENERATE documentation for Rust projects.*
  * On a fundamental level,
    rustdoc
    1. _TAKES_ as an argument
       - either a /crate root/ or
       - a /Markdown file/

    2. _PRODUCES_
       - HTML,
       - CSS,
       - JavaScript

** Basic usage
1. Create a new project with Cargo:
   #+begin_src shell
     cargo new docs --lib
     cd docs
   #+end_src

2. Edit the generated =src/lib.rs=, and
   REPLACE its generated content with this code:
   #+begin_src rust
     /// foo is a function
     fn foo() {}
   #+end_src

3. Run ~rustdoc src/lib.rs~, and it creates
   - a new directory, =doc=, with a website inside!
     * The main page is located in =doc/lib/index.html=.
       You can see "Crate lib" at the top.

       =TODO= =NEXT=
       We can see the document website layout, but no contents.
       This will be explained in the following subsection.

** Configuring rustdoc
- Q :: Why does it think that our crate is named "lib"?
  * You can see this name is the name of the folder that contains the
    =index.html= file, =doc/lib/index.html=.

  * You can see this name at the top of the =index.html= page.

- A :: _rustdoc_ trying to be helpful, and it assumes that our crate's name is
       the name of the file for the crate root.
  * To fix this, pass in a command-line flag:
    #+begin_src shell
      rustdoc src/lib.rs --crate-name docs
    #+end_src
    The new path: =doc/docs/index.html=, and the page says "Crate docs."

- Q :: Why does it not have any contents?
- A :: _rustdoc_ DEFAULTS to generating documentation for only /public
       functions/.
  1. You can declare the ~foo~ function as ~pub~.

  2. ~rustdoc src/lib.rs --crate-name docs~

  3. You can see
     * =docs/docs/index.html=
     * =docs/docs/fn.foo.html=

** Using rustdoc with Cargo
~cargo doc~
~cargo doc --open~

- Internally, ~cargo doc~ calls out to ~rustdoc~ like this:
  #+begin_src shell
    rustdoc --crate-name docs src/lib.rs -o <path>/docs/target/doc -L dependency=<path>/docs/target/debug/deps
  #+end_src
  * You can see this with ~cargo doc --verbose~.

  * ~o~ controls the output of our docs.

  * ~L~ helps rustdoc find the dependencies your code relies on.
    If our project used dependencies, we would get documentation for them as well!

** Outer and inner documentation
- The ~///~ syntax is used to document the item _present after it_.
  That's why it is called an /outer documentation/.

- The ~//!~ syntax is used to document the item it is _present inside_.
  It is called an /inner documentation/.

  * It is often used when documenting the entire crate, because nothing comes
    before it: it is the root of the crate. So in order to document an entire
    crate, you need to use ~//!~ syntax.
    + For example:
      #+begin_src rust
        //! This is my first rust crate
      #+end_src

    + When used in the crate root, it documents the item it is inside, which is
      the crate itself.

- For more information about the ~//!~ syntax, see *the Book*.

** Using standalone Markdown files
_rustdoc_ can also generate HTML FROM _standalone Markdown files_.

- ~rustdoc README.md~
  and you can see it in the path: =docs/doc/README.html=

- Till now, ~cargo~ does *NOT* understand standalone Markdown files.

** Summary
1. This covers the simplest use-cases of _rustdoc_.
2. The rest of this book will explain
   * all of the options that _rustdoc_ has, and
   * how to use them.

* TODO 2. Command-line arguments
*** ~-h/--help~: help
*** ~-V/--version~: version information
*** ~-v/--verbose~: more verbose output
- Example:
  ~rustdoc --verbose --version~
  #+begin_src text
    rustdoc 1.17.0 (56124baa9 2017-04-24)
    binary: rustdoc
    commit-hash: hash
    commit-date: date
    host: host-triple
    release: 1.17.0
    LLVM version: 3.9
  #+end_src

*** ~o/--out-dir~: output directory path
*** ~-crate-name~: controlling the name of the crate
*** ~-document-private-items~: Show items that are not public
*** TODO ~L/--library-path~: where to look for dependencies
*** TODO ~-cfg~: passing configuration flags
*** TODO ~-check-cfg~: check configuration flags
*** TODO ~-extern~: specify a dependency's location
*** ~C/--codegen~: pass codegen options to rustc
*** ~-test~: run code examples as tests
*** ~-test-args~: pass options to test runner
*** ~-test-run-directory~: run code examples in a specific directory
*** ~-target~: generate documentation for the specified target triple
*** ~-default-theme~: set the default theme
*** ~-markdown-css~: include more CSS files when rendering markdown
*** ~-html-in-header~: include more HTML in ~<head>~
*** ~-html-before-content~: include more HTML before the content
*** ~-html-after-content~: include more HTML after the content
*** ~-markdown-playground-url~: control the location of the playground
*** ~-markdown-no-toc~: don't generate a table of contents
*** ~e/--extend-css~: extend rustdoc's CSS
*** ~-sysroot~: override the system root
*** ~-edition~: control the edition of docs and doctests
*** ~-theme~: add a theme to the documentation output
*** ~-check-theme~: verify custom themes against the default theme
*** ~-crate-version~: control the crate version
*** ~-~: load source code from the standard input
*** ~@path~: load command-line flags from a path
*** DONE ~--passes~: add more rustdoc passes
CLOSED: [2023-07-29 Sat 18:16]
_This flag is *deprecated*._

*** DONE ~--no-defaults~: don't run default passes
CLOSED: [2023-07-29 Sat 18:16]
_This flag is *deprecated*._

*** DONE ~-r~ / ~--input-format~: input format
CLOSED: [2023-07-29 Sat 18:15]
_This flag is *deprecated* and has *no effect*._

- Rustdoc *ONLY supports* _Rust source code_ and _Markdown input formats_.
  * If the file ends in =.md= or =.markdown=, rustdoc treats it as a Markdown file.
  * Otherwise, it assumes that the input file is _Rust_.

*** TODO ~--test-builder~: rustc-like program to build tests
*** TODO ~--test-builder-wrapper~: wrap calls to the test builder

* TODO 3. How to read rustdoc output
*** Structure
*** The Item Documentation
**** Sections
***** Aliased Type

**** Navigation

*** The Navigation Bar
*** The Theme Picker and Search Interface
**** Shortcuts

** 3.1. Rustdoc in-doc settings
Rustdoc's HTML output includes a *settings menu*, and
this chapter describes what each setting in this menu does.

- Accesses the setting by clicking on the _gear button_ in the UPPER RIGHT.

*** Changing displayed theme
*** Auto-hide item contents for large items
*** Auto-hide item methods' documentation
*** Auto-hide trait implementation documentation
*** Directly go to item in search if there is only one result
*** Show line numbers on code examples
*** Disable keyboard shortcuts

** 3.2. Rustdoc search
Typing in the _search bar_ *instantly searches* the available documentation,
matching
- either the _name_ and _path_ of an item,
- or a function's *APPROXIMATE* _type signature_.

*** Search By Name
**** Tabs in the Search By Name interface

*** Searching By Type Signature for functions
**** How type-based search works
**** Primitive with Special Syntax
**** Limitations and quirks of type-based search

*** Item filtering
*** Search query syntax

* TODO 4. How to write documentation
Good documentation is *NOT natural*.

- There are opposing goals that make writing good documentation difficult.
  It
  * requires expertise in the subject
  * BUT also writing to a novice perspective.

  Documentation therefore OFTEN
  * _glazes over implementation detail_,
    OR
  * _leaves readers with unanswered questions_.

- There are *a few tenets* to _Rust documentation_ that can help guide anyone
  through the process of documenting libraries so that everyone has an ample
  opportunity to use the code. =TODO= =???=

- This chapter COVERS
  _not only_ how to write documentation
  _but_ specifically how to write *GOOD* documentation.

  It is important to be _as clear as you can_, and _as complete as possible_.

- _As a rule of thumb_:
  the more documentation you write for your crate the better.

- *If an item is public then it should be documented.*

*** DONE Getting Started
CLOSED: [2023-12-21 Thu 13:52]
- Documenting a /crate/ should

  * begin with _front-page documentation_.
    + As an example,
      the ~hashbrown~ /crate/ level documentation
      - SUMMARIZES the role of the /crate/,
      - PROVIDES links to explain technical details, and
      - EXPLAINS why you would want to use the crate.

  * After introducing the /crate/, it is important that the front-page
    + GIVES an example of how to use the /crate/ in a real world setting.
      - _Stick to the library's role in the example_,
        BUT do so without shortcuts to benefit users who may copy and paste the
        example to get started.

- [[https://docs.rs/futures/0.3.5/futures/][futures]] uses inline comments to explain line by line the complexities of using
  a ~Future~, because a person's first exposure to rust's ~Future~ may be
  this example.

- The [[https://docs.rs/backtrace/0.3.50/backtrace/][backtrace]] documentation
  * walks through the whole process,
    + explaining changes made to the =Cargo.toml= file,
    + passing command line arguments to the compiler,
      and
  * shows a quick example of [[https://docs.rs/backtrace/0.3.50/backtrace/][backtrace]] in the wild.

- Finally, the front-page can eventually become a comprehensive reference how to
  use a /crate/, like [[https://docs.rs/regex/latest/regex/][regex]].
  * In this front page,
    + all requirements are outlined,
    + the edge cases shown, and
    + practical examples provided.
    The front page goes on to
    + show how to use regular expressions
    + then concludes with crate features.

- Don't worry about comparing your /crate/, which is just beginning, to other more
  developed /crates/.

  To get the documentation to something more polished, start incrementally and
  put in an introduction, example, and features. Rome was not built in a day!

- The first lines within the =lib.rs= will compose the front-page, and they use a
  _DIFFERENT convention_ than the rest of the /rustdocs/:
  Lines should start with ~//!~ which indicate _module-level_ or _crate-level_
  documentation. Here's a quick example of the difference:
  #+begin_src rust
    //! Fast and easy queue abstraction.
    //!
    //! Provides an abstraction over a queue.  When the abstraction is used
    //! there are these advantages:
    //! - Fast
    //! - [`Easy`]
    //!
    //! [`Easy`]: http://thatwaseasy.example.com

    /// This module makes it easy.
    pub mod easy {

        /// Use the abstraction function to do this specific thing.
        pub fn abstraction() {}

    }
  #+end_src

- Ideally, this *first line of documentation* is a sentence without highly technical
  details, but with a good description of where this /crate/ fits within the rust
  ecosystem. Users should know whether this /crate/ meets their use case after
  reading this line.

*** TODO Documenting components
- Whether it is /modules/, /structs/, /functions/, or /macros/:
  *the _public API_ of all code should have documentation.*
  Rarely does anyone complain about too much documentation!

- It is recommended that each item's documentation follows this basic structure:
  #+begin_src text
    [short sentence explaining what it is]

    [more detailed explanation]

    [at least one code example that users can copy/paste to try it]

    [even more advanced explanations if necessary]
  #+end_src
  This basic structure should be straightforward to follow when writing your
  documentation; while you might think that a code example is trivial, the
  examples are really important because they can help users understand what an
  item is, how it is used, and for what purpose it exists.

- Let's see an example coming from the _standard library_ by taking a look at the
  ~std::env::args()~ function:

- =TODO=

*** TODO Markdown
_rustdoc_ uses the [[https://commonmark.org/][CommonMark Markdown specification]]. You might be interested in
taking a look at their website to see what's possible:
- CommonMark quick reference
- current spec

**** TODO Strikethrough
**** TODO Footnotes
**** TODO Tables
**** TODO Task lists
**** TODO Smart punctuation
**** TODO Adding a warning block

** 4.1. What to include (and exclude)
- Q :: It is easy to say everything must be documented in a project and often times
  that is correct, but
  * how can we get there, and
  * are there things that don't belong?

- A1 :: As a _library author_,
  * adding the lint ~#![deny(missing_docs)]~ is a great way to
    _ensure the project does NOT drift away from being documented well_, and

  * aadding the lint ~#![warn(missing_docs)]~ is a good way to
    _move towards comprehensive documentation_.

- =TODO= There are more lints in the upcoming _chapter Lints_.

*** Examples
- Of course this is contrived to be simple, but part of the power of documentation
  is showing code that is easy to follow, rather than being realistic. Docs
  often take shortcuts with error handling because examples can become
  complicated to follow with all the necessary set up required for a simple
  example.

- ~Async~ is a good example of this. In order to execute an ~async~ example, an executor
  needs to be available. Examples will often shortcut this, and leave users to
  figure out how to put the ~async~ code into their own runtime.

*** What to Exclude
#+begin_src rust
  #[doc(hidden)]
#+end_src

*** Customizing the output

** 4.2. The ~#[doc]~ attribute
The ~#[doc]~ attribute lets you control various aspects of how _rustdoc_ does
its job.

*** At the crate level
**** ~html_favicon_url~
**** ~html_logo_url~
**** ~html_playground_url~
**** ~issue_tracker_base_url~
**** ~html_root_url~
**** ~html_no_source~
**** ~test(no_crate_inject)~
**** ~test(attr(...))~

*** At the item level
**** ~inline~ and ~no_inline~
**** ~hidden~
**** ~alias~
**** FFI example

** 4.3. Re-exports
*** Inlining rules
*** Inlining with ~#[doc(inline)]~
*** Preventing inlining with ~#[doc(no_inline)]~
*** Attributes

** 4.4. Linking to items by name
*** Valid links
*** Namespaces and Disambiguators
*** Warnings, re-exports, and scoping
*** What happens in case an intra-doc link cannot be generated

** 4.5. Documentation tests
*** Passing or failing a doctest
*** Pre-processing examples
*** Hiding portions of the example
*** Using ~?~ in doc tests
*** Showing warnings in doctests
*** Documenting macros
*** Attributes
**** Custom CSS classes for code blocks

*** Syntax reference
**** Include items only when collecting doctests

*** Controlling the compilation and run directories

* TODO 5. Rustdoc-specific lints
** ~broken_intra_doc_links~
** ~private_intra_doc_links~
** ~missing_docs~
** ~missing_crate_level_docs~
** ~missing_doc_code_examples~
** ~private_doc_tests~
** ~invalid_codeblock_attributes~
** ~invalid_html_tags~
** ~invalid_rust_codeblocks~
** ~bare_urls~
** ~unescaped_backticks~
** ~redundant_explicit_links~

* TODO 6. Scraped examples
** How to use this feature
** How it works
** FAQ
*** My example is not showing uup in the documentation

* TODO 7. Advanced features
** ~#[cfg(doc)]~: Documenting platform-specific or feature-specific information
*** Interactions between platform-specific docs

** Add aliases for an item in documentation search
** Custom search engines
** ~#[repr(transparent)]~: Documenting the transparent representation

* TODO 8. Unstable features
** Nightly-gated functionality
*** Error numbers for ~compile-fail~ doctests
*** ~missing_doc_code_examples~ lint

** Extensions to the ~#[doc]~ attribute
*** ~#[doc(cfg)]~: Recording what platforms or features are required for code to be present
*** ~doc_auto_cfg~: Automatically generate ~#[doc(cfg)]~
*** Adding your trait to the "Notable traits" dialog
*** Exclude certain dependencies from documentation
*** Document primitives
*** Document keywords

** Effects of other nightly features
*** ~fundamental~ types

** Unstable command-line arguments
*** ~-markdown-before-content~: include rendered Markdown before the content
*** ~-markdown-after-content~: include rendered Markdown after the content
*** ~-playground-url~: control the location of the playground
*** ~-sort-modules-by-appearance~: control how items on module pages are sorted
*** ~-show-type-layout~: add a section to each type's docs describing its memory layout
*** ~-resource-suffix~: modifying the name of CSS/JavaScript in crate docs
*** ~-extern-html-root-url~: control how rustdoc links to non-local crates
*** ~-Z force-unstable-if-unmarked~
*** ~-index-page~: provide a top-level landing page for docs
*** ~-enable-index-page~: generate a default index page for docs
*** ~-nocapture~: disable output capture for test
*** ~-check~: only checks the documentation
*** ~-static-root-path~: control how static files are loaded in HTML output
*** ~-persist-doctests~: persist doctest executables after running
*** ~-show-coverage~: calculate the percentage of items with documentation
*** JSON output
*** ~w/--output-format~: output format
*** ~-enable-per-target-ignores~: allow ~ignore-foo~ style filters for doctests
*** ~-runtool, --runtool-arg~: program to run tests with; args to pass to it
*** ~-with-examples~: include examples of uses of items as documentation
*** ~-generate-link-to-definition~: Generate links on types in source code

* TODO 9. Deprecated features
*** Passes

* TODO 10. References
** Official
- Learn Rust
- Rust By Example
- Rust Reference
- RFC 1574: More API Documentation Conventions
- RFC 1946: Intra Rustdoc Links

** Community
- API Guidelines
- GitHub tagged RFCs
- GitHub tagged issues
- RFC (stalled) front page styleguide
- Guide on how to write documentation for a Rust crate
