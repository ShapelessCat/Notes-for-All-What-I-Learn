#+TITLE: Zero to Production in Rust
#+SUBTITLE: An Opinionated Introduction to Backend Development
#+VERSION: 2023-02-19
#+AUTHOR: Luca Palmieri
#+STARTUP: overview
#+STARTUP: entitiespretty


* Foreword - xiii
* Preface - xv
** What Is This Book About - xv
*** Cloud-native applications - xv
*** Working in a team - xvi

** Who Is This Book For - xvii

* 1 Getting Started - 1
** 1.1 Installing The Rust Toolchain - 1
*** 1.1.1 Compilation Targets - 1
*** 1.1.2 Release Channels - 2
*** 1.1.3 What Toolchains Do We Need? - 2

** 1.2 Project Setup - 3
** 1.3 IDEs - 3
*** 1.3.1 Rust-analyzer - 4
*** 1.3.2 IntelliJ Rust - 4
*** 1.3.3 What Should I Use? - 4

** 1.4 Inner Development Loop - 4
*** 1.4.1 Faster Linking - 5
*** 1.4.2 ~cargo-watch~ - 6

** 1.5 Continuous Integration - 6
*** 1.5.1 CI Steps - 7
*** 1.5.2 Ready-to-go CI Pipelines - 10

* 2 Building An Email Newsletter - 11
** 2.1 Our Driving Example - 11
*** 2.1.1 Problem-based Learning - 11

** 2.2 What Should Our Newsletter Do? - 12
*** 2.2.1 Capturing Requirements: User Stories - 12

** 2.3 Working In Iterations - 13
*** 2.3.1 Coming Up - 13

** 2.4 Checking Your Progress - 13

* 3 Sign Up A New Subscriber - 15
** 3.1 Our Strategy - 15
** 3.2 Choosing A Web Framework - 16
** 3.3 Our First Endpoint: A Basic Health Check - 16
*** 3.3.1 Wiring Up ~actix-web~ - 16
*** 3.3.2 Anatomy Of An ~actix-web~ Application - 18
*** 3.3.3 Implementing The Health Check Handler - 23

** 3.4 Our First Integration Test - 26
*** 3.4.1 How Do You Test An Endpoint? - 26
*** 3.4.2 Where Should I Put My Tests? - 27
*** 3.4.3 Changing Our Project Structure For Easier Testing - 28

** 3.5 Implementing Our First Integration Test - 32
*** 3.5.1 Polishing - 35

** 3.6 Refocus - 39
** 3.7 Working With HTML Forms - 40
*** 3.7.1 Refining Our Requirements - 40
*** 3.7.2 Capturing Our RequirementsAsTests - 41
*** 3.7.3 Parsing Form Data From A ~POST~ Request - 43

** 3.8 Storing Data: Databases - 51
*** 3.8.1 Choosing A Database - 52
*** 3.8.2 Choosing A Database Crate - 53
*** 3.8.3 Integration Testing With Side-effects - 55
*** 3.8.4 Database Setup - 56
*** 3.8.5 Writing Our First Query - 62

** 3.9 Persisting A New Subscriber - 70
*** 3.9.1 Application State In ~actix-web~ - 71
*** 3.9.2 ~actix-web~ Workers - 73
*** 3.9.3 The Data Extractor - 75
*** 3.9.4 The ~INSERT~ Query - 75

** 3.10 Updating Our Tests - 80
*** 3.10.1 Test Isolation - 83

** 3.11 Summary - 87
* 4 Telemetry - 89
** 4.1 Unknown Unknowns  - 89
** 4.2 Observability - 90
** 4.3 Logging - 91
*** 4.3.1 The log Crate - 91
*** 4.3.2 ~actix-web~'s ~Logger~ Middleware - 92
*** 4.3.3 The Facade Pattern - 93

** 4.4 Instrumenting ~POST~ /subscriptions - 95
*** 4.4.1 Interactions With External Systems - 96
*** 4.4.2 Think Like A User - 97
*** 4.4.3 Logs Must Be Easy To Correlate - 99

** 4.5 Structured Logging - 102
*** 4.5.1 The ~tracing~ Crate - 102
*** 4.5.2 Migrating From log To tracing - 102
*** 4.5.3 ~tracing~'s Span - 104
*** 4.5.4 Instrumenting Futures - 106
*** 4.5.5 ~tracing~'s ~Subscriber~ - 108
*** 4.5.6 ~tracing-subscriber~ - 109
*** 4.5.7 ~tracing-bunyan-formatter~ - 109
*** 4.5.8 ~tracing-log~ - 112
*** 4.5.9 Removing Unused Dependencies - 113
*** 4.5.10 Cleaning Up Initialisation - 113
*** 4.5.11 Logs For Integration Tests - 117
*** 4.5.12 Cleaning Up Instrumentation Code - ~tracing::instrument~ - 121
*** 4.5.13 Protect Your Secrets - ~secrecy~ - 125
*** 4.5.14 Request Id - 128
*** 4.5.15 Leveraging The tracing Ecosystem - 130

** 4.6 Summary - 131
* 5 Going Live - 133
** 5.1 We Must Talk About Deployments - 133
** 5.2 Choosing Our Tools  - 134
*** 5.2.1 Virtualisation: Docker - 134
*** 5.2.2 Hosting: DigitalOcean - 135

** 5.3 A Dockerfile For Our Application - 135
*** 5.3.1 Dockerfiles - 135
*** 5.3.2 Build Context - 136
*** 5.3.3 Sqlx Offline Mode - 137
*** 5.3.4 Running An Image - 139
*** 5.3.5 Networking - 141
*** 5.3.6 Hierarchical Configuration - 142
*** 5.3.7 Database Connectivity  - 147
*** 5.3.8 Optimising Our Docker Image - 148

** 5.4 Deploy To DigitalOcean Apps Platform - 153
*** 5.4.1 Setup - 153
*** 5.4.2 AppSpecification - 154
*** 5.4.3 How To Inject Secrets Using Environment Variables - 157
*** 5.4.4 Connecting To DigitalOcean's Postgres Instance - 159
*** 5.4.5 Environment Variables In The App Spec  - 162
*** 5.4.6 One Last Push - 163
* 6 Reject Invalid Subscribers #1 - 165
** 6.1 Requirements - 166
*** 6.1.1 Domain Constraints - 166
*** 6.1.2 Security Constraints - 166

** 6.2 First Implementation - 167
** 6.3 Validation Is A Leaky Cauldron  - 170
** 6.4 Type-Driven Development - 171
** 6.5 Ownership Meets Invariants - 174
*** 6.5.1 ~AsRef~ - 178
** 6.6 Panics - 180
** 6.7 Error As Values-~Result~ - 182
*** 6.7.1 Converting ~parse~ To Return ~Result~ - 183

** 6.8 Insightful Assertion Errors: ~claim~ - 185
** 6.9 Unit Tests - 186
** 6.10 Handling A Result - 188
*** 6.10.1 match - 189
*** 6.10.2 The ~?~ Operator - 189
*** 6.10.3 400 Bad Request - 190

** 6.11 The Email Format - 191
** 6.12 The ~SubscriberEmail~ Type - 192
*** 6.12.1 Breaking The Domain Sub-Module - 192
*** 6.12.2 Skeleton Of A NewType - 193

** 6.13 Property-based Testing - 196
*** 6.13.1 How To Generate Random Test Data With ~fake~ - 196
*** 6.13.2 ~quickcheck~ Vs ~proptest~ - 197
*** 6.13.3 Getting Started With ~quickcheck~ - 197
*** 6.13.4 Implementing The ~Arbitrary~ Trait - 198

** 6.14 Payload Validation - 201
*** 6.14.1 Refactoring With ~TryFrom~ - 205

** 6.15 Summary - 208
* 7 Reject Invalid Subscribers #2 - 209
** 7.1 Confirmation Emails - 209
*** 7.1.1 Subscriber Consent - 209
*** 7.1.2 The Confirmation User Journey - 210
*** 7.1.3 The Implementation Strategy - 210

** 7.2 ~EmailClient~, Our Email Delivery Component - 211
*** 7.2.1 How To Send An Email - 211
*** 7.2.2 How To Write A REST Client Using ~reqwest~ - 214
*** 7.2.3 How To Test A REST Client - 222
*** 7.2.4 First Sketch Of ~EmailClient::send_email~ - 227
*** 7.2.5 Tightening Our Happy Path Test - 235
*** 7.2.6 Dealing With Failures - 243

** 7.3 Skeleton And Principles For A Maintainable Test Suite - 253
*** 7.3.1 Why Do We Write Tests? - 254
*** 7.3.2 Why Don't We Write Tests? - 254
*** 7.3.3 Test Code Is Still Code - 254
*** 7.3.4 Our Test Suite - 255
*** 7.3.5 Test Discovery - 256
*** 7.3.6 One Test File, One Crate - 256
*** 7.3.7 Sharing Test Helpers - 257
*** 7.3.8 Sharing Startup Logic - 260
*** 7.3.9 Build An API Client - 269
*** 7.3.10 Summary - 273

** 7.4 Refocus - 273
** 7.5 Zero Downtime Deployments - 274
*** 7.5.1 Reliability - 274
*** 7.5.2 Deployment Strategies - 275

** 7.6 Database Migrations - 278
*** 7.6.1 State Is Kept Outside The Application - 278
*** 7.6.2 Deployments And Migrations - 278
*** 7.6.3 Multi-step Migrations - 279
*** 7.6.4 A New Mandatory Column - 279
*** 7.6.5 A New Table - 281

** 7.7 Sending A Confirmation Email - 282
*** 7.7.1 A Static Email - 282
*** 7.7.2 A Static Confirmation Link  - 287
*** 7.7.3 Pending Confirmation  - 291
*** 7.7.4 Skeleton of ~GET /subscriptions/confirm~ - 294
*** 7.7.5 Connecting The Dots - 297
*** 7.7.6 Subscription Tokens - 307

** 7.8 Database Transactions - 315
*** 7.8.1 All Or Nothing - 315
*** 7.8.2 Transactions In Postgres - 315
*** 7.8.3 Transactions In Sqlx - 316

** 7.9 Summary - 320

* 8 Error Handling - 323
** 8.1 What Is The Purpose Of Errors? - 323
*** 8.1.1 Internal Errors - 324
*** 8.1.2 Errors At The Edge - 326
*** 8.1.3 Summary - 328

** 8.2 Error Reporting For Operators - 329
*** 8.2.1 Keeping Track Of The Error Root Cause - 331
*** 8.2.2 The Error Trait - 337

** 8.3 Errors For Control Flow - 341
*** 8.3.1 Layering - 341
*** 8.3.2 Modelling Errors as Enums - 342
*** 8.3.3 The Error Type Is Not Enough - 344
*** 8.3.4 Removing The Boilerplate With ~thiserror~ - 348

** 8.4 Avoid “Ball Of Mud” Error Enums - 350
*** 8.4.1 Using ~anyhow~ As Opaque Error Type - 355
*** 8.4.2 ~anyhow~ Or ~thiserror~? - 357

** 8.5 Who Should Log Errors? - 358
** 8.6 Summary - 359

* 9 Naive Newsletter Delivery - 361
** 9.2 Do Not Spam Unconfirmed Subscribers - 362
*** 9.2.1 Set Up State Using The Public API - 364
*** 9.2.2 Scoped Mocks - 364
*** 9.2.3 Green Test - 365

** 9.3 All Confirmed Subscribers Receive New Issues - 366
*** 9.3.1 Composing Test Helpers - 366

** 9.4 Implementation Strategy - 368
** 9.5 Body Schema - 369
*** 9.5.1 Test Invalid Inputs - 370

** 9.6 Fetch Confirmed Subscribers List - 372
** 9.7 Send Newsletter Emails  - 374
*** 9.7.1 ~context~ Vs ~with_context~  - 375

** 9.8 ValidationOfStoredData - 376
*** 9.8.1 Responsibility Boundaries - 380
*** 9.8.2 Follow The Compiler - 382
*** 9.8.3 Remove Some Boilerplate - 383

** 9.9 Limitations Of The Naive Approach - 385
** 9.10 Summary - 386

* 10 Securing Our API - 525
** 10.1 Authentication - 387
*** 10.1.1 Drawbacks - 388
*** 10.1.2 Multi-factor Authentication - 388

** 10.2 Password-based Authentication - 388
*** 10.2.1 Basic Authentication - 388
*** 10.2.2 Password Verification - Naive Approach - 394
*** 10.2.3 Password Storage - 398
*** 10.2.4 Do Not Block The Async Executor - 415
*** 10.2.5 User Enumeration - 422

** 10.3 Is it safe? - 427
*** 10.3.1 Transport Layer Security(TLS) - 427
*** 10.3.2 Password Reset - 427
*** 10.3.3 Interaction Types - 427
*** 10.3.4 Machine To Machine - 427
*** 10.3.5 Person Via Browser - 428
*** 10.3.6 Machine to machine, on behalf of a person - 429

** 10.4 Interlude: Next Steps - 429
** 10.5 Login Forms - 429
*** 10.5.1 Serving HTML Pages - 429

** 10.6 Login - 432
*** 10.6.1 HTML Forms - 433
*** 10.6.2 Redirect On Success - 436
*** 10.6.3 Processing Form Data - 436
*** 10.6.4 Contextual Errors - 445

** 10.7 Sessions - 478

* 11 Fault-tolerant Workflows - 525
** 11.1 ~POST /admin/newsletters~ - A Refresher - 525
** 11.2 Our Goal - 527
** 11.3 Failure Modes - 527
*** 11.3.1 Invalid Inputs - 527
*** 11.3.2 Network I/O - 528
*** 11.3.3 Application Crashes - 529
*** 11.3.4 Author Actions - 529

** 11.4 Idempotency: An Introduction - 529
*** 11.4.1 Idempotency In Action: Payments - 530
*** 11.4.2 Idempotency Keys - 530
*** 11.4.3 Concurrent Requests - 531

** 11.5 Requirements As Tests #1 - 532
** 11.6 Implementation Strategies - 533
*** 11.6.1 Stateful Idempotency: Save And Replay - 533
*** 11.6.2 Stateless Idempotency: Deterministic Key Generation - 533
*** 11.6.3 Time Is a Tricky Beast - 534
*** 11.6.4 Making A Choice - 534

** 11.7 Idempotency Store - 534
*** 11.7.1 Which Database Should We Use? - 534
*** 11.7.2 Schema  - 535

** 11.8 Save And Replay - 536
*** 11.8.1 Read Idempotency Key - 536
*** 11.8.2 Retrieve Saved Responses - 541
*** 11.8.3 Save Responses  - 544

** 11.9 Concurrent Requests - 551
*** 11.9.1 Requirements As Tests #2 - 552
*** 11.9.2 Synchronization - 553

** 11.10 Dealing With Errors - 560
*** 11.10.1 Distributed Transactions - 562
*** 11.10.2 Backward Recovery - 563
*** 11.10.3 Forward Recovery - 563
*** 11.10.4 Asynchronous Processing - 564

** 11.11 Epilogue - 581
