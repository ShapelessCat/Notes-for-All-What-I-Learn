#+TITLE: Effective C
#+SUBTITLE: An Introduction to Professional C Programming
#+COMMENT: Updated to Cover C23
#+VERSION: 2nd
#+AUTHOR: Robert C. Seacord
#+STARTUP: entitiesprety
#+STARTUP: indent
#+STARTUP: overview

* TODO Foreword to the Second Edition - xvii
* TODO Foreword to the First Edition - xix
* Acknowledgments - xxi
* TODO Introduction - xxiii
** A Brief History of C - xxiv
** The C Standard - xxv
** The CERT C Coding Standard - xxvi
** Common Weakness Enumeration - xxvi
** Who This Book Is For - xxvi
** What's in This Book - xxvii

* TODO Chapter 1: Getting Started with C - 1
In this chapter,
1. Develops your first C program:
   the traditional “Hello, world!” program.

   1) Examine the various aspects of this simple C program,
   2) compile it
   3) run it

2. Reviews
   - some _editor and compiler options_ and
   - lay out common portability issues
   you'll quickly become familiar with as you code in C.

** DONE Developing Your First C Program - 1
CLOSED: [2024-12-21 Sat 15:08]
#+FILE_NAME: hello.c
#+begin_src c
  #include <stdio.h>
  #include <stdlib.h>

  int main() {
    puts("Hello, world!");
    return EXIT_SUCCESS;
  }
#+end_src

- header :: a source file that, _by convention_, CONTAINS the
  * definitions,
  * function declarations, and
  * constant definitions
  required by the users of the corresponding source file.

- As the filenames suggest,
  * ~<stdio.h>~ defines the interface for C standard input/output (I/O)
    functions
  * ~<stdlib.h>~ declares several general utility types and functions and
    defines several macros.

- =TODO= You'll learn more about the appropriate use of headers in _Chapter 9_.

- The ~int main() {~ line:
  The ~main~ function defines the /entry point/ for the program that's executed
  in a /hosted environment/ when the program is invoked from the command line or
  from another program.

- C defines *two* possible *execution environments*:
  * freestanding: may not provide OS and is typically used in embedded programming.
  * hosted:

- The ~puts("Hello, world!");~ line:
  1. writes a string argument to the stdout stream
  2. appends a newline character to the output

- The ~EXIT_SUCCESS~ is an object-like macro that may be defined as follows:
  #+begin_src c
    #define EXIT_SUCCESS 0
  #+end_src

** DONE Compiling and Running a Program - 3
CLOSED: [2024-12-21 Sat 15:09]
We'll introduce other /compiler and linker options (aka flags)/ throughout the
book and dedicate a section to them in _Chapter 11_.

*** Function Return Values - 4
- The ~puts~ function returns
  * the value of the /macro/ ~EOF~ (a _negative integer_) if a write error occurs;
  * otherwise, it returns a _nonnegative integer value_.

- A revised version
  #+begin_src c
    #include <stdio.h>
    #include <stdlib.h>

    int main() {
      if (puts("Hello, world!") == EOF) {
        return EXIT_FAILURE;
      }
      return EXIT_SUCCESS;
    }
  #+end_src
  The script that invokes the program can check its status to determine whether
  it was successful.

*** Formatted Output - 5
- =TODO= =???= =???=
  Take care not to pass user-supplied data as part of the first argument to the
  printf function, because doing so can result in a formatted output security
  vulnerability (Seacord 2013).

- Simplify replace ~puts~ statement in previous example with ~printf~ and
  corresponding syntax *doesn't work*,
  _BECAUSE_
  ~printf~ has a differnt return value.
  * It returns the number of characters printed when successful, or negative
    value if an output or encoding error occurred.

** DONE Editors and Integrated Development Environments - 6
CLOSED: [2024-12-21 Sat 15:11]
** TODO Compilers - 7
*** GNU Compiler Collection - 8
*** Clang - 8
*** Microsoft Visual Studio - 8

** Portability - 9
*** Implementation-Defined Behavior - 9
*** Unspecified Behavior - 10
*** Undefined Behavior - 10
*** Locale-Specific Behavior and Common Extensions - 11

** Summary - 11

* TODO Chapter 2: Objects, Functions, and Types - 13
** Entities - 13
** Declaring Variables - 14
*** Swapping Values, First Attempt - 15
*** Swapping Values, Second Attempt - 16

** Object Types - 14
*** Boolean - 18
*** Character - 19
*** Arithmetic - 19
*** void - 22

** Derived Types - 22
*** Function - 22
*** Pointer - 23
*** Array - 25
*** Structure - 27
*** Union - 28

** Tags - 14
** Type Qualifiers - 14
*** const - 32
*** volatile - 32
*** restrict - 33

** Scope - 14
** Storage Duration - 14
** Storage Class - 14
*** ~static~ - 36
*** ~extern~ - 37
*** ~thread_local~ - 37
*** ~consexpr~ - 37
*** ~register~ - 38
*** ~typedef~ - 38
*** ~auto~ - 38

** ~typeof~ Operators - 39
** Alignment - 41
** Variably Modified Types - 42
** Attributes - 44
** Summary - 45

* TODO Chapter 3: Arithmetic Types - 47
** Integers - 48
*** Padding, Width, and Precision - 48
*** Integer Ranges - 48
*** Integer Declarations - 49
*** Unsigned Integers - 49
**** Representation - 49
**** Wraparound - 50

*** Signed Integers - 52
**** Representation - 52
**** Integer Overflow - 54

*** Bit-Precise Integer Types - 56
*** Integer Constants - 57

** Floating-Point Representation - 59
** Arithmetic Conversion - 64
*** Arithmetic Conversion Rank - 65
*** Integer Promotions - 66
*** Usual Arithmetic Conversions - 67
*** An Example of Implicit Conversion - 69
*** Safe Conversions - 70
**** Integer Conversions - 70
**** Integer-Type to Floating-Type Conversions - 71
**** Floating-Type to Integer-Type Conversions - 71
**** Floating-Type Demotions - 71

** Summary - 72

* TODO Chapter 4: Expressions and Operators - 73
** Simple Assignment - 74
** Evaluations - 75
** Function Invocation - 76
** Increment and Decrement Operators - 77
** Operator Precedence and Associativity - 78
** Order of Evaluation - 80
*** Unsequenced and Indeterminately Sequenced Evaluations - 81
*** Sequence Points - 81

** ~sizeof~ Operator - 82
** Arithmetic Operators - 83
*** Unary + and - 83
*** Logical Negation - 83
*** Additive - 83
*** Multiplicative - 84

** Bitwise Operators - 85
*** Complement - 85
*** Shift - 86
*** Bitwise AND - 87
*** Bitwise Exclusive OR - 88
*** Bitwise Inclusive OR - 88

** Logical Operators - 89
** Cast Operators - 90
** Conditional Operators - 91
** ~alignof~ Operator - 92
** Relational Operators - 93
** Compound Assignment Operators - 93
** Comma Operator - 94
** Pointer Arithmetic - 94
** Summary - 96

* TODO Chapter 5: Control Flow - 97
** Expression Statements - 97
** Compound Statements - 98
** Selection Statements - 99
*** if - 99
*** switch - 102

** Iteration Statements - 105
*** while - 105
*** do...while - 106
*** for - 107

** Jump Statements - 109
*** goto - 109
*** continue - 111
*** break - 111
*** return - 112

** Summary - 113

* TODO Chapter 6: Dynamically Allocated Memory - 115
** Storage Duration - 116
*** The Heap and Memory Managers - 116
*** When to Use Dynamically Allocated Memory - 117

** Memory Management - 117
*** malloc - 118
*** Allocating Memory Without Declaring a Type - 118
*** Reading Uninitialized Memory - 119
*** aligned_alloc - 120
*** calloc - 120
*** realloc - 121
*** Avoiding Memory Leaks - 121
*** Calling realloc with a Null Pointer - 122
*** reallocarray - 123
*** free - 123
*** free_sized - 124
*** free_aligned_sized - 124
*** Dealing with Dangling Pointers - 125
*** Setting the Pointer to Null - 126

** Memory States - 126
** Flexible Array Members - 127
** Other Dynamically Allocated Storage - 128
*** alloca - 128
*** Variable-Length Arrays - 129

** Debugging Allocated Storage Problems
*** dmalloc - 132
*** Safety-Critical Systems - 134

** Summary - 135

* TODO Chapter 7: Characters and Strings - 137
** Characters - 138
*** ASCII - 138
*** Unicode - 138
*** Source and Execution Character Sets - 140
*** Data Types - 140
**** char - 140
**** int - 141
**** wchar_t - 141
**** char16_t and char32_t - 142

*** Character Constants - 142
*** Escape Sequences - 143
*** Linux - 144
*** Windows - 145
**** The main and wmain Entry Points - 145
**** Narrow vs. Wide Characters - 146

*** Character Conversion - 146
**** C Standard Library - 147
**** libiconv - 149
**** Win32 Conversion APIs - 149

** Strings - 149
** String Literals - 150
** String-Handling Functions - 152
*** ~<string.h>~ and ~<wchar.h>~ - 152
**** Size and Length - 153
**** ~strcpy~ - 155
**** Argument Checking - 156
**** ~memcpy~ - 157
**** ~memccpy~ - 157
**** ~memset~, ~memset_s~, and ~memset_explicit~ - 159
**** ~gets~ - 160

*** Annex K Bounds-Checking Interfaces - 161
**** ~gets_s~ - 161
**** ~strcpy_s~ - 162
**** Runtime Constraints - 163

*** POSIX - 163
*** Microsoft - 165

** Summary - 165

* TODO Chapter 8: Input/Output - 167
** Standard I/O Streams - 168
*** Error and End-of-File Indicators - 168
*** Stream Buffering - 169
*** Predefined Streams - 170
*** Stream Orientation - 171
*** Text and Binary Streams - 172

** Opening and Creating Files - 172
*** fopen - 172
*** open - 174

** Closing Files - 176
*** fclose - 176
*** close - 177

** Reading and Writing Characters and Lines - 177
** Stream Flushing - 180
** Setting the Position in a File - 180
** Removing and Renaming Files - 183
** Using Temporary Files - 184
** Reading Formatted Text Streams - 184
** Reading from and Writing to Binary Streams - 188
** Endian - 191
** Summary - 192

* TODO Chapter 9: Preprocessor - 195
** The Compilation Process - 196
** File Inclusion - 197
** Conditional Inclusion - 198
*** Generating Diagnostics - 200
*** Using Header Guards - 201

** Macro Definitions - 202
*** Macro Replacement - 205
*** Type-Generic Macros - 207
*** Embedded Binary Resources - 209
*** Predefined Macros - 210

** Summary - 211

* TODO Chapter 10: Program Structure - 213
** Principles of Componentization - 213
*** Coupling and Cohesion - 214
*** Code Reuse - 215
*** Data Abstractions - 215
*** Opaque Types - 217

** Executables - 218
** Linkage - 219
** Structuring a Simple Program - 221
** Building the Code - 225
** Summary - 227

* TODO Chapter 11: Debugging, Testing, and Analysis - 229
** Assertions - 230
*** Static Assertions - 230
*** Runtime Assertions - 232

** Compiler Settings and Flags - 229
*** GCC and Clang Flags - 235
**** ~-glevel~ - 236
**** ~-Wall~ and ~-Wextri~ - 237
**** ~-Wconversion~ - 238
**** ~-Werror~ - 238
**** ~-std=~ - 238
**** ~-pedantic~ - 238
**** ~-D_FORTIFY_SOURCE=2~ - 239
**** ~-fpie -Wl~, ~-pie~, and ~-fpic -shared~ - 239
**** ~-Wl~, ~-z~, ~noexecstack~ - 239
**** ~-fstack-protector-strong~ - 240

*** Visual C++ Options - 240
**** ~/guard:cf~ - 240
**** ~/analyze~ - 241
**** ~/sdl~ - 241
**** ~/permissive-~ - 241
**** ~/std:clatest~ - 241

** Debugging - 241
** Unit Testing - 245
** Static Analysis - 251
** Dynamic Analysis - 252
** AddressSanitizer - 253
*** Running the Tests - 254
*** Instrumenting the Code - 254
*** Running the Instrumented Tests - 255

** Summary - 257
** Future Directions - 257

* TODO Appendix: The Fifth Edition of the C Standard (C23) - 259
** Attributes - 259
** Keywords - 260
** Integer Constant Expressions - 260
** Enumeration Types - 261
** Type Inference - 261
** ~typeof~ Operators - 262
*** K&R C Functions - 262
*** Preprocessor - 262
*** Integer Types and Representations - 263

** unreachable Function-Like Macro - 264
** Bit and Byte Utilities - 264
** IEEE Floating-Point Support - 265

* References - 267
* Index - 271
