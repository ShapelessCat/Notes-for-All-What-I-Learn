#+TITLE: Java Logging Frameworks Comparison: Log4j vs Logback vs Log4j2 vs SLF4j Differences
#+LINK: https://sematext.com/blog/java-logging-frameworks/
#+VERSION: 2023-03-06
#+AUTHOR: RHIJU TIMILA
#+STARTUP: indent
#+STARTUP: overview
#+STARTUP: entitiespretty

- Any software application or a system can have bugs and issues in testing or
  production environments. Therefore, logging is essential to help troubleshoot
  issues easily and introduce fixes on time.
  * However,
    logging is useful
    *ONLY IF*
    it provides the required information from the log messages
    *WITHOUT adversely impacting*
    the _system's performance_.

- _Traditionally_, implementing logging that satisfies these criteria in Java
  applications was a tedious process. Developers had to rely on simple println
  statements to write logs to console.

- _These days_, developers can use various logging frameworks to solve these
  issues. The problem now has shifted to finding the one that satisfies their
  requirements.

- This article *compares the _similarities_ and _differences_ between* the
  FIVE most popular /java logging frameworks/:
  * ~java.util.logging~
  * Log4j
  * Logback
  * Log4j2
  * SLF4j
  to help you decide which is the right one for you.

* Popular Java Logging Frameworks: What Are the Differences?
** ~java.util.logging~ vs SLF4J
- ~java.util.logging~ is for simple use.

- SLF4J is an abstraction layer.

** Logback vs Log4j2 vs SLF4j
- *Logback vs Log4j2*
  * _Logback_ is a successor of _Log4j_.

  * _Logback_ holds many improvements over _Log4j_ in terms of its
    + performance
    + native support for _SLF4j_.
    + Some of the major improvements over _Log4j_ are
      - *auto-reloading* config files,
      - *filtering* capabilities
      - *automatic removal* of OLD log archival.

  * _Logback_ comes with *3* core modules:
    + *logback-core*:
      This is the base module that lays the foundation required by the following
      two modules.

    + *logback-classic*:
      This module contains an improved version of Log4j and also natively
      implements the SLF4j API that lets you switch between Logback and other
      frameworks.

    + *logback-access*:
      This module integrates with servlet containers such as Tomcat and Jetty
      allowing HTTP-access log function.

- *Logback vs Log4j2*
  * _Log4j2_ is a successor of _Logback_.

  * _Log4j2_ offers advanced features like
    + *lazy* evaluation of log messages based on _lambda expressions_,
    + *asynchronous* loggers
    + an option to *disable* garbage-collector operations.

    For these reasons, developers will find Log4j2 to be more efficient and
    faster than Logback.

- Here is an example of showing the benefit of using _SLF4J_:
  Migrate from Log4j to Log4j2, you need to change all the ~getLogger~ lines!!!
  #+NAME: use Log4J
  #+begin_src java
    import org.apache.log4j.Logger;

    public class MyClass {
        private static Logger LOGGER = LoggerFactory.getLogger(MyClass.class.doSomething());

        // ...
    }
  #+end_src

  #+NAME: use Log4J2
  #+begin_src java
    import org.apache.log4j.LogManager;
    import org.apache.log4j.Logger;

    public class MyClass {
        private static Logger LOGGER = LogManager.getLogger(MyClass.class.doSomething());

        // ...
    }
  #+end_src

** Log4j vs Log4j2
- _Log4j_ was the most popular Java logging framework until its end of life was
  announced in 2015.

- _Log4j2_ comes with many features that Log4j didn't have:
  * Native support for _SLF4j_

  * Automatic reloading of logging configuration

  * Advanced filtering

  * Support for lambda expressions evaluation

  * Support for low latency systems

  * Option to disable garbage collector

  * Not like Log4j, besides properties and XML formats,
    _Log4j2_ also supports configuration through XML, JSON, YAML, and configuration
    files/programmatic actions.

  * execute locks at the lowest layer, which helps solve the deadlock problem.
    =TODO= =???=

* Comparison Summary: JUL vs Log4j vs Logback vs Log4j2 vs SLF4j
=IMPORTANT= Please check the original document

* Apache Commons Logging
* Which Is the Best Java Logging Framework?
* Why Is Java Logging Important?
* Shipping Java Logs with Sematext
* Conclusion
