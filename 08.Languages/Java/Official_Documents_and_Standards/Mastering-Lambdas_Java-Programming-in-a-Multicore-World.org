#+TITLE: Mastering Lambdas: Java Programming in a Multiple World
#+VERSION: 2015
#+AUTHOR: Maurice Naftalin
#+FORWARD BY: Brian Goetz
#+STARTUP: overview
#+STARTUP: entitiespretty

* Foreword - xi
* Acknowledgments - xiii
* Introduction - xv
* 1 Taking Java to the Next Level - 1
** 1.1 From External to Internal Iteration - 2
*** 1.1.1 Internal Iteration - 4
*** 1.1.2 The Command Pattern - 5
*** 1.1.3 Lambda Expressions - 7

** 1.2 From Collections to Streams - 9
** 1.3 From Sequential to Parallel - 12
** 1.4 Composing Behaviors - 15
** 1.5 Conclusion - 17

* 2 The Basics of Java Lambda Expressions - 19
** 2.1 What Is a Lambda Expression? - 20
*** 2.1.1 The Syntax of Lambdas - 20

** 2.2 Lambdas vs. Anonymous Inner Classes - 21
*** 2.2.1 No Identity Crisis - 22
*** 2.2.2 Scoping Rules for Lambdas - 22

** 2.3 Variable Capture - 23
** 2.4 Functional Interfaces - 26
** 2.5 Using Lambda Expressions - 30
** 2.6 Method and Constructor References - 31
*** 2.6.1 Static Method References - 32
*** 2.6.2 Instance Method References - 33
*** 2.6.3 Constructor References - 35

** 2.7 Type Checking - 35
*** 2.7.1 What Exactly Is a Function Type? - 36
*** 2.7.2 Matching a Function Type - 36

** 2.8 Overload Resolution - 38
*** 2.8.1 Overloading with Lambda Expressions - 39
*** 2.8.2 Overloading with Method References - 41

** 2.9 Conclusion - 42

* 3 Introduction to Streams and Pipelines - 43
** 3.1 Stream Fundamentals - 44
*** 3.1.1 Parallel-Ready Code - 47
*** 3.1.2 Primitive Streams - 48

** 3.2 Anatomy of a Pipeline - 49
*** 3.2.1 Starting Pipelines - 50
*** 3.2.2 Transforming Pipelines - 51
*** 3.2.3 Non-interference - 60
*** 3.2.4 Ending Pipelines - 62

** 3.3 Conclusion - 71

* 4 Ending Streams: Collection and Reduction - 73
** 4.1 Using Collectors - 76
*** 4.1.1 Stand-alone Predefined Collectors - 76
*** 4.1.2 Composing Collectors - 80
*** 4.1.3 Chaining Pipelines - 84
*** 4.1.4 Worked Example: Most Popular Topics - 86

** 4.2 Anatomy of a Collector - 88
*** 4.2.1 Concurrent Collection - 90

** 4.3 Writing a Collector - 90
*** 4.3.1 Finishers - 94
*** 4.3.2 Worked Example: Finding My Books - 97
*** 4.3.3 Rules for Collectors - 101

** 4.4 Reduction - 102
*** 4.4.1 Reduction over Primitives - 102
*** 4.4.2 Reduction over Reference Streams - 104
*** 4.4.3 Composing Collectors with Reduction - 108

** 4.5 Conclusion - 109

* 5 Starting Streams: Sources and Spliterators - 111
** 5.1 Creating Streams - 112
** 5.2 Spliterators and Fork/Join - 119
*** 5.2.1 Streams from Spliterators - 122

** 5.3 Exceptions - 123
** 5.4 Worked Example: Recursive grep - 127
** 5.5 Conclusion - 136

* 6 Stream Performance - 137
** 6.1 Microbenchmarking - 140
*** 6.1.1 Measuring a Dynamic Runtime - 140
*** 6.1.2 The Java Microbenchmarking Harness - 142
*** 6.1.3 Experimental Method - 143

** 6.2 Choosing Execution Mode - 146
** 6.3 Stream Characteristics - 148
** 6.4 Ordering - 151
** 6.5 Stateful and Stateless Operations - 153
** 6.6 Boxing and Unboxing - 153
** 6.7 Spliterator Performance - 154
** 6.8 Collector Performance - 155
*** 6.8.1 Concurrent Map Merge - 156
*** 6.8.2 Performance Analysis: Point Grouping - 157
*** 6.8.3 Performance Analysis: Finding My Books - 157

** 6.9 Conclusion - 158

* 7 API Evolution with Default Methods - 159
** 7.1 Using Default Methods - 162
** 7.2 What Role for Abstract Classes? - 164
** 7.3 Default Method Syntax - 165
** 7.4 Default Methods and Inheritance - 166
*** 7.4.1 Compatibility Problems - 170

** 7.5 Static Methods in Interfaces - 172
*** 7.5.1 Using Static Methods - 173

** 7.6 Conclusion - 173

* Conclusion - 175
* Index - 177
