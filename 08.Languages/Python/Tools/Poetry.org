#+TITLE: Poetry
#+SUBTITLE: Python packaging and dependency management made easy
#+AUTHOR: Charlie Marsh (@astral-sh)
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Introduction
** System requirements
** Installation
** Enable tab completion for Bash, Fish, or Zsh
*** Bash
*** Fish
*** Zsh

* Basic usage
**  Project setup
*** Setting a Python Version
*** Initialising a pre-existing project
*** Operating modes
*** Specifying dependencies

**  Using your virtual environment
*** Using poetry run
*** Activating the virtual environment

**  Version constraints
**  Installing dependencies
*** Installing without poetry.lock
*** Installing with poetry.lock
*** Committing your poetry.lock file to version control
*** Installing dependencies only

**  Updating dependencies to their latest versions

* Managing dependencies
** Dependency groups
*** Optional groups
*** Adding a dependency to a group
*** Installing group dependencies
*** Removing dependencies from a group

** Synchronizing dependencies
** Layering optional groups

* Libraries
** Versioning
** Lock file
** Packaging
** Publishing to PyPI
** Publishing to a private repository

* Commands
** Global options
** new
*** Options

** init
*** Options

** install
*** Options

** update
*** Options

** add
*** Options

** remove
*** Options

** show
*** Options

** build
*** Options

** publish
*** Options

** config
*** Usage
*** Options

** run
** shell
** check
*** Options

** search
** lock
*** Options

** version
*** Options

** export
*** Options

** env
** cache
*** cache list
*** cache clear

** source
*** source add
*** source show
*** source remove

** about
** help
** list
** self
*** self add
*** self update
*** self lock
*** self show
*** self show plugins
*** self remove
*** self install

* Configuration
** Local configuration
** Listing the current configuration
** Displaying a single configuration setting
** Adding or updating a configuration setting
** Removing a specific setting
** Using environment variables
** Default Directories
*** Config Directory
*** Data Directory
*** Cache Directory

** Available settings
*** cache-dir
*** experimental.system-git-client
*** installer.max-workers
*** installer.modern-installation
*** installer.no-binary
*** installer.parallel
*** solver.lazy-wheel
*** virtualenvs.create
*** virtualenvs.in-project
*** virtualenvs.options.always-copy
*** virtualenvs.options.no-pip
*** virtualenvs.options.no-setuptools
*** virtualenvs.options.system-site-packages
*** virtualenvs.path
*** virtualenvs.prefer-active-python (experimental)
*** virtualenvs.prompt
*** repositories.<name>.url
*** http-basic.<name>.[username|password]:
*** pypi-token.<name>:
*** certificates.<name>.cert:
*** certificates.<name>.client-cert:
*** keyring.enabled:


* Repositories
*** Private Repository Example

** Package Sources
*** Project Configuration
*** Supported Package Sources

** Publishable Repositories
** Configuring Credentials
** Certificates
*** Custom certificate authority and mutual TLS authentication

** Caches
** Debugging Issues



* Managing environments
** Switching between environments
** Displaying the environment information
** Listing the environments associated with the project
** Deleting the environments

* Dependency specification
** Version constraints
*** Caret requirements
*** Tilde requirements
*** Wildcard requirements
*** Inequality requirements
*** Exact requirements
*** Using the @ operator

** git dependencies
** path dependencies
** url dependencies
** Dependency extras
** source dependencies
** Python restricted dependencies
** Using environment markers
** Multiple constraints dependencies
*** Combining git / url / path dependencies with source repositories

** Expanded dependency specification syntax

* Plugins
** Creating a plugin
*** Plugin package
*** Generic plugins
*** Application plugins
*** Event handler

** Using plugins
*** With pipx inject
*** With pip
*** The self add command

** Maintaining a plugin

* The pyproject.toml file
** package-mode
** name
** version
** description
** license
** authors
** maintainers
** readme
** homepage
** repository
** documentation
** keywords
** classifiers
** packages
** include and exclude
** dependencies and dependency groups
** scripts
** extras
** plugins
** urls
** Poetry and PEP-517

* Contributing to Poetry
** How to contribute
*** Reporting bugs
*** Suggesting enhancements
*** Documentation contributions
*** Code contributions
*** Issue triage

* Community
** Badge

* FAQ
** Why is the dependency resolution process slow?
** What kind of versioning scheme does Poetry use for itself?
** Why does Poetry not adhere to semantic versioning?
** Are unbound version constraints a bad idea?
** Is tox supported?
** Is Nox supported?
** I don’t want Poetry to manage my virtual environments. Can I disable it?
** Why is Poetry telling me that the current project’s supported Python range is not compatible with one or more packages' Python requirements?
** Why does Poetry enforce PEP 440 versions?
** Poetry busts my Docker cache because it requires me to COPY my source files in before installing 3rd party dependencies
** My requests are timing out!

* pre-commit hooks
** poetry-check
*** Arguments

** poetry-lock
*** Arguments

** poetry-export
*** Arguments

** poetry-install
*** Arguments

** Usage
** FAQ
*** Why does pre-commit autoupdate not update to the latest version?
