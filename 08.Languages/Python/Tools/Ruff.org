#+TITLE: Ruff
#+SUBTITLE: An extremely fast Python linter and code formatter, written in Rust.
#+VERSION: v0.12.4
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Overview
** Testimonials

* Tutorial
- This tutorial will walk you through the process of *integrating* _Ruff's
  linter and formatter_ *into* your project.

- =NEXT= For a more detailed overview, see [[https://docs.astral.sh/ruff/configuration/][Configuring Ruff]].

** Getting Started
** Configuration
*** Rule Selection
*** Ignoring Errors
*** Adding Rules

** Integrations

* Installing Ruff
* The Ruff Linter
** ruff check
** Rule selection
** Fixes
*** Fix safety
*** Disabling fixes

** Error suppression
*** Full suppression comment specification
*** Detecting unused suppression comments
*** Inserting necessary suppression comments
*** Action comments

** Exit codes

* The Ruff Formatter
** ruff format
** Philosophy
** Configuration
** Docstring formatting
** Format suppression
** Conflicting lint rules
** Exit codes
** Style Guide
*** Intentional deviations
*** Preview style
*** F-string formatting
**** Quotes
**** Line breaks

** Sorting imports

* Editors
** Editor Integration
** Setup
** Features
** Settings
** Migrating from ruff-lsp

* Configuring Ruff
** Config file discovery
*** Inferring the Python version

** Python file discovery
*** Default inclusions

** Jupyter Notebook discovery
** Command-line interface
*** The ~--config~ CLI flag
*** Full command-line interface

** Shell autocompletion

* Preview
** Enabling preview mode
** Using rules that are in preview
** Selecting single preview rules
** Deprecated rules

* Rules
** Legend
** Airflow (AIR)
** eradicate (ERA)
** FastAPI (FAST)
** flake8-2020 (YTT)
** flake8-annotations (ANN)
** flake8-async (ASYNC)
** flake8-bandit (S)
** flake8-blind-except (BLE)
** flake8-boolean-trap (FBT)
** flake8-bugbear (B)
** flake8-builtins (A)
** flake8-commas (COM)
** flake8-comprehensions (C4)
** flake8-copyright (CPY)
** flake8-datetimez (DTZ)
** flake8-debugger (T10)
** flake8-django (DJ)
** flake8-errmsg (EM)
** flake8-executable (EXE)
** flake8-fixme (FIX)
** flake8-future-annotations (FA)
** flake8-gettext (INT)
** flake8-implicit-str-concat (ISC)
** flake8-import-conventions (ICN)
** flake8-logging (LOG)
** flake8-logging-format (G)
** flake8-no-pep420 (INP)
** flake8-pie (PIE)
** flake8-print (T20)
** flake8-pyi (PYI)
** flake8-pytest-style (PT)
** flake8-quotes (Q)
** flake8-raise (RSE)
** flake8-return (RET)
** flake8-self (SLF)
** flake8-simplify (SIM)
** flake8-slots (SLOT)
** flake8-tidy-imports (TID)
** flake8-todos (TD)
** flake8-type-checking (TC)
** flake8-unused-arguments (ARG)
** flake8-use-pathlib (PTH)
** flynt (FLY)
** isort (I)
** mccabe (C90)
** NumPy-specific rules (NPY)
** pandas-vet (PD)
** pep8-naming (N)
** Perflint (PERF)
** pycodestyle (E, W)
*** Error (E)
*** Warning (W)

** pydoclint (DOC)
** pydocstyle (D)
** Pyflakes (F)
** pygrep-hooks (PGH)
** Pylint (PL)
*** Convention (PLC)
*** Error (PLE)
*** Refactor (PLR)
*** Warning (PLW)

** pyupgrade (UP)
** refurb (FURB)
** Ruff-specific rules (RUF)
** tryceratops (TRY)

* TODO Settings
* Versioning
** Version changes
** Minimum supported Rust version
** Preview mode
** Rule stabilization
** Fix stabilization
** Visual Studio Code Extension

* Integrations
** GitHub Actions
** GitLab CI/CD
** pre-commit
** mdformat
** Docker

* FAQ
* Contributing
** The Basics
*** Prerequisites
*** Development
*** Project Structure
*** Example: Adding a new lint rule
**** Rule naming convention
**** Rule testing: fixtures and snapshots

*** Example: Adding a new configuration option

** MkDocs
** Release Process
*** Creating a new release

** Ecosystem CI
** Upgrading Rust
** Benchmarking and Profiling
*** CPython Benchmark
*** Microbenchmarks
**** Benchmark-driven Development
**** PR Summary
**** Tips

*** Profiling Projects
**** Linux
**** Mac

** cargo dev
** Subsystems
*** Compilation Pipeline
*** Import Categorization
**** Project root
**** Package root
**** Import categorization
