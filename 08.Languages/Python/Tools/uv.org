#+TITLE: uv
#+SUBTITLE: An extremely fast Python package and project manager, written in Rust
#+AUTHOR: Charlie Marsh (@astral-sh)
#+VERSION: 0.7.12
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* DONE Introduction
CLOSED: [2025-03-17 Mon 12:53]
An extremely fast Python package and project manager, written in Rust.

** Highlights
- 🚀 A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.
- ⚡️ 10-100x faster than pip.
- 🗂️ Provides comprehensive project management, with a universal lockfile.
- ❇️ Runs scripts, with support for inline dependency metadata.
- 🐍 Installs and manages Python versions.
- 🛠️ Runs and installs tools published as Python packages.
- 🔩 Includes a pip-compatible interface for a performance boost with a familiar CLI.
- 🏢 Supports Cargo-style workspaces for scalable projects.
- 💾 Disk-space efficient, with a global cache for dependency deduplication.
- ⏬ Installable without Rust or Python via curl or pip.
- 🖥️ Supports macOS, Linux, and Windows.

_uv_ is backed by _Astral_, the creators of _Ruff_.

** Installation
** Projects
_uv_ manages project /dependencies/ and /environments/, with support for
/lockfiles/, /workspaces/, and more, similar to _rye_ or _poetry_:
#+begin_src shell
  uv init example
  # Initialized project `example` at `/home/user/example`

  cd example

  uv add ruff
  # Creating virtual environment at: .venv
  # Resolved 2 packages in 170ms
  #    Built example @ file:///home/user/example
  # Prepared 2 packages in 627ms
  # Installed 2 packages in 1ms
  #  + example==0.1.0 (from file:///home/user/example)
  #  + ruff==0.5.4

  uv run ruff check
  # All checks passed!

  uv lock
  # Resolved 2 packages in 0.33ms

  uv sync
  # Resolved 2 packages in 0.70ms
  # Audited 1 package in 0.02ms
#+end_src

- See the [[https://docs.astral.sh/uv/guides/projects/][project guide]] to get started.

- _uv_ also supports *building* and *publishing* projects,
  even if (=from Jian= till now) they're *NOT* managed with _uv_. See the
  [[https://docs.astral.sh/uv/guides/package/][packaging guide]] to learn more.

** Scripts
_uv_ manages /dependencies/ and /environments/ for single-file scripts.

- Create a new script and add inline metadata declaring its dependencies:
  #+begin_src shell
    echo 'import requests; print(requests.get("https://astral.sh"))' > example.py

    uv add --script example.py requests
    # Updated `example.py`
  #+end_src

- Then, run the script in an isolated virtual environment:
  #+begin_src shell
    uv run example.py
    # Reading inline script metadata from: example.py
    # Installed 5 packages in 12ms
    # <Response [200]>
  #+end_src
  =TODO= Where in disk can I find that inline script metadata?

See the [[https://docs.astral.sh/uv/guides/scripts/][scripts guide]] to get started.

** Tools
_uv_ *executes* and *installs* command-line tools provided by Python packages,
similar to _pipx_.

- Run a tool in an ephemeral environment using ~uvx~ (an alias for
  ~uv tool run~):
  #+begin_src shell
    uvx pycowsay 'hello world!'
  #+end_src

- Install a tool with ~uv tool install~:
  ~uv tool install ruff~
  and then use this tool (no longer need any _uv_ or _uvx_ commands)
  ~ruff --version~

See the [[https://docs.astral.sh/uv/guides/tools/][tools guide]] to get started.

** Python versions
_uv_ installs Python and allows quickly switching between versions.

- Install multiple Python versions:
  ~uv python install 3.10 3.11 3.12~

- Download Python versions as needed:
  * ~uv venv --python 3.12.0~
  * ~uv run --python pypy@3.8 -- python~

- Use a specific Python version in the current directory:
  #+begin_src shell
    uv python pin 3.11
    # Pinned `.python-version` to `3.11`
  #+end_src

See the [[https://docs.astral.sh/uv/guides/install-python/][installing Python guide]] to get started.

** The pip interface
_uv_ provides a drop-in replacement for common _pip_, _pip-tools_, and
_virtualenv_ commands.

- _uv_ extends their interfaces with advanced features, such as
  * dependency version overrides, =???=
  * platform-independent resolutions, =???=
  * reproducible resolutions, =???=
  * alternative resolution strategies, =???= and
  * more. =???=

- Compile requirements into a platform-independent requirements file:
  #+begin_src shell
    uv pip compile docs/requirements.in \
       --universal \
       --output-file docs/requirements.txt
  #+end_src

- Create a virtual environment:
  #+begin_src shell
    uv venv
  #+end_src

- Install the locked requirements:
  #+begin_src shell
    uv pip sync docs/requirements.txt
  #+end_src

See the [[https://docs.astral.sh/uv/pip/][pip interface documentation]] to get started.

** Learn more
See the [[https://docs.astral.sh/uv/getting-started/first-steps/][first steps]] or jump straight to the [[https://docs.astral.sh/uv/guides/][guides]] to start using _uv_.

* DONE Getting started
CLOSED: [2025-03-17 Mon 13:20]
Need =NOTE=

** Installation
** First steps
** Features
** Getting help

* DONE Guides
CLOSED: [2025-03-17 Mon 14:46]
** Installing Python
*** Getting started
*** Installing a specific version
*** Reinstalling Python
*** Viewing Python installations
*** Automatic Python downloads
*** Using existing Python versions
*** Next steps

** Running scripts
*** Running a script without dependencies
*** Running a script with dependencies
*** Creating a Python script
*** Declaring script dependencies
*** Using a shebang to create an executable file
*** Using alternative package indexes
*** Locking dependencies
*** Improving reproducibility
*** Using different Python versions
*** Using GUI scripts
*** Next steps

** Using tools
*** Running tools
*** Commands with different package names
*** Requesting specific versions
*** Requesting extras
*** Requesting different sources
*** Commands with plugins
*** Installing tools
*** Upgrading tools
*** Requesting Python versions
*** Legacy Windows Scripts
*** Next steps

** Working on projects
*** Creating a new project
*** Project structure
**** =pyproject.toml=
**** =.python-version=
**** =.venv=
**** =uv.lock=

*** Managing dependencies
*** Running commands
*** Building distributions
*** Next steps

** Publishing packages
*** Preparing your project for packaging
*** Building your package
*** Publishing your package
*** Installing your package
*** Next steps

** Integration guides
*** Using in Docker images
*** Using with Jupyter notebooks
*** Using with marimo notebooks
*** Using with pre-commit
*** Using in GitHub Actions
*** Using in GitLab CI/CD
*** Using with alternative package indexes
*** Installing PyTorch
*** Building a FastAPI application
*** Using with AWS Lambda

* TODO Concepts
** Projects
*** Project Structure and files
**** The pyproject.toml
**** The project environment
**** The lockfile
***** pylock.toml

*** Creating projects
**** Target directory
**** Applications
**** Packaged applications
**** Libraries
**** Projects with extension modules
**** Creating a minimal project

*** Managing dependencies
**** Dependency fields
**** Adding dependencies
***** Importing dependencies

**** Removing dependencies
**** Changing dependencies
**** Platform-specific dependencies
**** Project dependencies
**** Dependency sources
***** Index
***** Git
***** URL
***** Path
***** Workspace member
***** Platform-specific sources
***** Multiple sources
***** Disabling sources

**** Optional dependencies
**** Development dependencies
***** Dependency groups
***** Default groups
***** Legacy dev-dependencies

**** Build dependencies
**** Editable dependencies
**** Dependency specifiers (PEP 508)

*** Running commands in projects
**** Requesting additional dependencies
**** Running scripts
**** Legacy Windows Scripts
**** Signal handling

*** Locking and syncing
**** Automatic lock and sync
**** Checking if the lockfile is up-to-date
**** Creating the lockfile
**** Syncing the environment
***** Editable installation
***** Retaining extraneous packages
***** Syncing optional dependencies
***** Syncing development dependencies

**** Upgrading locked package versions
**** Exporting the lockfile
**** Partial installations

*** Configuring projects
**** Python version requirement
**** Entry points
***** Command-line interfaces
***** Graphical user interfaces
***** Plugin entry points

**** Build systems
***** Build system options

**** Project packaging
**** Project environment path
**** Limited resolution environments
**** Required environments
**** Build isolation
**** Editable mode
**** Conflicting dependencies

*** Building distributions
**** Using uv build
**** Build constraints

*** Using workspaces
**** Getting started
**** Workspace sources
**** Workspace layouts
**** When (not) to use workspaces

** Tools
*** The uv tool interface
*** Execution vs installation
*** Tool environments
*** Tool versions
*** Tools directory
*** Upgrading tools
*** Including additional dependencies
*** Python versions
*** Tool executables
**** The bin directory
**** The PATH
**** Overwriting executables

*** Relationship to uv run

** Python versions
*** Managed and system Python installations
*** Requesting a version
**** Python version files

*** Installing a Python version
**** Installing Python executables

*** Project Python versions
*** Viewing available Python versions
*** Finding a Python executable
*** Discovery of Python versions
**** Python pre-releases

*** Disabling automatic Python downloads
*** Requiring or disabling managed Python versions
*** Adjusting Python version preferences
*** Python implementation support
*** Managed Python distributions
**** CPython distributions
**** PyPy distributions

** Configuration files
*** Settings
*** .env
*** Configuring the pip interface

** Package indexes
*** Defining an index
*** Pinning a package to an index
*** Searching across multiple indexes
*** Authentication
**** Providing credentials directly
**** Using credential providers
**** Ignoring error codes when searching across indexes
**** Disabling authentication

*** "Flat" indexes
*** --index-url and --extra-index-url

** Resolution
*** Dependencies
*** Basic examples
*** Platform markers
*** Platform-specific resolution
*** Universal resolution
**** Limited resolution environments
**** Required environments

*** Dependency preferences
*** Resolution strategy
*** Pre-release handling
*** Multi-version resolution
*** Dependency constraints
*** Dependency overrides
*** Dependency metadata
*** Lower bounds
*** Reproducible resolutions
*** Source distribution
*** Learn more
*** Lockfile versioning

** The uv build backend
*** Modules
*** Include and exclude configuration
*** Include and exclude syntax

** Authentication
*** Git authentication
**** Git credential helpers

*** HTTP authentication
*** Authentication with alternative package indexes
*** Custom CA certificates

** Caching
*** Dependency caching
*** Dynamic metadata
*** Cache safety
*** Clearing the cache
*** Caching in continuous integration
*** Cache directory
*** Cache versioning

** The pip interface
*** Using Python environments
**** Creating a virtual environment
**** Using a virtual environment
**** Deactivating an environment
**** Using arbitrary Python environments
**** Discovery of Python environments

*** Managing packages
**** Installing a package
**** Editable packages
**** Installing packages from files
**** Uninstalling a package

*** Inspecting environments
**** Listing installed packages
**** Inspecting a package
**** Verifying an environment

*** Declaring dependencies
**** Using pyproject.toml
**** Using requirements.in

*** Locking environments
**** Locking requirements
**** Upgrading requirements
**** Syncing an environment
**** Adding constraints
**** Adding build constraints
**** Overriding dependency versions

*** Compatibility with pip
**** Configuration files and environment variables
**** Pre-release compatibility
**** Packages that exist on multiple indexes
**** PEP 517 build isolation
**** Transitive URL dependencies
**** Virtual environments by default
**** Resolution strategy
**** pip check
**** --user and the user install scheme
**** --only-binary enforcement
**** --no-binary enforcement
**** manylinux_compatible enforcement
**** Bytecode compilation
**** Strictness and spec enforcement
**** pip command-line options and subcommands
**** Registry authentication
**** egg support
**** Build constraints
**** pip compile defaults
**** requires-python enforcement
**** Package priority

* TODO Reference
** Commands
*** uv
*** uv run
*** uv init
*** uv add
*** uv remove
*** uv version
*** uv sync
*** uv lock
*** uv export
*** uv tree
*** uv tool
**** uv tool run
**** uv tool install
**** uv tool upgrade
**** uv tool list
**** uv tool uninstall
**** uv tool update-shell
**** uv tool dir

*** uv python
**** uv python list
**** uv python install
**** uv python find
**** uv python pin
**** uv python dir
**** uv python uninstall

*** uv pip
**** uv pip compile
**** uv pip sync

** Settings
*** Project metadata
**** build-constraint-dependencies
**** conflicts
**** constraint-dependencies
**** default-groups
**** dev-dependencies
**** environments
**** index
**** managed
**** override-dependencies
**** package
**** required-environments
**** sources
**** build-backend
***** data
***** default-excludes
***** module-name
***** module-root
***** source-exclude
***** source-include
***** wheel-exclude

**** workspace
***** exclude
***** members

*** Configuration
**** add-bounds
**** allow-insecure-host
**** cache-dir
**** cache-keys
**** check-url
**** compile-bytecode
**** concurrent-builds
**** concurrent-downloads
**** concurrent-installs
**** config-settings
**** dependency-metadata
**** exclude-newer
**** extra-index-url
**** find-links
**** fork-strategy
**** index
**** index-strategy
**** index-url
**** keyring-provider
**** link-mode
**** native-tls
**** no-binary
**** no-binary-package
**** no-build
**** no-build-isolation
**** no-build-isolation-package
**** no-build-package
**** no-cache
**** no-index
**** no-sources
**** offline
**** prerelease
**** preview
**** publish-url
**** pypy-install-mirror
**** python-downloads
**** python-downloads-json-url
**** python-install-mirror
**** python-preference
**** reinstall
**** reinstall-package
**** required-version
**** resolution
**** trusted-publishing
**** upgrade
**** upgrade-package
**** pip
***** all-extras
***** allow-empty-requirements
***** annotation-style
***** break-system-packages
***** compile-bytecode
***** config-settings
***** custom-compile-command
***** dependency-metadata
***** emit-build-options
***** emit-find-links
***** emit-index-annotation
***** emit-index-url
***** emit-marker-expression
***** exclude-newer
***** extra
***** extra-index-url
***** find-links
***** fork-strategy
***** generate-hashes
***** group
***** index-strategy
***** index-url
***** keyring-provider
***** link-mode
***** no-annotate
***** no-binary
***** no-build
***** no-build-isolation
***** no-build-isolation-package
***** no-deps
***** no-emit-package
***** no-extra
***** no-header
***** no-index
***** no-sources
***** no-strip-extras
***** no-strip-markers
***** only-binary
***** output-file
***** prefix
***** prerelease
***** python
***** python-platform
***** python-version
***** reinstall
***** reinstall-package
***** require-hashes
***** resolution
***** strict
***** system
***** target
***** torch-backend
***** universal
***** upgrade
***** upgrade-package
***** verify-hashes

** Environment variables
*** ~UV_BREAK_SYSTEM_PACKAGES~
*** ~UV_BUILD_CONSTRAINT~
*** ~UV_CACHE_DIR~
*** ~UV_COMPILE_BYTECODE~
*** ~UV_CONCURRENT_BUILDS~
*** ~UV_CONCURRENT_DOWNLOADS~
*** ~UV_CONCURRENT_INSTALLS~
*** ~UV_CONFIG_FILE~
*** ~UV_CONSTRAINT~
*** ~UV_CUSTOM_COMPILE_COMMAND~
*** ~UV_DEFAULT_INDEX~
*** ~UV_ENV_FILE~
*** ~UV_EXCLUDE_NEWER~
*** ~UV_EXTRA_INDEX_URL~
*** ~UV_FIND_LINKS~
*** ~UV_FORK_STRATEGY~
*** ~UV_FROZEN~
*** ~UV_GITHUB_TOKEN~
*** ~UV_GIT_LFS~
*** ~UV_HTTP_TIMEOUT~
*** ~UV_INDEX~
*** ~UV_INDEX_STRATEGY~
*** ~UV_INDEX_URL~
*** ~UV_INDEX_{name}_PASSWORD~
*** ~UV_INDEX_{name}_USERNAME~
*** ~UV_INSECURE_HOST~
*** ~UV_INSTALLER_GHE_BASE_URL~
*** ~UV_INSTALLER_GITHUB_BASE_URL~
*** ~UV_INSTALL_DIR~
*** ~UV_KEYRING_PROVIDER~
*** ~UV_LINK_MODE~
*** ~UV_LOCKED~
*** ~UV_LOG_CONTEXT~
*** ~UV_MANAGED_PYTHON~
*** ~UV_NATIVE_TLS~
*** ~UV_NO_BINARY~
*** ~UV_NO_BINARY_PACKAGE~
*** ~UV_NO_BUILD~
*** ~UV_NO_BUILD_ISOLATION~
*** ~UV_NO_BUILD_PACKAGE~
*** ~UV_NO_CACHE~
*** ~UV_NO_CONFIG~
*** ~UV_NO_EDITABLE~
*** ~UV_NO_ENV_FILE~
*** ~UV_NO_INSTALLER_METADATA~
*** ~UV_NO_MANAGED_PYTHON~
*** ~UV_NO_PROGRESS~
*** ~UV_NO_SYNC~
*** ~UV_NO_VERIFY_HASHES~
*** ~UV_NO_WRAP~
*** ~UV_OFFLINE~
*** ~UV_OVERRIDE~
*** ~UV_PRERELEASE~
*** ~UV_PREVIEW~
*** ~UV_PROJECT~
*** ~UV_PROJECT_ENVIRONMENT~
*** ~UV_PUBLISH_CHECK_URL~
*** ~UV_PUBLISH_INDEX~
*** ~UV_PUBLISH_PASSWORD~
*** ~UV_PUBLISH_TOKEN~
*** ~UV_PUBLISH_URL~
*** ~UV_PUBLISH_USERNAME~
*** ~UV_PYPY_INSTALL_MIRROR~
*** ~UV_PYTHON~
*** ~UV_PYTHON_BIN_DIR~
*** ~UV_PYTHON_CACHE_DIR~
*** ~UV_PYTHON_DOWNLOADS~
*** ~UV_PYTHON_DOWNLOADS_JSON_URL~
*** ~UV_PYTHON_INSTALL_DIR~
*** ~UV_PYTHON_INSTALL_MIRROR~
*** ~UV_PYTHON_PREFERENCE~
*** ~UV_REQUEST_TIMEOUT~
*** ~UV_REQUIRE_HASHES~
*** ~UV_RESOLUTION~
*** ~UV_STACK_SIZE~
*** ~UV_SYSTEM_PYTHON~
*** ~UV_TOOL_BIN_DIR~
*** ~UV_TOOL_DIR~
*** ~UV_TORCH_BACKEND~
*** ~UV_UNMANAGED_INSTALL~
*** ~UV_VENV_SEED~
*** Externally defined variables
**** ~ACTIONS_ID_TOKEN_REQUEST_TOKEN~
**** ~ACTIONS_ID_TOKEN_REQUEST_URL~
**** ~ALL_PROXY~
**** ~APPDATA~
**** ~BASH_VERSION~
**** ~CLICOLOR_FORCE~
**** ~COLUMNS~
**** ~CONDA_DEFAULT_ENV~
**** ~CONDA_PREFIX~
**** ~FISH_VERSION~
**** ~FORCE_COLOR~
**** ~GITHUB_ACTIONS~
**** ~HOME~
**** ~HTTPS_PROXY~
**** ~HTTP_PROXY~
**** ~HTTP_TIMEOUT~
**** ~INSTALLER_NO_MODIFY_PATH~
**** ~JPY_SESSION_NAME~
**** ~KSH_VERSION~
**** ~LOCALAPPDATA~
**** ~MACOSX_DEPLOYMENT_TARGET~
**** ~NETRC~
**** ~NO_COLOR~
**** ~NU_VERSION~
**** ~PAGER~
**** ~PATH~
**** ~PROMPT~
**** ~PWD~
**** ~PYC_INVALIDATION_MODE~
**** ~PYTHONPATH~
**** ~RUST_LOG~
**** ~RUST_MIN_STACK~
**** ~SHELL~
**** ~SSL_CERT_FILE~
**** ~SSL_CLIENT_CERT~
**** ~SYSTEMDRIVE~
**** ~TRACING_DURATIONS_FILE~
**** ~USERPROFILE~
**** ~UV~
**** ~VIRTUAL_ENV~
**** ~VIRTUAL_ENV_DISABLE_PROMPT~
**** ~XDG_BIN_HOME~
**** ~XDG_CACHE_HOME~
**** ~XDG_CONFIG_DIRS~
**** ~XDG_CONFIG_HOME~
**** ~XDG_DATA_HOME~
**** ~ZDOTDIR~
**** ~ZSH_VERSION~

** Installer
*** Changing the install path
*** Disabling shell modifications
*** Unmanaged installations
*** Passing options to the install script

** Troubleshooting
*** Build failures
**** Recognizing a build failure
**** Confirming that a build failure is specific to uv
**** Why does uv build a package?
**** Common build failures
***** Command is not found
***** Header or library is missing
***** Module is missing or cannot be imported
***** Old version of the package is built
***** Old Version of a build dependency is used
***** Package is only needed for an unused platform
***** Package does not support all Python versions
***** Package is only usable on a specific platform

*** Reproducible examples
**** Why reproducible examples are important
**** How to write a reproducible example
**** Strategies for reproducible examples
***** Docker image
***** Script
***** Git repository

** Resolver
*** Resolver
*** Forking
*** Wheel tags
*** Marker and wheel tag filtering
*** Requires-python
*** Prioritization

** Benchmarks
** Policies
*** Versioning
**** Cache versioning
**** Lockfile versioning
**** Minimum supported Rust version

*** Platform support
*** License
