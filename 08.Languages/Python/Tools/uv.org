#+TITLE: uv
#+SUBTITLE: An extremely fast Python package and project manager, written in Rust
#+AUTHOR: Charlie Marsh (@astral-sh)
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* DONE Introduction
CLOSED: [2025-03-17 Mon 12:53]
An extremely fast Python package and project manager, written in Rust.

** Highlights
- 🚀 A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.
- ⚡️ 10-100x faster than pip.
- 🗂️ Provides comprehensive project management, with a universal lockfile.
- ❇️ Runs scripts, with support for inline dependency metadata.
- 🐍 Installs and manages Python versions.
- 🛠️ Runs and installs tools published as Python packages.
- 🔩 Includes a pip-compatible interface for a performance boost with a familiar CLI.
- 🏢 Supports Cargo-style workspaces for scalable projects.
- 💾 Disk-space efficient, with a global cache for dependency deduplication.
- ⏬ Installable without Rust or Python via curl or pip.
- 🖥️ Supports macOS, Linux, and Windows.

_uv_ is backed by _Astral_, the creators of _Ruff_.

** Installation
** Projects
_uv_ manages project /dependencies/ and /environments/, with support for
/lockfiles/, /workspaces/, and more, similar to _rye_ or _poetry_:
#+begin_src shell
  uv init example
  # Initialized project `example` at `/home/user/example`

  cd example

  uv add ruff
  # Creating virtual environment at: .venv
  # Resolved 2 packages in 170ms
  #    Built example @ file:///home/user/example
  # Prepared 2 packages in 627ms
  # Installed 2 packages in 1ms
  #  + example==0.1.0 (from file:///home/user/example)
  #  + ruff==0.5.4

  uv run ruff check
  # All checks passed!

  uv lock
  # Resolved 2 packages in 0.33ms

  uv sync
  # Resolved 2 packages in 0.70ms
  # Audited 1 package in 0.02ms
#+end_src

- See the [[https://docs.astral.sh/uv/guides/projects/][project guide]] to get started.

- _uv_ also supports *building* and *publishing* projects,
  even if (=from Jian= till now) they're *NOT* managed with _uv_. See the
  [[https://docs.astral.sh/uv/guides/package/][packaging guide]] to learn more.

** Scripts
_uv_ manages /dependencies/ and /environments/ for single-file scripts.

- Create a new script and add inline metadata declaring its dependencies:
  #+begin_src shell
    echo 'import requests; print(requests.get("https://astral.sh"))' > example.py

    uv add --script example.py requests
    # Updated `example.py`
  #+end_src

- Then, run the script in an isolated virtual environment:
  #+begin_src shell
    uv run example.py
    # Reading inline script metadata from: example.py
    # Installed 5 packages in 12ms
    # <Response [200]>
  #+end_src
  =TODO= Where in disk can I find that inline script metadata?

See the [[https://docs.astral.sh/uv/guides/scripts/][scripts guide]] to get started.

** Tools
_uv_ *executes* and *installs* command-line tools provided by Python packages,
similar to _pipx_.

- Run a tool in an ephemeral environment using ~uvx~ (an alias for
  ~uv tool run~):
  #+begin_src shell
    uvx pycowsay 'hello world!'
  #+end_src

- Install a tool with ~uv tool install~:
  ~uv tool install ruff~
  and then use this tool (no longer need any _uv_ or _uvx_ commands)
  ~ruff --version~

See the [[https://docs.astral.sh/uv/guides/tools/][tools guide]] to get started.

** Python versions
_uv_ installs Python and allows quickly switching between versions.

- Install multiple Python versions:
  ~uv python install 3.10 3.11 3.12~

- Download Python versions as needed:
  * ~uv venv --python 3.12.0~
  * ~uv run --python pypy@3.8 -- python~

- Use a specific Python version in the current directory:
  #+begin_src shell
    uv python pin 3.11
    # Pinned `.python-version` to `3.11`
  #+end_src

See the [[https://docs.astral.sh/uv/guides/install-python/][installing Python guide]] to get started.

** The pip interface
_uv_ provides a drop-in replacement for common _pip_, _pip-tools_, and
_virtualenv_ commands.

- _uv_ extends their interfaces with advanced features, such as
  * dependency version overrides, =???=
  * platform-independent resolutions, =???=
  * reproducible resolutions, =???=
  * alternative resolution strategies, =???= and
  * more. =???=

- Compile requirements into a platform-independent requirements file:
  #+begin_src shell
    uv pip compile docs/requirements.in \
       --universal \
       --output-file docs/requirements.txt
  #+end_src

- Create a virtual environment:
  #+begin_src shell
    uv venv
  #+end_src

- Install the locked requirements:
  #+begin_src shell
    uv pip sync docs/requirements.txt
  #+end_src

See the [[https://docs.astral.sh/uv/pip/][pip interface documentation]] to get started.

** Learn more
See the [[https://docs.astral.sh/uv/getting-started/first-steps/][first steps]] or jump straight to the [[https://docs.astral.sh/uv/guides/][guides]] to start using _uv_.

* DONE Getting started
CLOSED: [2025-03-17 Mon 13:20]
Need =NOTE=

** Installation
** First steps
** Features
** Getting help

* DONE Guides
CLOSED: [2025-03-17 Mon 14:46]
** Installing Python versions
** Running scripts and declaring dependencies
*** Running a script without dependencies
*** Running a script with dependencies
*** Creating a Python script
*** Declaring script dependencies
*** Using alternative package indexes
*** Locking dependencies
*** Improving reproducibility
*** Using different Python versions
*** Using GUI scripts

** Running and installing applications as tools
*** Running tools
*** Commands with different package names
*** Requesting specific versions
*** Requesting extras
*** Requesting different sources
*** Commands with plugins
*** Installing tools
*** Upgrading tools
*** Requesting Python versions
*** Legacy Windows Scripts

** Creating and working on projects
*** Creating a new project
*** Project structure
**** =pyproject.toml=
**** =.python-version=
**** =.venv=
**** =uv.lock=

*** Managing dependencies
*** Running commands
*** Building distributions

** Building and publishing packages
** Integrate uv with other software, e.g., Docker, GitHub, PyTorch, and more
*** Using in Docker images
*** Using with Jupyter
*** Using with pre-commit
*** Using in GitHub Actions
*** Using in GitLab CI/CD
*** Using with alternative package indexes
*** Installing PyTorch
*** Building a FastAPI application
*** Using with AWS Lambda

* TODO Concepts
** Projects
*** Structure and files
*** Creating projects
*** Managing dependencies
*** Running commands
*** Locking and syncing
*** Configuring projects
*** Building distributions
*** Using workspaces

** Tools
** Python versions
** Resolution
** Caching

* Configuration
** Using configuration files
** Using environment variables
** Configuring authentication
** Configuring package indexes
** =fixme= Installer

* The pip interface
** Using environments
** Managing packages
** Inspecting packages
** Declaring dependencies
** Locking environments
** Compatibility with pip

* Reference
** Commands
** Settings
** Troubleshooting
*** Build failures
*** Reproducible examples

** Resolver
** Benchmarks
** Policies
*** Versioning
*** Platform support
*** License
