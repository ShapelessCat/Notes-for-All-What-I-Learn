#+TITLE: ty
#+SUBTITLE: An extremely fast Python type checker, written in Rust.
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Getting started
* Concepts
** Installing ty
*** Adding ty to your project
*** Installing globally
*** Installing with pip

** Configuration
*** Configuration files

** Module discovery
*** First-party modules
*** Third-party modules
*** Python environment

** Python version
** Excluding files
*** Include and exclude syntax

** Rules
*** Rule levels

** Suppression
*** ty suppression comments
*** Standard suppression comments
*** Unused suppression comments
*** ~@no_type_check~ directive

** Editors
*** VS Code
*** Neovim
*** Other editors

* Reference
** Configuration
*** ~rules~
*** ~environment~
**** ~extra-paths~
**** ~python~
**** ~python-platform~
**** ~python-version~
**** ~root~
**** ~typeshed~

*** ~overrides~
**** ~exclude~
**** ~include~
**** ~rules~

*** ~src~
**** ~exclude~
**** ~include~
**** ~respect-ignore-files~
**** ~root~

*** ~terminal~
**** ~error-on-warning~
**** ~output-format~

** Rules
** CLI
** Exit codes
The _ty_ command line interface uses the following /exit codes/:
|-----------+----------------------------------------------------------|
| Exit code | Description                                              |
|-----------+----------------------------------------------------------|
|         0 | no violations with severity ~error~ or higher were found |
|         1 | violations with severity ~error~ or higher were found    |
|         2 | invalid CLI options                                      |
|       101 | internal error                                           |
|-----------+----------------------------------------------------------|

_ty_ supports two command line arguments that change how exit codes work:
- ~--exit-zero~: _ty_ will exit with ~0~ even if violations were found.
- ~--error-on-warning~: _ty_ will exit with ~1~ if it finds any violations with
  severity warning or higher.

** Environment variables
** Editor settings
