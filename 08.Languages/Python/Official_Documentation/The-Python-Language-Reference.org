#+TITLE: The Python Language Reference
#+VERSION: 3.9.3
#+STARTUP: overview
#+STARTUP: entitiespretty

* 1. Introduction
** 1.1. Alternate Implementations
** 1.2. Notation

* 2. Lexical analysis
** 2.1. Line structure
** 2.2. Other tokens
** 2.3. Identifiers and keywords
** 2.4. Literals
** 2.5. Operators
** 2.6. Delimiters

* TODO 3. Data model
** 3.1. Objects, values and types
** 3.2. The standard type hierarchy
** 3.3. Special method names
*** 3.3.1. Basic customization
*** 3.3.2. Customizing attribute access
**** 3.3.2.1. Customizing module attribute access
**** 3.3.2.2. Implementing Descriptors
**** 3.3.2.3. Invoking Descriptors
**** 3.3.2.4. ~__slots__~
***** 3.3.2.4.1. Notes on using ~__slots__~

*** 3.3.3. Customizing class creation
**** 3.3.3.1. Metaclasses
**** 3.3.3.2. Resolving MRO entries
**** 3.3.3.3. Determining the appropriate metaclass
**** 3.3.3.4. Preparing the class namespace
**** 3.3.3.5. Executing the class body
**** 3.3.3.6. Creating the class object
**** 3.3.3.7. Uses for metaclasses

*** 3.3.4. Customizing instance and subclass checks
*** 3.3.5. Emulating generic types
*** 3.3.6. Emulating callable objects
*** 3.3.7. Emulating container types
*** 3.3.8. Emulating numeric types
*** 3.3.9. With Statement Context Managers
*** 3.3.10. Special method lookup

** 3.4. Coroutines
*** 3.4.1. Awaitable Objects
*** 3.4.2. Coroutine Objects
*** 3.4.3. Asynchronous Iterators
*** 3.4.4. Asynchronous Context Managers

* TODO 4. Execution model
** 4.1. Structure of a program
** 4.2. Naming and binding
** 4.3. Exceptions

* TODO 5. The import system
** 5.1. ~importlib~
** 5.2. Packages
** 5.3. Searching
** 5.4. Loading
** 5.5. The Path Based Finder
** 5.6. Replacing the standard import system
** 5.7. Package Relative Imports
** 5.8. Special considerations for ~__main__~
** 5.9. Open issues
** 5.10. References

* 6. Expressions
** 6.1. Arithmetic conversions
** TODO 6.2. Atoms
** 6.3. Primaries
** 6.4. Await expression
** 6.5. The power operator
** 6.6. Unary arithmetic and bitwise operations
** 6.7. Binary arithmetic operations
** 6.8. Shifting operations
** 6.9. Binary bitwise operations
** 6.10. Comparisons
** 6.11. Boolean operations
** 6.12. Assignment expressions
** 6.13. Conditional expressions
** 6.14. Lambdas
** 6.15. Expression lists
** 6.16. Evaluation order
** 6.17. Operator precedence

* TODO 7. Simple statements
** 7.1. Expression statements
** 7.2. Assignment statements
** 7.3. The ~assert~ statement
** 7.4. The ~pass~ statement
** 7.5. The ~del~ statement
** 7.6. The ~return~ statement
** 7.7. The ~yield~ statement
** 7.8. The ~raise~ statement
** 7.9. The ~break~ statement
** 7.10. The ~continue~ statement
** TODO 7.11. The ~import~ statement
** TODO 7.12. The ~global~ statement
** TODO 7.13. The ~nonlocal~ statement

* TODO 8. Compound statements
** 8.1. The ~if~ statement
** 8.2. The ~while~ statement
** 8.3. The ~for~ statement
** 8.4. The ~try~ statement
** TODO 8.5. The ~with~ statement
** 8.6. Function definitions
** 8.7. Class definitions
** TODO 8.8. Coroutines

* TODO 9. Top-level components
** TODO 9.1. Complete Python programs
** TODO 9.2. File input
** TODO 9.3. Interactive input
** TODO 9.4. Expression input

* 10. Full Grammar specification
