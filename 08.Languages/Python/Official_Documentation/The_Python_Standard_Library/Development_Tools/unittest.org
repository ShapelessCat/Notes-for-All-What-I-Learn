#+TITLE: unittest - Unit testing framework
#+VERSION: 3.9.0 - Since 3.5
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

- The ~unittest~ /unit testing framework/ was originally inspired by *JUnit* and
  has a _SIMILAR flavor_ as _MAJOR unit testing frameworks_ in other languages.
  * ~unittest~ supports
    + test automation,
    + sharing of setup and shutdown code for tests,
    + aggregation of tests into collections, and
    + independence of the tests from the /reporting framework/.

- To achieve this, ~unittest~ supports some IMPORTANT *concepts*
  _in an object-oriented way_:
  * test fixture ::
    REPRESENTS
    the _preparation needed_ to perform one or more tests, and
    any associated cleanup actions.

    + This may involve,
      for example,
      - creating temporary or proxy databases, directories, or
      - starting a server process.

  * test case ::
    REPRESENTS the individual unit of testing.
      It checks for a specific response to a particular set of inputs. ~unittest~
    provides a /base class/, ~TestCase~, which may be used _to *create* new test
    cases._

  * test suite ::
    REPRESENTS _a collection of /test cases/, /test suites/, or both_.
    It is used to *aggregate* tests that _should be executed TOGETHER_.

  * test runner ::
    REPRESENTS a component which orchestrates the execution of tests and
    *provides* the outcome to the user.
    + The runner _MAY use_
      - a graphical interface,
      - a textual interface, or
      - return a special value to indicate the results of executing the tests.

* DONE Basic example
  CLOSED: [2021-05-13 Thu 11:10]
  - The ~unittest~ module provides a rich set of tools for constructing and
    running tests. This section demonstrates that a small subset of the tools
    suffice to meet the needs of most users.

  - Here is a short script to test three string methods:
    #+begin_src python
      import unittest


      class TestStringMethods(unittest.TestCase):

          def test_upper(self):
              self.assertEqual('foo'.upper(), 'Foo')

          def test_isupper(self):
              self.assertTrue('FOO'.isupper())
              self.assertFalse('Foo'.isupper())

          def test_split(self):
              s = 'hello world'
              self.assertEqual(s.split(), ['hello', 'world'])
              # check that `s.split` fails when the separator is not a string
              with self.assertRaises(TypeError):
                  s.split(2)


      if __name__ == '__main__':
          unittest.main()
    #+end_src
    * A test case is created by subclassing ~unittest.TestCase~.

    * The three individual tests are defined with methods whose *names start with
      the letters ~test~.* -- this _naming convention_ (=IMPORTANT=) informs the
      /test runner/ about which methods represent /tests/.

  - The crux of each test is a call to
    ~assertEqual()~, ~assertTrue()~ or ~assertFalse()~, or ~assertRaises()~.
    * These methods are used instead of the ~assert~ statement
      =IMPORTANT=
      =The main reason of not using ~assert~ directly=
      so the /test runner/ can
      - *accumulate* _ALL test results_ and
      - *produce* a _report_.

  - The ~setUp()~ and ~tearDown()~ methods allow you to define instructions that
    will be executed *before* and *after* _EACH test method_.
    =TODO= They are covered in more detail in the section _Organizing test code._

  - The final block shows a simple way to run the tests.
    ~unittest.main()~ provides a command-line interface to the test script. When
    run from the command line, the above script produces an output that looks
    like this:
    #+begin_src text
      ...
      ----------------------------------------------------------------------
      Ran 3 tests in 0.000s

      OK
    #+end_src

  - Passing the ~-v~ option to your test script will instruct ~unittest.main()~
    to *enable a higher level of verbosity,* and produce the following output:
    #+begin_src text
      test_isupper (__main__.TestStringMethods) ... ok
      test_split (__main__.TestStringMethods) ... ok
      test_upper (__main__.TestStringMethods) ... ok

      ----------------------------------------------------------------------
      Ran 3 tests in 0.001s

      OK
    #+end_src

* Command-Line Interface
** Command-line options

* Test Discovery
* Organizing test code
* Re-using old test code
* Skipping tests and expected failures
* Distinguishing test iterations using subtests
* Classes and functions
** Test cases
*** Deprecated aliases

** Grouping tests
** Loading and running tests
*** ~load_tests~ Protocol

* Class and Module Fixtures
** setUpClass and tearDownClass
** setUpModule and tearDownClass

* Signal Handling
