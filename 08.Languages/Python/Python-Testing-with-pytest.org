#+TITLE: Python Testing with pytest
#+SUBTITLE: Simple, Rapid, Effective, and Scalable
#+VERSION: 2nd
#+AUTHOR: Brian Okken
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Acknowledgments - xi
* Preface - xiii
* Part I — Primary Power
** 1. Getting Started with pytest - 3
*** Installing pytest - 3
*** Running pytest - 4
*** Review - 8
*** Exercises - 9
*** What's Next - 10

** 2. Writing Test Functions - 11
*** Installing the Sample Application - 11
*** Writing Knowledge-Building Tests - 13
*** Using assert Statements - 16
*** Failing with ~pytest.fail()~ and Exceptions - 19
*** Writing Assertion Helper Functions - 20
*** Testing for Expected Exceptions - 21
*** Structuring Test Functions - 23
*** Grouping Tests with Classes - 24
*** Running a Subset of Tests - 25
*** Review - 28
*** Exercises - 29
*** What’s Next - 30

** 3. pytest Fixtures - 31
*** Getting Started with Fixtures - 31
*** Using Fixtures for Setup and Teardown - 33
*** Tracing Fixture Execution with –setup-show - 35
*** Specifying Fixture Scope - 36
*** Sharing Fixtures through conftest.py - 38
*** Finding Where Fixtures Are Defined - 39
*** Using Multiple Fixture Levels - 40
*** Using Multiple Fixtures per Test or Fixture - 42
*** Deciding Fixture Scope Dynamically - 43
*** Using autouse for Fixtures That Always Get Used - 45
*** Renaming Fixtures - 46
*** Review - 47
*** Exercises - 48
*** What's Next - 48

** 4. Builtin Fixtures - 49
*** Using ~tmp_path~ and ~tmp_path_factory~ - 49
*** Using capsys - 51
*** Using monkeypatch - 54
*** Remaining Builtin Fixtures - 58
*** Review - 59
*** Exercises - 59
*** What's Next - 60

** 5. Parametrization - 61
*** Testing Without Parametrize - 62
*** Parametrizing Functions - 64
*** Parametrizing Fixtures - 66
*** Parametrizing with ~pytest_generate_tests~ - 67
*** Using Keywords to Select Test Cases - 69
*** Review - 71
*** Exercises - 71
*** What's Next - 72

** 6. Markers - 73
*** Using Builtin Markers - 73
*** Skipping Tests with ~pytest.mark.skip~ - 74
*** Skipping Tests Conditionally with ~pytest.mark.skipif~ - 76
*** Expecting Tests to Fail with ~pytest.mark.xfail~ - 77
*** Selecting Tests with Custom Markers - 79
*** Marking Files, Classes, and Parameters - 82
*** Using “and,” “or,” “not,” and Parentheses with Markers - 85
*** Being Strict with Markers - 86
*** Combining Markers with Fixtures - 88
*** Listing Markers - 92
*** Review - 92
*** Exercises - 94
*** What's Next - 95

* Part II — Working with Projects
** 7. Strategy - 99
*** Determining Test Scope - 99
*** Considering Software Architecture - 101
*** Evaluating the Features to Test - 103
*** Creating Test Cases - 105
*** Writing a Test Strategy - 108
*** Review - 109
*** Exercises - 110
*** What's Next - 111

** 8. Configuration Files - 113
*** Understanding pytest Configuration Files - 113
*** Saving Settings and Flags in pytest.ini - 114
*** Using tox.ini, pyproject.toml, or setup.cfg in place of pytest.ini - 116
*** Determining a Root Directory and Config File - 118
*** Sharing Local Fixtures and Hook Functions with conftest.py - 119
*** Avoiding Test File Name Collision - 119
*** Review - 121
*** Exercises - 121
*** What's Next - 122

** 9. Coverage - 123
*** Using coverage.py with pytest-cov - 123
*** Generating HTML Reports - 127
*** Excluding Code from Coverage - 129
*** Running Coverage on Tests - 130
*** Running Coverage on a Directory - 131
*** Running Coverage on a Single File - 132
*** Review - 134
*** Exercises - 134
*** What’s Next - 135

** 10. Mocking - 137
*** Isolating the Command-Line Interface - 137
*** Testing with Typer - 139
*** Mocking an Attribute - 140
*** Mocking a Class and Methods - 141
*** Keeping Mock and Implementation in Sync with Autospec - 143
*** Making Sure Functions Are Called Correctly - 145
*** Creating Error Conditions - 146
*** Testing at Multiple Layers to Avoid Mocking - 147
*** Using Plugins to Assist Mocking - 148
*** Review - 149
*** Exercises - 149
*** What's Next - 150

** 11. tox and Continuous Integration - 151
*** What Is Continuous Integration? - 151
*** Introducing tox - 152
*** Setting Up tox - 153
*** Running tox - 154
*** Testing Multiple Python Versions - 155
*** Running tox Environments in Parallel - 156
*** Adding a Coverage Report to tox - 156
*** Specifying a Minimum Coverage Level - 157
*** Passing pytest Parameters Through tox - 158
*** Running tox with GitHub Actions - 159
*** Review - 162
*** Exercises - 162
*** What's Next - 163

** 12. Testing Scripts and Applications - 165
*** Testing a Simple Python Script - 166
*** Testing an Importable Python Script - 168
*** Separating Code into src and tests Directories - 170
*** Defining the Python Search Path - 171
*** Testing requirements.txt-Based Applications - 172
*** Review - 175
*** Exercises - 176
*** What's Next - 177

** 13. Debugging Test Failures - 179
*** Adding a New Feature to the Cards Project - 179
*** Installing Cards in Editable Mode - 182
*** Debugging with pytest Flags - 183
*** Re-Running Failed Tests - 184
*** Debugging with pdb - 186
*** Combining pdb and tox - 189
*** Review - 191
*** Exercises - 192
*** What's Next - 193

* Part III — Booster Rockets
** 14. Third-Party Plugins - 197
*** Finding Plugins - 197
*** Installing Plugins - 198
*** Exploring the Diversity of pytest Plugins - 198
*** Running Tests in Parallel - 201
*** Randomizing Test Order - 203
*** Review - 204
*** Exercises - 204
*** What's Next - 204

** 15. Building Plugins - 205
*** Starting with a Cool Idea - 205
*** Building a Local conftest Plugin - 207
*** Creating an Installable Plugin - 209
*** Testing Plugins with pytester - 214
*** Testing Multiple Python and pytest Versions with tox - 217
*** Publishing Plugins - 218
*** Review - 218
*** Exercises - 219
*** What's Next - 220

** 16. Advanced Parametrization - 221
*** Using Complex Values - 221
*** Creating Custom Identifiers - 223
*** Parametrizing with Dynamic Values - 227
*** Using Multiple Parameters - 227
*** Using Indirect Parametrization - 229
*** Review - 232
*** Exercises - 233
*** What's Next - 233

* A1. Virtual Environments - 235
* A2. pip - 237
* Index - 241
