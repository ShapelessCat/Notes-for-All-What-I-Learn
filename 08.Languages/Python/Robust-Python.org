#+TITLE: Robust Python
#+SUBTITLE: Write Clean and Maintainable Code
#+VERSION: 2021
#+AUTHOR: Patrick Viafore
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - xi
* 1. Introduction to Robust Python - 1
** Robustness - 2
*** Why Does Robustness Matter? - 4

** What’s Your Intent? - 5
*** Asynchronous Communication - 8

** Examples of Intent in Python - 12
*** Collections - 12
*** Iteration - 15
*** Law of Least Surprise - 17

** Closing Thoughts - 18

* Part I. Annotating Your Code with Types
* 2. Introduction to Python Types - 23
** What’s in a Type? - 23
*** Mechanical Representation - 24
*** Semantic Representation - 25

** Typing Systems - 28
*** Strong Versus Weak - 28
*** Dynamic Versus Static - 30
*** Duck Typing - 31

** Closing Thoughts - 33
* 3. Type Annotations - 35
** What Are Type Annotations? - 36
** Benefits of Type Annotations - 40
*** Autocomplete - 40
*** Typecheckers - 40
*** Exercise: Spot the Bug - 41

** When to Use Type Annotations - 43
** Closing Thoughts - 44

* 4. Constraining Types - 45
** Optional Type - 46
** Union Types - 51
*** Product and Sum Types - 53

** Literal Types - 55
** Annotated Types - 56
** NewType - 57
** Final Types - 59
** Closing Thoughts - 60

* 5. Collection Types - 61
** Annotating Collections - 61
** Homogeneous Versus Heterogeneous Collections - 63
** TypedDict - 67
** Creating New Collections - 69
*** Generics - 69
*** Modifying Existing Types - 71
*** As Easy as ABC - 74

** Closing Thoughts - 76

* 6. Customizing Your Typechecker - 79
** Configuring Your Typechecker - 79
*** Configuring mypy - 80
*** Mypy Reporting - 83
*** Speeding Up mypy - 84

** Alternative Typecheckers - 85
*** Pyre - 85
*** Pyright - 91

** Closing Thoughts - 93
* 7. Adopting Typechecking Practically - 95
** Trade-offs - 96
** Breaking Even Earlier - 97
*** Find Your Pain Points - 97
*** Target Code Strategically - 98
*** Lean on Your Tooling - 100

** Closing Thoughts - 106

* Part II. Defining Your Own Types
* 8. User-Defined Types: Enums - 111
** User-Defined Types - 111
** Enumerations - 112
*** Enum - 114
*** When Not to Use - 115

** Advanced Usage - 116
*** Automatic Values - 116
*** Flags - 117
*** Integer Conversion - 119
*** Unique - 120

** Closing Thoughts - 121

* 9. User-Defined Types: Data Classes - 123
** Data Classes in Action - 123
** Usage - 128
*** String Conversion - 128
*** Equality - 128
*** Relational Comparison - 129
*** Immutability - 130

** Comparison to Other Types - 132
*** Data Classes Versus Dictionaries - 132
*** Data Classes Versus TypedDict - 133
*** Data Classes Versus namedtuple - 133

** Closing Thoughts - 134

* 10. User-Defined Types: Classes - 135
** Class Anatomy - 135
*** Constructors - 136

** Invariants - 137
*** Avoiding Broken Invariants - 140
*** Why Are Invariants Beneficial? - 140
*** Communicating Invariants - 143
*** Consuming Your Class - 143
*** What About Maintainers? - 144

** Encapsulation and Maintaining Invariants - 146
*** Encapsul-what, Now? - 146
*** Protecting Data Access - 147
*** Operations - 149

** Closing Thoughts - 152

* 11. Defining Your Interfaces - 155
** Natural Interface Design - 156
*** Thinking Like a User - 157

** Natural Interactions - 160
*** Natural Interfaces in Action - 160
*** Magic Methods - 166
*** Context Managers - 167

** Closing Thoughts - 170

* 12. Subtyping - 171
** Inheritance - 172
** Substitutability - 176
** Design Considerations - 182
*** Composition - 183

** Closing Thoughts - 185

* 13. Protocols - 187
** Tension Between Typing Systems - 187
*** Leave the Type Blank or Use Any - 189
*** Use a Union - 189
*** Use Inheritance - 190
*** Use Mixins - 191

** Protocols - 192
*** Defining a Protocol - 193

** Advanced Usage - 194
*** Composite Protocols - 194
*** Runtime Checkable Protocols - 195
*** Modules Satisfying Protocols - 196

** Closing Thoughts - 197
* 14. Runtime Checking With pydantic - 199
** Dynamic Configuration - 200
** pydantic - 205
*** Validators - 207
*** Validation Versus Parsing - 209
** Closing Thoughts - 210

* Part III. Extensible Python
* 15. Extensibility - 215
** What Is Extensibility? - 215
*** The Redesign - 217

** Open-Closed Principle - 221
*** Detecting OCP Violations - 222
*** Drawbacks - 223

** Closing Thoughts - 224

* 16. Dependencies - 225
** Relationships - 226
** Types of Dependencies - 228
*** Physical Dependencies - 228
*** Logical Dependencies - 232
*** Temporal Dependencies - 234

** Visualizing Your Dependencies - 236
*** Visualizing Packages - 236
*** Visualizing Imports - 237
*** Visualizing Function Calls - 238
*** Interpreting Your Dependency Graph - 240

** Closing Thoughts - 241

* 17. Composability - 243
** Composability - 243
** Policy Versus Mechanisms - 243
** Composing on a Smaller Scale - 251
*** Composing Functions - 251
*** Composing Algorithms - 255

** Closing Thoughts - 257
* 18. Event-Driven Architecture - 259
** How It Works - 259
*** Drawbacks - 261

** Simple Events - 262
*** Using a Message Broker - 262
*** The Observer Pattern - 264

** Streaming Events - 266
** Closing Thoughts - 269

* 19. Pluggable Python - 271
** The Template Method Pattern - 272
** The Strategy Pattern - 275
** Plug-in Architectures - 277
** Closing Thoughts - 281

* Part IV. Building a Safety Net
* 20. Static Analysis - 285
** Linting - 285
*** Writing Your Own Pylint Plug-in - 287
*** Breaking Down the Plug-in - 289

** Other Static Analyzers - 291
*** Complexity Checkers - 292
*** Security Analysis - 295

** Closing Thoughts - 296

* 21. Testing Strategy - 297
** Defining Your Test Strategy - 297
*** What Is a Test? - 298

** Reducing Test Cost - 303
*** AAA Testing - 303

** Closing Thoughts - 313

* 22. Acceptance Testing - 315
** Behavior-Driven Development - 316
*** The Gherkin Language - 316
*** Executable Specifications - 318

** Additional behave Features - 320
*** Parameterized Steps - 320
*** Table-Driven Requirements - 321
*** Step Matching - 322
*** Customizing the Test Life Cycle - 322
*** Using Tags to Selectively Run Tests - 323
*** Report Generation - 323

** Closing Thoughts - 324

* 23. Property-Based Testing - 325
** Property-Based Testing with Hypothesis - 325
*** The Magic of Hypothesis - 330
*** Contrast with Traditional Tests - 330

** Getting the Most Out of Hypothesis - 331
*** Hypothesis Strategies - 331
*** Generating Algorithms - 333

** Closing Thoughts - 336

* 24. Mutation Testing - 337
** What Is Mutation Testing? - 337
** Mutation Testing with mutmut - 340
*** Fixing Mutants - 342
*** Mutation Testing Reports - 342

** Adopting Mutation Testing - 344
*** The Fallacy of Coverage (and Other Metrics) - 345

** Closing Thoughts - 346

* Index - 349
