#+TITLE: The Python 3 Standard Library by Example
#+AUTHOR: Doug Hellmann
#+VERSION: ???, 2017
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Chapter 10. Concurrency with Processes, Threads, and Coroutines
** 10.1 ~subprocess~: Spawning Additional Processes - 535
*** 10.1.1 Running External Command - 536
*** 10.1.2 Working with Pipes Directly - 542
*** 10.1.3 Connecting Segments of a Pipe - 545
*** 10.1.4 Interacting with Another Command - 546
*** 10.1.5 Signaling Between Processes - 548

** 10.2 ~signal~: Asynchronous System Events - 553
*** 10.2.1 Receiving Signals - 554
*** 10.2.2 Retrieving Registered Handlers - 555
*** 10.2.3 Sending Signals - 556
*** 10.2.4 Alarms - 556
*** 10.2.5 Ignoring Signals - 557
*** 10.2.6 Signals and Threads - 558

** 10.3 ~threading~: Manage Concurrent Operations Within a Process - 560
*** 10.3.1 Thread Objects - 560
*** 10.3.2 Determining the Current Thread - 562
*** 10.3.3 Daemon Versus Non-daemon Threads - 564
*** 10.3.4 Enumerating All Threads - 567
*** 10.3.5 Subclassing Thread - 568
*** 10.3.6 Timer Threads - 570
*** 10.3.7 Signaling Between Threads - 571
*** 10.3.8 Controlling Access to Resources - 572
*** 10.3.9 Synchronizing Threads - 578
*** 10.3.10 Limiting Concurrent Access to Resources - 581
*** 10.3.11 Thread Specific Data - 583

** 10.4 ~multiprocessing~: Manage Processes Like Threads - 586
*** 10.4.1 multiprocessing Basics - 586
*** 10.4.2 Importable Target Functions - 587
*** 10.4.3 Determining the Current Process - 588
*** 10.4.4 Daemon Processes - 589
*** 10.4.5 Waiting for Processes - 591
*** 10.4.6 Terminating Processes - 593
*** 10.4.7 Process Exit Status - 594
*** 10.4.8 Logging - 596
*** 10.4.9 Subclassing Process - 597
*** 10.4.10 Passing Messages to Processes - 598
*** 10.4.11 Signaling Between Processes - 602
*** 10.4.12 Controlling Access to Resources - 603
*** 10.4.13 Synchronizing Operations - 604
*** 10.4.14 Controlling Concurrent Access to Resources - 605
*** 10.4.15 Managing Shared State - 608
*** 10.4.16 Shared Namespaces - 608
*** 10.4.17 Process Pools - 611
*** 10.4.18 Implementing MapReduce - 613

** 10.5 ~asyncio~: Asynchronous I/O, Event Loop, and Concurrency Tools - 617
*** 10.5.1 Asynchronous Concurrency Concepts - 618
*** 10.5.2 Cooperative Multitasking with Coroutines - 618
*** 10.5.3 Scheduling Calls to Regular Functions - 622
*** 10.5.4 Producing Results Asynchronously - 625
*** 10.5.5 Executing Tasks Concurrently - 628
*** 10.5.6 Composing Coroutines with Control Structures - 632
*** 10.5.7 Synchronization Primitives - 637
*** 10.5.8 Asynchronous I/O with Protocol Class Abstractions - 644
*** 10.5.9 Asynchronous I/O Using Coroutines and Streams - 650
*** 10.5.10 Using SSL - 656
*** 10.5.11 Interacting with Domain Name Services - 658
*** 10.5.12 Working with Subprocesses - 661
*** 10.5.13 Receiving Unix Signals - 668
*** 10.5.14 Combining Coroutines with Threads and Processes - 670
*** 10.5.15 Debugging with asyncio - 673

** 10.6 ~concurrent.futures~: Manage Pools of Concurrent Tasks - 677
*** 10.6.1 Using map() with a Basic Thread Pool - 677
*** 10.6.2 Scheduling Individual Tasks - 678
*** 10.6.3 Waiting for Tasks in Any Order - 679
*** 10.6.4 Future Callbacks - 680
*** 10.6.5 Canceling Tasks - 681
*** 10.6.6 Exceptions in Tasks - 683
*** 10.6.7 Context Manager - 683
*** 10.6.8 Process Pools - 684
