#+TITLE: The PyO3 user guide
#+LINK: pyo3.rs
#+VERSION: v0.25.0
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Introduction
  Welcome to the PyO3 user guide! This book is a companion to [[https://docs.rs/pyo3][PyO3's API docs]].
  It contains examples and documentation to explain all of PyO3's use cases in
  detail.

  - The rough order of material in this user guide is as follows:
    * Getting started
    * Wrapping Rust code for use from Python
    * How to use Python code from Rust
    * Remaining topics which go into advanced concepts in detail

** Usage
- Requires Rust 1.63 or greater.

- PyO3 supports the following Python distributions:
  * CPython 3.7 or greater
  * PyPy 7.3 (Python 3.9+)
  * GraalPy 24.2 or greater (Python 3.11+)

- =IMPORTANT=
  You can use PyO3
  * to write a native Python module in Rust, or
  * to embed Python in a Rust binary.

  The following sections explain each of these in turn.

*** Using Rust from Python
- /maturin/ is a tool for building and publishing Rust-based Python packages
  with *MINIMAL configuration*.

- Commands:
  #+begin_src shell
    mkdir string_sum && cd "$_"
    uv venv
    source .venv/bin/activate
    uv tool install maturin
    maturin init --bindings pyo3
    maturin develop
  #+end_src

- =TODO=
  =IMPORTANT=
  If you want to be able to run cargo test or use this project in a Cargo
  workspace and are running into linker issues, there are some workarounds in
  the FAQ.

- =TODO=
  As well as with _maturin_, it is possible to build using _setuptools-rust_ or
  _manually_. Both offer more flexibility than _maturin_ but require more
  configuration to get started.

*** Using Python from Rust
- Need a shared library.
  From you Python installation location, search for =Python.h=.
  * =from Jian=
    In one of my installation (through _uv_,
    =.local/share/uv/python/cpython-3.13.2-macos-aarch64-none=):
    =./include/python3.13/Python.h=

** Tools and libraries
** Examples
** Articles and other media
** Contributing
** License

* 1. Getting started
* 2. Using Rust from Python
** 2.1. Python modules
** 2.2. Python functions
*** 2.2.1. Function signatures
*** 2.2.2. Error handling

** 2.3. Python classes
*** 2.3.1. Class customizations
**** 2.3.1.1. Basic object customization
**** 2.3.1.2. Emulating numeric types
**** 2.3.1.3. Emulating callable objects

*** 2.3.2. Thread safety

* 3. Calling Python from Rust
** 3.1. Python object types
** 3.2. Python exceptions
** 3.3. Calling Python functions
** 3.4. Executing existing Python code

* 4. Type conversions
** 4.1. Mapping of Rust types to Python types
** 4.2. Conversion traits

* 5. Using async and await
* 6. Parallelism
* 7. Supporting Free-Threaded Python
* 8. Debugging
* 9. Features reference
* 10. Performance
* 11. Advanced topics
* 12. Building and distribution
** 12.1. Supporting multiple Python versions

* 13. Useful crates
** 13.1. Logging
** 13.2. Tracing
** 13.3. Using async and await

* 14. FAQ and troubleshooting
* Appendix A: Migration guide
* Appendix B: Trait bounds
* Appendix C: Python typing hints
* CHANGELOG
* Contributing
