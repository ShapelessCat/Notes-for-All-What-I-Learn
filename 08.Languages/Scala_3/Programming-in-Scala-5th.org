#+TITLE: Programming in Scala
#+SUBTITLE: A comprehensive step-by-step guide - Updated for Scala 3.0
#+VERSION: 5th
#+AUTHOR: Martin Odersky, Lex Spoon, Bill Venners, Frank Sommers
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Contents - xi
* List of Figures - xix
* List of Tables - xxi
* List of Listings - xxiii
* TODO Foreword - xxix
* Acknowledgments - xxxiii
* TODO Introduction - xxxvi
* TODO 1 A Scalable Language - 43
** 1.1 A language that grows on you - 44
** 1.2 What makes Scala scalable? - 47
** 1.3 Why Scala? - 51
** 1.4 Scala’s roots - 58
** 1.5 Conclusion - 59

* TODO 2 First Steps in Scala - 61
** Step 1. Learn to use the Scala REPL - 61
** Step 2. Define some variables - 63
** Step 3. Define some functions - 65
** Step 4. Write some Scala scripts - 67
** Step 5. Loop with ~while~; decide with ~if~ - 68
** Step 6. Iterate with ~foreach~ and ~for-do~ - 71
** Conclusion - 73

* TODO 3 Next Steps in Scala - 74
** Step 7. Parameterize arrays with types - 74
** Step 8. Use lists - 78
** Step 9. Use tuples - 83
** Step 10. Use sets and maps - 84
** Step 11. Learn to recognize the functional style - 88
** Step 12. Transform with ~map~ and ~for-yield~ - 91
** Conclusion - 94

* TODO 4 Classes and Objects - 95
** 4.1 Classes, fields, and methods - 95
** 4.2 Semicolon inference - 99
** 4.3 Singleton objects - 100
** 4.4 Case classes - 103
** 4.5 A Scala application - 105
** 4.6 Conclusion - 107

* TODO 5 Basic Types and Operations - 108
** 5.1 Some basic types - 108
** 5.2 Literals - 109
** 5.3 String interpolation - 114
** 5.4 Operators are methods - 116
** 5.5 Arithmetic operations - 119
** 5.6 Relational and logical operations - 120
** 5.7 Bitwise operations - 121
** 5.8 Object equality - 122
** 5.9 Operator precedence and associativity - 124
** 5.10 Rich operations - 127
** 5.11 Conclusion - 127

* TODO 6 Functional Objects - 129
** 6.1 A specification for class ~Rational~ - 129
** 6.2 Constructing a ~Rational~ - 130
** 6.3 Reimplementing the ~toString~ method - 132
** 6.4 Checking preconditions - 133
** 6.5 Adding fields - 134
** 6.6 Self references - 136
** 6.7 Auxiliary constructors - 136
** 6.8 Private fields and methods - 138
** 6.9 Defining operators - 139
** 6.10 Identifiers in Scala - 141
** 6.11 Method overloading - 144
** 6.12 Extension methods - 146
** 6.13 A word of caution - 147
** 6.14 Conclusion - 147

* TODO 7 Built-in Control Structures - 149
** 7.1 If expressions - 150
** 7.2 While loops - 151
** 7.3 For expressions - 154
** 7.4 Exception handling with ~try~ expressions - 159
** 7.5 Match expressions - 163
** 7.6 Living without ~break~ and ~continue~ - 164
** 7.7 Variable scope - 166
** 7.8 Refactoring imperative-style code - 169
** 7.9 Conclusion - 171

* TODO 8 Functions and Closures - 172
** 8.1 Methods - 172
** 8.2 Local functions - 173
** 8.3 First-class functions - 175
** 8.4 Short forms of function literals - 176
** 8.5 Placeholder syntax - 177
** 8.6 Partially applied functions - 178
** 8.7 Closures - 181
** 8.8 Special function call forms - 183
** 8.9 “SAM” types - 186
** 8.10 Tail recursion - 188
** 8.11 Conclusion - 191

* TODO 9 Control Abstraction - 192
** 9.1 Reducing code duplication - 192
** 9.2 Simplifying client code - 196
** 9.3 Currying - 198
** 9.4 Writing new control structures - 199
** 9.5 By-name parameters - 202
** 9.6 Conclusion - 204

* TODO 10 Composition and Inheritance - 206
** 10.1 A two-dimensional layout library - 206
** 10.2 Abstract classes - 207
** 10.3 Defining parameterless methods - 208
** 10.4 Extending classes - 211
** 10.5 Overriding methods and fields - 213
** 10.6 Defining parametric fields - 214
** 10.7 Invoking superclass constructors - 216
** 10.8 Using ~override~ modifiers - 217
** 10.9 Polymorphism and dynamic binding - 219
** 10.10 Declaring ~final~ members - 221
** 10.11 Using composition and inheritance - 222
** 10.12 Implementing ~above~, ~beside~, and ~toString~ - 224
** 10.13 Defining a factory object - 226
** 10.14 Heighten and widen - 228
** 10.15 Putting it all together - 230
** 10.16 Conclusion - 233

* TODO 11 Traits - 234
  - /Traits/ are a _fundamental unit_ of code *reuse* in Scala.

  - A /trait/ encapsulates /method/ and /field/ definitions,
    which can then be reused by *mixing* them *into* /classes/.

  - This chapter shows you
    * how traits work
    * TWO of the most common ways they are useful:
      + widening thin interfaces to rich ones
      + defining stackable modifications

  - It also shows
    * *how to use* the ~Ordered~ /trait/
    * *compares* /traits/ to the /multiple inheritance/ of other languages.

** DONE 11.1 How traits work - 234
CLOSED: [2022-05-21 Sat 00:54]
- A /trait definition/ looks just LIKE a /class definition/
  EXCEPT that it uses the keyword ~trait~.

- If a /trait/ doesn't decllare a /superclass/, like a /class/,
  it has the _default superclass_ of ~AnyRef~.

- Once a /trait/ is defined,
  it can be *mixed in* to a /class/ using
  * either the keyword ~extends~
  * or the keyword ~with~,
  * or a comma.

- Scala programmers *“mix in”* /traits/ _RATHER THAN_ *inherit* from them,
  BECAUSE mixing in a /trait/ has *IMPORTANT DIFFERENCES* from the ~multiple
  inheritance~ found in many other languages. This issue is discussed in
  Section 11.4.
  =TODO=
  =TODO=
  =TODO=
  =TODO=
  =TODO=

- At this point you might philosophize that
  /traits/ are *like* /Java interfaces/ with /default methods/,
  BUT they can actually do much more -- /traits/ can, for example,
  * declare fields and maintain state.

- =IMPORTANT=
  You can do anything in a /trait definition/ that you can do in a
  /class definition/, and the syntax, except the keyword, looks
  _exactly the same_.

- =IMPORTANT=
  * The *KEY DIFFERENCE* between /classes/ and /traits/:
    + whereas in /classes/, ~super~ calls are _statically bound_,
    + in /traits/, they are _dynamically bound_.

  * For example,
    + if you write ~super.toString~ in a /class/, you know exactly which
      _method implementation_ will be invoked.

    + When you write the same thing in a /trait/,
      however, the method implementation to invoke for the ~super~ call
      _is *undefined* WHEN you define the /trait/._

      RATHER, *the implementation to invoke will be DETERMINED anew each time
      the /trait/ is mixed into a /CONCRETE class/.*

    =TODO=
    This curious behavior of ~super~ is key to allowing /traits/ to work as
    /stackable modifications/, which will be described in _Section 11.3_.
    =TODO=
    The rules for resolving ~super~ calls will be given in _Section 11.4_.

** 11.2 Thin versus rich interfaces - 237
- One major use of /traits/:
  automatically add /methods/ to a /class/ in terms of /methods/ the /class/
  _already has_ -- that is, /traits/ can enrich a *THIN interface*, making it
  into a *RICH interface*.

- *Thin* versus *rich* /interfaces/ represents a commonly faced trade-off in
  object-oriented design.

    The trade-off is BETWEEN _the implementers_ AND _the clients of an interface_.
  * A /rich interface/ has many /methods/, which make it convenient for the caller.
    Clients can pick a method that exactly matches the functionality they need.

  * A /thin interface/, on the other hand, has *fewer* /methods/, and thus is
    easier on _the implementers_.


 * Clients calling into a /thin interface/, however, have to write more code.
   Given the smaller selection of methods to call, they may have to choose a
   less than perfect match for their needs and write extra code to use it.

** 11.3 Traits as stackable modifications - 239
** 11.4 Why not multiple inheritance? - 243
** 11.5 Trait parameters - 248
** 11.6 Conclusion - 250
   

** ===========================
** DONE 12 Traits - 257
 CLOSED: [2018-03-21 Wed 23:51]
** ---------------------------
** DONE 12.2 Thin versus rich interfaces - 260
   CLOSED: [2017-10-12 Thu 03:17]
   =From Jian= Except the phase /Java interface/, *interface* by itself in this
   section is used to represent its general meaning, NOT something for a
   specific language.

   - One major use of /traits/ is to automatically add (concrete) /methods/ to a
     /class/ that extends it.

   - Thin vs Rich:
     Consider the trade-off between the _implementers_ and the _clients_ of an
     interface.

     + A *rich* interface
       has _MANY_ /methods/, which make it convenient for the _callers (clients)_
       -- they have more chance to find /methods/ that can fit their requirement
       exactly.

     + A *thin* interface,
       on the other hand, has _FEWER_ /methods/, and thus
       * it is easier for the _implementers_ whoes load is light.

       * more work are left for the _clients (clients)_, who call into a *thin*
         interface, however, have to write more code -- comparing the the *rich*
         interface, they have less chance to find /methods/ that can fit their
         requirement exactly -- they can choose to implement the thin interface
         required methods, or write a more fittable one -- either of them require
         their own coding.

   - Unlike in Java, adding a /concrete method/ to a /Scala trait/ is a *one-time
     effort* -- you only need to implement the /method/ once, in the /trait/
     itself, instead of needing to reimplement it for every /class/ that mixes in
     the /trait/.

     Thus, *rich* interfaces are _less_ work to provide in Scala than in a
     language without /traits/.

   - =From Jian=
     The discussion above about "Thin vs Rich" is a discussion in general.
     For Scala, even the /rich interface (trait)/ doesn't add load to the
     _implementer_, a reasonable ~trait~

     + has a *STILL* _small number_ of /abstract methods/ --
       the part the implementer need to finish -- the coding load is still light.

       This is _the (still) thin part_ of the trait's interface

       and

     - defines a potentially _large number_ of /concrete methods/,
       *ALL _implemented in terms of_ the /abstract methods/.*

     - then you can mix the enrichment /trait/ into a /class/, *implement the thin
       portion of the interface*, and end up with a /class/ that has all of the
       rich interface available.

** DONE 12.3 Example: Rectangular objects - 261
   CLOSED: [2017-10-12 Thu 01:21]
** DONE 12.4 The ~Ordered~ trait - 264
   CLOSED: [2017-10-12 Thu 01:38]
   Do comparison manually:

   footnote 1: This example is based on the ~Rational~ class shown in Listing 6.5
   on page 151, with ~equals~, ~hashCode~, and modifications to ensure a
   _positive_ ~denom~ added.
   #+BEGIN_SRC scala
     class Rational(n: Int, d: Int) {
       def < (that: Rational) =
         this.numer * that.denom < that.numer * this.denom

       def > (that: Rational) = that < this

       def <= (that: Rational) = (this < that) || (this == that)

       def >= (that: Rational) = (this > that) || (this == that)
     }
   #+END_SRC

   Use the ~Ordered~ trait
   #+BEGIN_SRC scala
     class Rational(n: Int, d: Int) extends Ordered[Rational] {
       //...
       def compare(that: Rational) =
         (this.numer * that.denom) - (that.numer * this.denom)
     }
   #+END_SRC

** DONE 12.5 Traits as stackable modifications - 266 =Re-Read=
   CLOSED: [2017-10-12 Thu 03:04]
   - One major use of traits:
     turning a thin interface into a rich one.

   - Now turn to a second major use of traits:
     providing stackable modifications to classes.

   - Traits let you modify the methods of a class, and they do so in a way that
     allows you to stack those modifications with each other (order matters).

   - As an example,
     _consider stacking modifications to a queue of integers_.

     + Two basic operations to the queue (FIFO):
       * ~put~
       * ~get~

     + Code:
       #+BEGIN_SRC scala
         abstract class IntQueue {
           def get(): Int
           def put(x: Int)
         }

         import scala.collection.mutable.ArrayBuffer

         class BasicIntQueue extends IntQueue {
           private val buf = new ArrayBuffer[Int]
           def get() = buf.remove(0)
           def put(x: Int) = { buf += x }
         }
       #+END_SRC

     + Given a class that implements such a queue, you could define traits to
       perform modifications such as these:
       * ~Doubling~: double all integers that are put in the queue
       * ~Incrementing~: increment all integers that are put in the queue
       * ~Filtering~: filter out negative integers from a queue

       These THREE traits represent /modifications/, because they modify the
       behavior of an underlying queue class rather than defining a full queue
       class themselves.

       The three are also /stackable/ -- you can select any of the three you
       like, mix them into a class, and obtain a new class that has all of the
       modifications you chose.

     + The implementations of three traits.
       #+BEGIN_SRC scala
         trait Doubling extends IntQueue {
           abstract override def put(x: Int) = { super.put(2 * x) }
         }

         trait Incrementing extends IntQueue {
           abstract override def put(x: Int) = { super.put(x + 1) }
         }

         trait Filtering extends IntQueue {
           abstract override def put(x: Int) = {
             if (x >= 0) super.put(x)
           }
         }
       #+END_SRC

       * If a /trait/ extends a class A, _ONLY_ classes that extends A can mix in
         this /trait/. For instance, you can mix ~Doubling~ into ~BasicIntQueue~,
         but NOT into ~Rational~.

       * If a /trait/ can have ~super~ call on a method declared ~abstract~.
         =TODO= =???=
         - Such calls are illegal for normal /classes/ because they will
           certainly fail at run time.
           =From Jian= since the current method ~m~ is ~abstract~, the ~m~
           method of the superclass is also ~abstract~.

         - For a trait, however, since ~super~ calls is dynamically bound, such a
           call can actually succeed.

         In this example the ~super~ call in ~trait Doubling~ will work so long
         as _the trait is mixed in after another trait or class that gives a
         concrete definition to the method_.

         This arrangement is frequently needed with traits that implement stackable
         modifications. To tell the compiler you are doing this on purpose, you
         must mark such methods as ~abstract override~. _This combination of
         modifiers is only allowed for members of traits, not classes_, and it
         means that the trait must be mixed into some class that has a concrete
         definition of the method in question.

     + Run and check the result:
       * Non-stacked
         #+BEGIN_SRC scala
           class MyQueue extends BasicIntQueue with Doubling

           val queue = new MyQueue
           // OR //
           // Use anonymous class `val queue = new BasicIntQueue with Doubling`

           queue.put(10)
           queue.get()
           // 20
         #+END_SRC

       * Stacked
         #+BEGIN_SRC scala
           val queue = (new BasicIntQueue
                            with Incrementing with Filtering)
           queue.put(-1)
           queue.put(0)
           queue.put(1)

           queue.get()
           // Int = 1
           queue.get()
           // Int = 2
         #+END_SRC

       * Stacked (different order)
         #+BEGIN_SRC scala
           val queue = (new BasicIntQueue
                            with Filtering with Incrementing)
           queue.put(-1)
           queue.put(0)
           queue.put(1)

           queue.get()
           // Int = 0
           queue.get()
           // Int = 1
           queue.get()
           // Int = 2
         #+END_SRC

     + Rules (roughly): =TODO= see the next section for details
       + traits further to the right take effect first.
         When you call a method on a class with mixins, the method in the trait
         furthest to the right is called first.

       + If that method calls ~super~, it invokes the method in the next trait to
         its left, and so on.

   - Since _the order of traits is significant_,
     you must keep eyes open for opportunities to arrange code as stackable
     modifications.

   - mixin :: a /trait/ that is _mixed into_ a /class/ (from footnote 2).

** DONE 12.6 Why not multiple inheritance? - 270
   CLOSED: [2018-03-21 Wed 23:13]
   /Traits/ are a way to inherit from multiple class-like constructs, but they
   *differ* in important ways from the /multiple inheritance/ present in many
   languages.

   - One _DIFFERENCE_ is especially important:
     the *interpretation* of ~super~.

   - The precise order of the /linearization/ is described in the *language
     specification*.

   - Example:
     #+BEGIN_SRC scala
       class Animal
       trait Furry extends Animal
       trait HasLegs extends Animal
       trait FourLegged extends HasLegs
       class Cat extends Animal with Furry with FourLegged
     #+END_SRC

     Left to Right:
     1. ~Animal~: ~Animal~ --> ~AnyRef~ --> ~Any~

     2. ~Furry~: ~Furry~ ===> ~Animal~ --> ~AnyRef~ --> ~Any~

     3. ~FourLegged~: ~FourLegged~ --> ~HasLegs~ ===> ~Furry~ ===> ~Animal~ --> ~AnyRef~ --> ~Any~

** DONE 12.7 To trait or not to trait? - 274 =IMPORTANT=
   CLOSED: [2018-03-21 Wed 23:50]
   There is *NO* firm rules about the choice of using /trait/ or /abstract class/
   for a specific use case. ONLY guidelines:

   - If the behavior will _NOT be reused_, then make it a /concrete class/. It
     is not reusable behavior after all.

   - If it might be reused in _multiple, *unrelated* classes_, make it a /trait/.
     Only traits can be mixed into different parts of the class hierarchy.

   - If you want to _inherit from it in Java code_, use an /abstract class/.
     Since traits with code do not have a close Java analog, it tends to be
     *AWKWARD* to _inherit from a trait in a Java class_.

     =TODO= Learn the conversion rules from Scala /trait/ to Java code!!! =TODO=

     Inheriting from a Scala class, meanwhile, is exactly like inheriting from a
     Java class.

     *As one EXCEPTION*,
     _a /Scala trait/ with only abstract members translates directly to a /Java
     interface/_, so you should feel free to define such /traits/ even if you
     expect Java code to inherit from it.
     =TODO= =IMPORTANT=
     See Chapter 31 for more information on working with Java and Scala together.

   - If you plan to _distribute it in compiled form_, and you expect outside groups
     to write classes inheriting from it, you might lean towards using an
     /abstract class/.

     The issue is that when a trait gains or loses a member, any classes that
     inherit from it must be recompiled, even if they have not changed.

     If outside clients will only call into the behavior, instead of inheriting
     from it, then using a trait is fine.

   - *Default Choice* if NOT used in Java code:
     If you _still do not know, after considering the above_,
     then START BY making it as a /trait/.

     You can always change it later, and in general using a /trait/ _keeps more
     options open_.

** DONE 12.8 Conclusion - 275
   CLOSED: [2017-10-12 Thu 03:39]
   _Mix in multiple traits_ are similar to /multiple inheritance/.
   But because /traits/ interpret ~super~ using /linearization/, they both
   + _AVOID_ some of the difficulties of traditional multiple inheritance
     and
   + _ALLOW_ you to stack behaviors.

* 12 Packages, Imports, and Exports - 251
** 12.1 Putting code in packages - 251
** 12.2 Concise access to related code - 252
** 12.3 Imports - 256
** 12.4 Implicit imports - 259
** 12.5 Access modifiers - 260
** 12.6 Top-level definitions - 265
** 12.7 Exports - 266
** 12.8 Conclusion - 269

* 13 Pattern Matching - 270
** 13.1 A simple example - 270
** 13.2 Kinds of patterns - 274
** 13.3 Pattern guards - 284
** 13.4 Pattern overlaps - 285
** 13.5 Sealed classes - 287
** 13.6 Pattern matching ~Option~'s - 289
** 13.7 Patterns everywhere - 291
** 13.8 A larger example - 295
** 13.9 Conclusion - 303

* 14 Working with Lists - 304
** 14.1 List literals - 304
** 14.2 The ~List~ type - 305
** 14.3 Constructing lists - 305
** 14.4 Basic operations on lists - 306
** 14.5 List patterns - 307
** 14.6 First-order methods on class ~List~ - 309
** 14.7 Higher-order methods on class ~List~ - 320
** 14.8 Methods of the ~List~ object - 327
** 14.9 Processing multiple lists together - 329
** 14.10 Understanding Scala's type inference algorithm - 331
** 14.11 Conclusion - 334

* 15 Working with Other Collections - 335
** 15.1 Sequences - 335
** 15.2 Sets and maps - 339
** 15.3 Selecting mutable versus immutable collections - 346
** 15.4 Initializing collections - 348
** 15.5 Tuples - 351
** 15.6 Conclusion - 353

* 16 Mutable Objects - 355
** 16.1 What makes an object mutable? - 355
** 16.2 Reassignable variables and properties - 357
** 16.3 Case study: Discrete event simulation - 361
** 16.4 A language for digital circuits - 362
** 16.5 The ~Simulation~ API - 365
** 16.6 Circuit Simulation - 369
** 16.7 Conclusion - 376

* 17 Scala's Hierarchy - 378
** 17.1 Scala’s class hierarchy - 378
** 17.2 How primitives are implemented - 382
** 17.3 Bottom types - 384
** 17.4 Defining your own value classes - 385
** 17.5 Intersection types - 388
** 17.6 Union types - 389
** 17.7 Transparent traits - 392
** 17.8 Conclusion - 393

* 18 Type Parameterization - 394
** 18.1 Functional queues - 394
** 18.2 Information hiding - 397
** 18.3 Variance annotations - 400
** 18.4 Checking variance annotations - 405
** 18.5 Lower bounds - 408
** 18.6 Contravariance - 409
** 18.7 Upper bounds - 413
** 18.8 Conclusion - 415

* TODO 19 Enums - 416
Scala 3 introduced the ~enum~ construct to make the definition of
/sealed case class/ hierachies _more concise_.

- /Enums/ can be used to define both /enums/ (enumerated data types) in
  mainstream OO languages, and /enums/ (ADT) in FP languages.

** DONE 19.1 Enumerated data types - 416
CLOSED: [2021-03-02 Tue 23:02]
- =from Jian=:
  In this book, we call the /enumerated data type/ *EDT*, to distinguish it
  from *ADT*'s.

- An enumerated data type, or “EDT,”1 is useful when you want a type that’s
  restricted to a finite set of named values. These named values are called
  the cases of the EDT.
  =RE-NOTE= =DUPLICATION=

- Example:
  #+begin_src scala
    enum Direction:
      case North, East, South, West

    import Direction.{North, South, East, West}

    def invert(dir: Direction): Direction =
      dir match
        case North => South
        case East  => West
        case South => North
        case West  => East
  #+end_src

- ~enum~'s build-in methods:
  * ~ordinal~: start at 0 and increases by one for each case, in the order the
    cases are defined in the /enum/.
    + The REASON why /Enumerated data types/ are called "enumerated":
      the compiler associates an ~Int~ /ordinal/ to each /case/.


  * ~values~: ~Array[YourEnumType]~

  * ~valueOf~: Convert a string, which is exactly the same as an enum case name,
    to that enum value.

- Give an EDT value parameter(s):
  #+begin_src scala
    enum Direction(val degrees: Int):
      case North extends Direction(0)
      case East  extends Direction(90)
      case South extends Direction(180)
      case West  extends Direction(270)
  #+end_src

- You can define a /method/ inside a /enum/:
  #+begin_src scala
    enum Direction(val degrees: Int):
      case North extends Direction(0)
      case East  extends Direction(90)
      case South extends Direction(180)
      case West  extends Direction(270)

      def invert: Direction =
        this match
          case North => South
          case East  => West
          case South => North
          case West  => East
  #+end_src
  * =TODO= NOTE

- =TODO= NOTE
  * You can only define /methods/ for a whole /enum/, not for some SPECIFIC
    /enum case(s)/.

  * *footnote*:
    Of course, you COULD define /extension methods/ for the case types, but it
    might be better in that situation to just write out the /sealed case
    class hierarchy/ by hand.

- *Integration with Java enums*
  #+begin_src scala
    enum Direction extends java.lang.Enum[Direction]:
      case North, East, South, West
  #+end_src

  Then you can all /Java enums/ /methods/ on these values. For instance,
  ~Direction.East.compareTo(Direction.South)  // -1~

** DONE 19.2 Algebraic data types - 420
CLOSED: [2021-03-03 Wed 00:53]
- Algebraic Data Type (ADT) :: a data type composed of a finite set of cases.

- In Scala, a _sealed_ family of /case classes/ forms an /ADT/
  so long as *AT LEAST _ONE_ of the cases take parameters.*
  * footnote:
    By comparison,
    an EDT is a _sealed_ family of /case classes/ in which *NONE of the cases
    take parameters.*

- When you create a case of an /ADT/ by using its /factory method/ (=from Jian=
  the ~apply~ /method/), the compiler will *widen* its type to the more general
  ~enum~ type.
  * If you want the more specific type, use the constructor (~new~ it).

- /ADT/'s can be *recursive*.
  * =from Jian=
    /EDT/'s can never be recursive, because *NONE of the cases take parameters.*

- Example:
  #+begin_src scala
    enum Seinfeld[+E]:
      def ::[E2 >: E](o: E2): Seinfeld[E2] = Yada(o, this)

      case Yada(head: E, tail: Seinfeld[E])
      case Nada

    val xs = 1 :: 2 :: 3 :: Nada
    // val xs = Yada(1, Yada(2, Yada(3, Nada)))
  #+end_src

** DONE 19.3 Generalized ADTs - 422
CLOSED: [2021-03-03 Wed 01:44]
- Generalized Algebraic Data Types (GADTs) :: ADTs in which the sealed trait
  takes a /type parameter/ that is filled in by the cases.

- Example:
  #+begin_src scala
    enum Literal[T]:
      case IntLit(value: Int)         extends Literal[Int]
      case LongLit(value: Long)       extends Literal[Long]
      case CharLit(value: Char)       extends Literal[Char]
      case FloatLit(value: Float)     extends Literal[Float]
      case DoubleLit(value: Double)   extends Literal[Double]
      case BooleanLit(value: Boolean) extends Literal[Boolean]
      case StringLit(value: String)   extends Literal[String]
  #+end_src
  The ~Literal~ /enum/ represents a /GADT/ because it takes a /type parameter/
  ~T~, which is specified by EACH of its cases in their _extends clauses_.

- =IMPORTANT=
  This kind of /sealed type heirarchy/ is given the special name "generalized ADT"
  because it presents *SPECIAL CHALLENGES to /type checking and inference/.*
  * Here's an illustrative example:
    #+begin_src scala
      import Literal.*

      def valueOfLiteral[T](lit: Literal[T]): T =
        lit match
          case IntLit(n)     => n
          case LongLit(m)    => m
          case CharLit(c)    => c
          case FloatLit(f)   => f
          case DoubleLit(d)  => d
          case BooleanLit(b) => b
          case StringLit(s)  => s
    #+end_src
    The ~valueOfLiteral~ /method/ passes the /type checker/, despite none of
    it match alternatives resulting in the required result type, ~T~.
    + For example,
      =FIXME= IntList => IntLit
      the ~case IntLit(n)~ alternative results in ~n~, which has type ~Int~.
      The challenge is that ~Int~ is not type ~T~, nor is ~Int~ a /subtype/ of ~T~.
        This /type checks/ only because the compiler notices that for the
      ~IntLit~ case, ~T~ can be none other than ~Int~.
        Moreover, this _MORE SPECIFIC_ /type/ is propagated back to the caller.
      #+begin_src scala
        valueOfLiteral(BooleanLit(true))  // true: Boolean
        valueOfLiteral(IntLit(42))        // 42: Int
      #+end_src

** 19.4 What makes ADTs algebraic - 423 - =RE-READ= =NOTE=
** 19.5 Conclusion - 427

* 20 Abstract Members - 428
** 20.1 A quick tour of abstract members - 428
** 20.2 Type members - 429
** 20.3 Abstract ~val~'s - 430
** 20.4 Abstract ~var~'s - 430
** 20.5 Initializing abstract ~val~'s - 432
** 20.6 Abstract types - 439
** 20.7 Path-dependent types - 441
** 20.8 Refinement types - 444
** 20.9 Case study: Currencies - 445
** 20.10 Conclusion - 453

* 21 Givens - 455
** 21.1 How it works - 455
** 21.2 Parameterized given types - 459
** 21.3 Anonymous givens - 464
** 21.4 Parameterized givens as typeclasses - 465
** 21.5 Given imports - 468
** 21.6 Rules for context parameters - 469
** 21.7 When multiple givens apply - 472
** 21.8 Debugging givens - 474
** 21.9 Conclusion - 476

* 22 Extension Methods - 477
** 22.1 The basics - 477
** 22.2 Generic extensions - 480
** 22.3 Collective extensions - 481
** 22.4 Using a typeclass - 484
** 22.5 Extension methods for givens - 486
** 22.6 Where Scala looks for extension methods - 490
** 22.7 Conclusion - 491

* 23 Typeclasses - 493
** 23.1 Why typeclasses? - 493
** 23.2 Context bounds - 498
** 23.3 Main methods - 501
** 23.4 Multiversal equality - 505
** 23.5 Implicit conversions - 511
** 23.6 Typeclass case study: JSON serialization - 514
** 23.7 Conclusion - 523

* 24 Collections in Depth - 525
** 24.1 Mutable and immutable collections - 526
** 24.2 Collections consistency - 528
** 24.3 Trait ~Iterable~ - 530
** 24.4 The sequence traits ~Seq~, ~IndexedSeq~, and ~LinearSeq~ - 537
** 24.5 Sets - 544
** 24.6 Maps - 548
** 24.7 Concrete immutable collection classes - 552
** 24.8 Concrete mutable collection classes - 559
** 24.9 Arrays - 564
** 24.10 Strings - 568
** 24.11 Performance characteristics - 569
** 24.12 Equality - 571
** 24.13 Views - 572
** 24.14 Iterators - 576
** 24.15 Creating collections from scratch - 584
** 24.16 Conversions between Java and Scala collections - 586
** 24.17 Conclusion - 588

* 25 Assertions and Tests - 589
** 25.1 Assertions - 589
** 25.2 Testing in Scala - 591
** 25.3 Informative failure reports - 592
** 25.4 Tests as specifications - 594
** 25.5 Property-based testing - 597
** 25.6 Organizing and running tests - 599
** 25.7 Conclusion - 600

* Glossary - 601
* Bibliography - 617
* About the Authors - 621
* Index - 622
