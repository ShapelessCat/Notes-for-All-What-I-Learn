#+TITLE: Functional event-driven architecture
#+SUBTITLE: Powered by Scala 3
#+Date: January 2, 2023
#+VERSION: 100%, First Edition
#+AUTHOR: Gabriel Volpe
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - 1
  Tthis book will delve into the /event-driven architecture (EDA)/
  in a purely functional way, mainly powered by [[https://fs2.io/][Fs2]] streams.

  - In the same spirit of Practical FP in Scala (PFPS)3, we will develop a distributed
    system that meets the requirements of a modern software architecture capable
    of processing billions of events per day at scale using Apache Pulsar4.

  - A lot of focus will be put on observability and monitoring as well, which is
    a necessity in distributed systems. Among other things, we will get into
    metrics exposed via Prometheus & Grafana and distributed open tracing.

  - We will also write a Web Sockets service powered by Http4s5, accompanied by
    two identical Web applications written in Elm6 and Scala.js7, just because
    we can.

  - However, before we start designing the system, we will delve into some theory
    and concepts needed to understand why certain decisions are made. Though,
    always with the aim of keeping the theory at its minimum — and supplemented
    with code examples whenever appropriate — to make it a smoother reading
    experience.

  - It is worth mentioning that although the application picks on a particular
    design and implementation, most of the concepts should translate to other
    systems in the same space that can be built on top of Apache Kafka,
    RabbitMQ, or other message brokers.

* Acknowledgments - 2
** People - 3
** Software - 4
** Fonts - 5

* Prerequisites - 6
** Reading material - 7

* How to read this book - 8
** Conventions used in this book - 9

* Part I: Concepts - 10
* 1 Event-driven architecture - 11
** 1.1 Introduction - 12
*** 1.1.1 What problems does it solve? - 13
*** 1.1.2 When to use it? When not? - 15

** 1.2 Microservices architecture - 17
*** 1.2.1 Scalability - 18
*** 1.2.2 Fault tolerance - 18
*** 1.2.3 Observability - 19
*** 1.2.4 Versatility - 19

** 1.3 CQRS/ES - 20
*** 1.3.1 Commands - 21
*** 1.3.2 Queries - 22
*** 1.3.3 Reads & writes - 23
*** 1.3.4 When to use it? When not? - 23
*** 1.3.5 Frameworks - 24

** 1.4 Summary - 26

* 2 Distributed systems - 27
** 2.1 Overview - 28
*** 2.1.1 Identifying points of failure - 28
*** 2.1.2 Consistency vs availability - 31

** 2.2 Idempotence - 33
*** 2.2.1 Deduplication - 33

** 2.3 Atomicity - 36
*** 2.3.1 Distributed transactions - 36
*** 2.3.2 Change data capture - 37
*** 2.3.3 Distributed locks - 40

** 2.4 Summary - 42

* 3 Stateless vs. Stateful - 43
** 3.1 Stateless services, stateful brokers - 44
*** 3.1.1 Stateful services - 44
*** 3.1.2 Application clustering - 46

** 3.2 Message-driven architecture - 47
*** 3.2.1 Delivery guarantees - 47
*** 3.2.2 Apache Kafka - 48
*** 3.2.3 Apache Pulsar - 48
*** 3.2.4 What should I use? - 53

** 3.3 State snapshots - 56
*** 3.3.1 Retention policy - 56

** 3.4 Schema evolution - 58
*** 3.4.1 Schema compatibility - 58
*** 3.4.2 Versioning strategies - 60
*** 3.4.3 Schema registry - 62

** 3.5 Summary - 63

* Part II: Coding - 64
* 4 Functional programming in Scala 3 - 65
** 4.1 Domain modeling - 66
*** 4.1.1 Typeclass derivation - 66
*** 4.1.2 Newtypes - 68
*** 4.1.3 Refinement types - 72
*** 4.1.4 Orphan instances - 75

** 4.2 Typeclasses - 77
** 4.3 HTTP routes - 78
** 4.4 Effectful context - 79
** 4.5 Dependent types - 83
** 4.6 Summary - 85

* 5 Effectful streams - 86
** 5.1 Finite state machines - 87
** 5.2 Resources and lifecycle - 90
** 5.3 Data pipelines - 92
*** 5.3.1 Real-time - 92
*** 5.3.2 Batching - 93
*** 5.3.3 Analytics - 94
*** 5.3.4 Data source - 95

** 5.4 Producer-consumer - 101
*** 5.4.1 In-memory via Queue - 101
*** 5.4.2 Distributed via Apache Pulsar - 103
*** 5.4.3 Distributed via Apache Kafka - 109

** 5.5 Summary - 114
* Part III: System - 115
* 6 Trading system (core services) - 116
** 6.1 Business requirements - 117
*** 6.1.1 Overview - 119
*** 6.1.2 Domain modeling - 120
*** 6.1.3 Shared modules - 120

** 6.2 Processor - 122
*** 6.2.1 Commands - 122
*** 6.2.2 Events - 123
*** 6.2.3 Command-event relationship - 125
*** 6.2.4 Entry point - 126
*** 6.2.5 FSM - 128
*** 6.2.6 Deep analysis - 133
*** 6.2.7 Scalability - 135
*** 6.2.8 Run - 138

** 6.3 Alerts - 139
*** 6.3.1 Datatypes - 139
*** 6.3.2 Event-alert relationship - 140
*** 6.3.3 FSM - 141
*** 6.3.4 Entry point - 144
*** 6.3.5 Scalability - 147
*** 6.3.6 Run - 151

** 6.4 WebSockets - 153
*** 6.4.1 Datatypes - 153
*** 6.4.2 HTTP routes - 154
*** 6.4.3 Events handler - 155
*** 6.4.4 Unit tests - 159
*** 6.4.5 Entry point - 161
*** 6.4.6 Run - 163
*** 6.4.7 Scalability - 164
*** 6.4.8 Addendum - 165

** 6.5 Summary - 166

* 7 Trading system (alt services) - 167
** 7.1 Snapshots - 169
*** 7.1.1 Scalability - 169
*** 7.1.2 Entry point - 171
*** 7.1.3 FSM - 173
*** 7.1.4 Run - 177

** 7.2 Forecasts - 179
*** 7.2.1 Commands - 179
*** 7.2.2 Events - 180
*** 7.2.3 Command-event relationship - 181
*** 7.2.4 Engine - 182
*** 7.2.5 SQL store - 188
*** 7.2.6 Scalability - 198
*** 7.2.7 Entry point - 199
*** 7.2.8 Run - 201

** 7.3 Feed - 202
*** 7.3.1 Generators - 202
*** 7.3.2 Run - 204

** 7.4 Integration tests - 206
*** 7.4.1 Redis suite - 206
*** 7.4.2 SQL suite - 207

** 7.5 Summary - 209

* 8 Trading system (observability) - 210
** 8.1 Tracing - 211
*** 8.1.1 Distributed - 213
*** 8.1.2 Centralized - 222

** 8.2 Build & run - 232
*** 8.2.1 Docker compose - 233
*** 8.2.2 Continuous integration - 234
*** 8.2.3 Smoke tests - 235

** 8.3 Monitoring - 237
*** 8.3.1 Prometheus - 237
*** 8.3.2 Grafana - 238

** 8.4 Deployment - 239
*** 8.4.1 K8s cluster - 239
*** 8.4.2 Pods management - 240

** 8.5 Summary - 244

* 9 Bonus: Web App - 245
** 9.1 Entry point - 246
** 9.2 Datatypes - 247
** 9.3 View - 250
** 9.4 Subscriptions - 252
** 9.5 Updates - 253
** 9.6 Build & Run - 256
** 9.7 Summary - 257
