#+TITLE: Functional effect handling in Scala with Cats Effect
#+SUBTITLE: A peek on how functional programming experts deal with side effects
#+LINK: https://conviva.udemy.com/course/functional-effect-handling-in-scala-with-cats-effect
#+VERSION: Last updated 2022-09
#+AUTHOR: Leandro Galvan
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Course Info
** What you'll learn
   - Model and compose effectful computations in a pure manner.
   - Design an error handling strategy taking side-effects into consideration.
   - Increase concurrency and parallelism of an application with high-level methods.
   - Safely use and release resources such as connections, io streams, etc.
   - Handle complex concurrent scenarios involving shared state and thread communication with purely functional primitives.

** Description
   When you first hear about functional programming you might get the impression
   that it can only be used in toy examples or for very academic purposes. After
   all, FP is all about purity and almost every useful thing you can do in a
   program is impure: http calls, file IO, and so on.

   In this course I'm going to show you that FP is actually amazing for dealing
   with effects. By separating program description from execution you will be
   able to build computations that are easy to compose and reason about, while
   at the same time keeping all the usefulness of side-effects.

   In order to do so, we are going to use the amazing Cats Effect library, which
   provides an IO monad to model our effects, a very rich API to compose them,
   and a highly-performant runtime to execute them.

   The course is structured in many small/medium sized sections that focus on
   one specific topic. At the end of each section there is a final exercise to
   practice what you learned, and a quiz to help check your recall and
   understanding of the section.

   - By the end of the course, you will be able to:
     * Write and compose computations you want to run, before actually running
       them.

     * Design an error handling strategy for your application, taking
       side-effects into consideration.

     * Increase the parallelism and concurrency of your programs without the
       need to handle low-level details.

     * Use and compose resources that need to be released (connections, io
       streams, etc.) in an elegant manner.

     * Handle complex scenarios involving concurent shared state and thread
       communication by using purely functional primitives.

     * Hopefully, you will also have some fun along way!

** Who this course is for:
   Scala developers with some experience in functional programming

** Instructor
   *Leandro Galvan*
   Senior Software Engineer

   My name is Leandro Galvan.

   I'm a computer scientist from Rosario, Argentina and have been a software
   engineer for over a decade.

   I'm a fierce believer of constant learning, reason why I'm constantly reading
   books, blogs, taking courses, and trying new and fun stuff!

   Over the years I've grown particularly fond of sharing my knowledge with
   other people in a pragmatic and approachable way.

   My current interests are Scala and functional programming. Also Japanese and
   languages in general :).

** Requirements
   - Working knowledge of the Scala language (case classes, pattern matching,
     traits, implicits, etc.)

   - (Helpful) Knowledge of functional typeclasses such as Monads, Applicatives
     and Functors

   - (Helpful) Some experience with the Cats library

* Section 1: Introduction
** 1. Introduction
** 2. Setting up environment
** 3. How to take this course
** 4. Course files

* Section 2: Effects in Programming
** 5. Introduction
** 6. Referential transparency
** 7. Id generator
** 8. Optionality
** 9. State
** 10. Error handling
** 11. Printing to console
** 12. Writing to disk
** 13. Referentially transparent IO
** 14. Definitions and clarifications
** Quiz 1: Effects Quiz

* Section 3: The IO Monad
** Section 15: Intro
** Section 16: Basic usage
** Section 17: IOApp
** Section 18: Exercise
** Section Quiz 2: IO Monad Quiz

* Section 4: Error Handling
** 19. Intro
** 20. Setting up API example
** 21. Validating inputs with Validated
** 22. Modeling domain errors with Either
** 23. Loading accounts with a Repository
** 24. Adding business logic with a Service
** 25. Combining logic into the final Controller
** 26. Testing
** 27. Ignoring Fatal Errors
** 28. Exercise
** Quiz 3: Error Handling Quiz

* Section 5: Concurrency and Parallelism
** 29. Intro
** 30. ParMapN
** 31. ParTraverse
** 32. Race
** 33. Exercise
** Quiz 4: Concurrency and Parallelism Quiz

* Section 6: Resource Safety
** 34. Intro - Bracket
** 35. Writing to files with bracket
** 36. Intro - Resource
** 37. Copying and encrypting files with Resource
** 38. Exercise
** Quiz 5: Resource Safety Quiz

* Section 7: Asynchronous Computations
** 39. Intro
** 40. Transforming a Future by blocking
** 41. Avoiding blocking with async_
** 42. Using fromFuture for conciseness
** 43. Running on different thread pools with evalOn
** 44. Exercise
** Quiz 6: Asynchronous Computations Quiz

* Section 8: Memoization
** 45. Intro
** 46. Setting up templates example
** 47. Loading templates eagerly
** 48. Loading templates on error only
** 49. Memoizing templates
** 50. Exercise
** Quiz 7: Memoization Quiz

* Section 9: Time
** 51. Intro
** 52. Handling token expirations with realTime
** 53. Measuring how long computations run with monotonic
** 54. Exercise
** Quiz 8: Time Quiz

* Section 10: Concurrent Shared State Part I - Refs
** 55. Intro
** 56. Loading customers
** 57. Storing the logs in a Ref
** 58. Using one Ref per customer
** 59. Exercise
** Quiz 9: Refs Quiz

* Section 11: Concurrent Shared State Part II - Deferred
** 60. Intro
** 61. Showing items in a GUI
** 62. Adding parallelism with parMapN
** 63. Communicating processes with Deferred
** 64. Adding error handling
** 65. Exercise
** Quiz 10: Deferred Quiz

* Section 12: Queue
** 66. Intro
** 67. Processing events with queues
** 68. Exercise
** Quiz 11: Queue Quiz

* Section 13: Thread Pools
** 69. Types of Thread Pools
** 70. Work stealing pools
** 71. Cached Unbounded Pools
** 72. Execution contexts
** 73. Choosing the correct thread pool
** 74. Using compute and blocking pools
** 75. Exercise
** Quiz 12: Thread Pools Quiz

* Section 14: Tagless final
** 76. Intro - Typeclasses in cats effect
** 77. Intro - Parallel
** 78. Intro - Tagless final
** 79. Setting up example
** 80. Convert an IO application into a Tagless Final application
** 81. Exercise
** Quiz 13: Tagless Final Quiz
