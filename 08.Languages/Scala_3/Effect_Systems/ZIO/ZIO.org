#+TITLE: ZIO 1.x
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Overview
** Summary
   ZIO is a library for /asynchronous/ and /concurrent/ programming that is based
   on /pure functional programming/.

   - At the core of ZIO is ~ZIO~, a powerful /effect type/ inspired by /Haskell's
     IO monad/. This data type lets you solve complex problems with
     * simple,
     * type-safe,
     * testable, and
     * composable
     code.

*** ~ZIO~
    - The ~ZIO~ data type is the *ONLY* /effect type/ in ZIO. However, there are
      a family of /type aliases/ and /companion objects/ that simplify common
      cases:
      * ~UIO[A]~:
        This is a type alias for ~ZIO[Any, Nothing, A]~,
        which represents an effect that
        + has _NO requirements_, and
        + _CANNOT fail_,
        + BUT can _succeed_ with an ~A~.

      * ~URIO[R, A]~:
        This is a type alias for ~ZIO[R, Nothing, A]~,
        which represents an effect that
        + requires an ~R~, and
        + _CANNOT fail_,
        + BUT can _succeed_ with an ~A~.

      * ~Task[A]~:
        This is a type alias for ~ZIO[Any, Throwable, A]~,
        which represents an effect that
        + has _NO requirements_, and
        + may _fail_ with a ~Throwable~ value, or
        + _succeed_ with an ~A~.

      * ~RIO[R, A]~:
        This is a type alias for ~ZIO[R, Throwable, A]~,
        which represents an effect that
        + requires an ~R~, and
        + may _fail_ with a ~Throwable~ value, or
        + _succeed_ with an ~A~.

      * ~IO[E, A]~:
        This is a type alias for ~ZIO[Any, E, A]~,
        which represents an effect that
        + has _NO requirements_, and
        + may _fail_ with an ~E~, or
        + _succeed_ with an ~A~.

*** Type Aliases
*** Next Steps

** Creating Effects
*** From Success Values
*** From Failure Values
*** From Scala Values
**** Option
**** Either
**** Try
**** Function
**** Future

*** From Side-Effects
**** Synchronous Side-Effects
**** Asynchronous Side-Effects
    
*** Blocking Synchronous Side-Effects
*** Next Steps
     
** Basic Operations
*** Mapping
*** Chaining
*** For Comprehensions
*** Zipping
*** Next Step
    
** Handling Errors
*** Either
*** Catching All Errors
*** Catching Some Errors
*** Fallback
*** Folding
*** Retrying
*** Next Steps
    
** Handling Resources
*** Finalizing
*** Bracket
*** Next Steps
    
** Basic Concurrency
*** Fibers
**** The Fiber Data Type
**** Forking Effects
**** Joining Fibers
**** Awaiting Fibers
**** Interrupting Fibers
**** Composing Fibers
   
*** Parallelism
*** Racing
*** Timeout
*** Next Steps
    
** Testing Effects
*** Environments
**** Providing Environments
   
*** Environmental Effects
**** Define the Service
**** Provide Helpers
**** Use the Service
**** Implement Live Service
**** Run the Database Effect
**** Implement Test Service
**** Test Database Code

*** Next Steps
    
** Running Effects
*** App
*** Default Runtime
*** Custom Runtime
*** Error Reporting
*** Next Steps
    
** Background
*** Programs As Values
*** Next Steps
    
** Performance
** Platforms
*** JVM
*** Scala.js
*** Scala Native

* Data Types
** Overview
*** Introduction

** Core Data Types
*** Summary
*** ZIO
*** UIO
*** URIO
*** Task
*** RIO
*** IO
*** Exit
*** Cause
*** Runtime

** Contextual Types
*** Introduction
*** Has
*** ZLayer
*** RLayer
*** ULayer
*** Layer
*** URLayer
*** TaskLayer

** Fiber Primitives
*** Summary
*** Fiber
*** FiberRef
*** Fiber.Id
*** Fiber.Status

** Concurrency Primitives
*** Introduction
*** ZRef
*** Ref
*** ZRefM
*** RefM
*** Promise
*** Queue
*** Hub
*** Semaphore

** STM
*** Introduction
*** STM
*** TArray
*** TSet
*** TMap
*** TRef
*** TPriorityQueue
*** TPromise
*** TQueue
*** TReentrantLock
*** TSemaphore

** Resource Safety
*** Introduction
*** ZManaged
*** Managed
*** TaskManaged
*** RManaged
*** UManaged
*** URManaged

** Streaming
*** Summary
*** Stream
*** Sink
*** SubscriptionRef

** Miscellaneous
*** Summary
*** Chunk
*** Schedule
*** Supervisor

* Use Cases
** Summary
** Asynchronous
** Concurrency
** Parallelism
** Retrying
** Scheduling
** Streaming
** Testing

* How to
** Overview
*** Summary

** How to
*** How to Use Test Assertions
*** How to Test effects?
*** How to Mock Services?
*** How to Handle Errors?
*** How to Access System Information?
*** How to use ZIO Macros?

** Interop
*** How to Interop with Cats Effect?
*** How to Interop with Future?
*** How to Interop with Java?
*** How to Interop with JavaScript?
*** How to Interop with Monix?
*** How to Interop with Scalaz 7.x?
*** How to Interop with Reactive Streams?
*** How to Interop with Twitter?
*** How to Interop with Guava?

** Migrate
*** How to Migrate from Monix to ZIO?
* Resources
** Overview
*** Summary

** Learning
*** Articles
*** Videos
*** Cookbooks
*** Cheat Sheets
*** Sample Projects
*** Projects using ZIO

** Ecosystem
*** Official ZIO Libraries
*** Community ZIO Libraries
*** ZIO Compatible Libraries
*** Tools for ZIO
*** Project Templates

* About
** About ZIO
** ZIO Coding Guidelines
** ZIO Contributor Guidelines
** ZIO Code of Conduct

   
* Services
** Introduction
** Console
** Clock
** Random
** Blocking
** System
