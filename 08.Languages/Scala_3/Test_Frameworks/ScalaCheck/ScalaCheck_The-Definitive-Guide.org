#+TITLE: ScalaCheck
#+SUBTITLE: The Definitive Guide
#+AUTHOR: Rickard Nilsson
#+LAST MODIFIED: 2014
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Contents - vii
* List of Listings - ix
* Acknowledgments - x
* Introduction - xi
** Book audience - xii
** Other Scala testing tools - xii
** EBook features - xiii
** Typographic conventions - xiv
** Book organization - xiv

* TODO 1 ScalaCheck: Property-based Testing - 17
** 1.1 Traditional versus property-based unit testing - 17
*** Tests versus properties - 19

** 1.2 Benefits from property-based testing - 22
- *Test coverage*
- *Specification completeness*
- *Maintenance*
- *Test readability*
- *Test case simplification*
  
** 1.3 Conclusion - 24

* TODO 2 ScalaCheck versus JUnit: A Complete Example - 25
** 2.1 The class under test - 25
** 2.2 Using JUnit - 25
** 2.3 Using ScalaCheck - 28
** 2.4 Conclusion - 35

* TODO 3 ScalaCheck Fundamentals - 37
** 3.1 The Prop and Properties classes - 37
** 3.2 Generators - 39
*** The ~Gen~ class - 40
*** Defining custom generators - 41
*** Making explicit use of generators in properties - 43
*** Adding implicit support for custom generators - 45

** 3.3 Test case simplification - 46
** 3.4 Conclusion - 47

* TODO 4 Designing Properties - 48
** 4.1 Incomplete properties - 48
** 4.2 Relation properties - 50
** 4.3 Reference implementations - 51
** 4.4 Restricting test cases - 53
** 4.5 Round-trip properties - 56
** 4.6 Constructing optimal output - 58
** 4.7 Conclusion - 60

* TODO 5 Properties in Detail - 61
** 5.1 Investigating property failures - 61
*** Labeling generated test data - 61
*** Smart equivalence checks - 63
*** Labeling properties - 64
*** Using test framework error messages - 66
*** Collecting test statistics - 67

** 5.2 ScalaCheck’s property combinators - 70
*** ~Prop.forAll~ - 70
*** ~Prop.throws~ - 71
*** ~Prop.exists~ - 72
*** Constant properties - 73
*** Property operators - 74

** 5.3 Conclusion - 74

* TODO 6 Generators in Detail - 76
** 6.1 Generator combinators - 76
*** Number generators
- ~Gen.choose~
- ~Gen.posNum~ and ~Gen.negNum~
  
*** Character generators

*** String generators

*** Constant generators
- ~Gen.const~
- ~Gen.fail~

*** Higher-order generators
- ~Gen.sequence~
- ~Gen.frequency~
- ~Gen.oneOf~

*** List generators
- ~Gen.listOf~
- ~Gen.containerOf~

*** Generator filters
**** Generator filters and property preconditions

*** ~Gen.someOf~ and ~Gen.pick~

*** ~Gen.sized~ and ~Gen.resize~
- ~Gen.lzy~

*** Recursive generators

** 6.2 Custom test case simplification - 93
** 6.3 Conclusion - 98

* TODO 7 Running ScalaCheck - 100
** 7.1 Retrieving ScalaCheck - 100
*** Standalone ScalaCheck JAR file
*** Using sbt
*** Using Maven

** 7.2 ScalaCheck’s testing workflow - 102
** 7.3 Test parameters - 103
*** Minimum number of successful tests
*** Maximum ratio between discarded and successful tests
*** Minimum and maximum data size
*** Random number generator
*** Number of worker threads
*** Test execution callback

** 7.4 Integrating ScalaCheck - 106
*** Using ScalaCheck with ScalaTest
*** Using ScalaCheck with specs2
*** Using ScalaCheck with sbt
**** Setting test parameters

*** Using ScalaCheck from the command line
**** Setting test parameters
  
*** Using ScalaCheck programmatically
**** Setting test parameters
**** Using a test callback

** 7.5 Conclusion - 120

* About the Author - 121
* Index - 122
