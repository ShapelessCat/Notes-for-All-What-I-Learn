#+TITLE: Conventional Commits
#+SUBTITLE: A specification for adding human and machine readable meaning to commit messages
#+VERSION: v1.0.0
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Summary
* TODO Examples
** Commit message with description and breaking change footer
** Commit message with ~!~ to draw attention to breaking change
** Commit message with scope and ~!~ to draw attention to breaking change
** Commit message with both ~!~ and BREAKING CHANGE footer
** Commit message with no body
** Commit message with scope
** Commit message with multi-paragraph body and multiple footers

* TODO Specification
* TODO Why Use Conventional Commits
* TODO FAQ
** How should I deal with commit messages in the initial development phase?
** Are the types in the commits title uppercase or lowercase?
** What do I do if the commits conforms to more than one of the commit types?
** Doesn't this discourage rapid development and fast iteration?
** Might Conventional Commits lead developers to limit the type of commits they make because they'll be thinking in the types provided?
** How does this relate to SemVer?
** How should I version my extensions to the Conventional Commits Specification, e.g. @jameswomack/conventional-commit-spec?
** What do I do if I accidentally use the wrong commit type?
*** When you used a type that's of the spec but not the correct type, e.g. ~fix~ instead of ~feat~
*** When you used a type not of the spec, e.g. ~feat~ instead of ~fix~
    
** Do all my contributors need to use the Conventional Commits specification?
** How does Conventional Commits handle revert commits?
