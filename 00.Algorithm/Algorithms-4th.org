#+TITLE: Algorithms
#+VERSION: 4th
#+AUTHOR: Robert Sedgewick, Kevin Wayne
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - viii
* 1 Fundamentals - 3
  - =EN=
    amenable

*** TODO Algorithms - 4
    - Algorithm :: used in computer science to describe a _finite_, _deterministic_,
                   and _effective_ problem-solving method suitable for implementation
                   as a computer program.

    - =TODO= Note

** TODO 1.1 Basic Programming Model - 8
  - =EN=
    mitigate - 缓和

** TODO 1.2 Data Abstraction - 64
*** Using abstract data types. - 65
*** Examples of abstract data types. - 74
**** Geometric objects - 76
**** Information processing - 78
**** Strings - 80
**** Input and output revisited. - 82

*** Implementing an abstract data type. - 84
**** Instance variables - 84
**** Constructors - 84
**** Instance methods - 86
**** Slope - 87
**** API, clients, and implementations. - 88

*** More ADT implementations. - 90
**** Date. - 90
**** Maintaining multiple implementations. - 90
**** Accumulator. - 92
**** Visual accumulator. - 94

*** Data-type design - 96
**** Encapsulation. - 96
**** Designing APIs. - 97
**** Algorithms and abstract data types. - 98
**** Interface inheritance. - 100
**** Implementation inheritance. - 101
**** String conversion. - 102
**** Wrapper types. - 102
**** Equality. - 102
**** Memory management. - 104
**** Immutability. - 105
**** Design by contract. - 107
**** Exceptions and errors. - 107
**** Assertions. - 107
**** Summary. - 108

** TODO 1.3 Bags, Queues, and Stacks - 120
*** APIs - 121
**** Generics - 122
***** Autoboxing - 122

**** Iterable collections - 123
**** Bags - 124
**** FIFO queues - 126
**** Pushdown stacks - 127
**** Arithmetic expression evaluation - 128

*** Implementing collections - 132
**** Fixed-capacity stack - 132
**** Generics - 134
**** Array resizing - 136
**** Loitering - 137
**** Iteration - 138

*** Linked lists - 142
**** Node record - 142
**** Building a linked list - 143
**** Insert at the beginning - 144
**** Remove from the beginning - 145
**** Insert at the end - 145
**** Insert/remove at other positions - 145
**** Traversal - 146
**** Stack implementation - 147
**** Queue implementation - 150
**** Bag implementation - 154

*** Overview - 156
**** Data structures - 156

** TODO 1.4 Analysis of Algorithms - 172
*** Scientific method - 172
*** Observations - 173
**** Example - 173
**** Stopwatch - 174
**** Analysis of experimental data - 176

*** Mathematical models - 178
**** Tilde approximations.
** TODO 1.5 Case Study: Union-Find - 216

* TODO 2 Sorting - 243
  - There are _THREE practical reasons_ for you to study /sorting algorithms/,
    even though you might just use a _system sort_:
    + *Analyzing* /sorting algorithms/
      is
      a thorough _introduction to the approach_ that we use to compare algorithm
      performance throughout the book.

    + Similar techniques are _EFFECTIVE in addressing other problems_.

    + We often use /sorting algorithms/ as a STARTING POINT to solve other
      problems.

  - More important than these PRACTICAL REASONS is that the algorithms are
    + *elegant*
    + *classic* (the techniques you will learn can be applied to other problems)
    + *effective*

  - In this chapter,
    + we consider
      1. SEVERAL classical /sorting/ methods

      2. an efficient implementation of a fundamental /data structure/ known as
         the /priority queue/.

    + we discuss
      1. the _theoretical basis_ for *comparing* sorting algorithms

      2. conclude the chapter with a _survey_ of *applications* of /sorting/ and
         /priority queues/.

  - =EN=
    diminish
    awash

** TODO 2.1 Elementary Sorts - 244
   - =EN=
     excursion - 短途旅行

   - Template for sort classes:
     #+BEGIN_SRC java
       public class Example
       {
           public static void sort(Comparable[] a)
           { /* See Algorithms 2.1, 2.2, 2.3, 2.4, 2.5, or 2.7. */
           }

           private static boolean less(Comparable<T> v, Comparable<T> w)
           {
               return v.compareTo(w) < 0;
           }

           private static void exch(Comparable[] a, int i, int j)
           {
               Comparable t = a[i];
               a[i] = a[j];
               a[j] = t;
           }

           private static void show(Comparable[] a)
           { // Print the array, on a single line.
               String repr =
                   Stream.of(a).
                       map(Comparable::toString).
                       collect(Collectors.joining(" "));

               StdOut.println(repr);
           }

           public static boolean isSorted(Comparable[] a)
           { // Test whether the array entries are in order.
               return IntStream.
                   range(0, a.length).
                   skip(1).
                   allMatch(i -> less(a[i - 1], a[i]));
           }

           public static void main(String[] args)
           { // Read strings from standard input, sort them, and print.
               String[] a = In.readStrings();
               sort(a);
               assert isSorted(a);
               show(a);
           }
       }
     #+END_SRC

     + Scala version:
       * Translation (imperative):
         #+BEGIN_SRC scala
           object SortingTemplate
           {
             def sort[T : Ordering](a: Array[T]): Unit =
             { /* See Algorithms 2.1, 2.2, 2.3, 2.4, 2.5, or 2.7. */
             }
  
             private def less[T : Ordering](v: T, w: T): Boolean =
               implicitly[Ordering[T]].compare(v, w) < 0
  
             private def exch(a: Array[T], i: Int, j: Int): Unit =
             {
               val t = a(i)
               a(i) = a(j)
               a(j) = t
             }
  
             private def show(a: Array[T]): Unit =
             { // Print the array, on a single line.
                 println("Array(" + a.mkString(", ") + ")")
             }
  
             // [T : Ordering]
             def isSortedAscending(a: Array[T]): Boolean = 
               a.indices.sliding(2) forall {
                 case Vector(a)    => true
                 case Vecoor(a, b) => less(a, b)
               }
  
             def isSorted(a: Array[T]): Boolean =
               isSortedAscending _
  
             def main(args: Array[String]): Unit =
             { // Read strings from standard input, sort them, and print.
                 val a: Array[String] = In.readStrings()
                 sort(a)
                 assert(isSorted(a))
                 show(a)
             }
           }
         #+END_SRC

       * Translation:
         #+BEGIN_SRC scala
           object SortingTemplate {
             /* See Algorithms 2.1, 2.2, 2.3, 2.4, 2.5, or 2.7. */
             def sort[T : Ordering](a: Vector[T]): Vector[T] =
               ???

             private def less[T : Ordering](v: T, w: T): Boolean =
               (v compare w) < 0

             private def exch[T](a: Vector[T], i: Int, j: Int): Vector[T] =
               a.updated(i, a(j)).updated(j, a(i))

             private def show[T](a: Vector[T]): Unit =
               println("Array(" + a.mkString(", ") + ")")

             def isSortedAscending[T](a: Vector[T]): Boolean =
               a.indices.sliding(2) forall {
                 case Vector(a)    => true
                 case Vector(a, b) => less(a, b)
               }

             def isSorted[T](a: Vector[T]): Boolean =
               isSortedAscending _

             def main(args: Array[String]): Unit = {
               val a: Vector[String] = In.readStrings()
               val sortedA = sort(a)
               assert(isSorted(sortedA))
               show(sortedA)
             }
           }
         #+END_SRC

*** TODO Rules of the game - 244
**** Certification - 246
**** Running time - 246
**** Extra memory - 246
**** Types of data - 246

*** TODO Selection sort - 248
**** Running time is insensitive to input - 248
**** Data movement is minimal - 248

*** TODO Insertion sort - 250
*** TODO Visualizing sorting algorithms - 253
*** TODO Comparing two sorting algorithms - 254
*** TODO Shellsort - 258
*** TODO Q&A - 263
*** TODO EXERCISES - 264
*** TODO CREATIVE PROBLEMS - 265
*** TODO EXPERIMENTS - 267

** TODO 2.2 Mergesort - 270
*** TODO Abstract in-place merge - 270
*** TODO Top-down mergesort - 272
*** TODO Bottom-up mergesort - 277
*** TODO The complexity of sorting - 279
*** TODO Q&A - 283
*** TODO EXERCISES - 284
*** TODO CREATIVE PROBLEMS - 285
*** TODO EXPERIMENTS - 287

** TODO 2.3 Quicksort - 288
*** TODO The basic algorithm - 288
*** TODO Performance characteristics - 293
*** TODO Algorithmic improvements - 295
*** TODO Q&A - 302
*** TODO EXERCISES - 303
*** TODO CREATIVE PROBLEMS - 305
*** TODO EXPERIMENTS - 307

** TODO 2.4 Priority Queues - 308
*** TODO API - 309
*** TODO Elementary implementations - 310
*** TODO Heap definitions - 313
*** TODO Algorithms on heaps - 315
*** TODO Heapsort - 323
*** TODO Q&A - 328
*** TODO EXERCISES - 329
*** TODO CREATIVE PROBLEMS - 331
*** TODO EXPERIMENTS - 335

** TODO 2.5 Applications - 336
*** TODO Sorting various types of data - 337
*** TODO Which sorting algorithm should I use? - 342
*** TODO Reductions - 344
*** TODO A brief survey of sorting applications - 348
*** TODO Q&A - 352
*** TODO EXERCISES - 353
*** TODO CREATIVE PROBLEMS - 355
*** TODO EXPERIMENTS - 358

* 3 Searching - 361
** 3.1 Symbol Tables - 362
** 3.2 Binary Search Trees - 396
** 3.3 Balanced Search Trees - 424
** 3.4 Hash Tables - 458
** 3.5 Applications - 486

* 4 Graphs - 515
** 4.1 Undirected Graphs - 518
** 4.2 Directed Graphs - 566
** 4.3 Minimum Spanning Trees - 604
** 4.4 Shortest Paths - 638

* 5 Strings - 695
** 5.1 String Sorts - 702
** 5.2 Tries - 730
** 5.3 Substring Search - 758
** 5.4 Regular Expressions - 788
** 5.5 Data Compression - 810

* 6 Context - 853
* Index - 933
* Algorithms - 954
* Clients - 955
