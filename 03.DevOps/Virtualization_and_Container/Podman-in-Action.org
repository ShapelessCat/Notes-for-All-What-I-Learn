#+TITLE: Podman in Action
#+VERSION: Secure, rootless containers for Kubernetes, microservices, and more
#+AUTHOR: Daniel Walsh
#+STARTUP: overview
#+STARTUP: entitiespretty


** preface - xi
** acknowledgments - xii
** about this book - xiii
** about the author - xvi
** about the cover illustration - xvii

* Part 1 Foundations - 1
** 1 Podman: A next-generation container engine - 3
*** 1.1 About all these terms - 4
*** 1.2 A brief overview of containers - 7
**** Container images: A new way to ship software - 9
**** Container images lead to microservices - 11
**** Container image format - 13
**** Container standards - 14

*** 1.3 Why use Podman when you have Docker? - 15
**** Why have only one way to run containers? - 15
**** Rootless containers - 16
**** Fork/exec model - 17
**** Podman is daemonless - 19
**** User-friendly command line - 19
**** Support for REST API - 21
**** Integration with systemd - 21
**** Pods - 22
**** Customizable registries - 25
**** Multiple transports - 25
**** Complete customizability - 25
**** User-namespace support - 26

*** 1.4 When not to use Podman - 26

** 2 Command line - 27
*** 2.1 Working with containers - 28
**** Exploring containers - 28
**** Running the containerized application - 30
**** Stopping containers - 34
**** Starting containers - 35
**** Listing containers - 36
**** Inspecting containers - 36
**** Removing containers - 37
**** exec-ing into a container - 38
**** Creating an image from a container - 39

*** 2.2 Working with container images - 41
**** Differences between a container and an image - 42
**** Listing images - 44
**** Inspecting images - 45
**** Pushing images - 46
**** podman login: Logging into a container registry - 48
**** Tagging images - 50
**** Removing images - 53
**** Pulling images - 55
**** Searching for images - 58
**** Mounting images - 59

*** 2.3 Building images - 60
**** Format of a Containerfile or Dockerfile - 61
**** Automating the building of our application - 64

** 3 Volumes - 67
*** 3.1 Using volumes with containers - 68
**** Named volumes - 70
**** Volume mount options - 72
**** podman run -mount command option - 75

** 4 Pods - 76
*** 4.1 Running pods - 76
*** 4.2 Creating a pod - 79
*** 4.3 Adding a container to a pod - 80
*** 4.4 Starting a pod - 82
*** 4.5 Stopping a pod - 83
*** 4.6 Listing pods - 84
*** 4.7 Removing pods - 84

* Part 2 Design - 87
** 5 Customization and configuration files - 89
*** 5.1 Configuration files for storage - 91
**** Storage location - 91
**** Storage drivers - 94

*** 5.2 Configuration files for registries - 96
**** registries.conf - 96

*** 5.3 Configuration files for engines - 100
*** 5.4 System configuration files - 104

** 6 Rootless containers - 106
*** 6.1 How does rootless Podman work? - 109
**** Images contain content owned by multiple user identifiers (UIDs) - 110

*** 6.2 Rootless Podman under the covers - 118
**** Pulling the image - 119
**** Creating a container - 120
**** Setting up the network 120
**** Starting the container monitor: conmon - 121
**** Launching the OCI runtime - 121
**** The containerized application runs until completion - 124

* Part 3 Advanced topics - 125
** 7 Integration with systemd - 127
*** 7.1 Running systemd within a container - 128
**** Containerized systemd requirements - 131
**** Podman container in systemd mode - 131
**** Running an Apache service within a systemd container - 132

*** 7.2 Journald for logging and events - 134
**** Log driver - 135
**** Events - 136

*** 7.3 Starting containers at boot - 137
**** Restarting containers - 137
**** Podman containers as systemdservices - 138
**** Distributing systemd unit files to manage Podman containers - 141
**** Automatically updating Podman containers - 142

*** 7.4 Running containers in notify unit files - 145
*** 7.5 Rolling back failed containers after update - 147
*** 7.6 Socket-activated Podman containers - 147

** 8 Working with Kubernetes - 151
*** 8.1 Kubernetes YAML files - 153
*** 8.2 Generating Kubernetes YAML files with Podman - 153
*** 8.3 Generating Podman pods and containers from Kubernetes YAML - 157
**** Shutting down pods and containers based on a Kubernetes YAML file - 158
**** Building images using Podman and Kubernetes YAML files - 159


*** 8.4 Running Podman within a container - 162
**** Running Podman within a Podman container - 163
**** Running Podman within a Kubernetes pod - 164
** 9 Podman as a service - 166
*** 9.1 Introducing the Podman service - 167
**** Systemd service - 168

*** 9.2 Podman-supported APIs - 171
*** 9.3 Python libraries for interacting with Podman - 173
**** Using docker-py with the Podman API - 174
**** Using podman-py with the Podman API - 175
**** Which Python library should you use? - 176

*** 9.4 Using docker-compose with the Podman service - 177
*** 9.5 podman --remote - 180
**** Local connections - 180
**** Remote connections - 182
**** Setting up SSH on the client machine - 184
**** Configuring a connection - 185

* Part 4 Container security - 187
** 10 Security container isolation - 189
*** 10.1 Read-only Linux kernel pseudo filesystems - 191
**** Unmasking the masked paths - 192
**** Masking additional paths - 193

*** 10.2 Linux capabilities - 194
**** Dropped Linux capabilities - 195
**** Dropped ~CAP_SYS_ADMIN~ - 196
**** Dropping capabilities - 197
**** Adding capabilities - 197
**** No new privileges - 198
**** Root with no capabilities is still dangerous - 198

*** 10.3 UID isolation: User namespace - 198
**** Isolating containers using the --userns=auto flag - 199
**** User-namespaced Linux capabilities - 201
**** Rootless Podman with the --userns=auto flag - 202
**** User volumes with the --userns=auto flag - 202

*** 10.4 Process isolation: PID namespace - 204
*** 10.5 Network isolation: Network namespace - 205
*** 10.6 IPC isolation: IPC namespace - 206
*** 10.7 Filesystem isolation: Mount namespace - 206
*** 10.8 Filesystem isolation: SELinux - 207
**** SELinux type enforcement - 207
**** SELinux Multi-Category Security separation - 211

*** 10.9 System call isolation seccomp - 213
*** 10.10 Virtual machine isolation - 214

** 11 Additional security considerations - 216
*** 11.1 Daemon versus the fork/exec model - 217
**** Access to the docker.sock - - 217
**** Auditing and logging - 218

*** 11.2 Podman secret handling - 220
*** 11.3 Podman image trust - 221
**** Podman image signing 224

*** 11.4 Podman image scanning - 228
**** Read-only containers - 229

*** 11.5 Security in depth - 229
**** Podman uses all security mechanisms simultaneously - 230
**** Where should you run your containers? - 230

* appendix A Podman-related container tools - 232
* appendix B OCI runtimes - 246
* appendix C Getting Podman - 254
* appendix D Contributing to Podman - 259
* appendix E Podman on macOS - 262
* appendix F Podman on Windows - 269
* index - 281
