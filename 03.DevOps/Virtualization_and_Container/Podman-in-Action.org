#+TITLE: Podman in Action
#+VERSION: Secure, rootless containers for Kubernetes, microservices, and more
#+AUTHOR: Daniel Walsh
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

** preface - xi
** acknowledgments - xii
** about this book - xiii
** about the author - xvi
** about the cover illustration - xvii

* Part 1 Foundations - 1
In part 1 of the book, I introduce you to several ways you can use Podman from
the command line.

- In chapter 2 you learn how to create and work with containers and how
  containers work with images. You also learn the difference between a container
  and an image, how to save a container into an image, and then to push the
  image to a registry, so it can be shared with other users.

- In chapter 3 I introduce the concept of a volume. Volumes are the mechanisms
  most users of your containerized applications use to store their data and keep
  it isolated from the application. The first two chapters really concentrate on
  the use of containers and images, which is very similar to the way containers
  work in Docker.

- In chapter 4 adds the concept of pods, similar to Kubernetes Pods, a feature
  Docker does not support. Pods allow you to share one or more containers within
  the same resource, namespaces, and security constraints. Pods can allow you to
  write more complex applications and manage them as a single entity.

** 1 Podman: A next-generation container engine - 3
- This chapter covers
  * What Podman is
  * The advantages of using Podman over Docker
  * Examples of using Podman

- You'll find that Podman works the same as Docker in most cases,
  _but it solves some problems inherent in Docker;_ most significantly, Podman
  offers enhanced security and the ability to run commands _with non-root
  privileges_ -- this means you can manage containers with Podman without root
  access or privileges.

  Because of Podman's design, it can run with *much better security than* Docker
  by default.

- In addition to being open source (and therefore free), Podman's commands, run
  from the command-line interface (CLI), are quite similar to Docker's.

  * This book shows how you can use Podman as a local container engine to launch
    containers on a single node, either locally or through a remote REST API.

  * You'll also learn _HOW TO_
    find,
    run, and
    build containers

    using Podman with open source tools such as _Buildah_ and _Skopeo_.

*** 1.1 About all these terms - 4
- The terminology:
  * /Container orchestrators/
    + Kubernetes
    + Docker Swarm
    + Apache Mesos

  * /Container engines/
    Primarily used for configuring containerized applications to run on a single
    local node.

    + They can be launched directly by users, administrators, and developers.
      They can also be launched out of systemd unit files at boot
      as well as
      launched by /container orchestrators/ like Kubernetes.

    + /Container engines/ used by Kubernetes to manage containers locally:
      - CRI-O
      - containerd

    + Podman is seldom used to launch containers for Kubernetes;
      therefore, Kubernetes is not generally covered in this book.
      =IMPORTANT=

    + /Buildah/ is another /container engine/, although it is only used for
      _building container images._

  * /Open Container Initiative (OCI) container runtimes/
    Configure different parts of the Linux kernel and then, finally, launch the
    containerized application.

    - The two most commonly used /container runtimes/ are /runc/ and /crun/.
      /Kata/ and /gVisor/ are other examples of /container runtimes/.

    - See appendix B to understand the _DIFFERENCES_ between the /OCI container
      runtimes/.
      =TODO=
      =TODO=
      =TODO=

- Podman :: short for /Pod Manager/.

  - pod :: a concept popularized by the Kubernetes project, is one or more
    /containers/ sharing the _same namespaces and ~cgroups~ (resource
    constraints)_.

  - =NEXT= /Pods/ are covered in greater depth in chapter 4.

  - Podman runs individual /containers/ as well as /pods/.
    * The Podman logo in figure 1.2 is a group of Selkies, the Irish concept of
      a mermaid. _Groups of Selkies_ are called /pods/.

- The Podman project describes Podman as “a daemonless container engine for
  developing, managing, and running OCI Containers on your Linux System.
  Containers can either be run as root or in rootless mode” (https://podman.io).
  Podman is often summarized with the simple line alias Docker = Podman because
  Podman does almost everything that Docker can do with the same command line as
  Docker. But as you will learn in this book, Podman can do so much more.
  Understanding Docker is not critical to understanding Podman, but it is
  helpful.

- NOTE:
  The Open Container Initiative (OCI) is a standards body with the primary goal
  of creating open industry standards regarding container formats and runtimes.
  For more information, see https://opencontainers.org.

- The Podman upstream project resides at github.com in the Containers project,
  (https://github.com/containers/podman) shown in figure 1.3, along with other
  container libraries and container management tools like Buildah and Skopeo.
  (See appendix A for a description of some of these tools.)

- Podman runs images with the newer OCI format, described in section 1.1.2, as
  well as the legacy Docker (v2 and v1) format images. Podman runs any image
  available at container registries, like docker.io and quay.io, as well as the
  hundreds of other container registries. Podman pulls these images to a Linux
  host and launches them in the same way as Docker and Kubernetes. Podman
  supports all OCI runtimes, including runc, crun, kata, and gvisord (appendix
  B), just like Docker.

- This book is intended to aid Linux administrators in understanding the
  advantages of using Podman as their primary container engine. You will learn
  how to configure your systems as securely as possible but still allow your
  users to work with containers. One of Podman’s primary use cases is running
  containerized applications on singlenode environments, such as edge devices.
  Podman and systemd allow you to manage the entire life cycle of the
  application on nodes without human intervention. Podman’s goal is running
  containers naturally on a Linux box, taking advantage of all the features of
  the Linux platform.

- NOTE Podman is available for many different Linux distributions and on
  Mac and Windows platforms. Please refer to appendix C to see how to get
  Podman on your platform.

- Application developers are also an intended audience for this book. Podman is
  a great tool for developers looking to containerize their applications in a
  secure manner. Podman allows developers to create Linux containers on all
  Linux distributions. In addition, Podman is available on the Mac and Windows
  platforms, where it can communicate with the Podman service running within a
  VM or on a Linux box available on the network. Podman in Action shows you how
  to work with containers, build container images, and then convert their
  containerized applications into either singlenode services to run on edge
  devices or into Kubernetes-based microservices.

- Podman and the container tools are open source projects with contributors from
  many different companies, universities, and organizations. Contributors come
  from all over the world. The projects are always looking to add new
  contributors to improve them; please refer to appendix D to see how you can
  join the effort. In this chapter, I first provide a brief overview of
  containers, and then I explain some key features that make Podman a great tool
  for working with containers.

*** 1.2 A brief overview of containers - 7
**** Container images: A new way to ship software - 9
**** Container images lead to microservices - 11
**** Container image format - 13
**** Container standards - 14

*** 1.3 Why use Podman when you have Docker? - 15
**** Why have only one way to run containers? - 15
**** Rootless containers - 16
**** Fork/exec model - 17
**** Podman is daemonless - 19
**** User-friendly command line - 19
**** Support for REST API - 21
**** Integration with systemd - 21
**** Pods - 22
**** Customizable registries - 25
**** Multiple transports - 25
**** Complete customizability - 25
**** User-namespace support - 26

*** 1.4 When not to use Podman - 26

** 2 Command line - 27
*** 2.1 Working with containers - 28
**** Exploring containers - 28
**** Running the containerized application - 30
**** Stopping containers - 34
**** Starting containers - 35
**** Listing containers - 36
**** Inspecting containers - 36
**** Removing containers - 37
**** exec-ing into a container - 38
**** Creating an image from a container - 39

*** 2.2 Working with container images - 41
**** Differences between a container and an image - 42
**** Listing images - 44
**** Inspecting images - 45
**** Pushing images - 46
**** podman login: Logging into a container registry - 48
**** Tagging images - 50
**** Removing images - 53
**** Pulling images - 55
**** Searching for images - 58
**** Mounting images - 59

*** 2.3 Building images - 60
**** Format of a Containerfile or Dockerfile - 61
**** Automating the building of our application - 64

** 3 Volumes - 67
*** 3.1 Using volumes with containers - 68
**** Named volumes - 70
**** Volume mount options - 72
**** podman run -mount command option - 75

** 4 Pods - 76
*** 4.1 Running pods - 76
*** 4.2 Creating a pod - 79
*** 4.3 Adding a container to a pod - 80
*** 4.4 Starting a pod - 82
*** 4.5 Stopping a pod - 83
*** 4.6 Listing pods - 84
*** 4.7 Removing pods - 84

* Part 2 Design - 87
** 5 Customization and configuration files - 89
*** 5.1 Configuration files for storage - 91
**** Storage location - 91
**** Storage drivers - 94

*** 5.2 Configuration files for registries - 96
**** registries.conf - 96

*** 5.3 Configuration files for engines - 100
*** 5.4 System configuration files - 104

** 6 Rootless containers - 106
*** 6.1 How does rootless Podman work? - 109
**** Images contain content owned by multiple user identifiers (UIDs) - 110

*** 6.2 Rootless Podman under the covers - 118
**** Pulling the image - 119
**** Creating a container - 120
**** Setting up the network 120
**** Starting the container monitor: conmon - 121
**** Launching the OCI runtime - 121
**** The containerized application runs until completion - 124

* Part 3 Advanced topics - 125
** 7 Integration with systemd - 127
*** 7.1 Running systemd within a container - 128
**** Containerized systemd requirements - 131
**** Podman container in systemd mode - 131
**** Running an Apache service within a systemd container - 132

*** 7.2 Journald for logging and events - 134
**** Log driver - 135
**** Events - 136

*** 7.3 Starting containers at boot - 137
**** Restarting containers - 137
**** Podman containers as systemdservices - 138
**** Distributing systemd unit files to manage Podman containers - 141
**** Automatically updating Podman containers - 142

*** 7.4 Running containers in notify unit files - 145
*** 7.5 Rolling back failed containers after update - 147
*** 7.6 Socket-activated Podman containers - 147

** 8 Working with Kubernetes - 151
*** 8.1 Kubernetes YAML files - 153
*** 8.2 Generating Kubernetes YAML files with Podman - 153
*** 8.3 Generating Podman pods and containers from Kubernetes YAML - 157
**** Shutting down pods and containers based on a Kubernetes YAML file - 158
**** Building images using Podman and Kubernetes YAML files - 159


*** 8.4 Running Podman within a container - 162
**** Running Podman within a Podman container - 163
**** Running Podman within a Kubernetes pod - 164
** 9 Podman as a service - 166
*** 9.1 Introducing the Podman service - 167
**** Systemd service - 168

*** 9.2 Podman-supported APIs - 171
*** 9.3 Python libraries for interacting with Podman - 173
**** Using docker-py with the Podman API - 174
**** Using podman-py with the Podman API - 175
**** Which Python library should you use? - 176

*** 9.4 Using docker-compose with the Podman service - 177
*** 9.5 podman --remote - 180
**** Local connections - 180
**** Remote connections - 182
**** Setting up SSH on the client machine - 184
**** Configuring a connection - 185

* Part 4 Container security - 187
** 10 Security container isolation - 189
*** 10.1 Read-only Linux kernel pseudo filesystems - 191
**** Unmasking the masked paths - 192
**** Masking additional paths - 193

*** 10.2 Linux capabilities - 194
**** Dropped Linux capabilities - 195
**** Dropped ~CAP_SYS_ADMIN~ - 196
**** Dropping capabilities - 197
**** Adding capabilities - 197
**** No new privileges - 198
**** Root with no capabilities is still dangerous - 198

*** 10.3 UID isolation: User namespace - 198
**** Isolating containers using the --userns=auto flag - 199
**** User-namespaced Linux capabilities - 201
**** Rootless Podman with the --userns=auto flag - 202
**** User volumes with the --userns=auto flag - 202

*** 10.4 Process isolation: PID namespace - 204
*** 10.5 Network isolation: Network namespace - 205
*** 10.6 IPC isolation: IPC namespace - 206
*** 10.7 Filesystem isolation: Mount namespace - 206
*** 10.8 Filesystem isolation: SELinux - 207
**** SELinux type enforcement - 207
**** SELinux Multi-Category Security separation - 211

*** 10.9 System call isolation seccomp - 213
*** 10.10 Virtual machine isolation - 214

** 11 Additional security considerations - 216
*** 11.1 Daemon versus the fork/exec model - 217
**** Access to the docker.sock - - 217
**** Auditing and logging - 218

*** 11.2 Podman secret handling - 220
*** 11.3 Podman image trust - 221
**** Podman image signing 224

*** 11.4 Podman image scanning - 228
**** Read-only containers - 229

*** 11.5 Security in depth - 229
**** Podman uses all security mechanisms simultaneously - 230
**** Where should you run your containers? - 230

* appendix A Podman-related container tools - 232
* appendix B OCI runtimes - 246
* appendix C Getting Podman - 254
* appendix D Contributing to Podman - 259
* appendix E Podman on macOS - 262
* appendix F Podman on Windows - 269
* index - 281
