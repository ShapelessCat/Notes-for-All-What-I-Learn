#+TITLE: GitHub Actions in Action
#+SUBTITLE: Continuous integration and delivery for DevOps
#+AUTHOR: Michael Kaufmann, Rob Bos, Marcel de Vries
#+FOREWORD BY: Scott Hanselman
#+VERSION: 2025
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

** foreword - xii
** preface - xiii
** acknowledgments - xiv
** about this book - xv
** about the authors - xviii
** about the cover illustration - xx

* TODO Part 1 Action fundamentals - 1
** TODO 1 Introduction to GitHub Actions - 3
- This chapter covers
  *	Introducing the _GitHub universe_
  *	Understanding _GitHub Actions_ and their workflows
  * Learning about the possibilities for _GitHub Actions_ *beyond CI/CD
    pipelines*
  * Understanding licenses and pricing for _GitHub_ and _GitHub Actions_

- And now, with /GitHub Actions/, developers have access to a powerful and
  flexible toolset for automating their workflows,
  FROM /continuous integration (CI)/ and /continuous deployment (CD)/
  TO custom automation tasks and beyond.

*** 1.1 An introduction to the GitHub universe - 4
- The /GitHub/ platform's capabilities have expanded into SIX broad categories:
  * Collaborative coding
  * Planning and tracking
  * Workflows and CI/CD
  * Developer productivity
  * Client applications
  * Security

- To understand the vastness of the GitHub ecosystem, one must also consider its
  various integrations:
  * Planning and tracking

  * Client applications

  * Security

  * Developer productivity

  * Workflows and CI/CD

- xxx

*** 1.2 What are GitHub Actions and workflows? - 6
- GitHub Actions is both the name of the workflow engine and the name of an
  individual, reusable, and easily sharable workflow step within GitHub. This
  can lead to confusion. Workflows are composed of YAML files that are stored in
  a specific repository location (.github/workflows). In chapter 3, you will
  gain a comprehensive understanding of GitHub Action workflows and the YAML
  syntax. Triggers initiate the workflow, and one or more jobs are included in
  the workflow. Jobs are executed on a workflow runner, which can be a machine
  or container with an installed runner service. GitHub offers runners with
  Linux, macOS, and Windows operating systems in various machine sizes, but you
  can also host your own runners. In part 2 of the book, you will learn about
  runners and the essential security measures to consider when hosting your own
  runners. Jobs execute in parallel by default, but the needs property can be
  used to chain jobs together. This enables you to fan out your workflow and run
  multiple jobs in parallel while waiting for all parallel jobs to complete
  before proceeding

- Environments in GitHub Actions provide a way to protect jobs by defining
  protection rules, such as manual approvals, wait timers, and protected
  secrets. With this, you can create visual workflows that track, for example,
  your entire release pipeline, giving you complete control over your deployment
  process. Figure 1.2 shows an example of a workflow with environments and approvals.

*** 1.3 GitHub Actions: More than CI/CD pipelines - 8
*** 1.4 Hosting and pricing for GitHub and GitHub Actions - 8
**** GitHub Enterprise Cloud - 9
**** GitHub Enterprise Server - 9
**** GitHub pricing - 10
**** GitHub Actions pricing - 10

*** 1.5 Conclusion - 12

** TODO 2 Hands-on: My first Actions workflow - 13
- This chapter covers
  * Creating a new workflow
  * Using the workflow editor
  * Using actions from the marketplace
  * Running the workflow

- BEFORE we dive into the details of the workflow and YAML syntax in chapter 3,
  it's a good idea to
  1. familiarize ourselves with the workflow editor,
  2. gain some practical experience creating a workflow, and
  3. test it out to see it in action.

*** TODO 2.1 Creating a new workflow - 14
*** TODO 2.2 Using the workflow editor - 16
*** TODO 2.3 Using actions from the marketplace - 18
*** TODO 2.4 Running the workflow - 20
*** TODO 2.5 Conclusion - 23

** TODO 3 Workflows - 24
*** 3.1 YAML - 25
**** 3.1.1 YAML basics - 25
**** 3.1.2 Data types - 25

*** 3.2 The workflow syntax - 27
*** 3.3 Events and triggers - 27
**** 3.3.1 Webhook triggers - 27
**** 3.3.2 Scheduled triggers - 28
**** 3.3.3 Manual triggers - 29

*** 3.4 Workflow jobs and steps - 33
**** 3.4.1 Workflow jobs - 33
**** 3.4.2 Workflow steps - 34
**** 3.4.3 Using GitHub actions - 35
**** 3.4.4 The matrix strategy - 36

*** 3.5 Expressions and contexts - 37
*** 3.6 Workflow commands - 39
**** 3.6.1 Writing a debug message - 40
**** 3.6.2 Creating error or warning messages - 40
**** 3.6.3 Passing an output to subsequent steps and jobs - 42
**** 3.6.4 Environment files - 42
**** 3.6.5 Job summaries - 43

*** 3.7 Secrets and variables - 45
*** 3.8 Workflow permissions - 47
*** 3.9 Authoring and debugging workflows - 48
*** 3.10 Conclusion - 50

** TODO 4 GitHub Actions - 53
*** 4.1 Types of actions - 52
**** 4.1.1 Docker container actions - 53
**** 4.1.2 JavaScript actions - 54
**** 4.1.3 Composite actions - 54

*** 4.2 Authoring actions - 55
**** 4.2.1 Getting started - 56
**** 4.2.2 Storing actions in GitHub - 56
**** 4.2.3 Compatibility with GitHub Enterprise Server - 57
**** 4.2.4 Release management - 57

*** 4.3 Hands-on lab: My first Docker container action - 58
**** 4.3.1 Using the template to create a new repository - 58
**** 4.3.2 Creating the Dockerfile for the action - 59
**** 4.3.3 Creating the action.yml file - 60
**** 4.3.4 Creating the entrypoint.sh script - 60
**** 4.3.5 Create a workflow to test the container - 60

*** 4.4 Sharing actions - 62
**** 4.4.1 Sharing actions in your organization - 62
**** 4.4.2 Sharing actions publicly - 63

*** 4.5 Advanced action development - 68
*** 4.6 Best practices - 69
*** 4.7 Conclusion - 70

* Part 2 Workflow runtime - 71
** 5 Runners - 74
*** 5.1 Targeting a runner - 73
*** 5.2 Queuing jobs - 74
*** 5.3 The runner application - 75
*** 5.4 GitHub-hosted runners - 75
*** 5.5 Hosted operating systems - 77
*** 5.6 Installed software - 78
*** 5.7 Default shells - 80
*** 5.8 Installing extra software - 80
*** 5.9 Location and hardware specifications of the hosted runners - 81
*** 5.10 Concurrent jobs - 81
*** 5.11 Larger GitHub-hosted runners - 82
*** 5.12 GitHub-hosted runners in your own Azure Virtual Network - 83
*** 5.13 Billing GitHub-hosted runners - 84
*** 5.14 Analyzing the usage of GitHub-hosted runners - 86
*** 5.15 Self-hosted runners - 88

** 6 Self-hosted runners - 90
*** 6.1 Setting up self-hosted runners - 89
**** Runner communication - 94
**** Queued jobs - 97
**** Updating self-hosted runners - 97
**** Available runners - 98
**** Downloading actions and source code - 98
**** Runner capabilities - 100
**** Selfhosted runner behind a proxy - 101
**** Usage limits of self-hosted runners - 101
**** Installing extra software - 101
**** Runner service account - 103
**** Pre- and post-job scripts - 103
**** Adding extra information to your logs - 104
**** Customizing the containers during a job - 105

*** 6.2 Security risks of self-hosted runners - 106
*** 6.3 Single-use runners - 107
**** Ephemeral runners - 108
**** Just-in-time runners - 108

*** 6.4 Disabling self-hosted runner creation - 109
*** 6.5 Autoscaling options - 110
**** Autoscaling with Actions Runner Controller - 111
**** Communication in ARC - 112
**** ARC monitoring - 112

** 7 Managing your self-hosted runners - 114
*** 7.1 Runner groups - 114
**** Assigning a runner to a runner group - 117

*** 7.2 Monitoring your runners - 118
**** What to monitor - 120
**** Monitoring available runners using GitHub Actions - 121
**** Building a custom solution - 122
**** Using a monitoring solution - 123

*** 7.3 Runner utilization and capacity needs - 124
*** 7.4 Monitoring network access - 126
**** Monitor and limit network access - 126
**** Recommended setup - 128

*** 7.5 Internal billing for action usage - 128

* Part 3 CI/CD with GitHub Actions - 131
** 8 Continuous integration - 134
*** 8.1 GloboTicket: A sample application - 133
*** 8.2 Why continuous integration? - 135
*** 8.3 Types of CI - 136
**** Using a branching strategy: GitHub Flow - 136
**** CI for integration - 137
**** CI for quality control - 138
**** CI for security testing - 138
**** CI for packaging - 138

*** 8.4 Generic CI workflow steps - 139
**** Getting the sources - 139
**** Building the sources into artifacts - 139
**** Testing the artifacts - 141
**** Test result reporting - 141
**** Using containers for jobs - 142
**** Multiple workflows vs. multiple jobs: Which to choose? - 143
**** Parallel execution of jobs - 144

*** 8.5 Preparing for deployment - 145
**** Traceability of source to artifacts - 145
**** Ensuring delivery integrity: The software bill of materials - 147
**** Versioning 148 Testing for security with container scanning - 150
**** Using GitHub package management and container registry - 150
**** Using the upload/download capability to store artifacts - 154
**** Preparing deployment artifacts - 156
**** Creating a release - 158

*** 8.6 The CI workflows for GloboTicket - 161
**** The integration CI for APIs and frontends - 161
**** CI workflows for quality control - 162
**** The CI workflow for security testing - 163
**** The CI workflows for container image creation and publishing - 167
**** Creating a release - 167

*** 8.7 Conclusion - 167

** 9 Continuous delivery - 170
*** 9.1 CD workflow steps - 169
**** Steps to deploy our GloboTicket application - 170
**** Triggering the deployment - 171
**** Getting the deployment artifacts - 171
**** Deployment - 172
**** Verifying the deployment - 173

*** 9.2 Using environments - 174
**** What is an environment? - 175
**** Manual approval - 175
**** Environment variables - 176
**** Dealing with secrets - 177

*** 9.3 Deployment strategies - 178
**** Deploying on premises - 178
**** Deploying to cloud - 178
**** OpenID Connect (OIDC) - 178
**** Using health endpoints - 182
**** Deployment vs. release - 183
**** Zero-downtime deployments - 184
**** Red–green deployments - 185
**** Ring-based deployments - 189

** 10 Security - 193
*** 10.1 Preventing pwn requests - 192
*** 10.2 Managing untrusted input - 196
*** 10.3 GitHub Actions security- 199
**** The principle of least privileged - 200
**** Referencing actions - 201

*** 10.4 Supply chain security - 203
**** Dependabot version updates for actions - 204
**** Code scanning actions - 205

** 11 Compliance - 208
*** 11.1 How to ensure traceability of work - 207
**** How to ensure commits are traceable - 208

*** 11.2 How to enforce the four-eyes principle - 211
**** Enforcing segregation of duties with CODEOWNERS file - 212
**** Showing end-to-end traceability - 212

*** 11.3 Mandatory workflows - 213
**** Summary - 215

** 12 Improving workflow performance and costs - 216
*** 12.1 Dealing with high-volume builds - 217
**** Concurrency groups - 217
**** Merge queues - 218

*** 12.2 Reducing the costs of maintaining artifacts - 219
*** 12.3 Improving performance - 220
**** Using a sparse checkout - 220
**** Adding caching 220 Detecting a cache hit and skipping the work - 223
**** Selecting other runners - 224

*** 12.4 Optimizing your jobs - 225

* index - 227
