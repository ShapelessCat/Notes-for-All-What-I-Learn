#+TITLE: Learn Windows Powershell in A Month of Lunches
#+VERSION: 3rd
#+AUTHOR: Don Jones and Jeffery D. Hicks
#+STARTUP: overview
#+STARTUP: entitiespretty

* preface - xvii
* acknowledgments - xix
* about this book - xx
* about the authors - xxii
* 1 Before you begin - 1
** 1.1 Why you can't afford to ignore PowerShell - 1
*** Life without PowerShell - 2
*** Life with PowerShell - 2

** 1.2 And now, it's just "PowerShell" - 3
** 1.3 Is this book for you? - 3
** 1.4 How to use this book - 4
*** The main chapters - 4
*** Hands-on labs - 5
*** Code samples - 5
*** Supplementary materials - 5
*** Further exploration - 5
*** Above and beyond - 5

** 1.5 Setting up your lab environment - 6
** 1.6 Installing Windows PowerShell - 7
** 1.7 Contacting us - 8
** 1.8 Being immediately effective with PowerShell - 8

* 2 Meet PowerShell - 9
** 2.1 Choose your weapon - 9
*** The console window - 11
*** The Integrated Scripting Environment - 13

** 2.2 It's typing class all over again - 15
** 2.3 Common points of confusion - 17
** 2.4 What version is this? - 17
** 2.5 Lab - 18

* 3 Using the help system - 20
** 3.1 The help system: how you discover commands - 20
** 3.2 Updatable help - 22
** 3.3 Asking for help - 23
** 3.4 Using help to find commands - 24
** 3.5 Interpreting the help - 26
*** Parameter sets and common parameters - 26
*** Optional and mandatory parameters - 28
*** Positional parameters - 28
*** Parameter values - 30
*** Finding command examples - 33

** 3.6 Accessing "about" topics - 33
** 3.7 Accessing online help - 34
** 3.8 Lab - 34
** 3.9 Lab answers - 36

* 4 Running commands - 37
** 4.1 Not scripting, but running commands - 37
** 4.2 The anatomy of a command - 38
** 4.3 The cmdlet naming convention - 39
** 4.4 Aliases: nicknames for commands - 40
** 4.5 Taking shortcuts - 42
*** Truncating parameter names - 42
*** Using parameter name aliases - 42
*** Using positional parameters - 42

** 4.6 Cheating a bit: Show-Command - 44
** 4.7 Support for external commands - 44
** 4.8 Dealing with errors - 48
** 4.9 Common points of confusion - 49
*** Typing cmdlet names - 49
*** Typing parameters - 49
    
** 4.10 Lab - 50

* 5 Working with providers - 51
** 5.1 What are providers? - 51
** 5.2 Understanding how the filesystem is organized - 53
** 5.3 Understanding how the filesystem is like other data stores - 55
** 5.4 Navigating the filesystem - 55
** 5.5 Using wildcards and literal paths - 57
** 5.6 Working with other providers - 58
** 5.7 Lab - 61
** 5.8 Further exploration - 62
** 5.9 Lab answers - 62

* 6 The pipeline: connecting commands - 63
** 6.1 Connecting one command to another: less work for you - 63
** 6.2 Exporting to a CSV or an XML file - 64
*** Exporting to CSV - 65
*** Exporting to XML - 66
*** Comparing files - 67

** 6.3 Piping to a file or a printer - 69
** 6.4 Converting to HTML - 70
** 6.5 Using cmdlets that modify the system: killing processes and stopping services - 71
** 6.6 Common points of confusion - 72
** 6.7 Lab - 74
** 6.8 Lab answers - 75

* 7 Adding commands - 76
** 7.1 How one shell can do everything - 76
** 7.2 About product-specific "management shells" - 77
** 7.3 Extensions: finding and adding snap-ins - 78
** 7.4 Extensions: finding and adding modules - 80
** 7.5 Command conflicts and removing extensions - 82
** 7.6 On non-Windows operating systems - 83
** 7.7 Playing with a new module - 83
** 7.8 Profile scripts: preloading extensions when the shell starts - 85
** 7.9 Getting modules from the internet - 86
** 7.10 Common points of confusion - 87
** 7.11 Lab - 87
** 7.12 Lab answers - 88

* 8 Objects: data by another name - 89
** 8.1 What are objects? - 89
** 8.2 Understanding why PowerShell uses objects - 90
** 8.3 Discovering objects: Get-Member - 92
** 8.4 Using object attributes, or properties - 94
** 8.5 Using object actions, or methods - 94
** 8.6 Sorting objects - 95
** 8.7 Selecting the properties you want - 96
** 8.8 Objects until the end - 97
** 8.9 Common points of confusion - 99
** 8.10 Lab - 99
** 8.11 Lab answers - 100

* 9 The pipeline, deeper - 101
** 9.1 The pipeline: enabling power with less typing - 101
** 9.2 How PowerShell passes data down the pipeline - 101
** 9.3 Plan A: pipeline input ~ByValue~ - 102
** 9.4 Plan B: pipeline input ~ByPropertyName~ - 106
** 9.5 When things don't line up: custom properties - 111
** 9.6 Parenthetical commands - 114
** 9.7 Extracting the value from a single property - 115
** 9.8 Lab - 121
** 9.9 Further exploration - 122
** 9.10 Lab answers - 122

* 10 Formatting -- and why it's done on the right - 123
** 10.1 Formatting: making what you see prettier - 123
** 10.2 Working with the default formatting - 124
** 10.3 Formatting tables - 127
** 10.4 Formatting lists - 128
** 10.5 Formatting wide lists - 129
** 10.6 Creating custom columns and list entries - 130
** 10.7 Going out: to a file, a printer, or the host - 133
** 10.8 Another out: ~GridView~'s - 133
** 10.9 Common points of confusion - 133
*** Always format right - 133
*** One type of object at a time, please - 135

** 10.10 Lab - 137
** 10.11 Further exploration - 137
** 10.12 Lab answers - 138

* 11 Filtering and comparisons - 139
** 11.1 Making the shell give you just what you need - 139
** 11.2 Filtering left - 140
** 11.3 Using comparison operators - 140
** 11.4 Filtering objects out of the pipeline - 142
** 11.5 Using the iterative command-line model - 144
** 11.6 Common points of confusion - 145
*** Filter left, please - 145
*** When ~$_~ is allowed - 146

** 11.7 Lab - 146
** 11.8 Further exploration - 147
** 11.9 Lab answers - 147

* 12 A practical interlude - 148
** 12.1 Defining the task - 148
** 12.2 Finding the commands - 148
** 12.3 Learning to use the commands - 150
** 12.4 Tips for teaching yourself - 151
** 12.5 Lab - 152
** 12.6 Lab answer - 152

* 13 Remote control: one-to-one, and one-to-many - 153
** 13.1 The idea behind remote PowerShell - 154
** 13.2 WinRM overview - 155
** 13.3 Using ~Enter-PSSession~ and ~Exit-PSSession~ for one-to-one remoting - 159
** 13.4 Using ~Invoke-Command~ for one-to-many remoting - 161
** 13.5 Differences between remote and local commands - 163
*** ~Invoke-Command~ vs. ~-computerName~ - 164
*** Local vs. remote processing - 165
*** Deserialized objects - 166

** 13.6 But wait, there's more - 167
** 13.7 Remote options - 168
** 13.8 Common points of confusion - 168
** 13.9 Lab - 169
** 13.10 Further exploration - 170
** 13.11 Lab answers - 170

* 14 Using Windows Management Instrumentation and CIM - 171
** 14.1 WMI essentials - 172
** 14.2 The bad news about WMI - 173
** 14.3 Exploring WMI - 174
** 14.4 Choose your weapon: WMI or CIM - 177
** 14.5 Using ~Get-WmiObject~ - 178
** 14.6 Using ~Get-CimInstance~ - 182
** 14.7 WMI documentation - 182
** 14.8 Common points of confusion - 182
** 14.9 Lab - 183
** 14.10 Further exploration - 184
** 14.11 Lab answers - 184

* 15 Multitasking with background jobs - 185
** 15.1 Making PowerShell do multiple things at the same time - 185
** 15.2 Synchronous vs. asynchronous - 186
** 15.3 Creating a local job - 187
** 15.4 WMI, as a job - 188
** 15.5 Remoting, as a job - 189
** 15.6 Getting job results - 189
** 15.7 Working with child jobs - 192
** 15.8 Commands for managing jobs - 194
** 15.9 Scheduled jobs - 196
** 15.10 Common points of confusion - 197
** 15.11 Lab - 198
** 15.12 Lab answers - 199

* 16 Working with many objects, one at a time - 200
** 16.1 Automation for mass management - 200
** 16.2 The preferred way: "batch" cmdlets - 201
** 16.3 The CIM/WMI way: invoking methods - 202
** 16.4 The backup plan: enumerating objects - 206
** 16.5 Common points of confusion - 211
*** Which way is the right way? - 211
*** WMI methods vs. cmdlets - 212
*** Method documentation - 213
*** ~ForEach-Object~ confusion - 213

** 16.6 Lab - 214
** 16.7 Lab answers - 214

* 17 Security alert! - 216
** 17.1 Keeping the shell secure - 216
** 17.2 Windows PowerShell security goals - 217
** 17.3 Execution policy and code signing - 218
*** Execution policy settings - 218
*** Digital code signing - 222

** 17.4 Other security measures - 225
** 17.5 Other security holes? - 225
** 17.6 Security recommendations - 226
** 17.7 Lab - 227

* 18 Variables: a place to store your stuff - 228
** 18.1 Introduction to variables - 228
** 18.2 Storing values in variables - 229
** 18.3 Using variables: fun tricks with quotes - 231
** 18.4 Storing many objects in a variable - 233
*** Working with single objects in a variable - 234
*** Working with multiple objects in a variable - 235
*** Other ways to work with multiple objects - 236
*** Unrolling properties and methods in PowerShell v3 - 237

** 18.5 More tricks with double quotes - 237
** 18.6 Declaring a variable's type - 239
** 18.7 Commands for working with variables - 241
** 18.8 Variable best practices - 242
** 18.9  Common points of confusion - 242
** 18.10 Lab - 242
** 18.11 Further exploration - 243
** 18.12 Lab answer - 243

* 19 Input and output - 244
** 19.1 Prompting for, and displaying, information - 244
** 19.2 Read-Host - 245
** 19.3 Write-Host - 248
** 19.4 Write-Output - 249
** 19.5 Other ways to write - 251
** 19.6 Lab - 252
** 19.7 Further exploration - 252
** 19.8 Lab answers - 252

* 20 Sessions: remote control with less work - 253
** 20.1 Making PowerShell remoting a bit easier - 253
** 20.2 Creating and using reusable sessions - 254
** 20.3 Using sessions with ~Enter-PSSession~ - 255
** 20.4 Using sessions with ~Invoke-Command~ - 257
** 20.5 Implicit remoting: importing a session - 258
** 20.6 Using disconnected sessions - 260
** 20.7 Lab - 261
** 20.8 Further exploration - 262
** 20.9 Lab answers - 262

* 21 You call this scripting? - 263
** 21.1 Not programming, more like batch files - 263
** 21.2 Making commands repeatable - 264
** 21.3 Parameterizing commands - 265
** 21.4 Creating a parameterized script - 267
** 21.5 Documenting your script - 268
** 21.6 One script, one pipeline - 270
** 21.7 A quick look at scope - 273
** 21.8 Lab - 274
** 21.9 Lab answer - 275

* 22 Improving your parameterized script - 276
** 22.1 Starting point - 276
** 22.2 Getting PowerShell to do the hard work - 277
** 22.3 Making parameters mandatory - 278
** 22.4 Adding parameter aliases - 280
** 22.5 Validating parameter input - 281
** 22.6 Adding the warm and fuzzies with verbose output - 282
** 22.7 Lab - 284
** 22.8 Lab answer - 284

* 23 Advanced remoting configuration - 286
** 23.1 Using other endpoints - 286
** 23.2 Creating custom endpoints - 287
*** Creating the session configuration - 288
*** Registering the session - 289

** 23.3 Enabling multihop remoting - 291
** 23.4 Digging deeper into remoting authentication - 292
*** Defaults for mutual authentication - 292
*** Mutual authentication via SSL - 293
*** Mutual authentication via TrustedHosts - 293
** 23.5 Lab - 294
** 23.6 Lab answer - 295

* 24 Using regular expressions to parse text files - 296
** 24.1 The purpose of regular expressions - 297
** 24.2 A regex syntax primer - 297
** 24.3 Using regex with -Match - 299
** 24.4 Using regex with Select-String - 299
** 24.5 Lab - 301
** 24.6 Further exploration - 301
** 24.7 Lab answers - 302

* 25 Additional random tips, tricks, and techniques - 303
** 25.1 Profiles, prompts, and colors: customizing the shell - 303
*** PowerShell profiles - 303
*** Customizing the prompt - 305
*** Tweaking colors - 306

** 25.2 Operators: ~-as~, ~-is~, ~-replace~, ~-join~, ~-split~, ~-in~, ~-contains~ - 307
*** ~-as~ and ~-is~ - 307
*** ~-replace~ - 308
*** ~-join~ and ~-split~ - 308
*** ~-contains~ and ~-in~ - 309

** 25.3 String manipulation - 310
** 25.4 Date manipulation - 311
** 25.5 Dealing with WMI dates - 312
** 25.6 Setting default parameter values - 313
** 25.7 Playing with script blocks - 315
** 25.8 More tips, tricks, and techniques - 315

* 26 Using someone else's script - 316
** 26.1 The script - 317
** 26.2 It's a line-by-line examination - 321
** 26.3 Lab - 321
** 26.4 Lab answer - 323

* 27 Never the end - 325
** 27.1 Ideas for further exploration - 325
** 27.2 "Now that I've read the book, where do I start?" - 326
** 27.3 Other resources you'll grow to love - 327

* 28 PowerShell cheat sheet - 328
** 28.1 Punctuation - 328
** 28.2 Help file - 331
** 28.3 Operators - 332
** 28.4 Custom property and column syntax - 332
** 28.5 Pipeline parameter input - 333
** 28.6 When to use ~$_~ - 334
   
* appendix
** Review labs - 335
** index - 347
