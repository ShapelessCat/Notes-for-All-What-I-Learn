#+TITLE: HOCON (Human-Optimized Config Object Notation)
#+SUBTITLE: This is an informal spec, but hopefully it's clear
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

This is an *informal* spec, but hopefully it's clear.
=from Jian= _When can we get a FORMAL spec??_?

* Goals / Background
  - The primary goal:
    * *KEEP* the semantics (tree structure; set of types; encoding/escaping) from /JSON/,

    * (*IMPROVEMENT*) BUT make it more convenient as a human-editable config file format.
      + Here are the desired features:
        - less noisy / less pedantic syntax
        - ability to *refer to another part* of the configuration (set a value to another value)
        - *import/include another configuration file* into the current file
        - a mapping to a *flat* properties list such as /Java's system properties/
        - ability to get values *FROM environment variables*
        - ability to *write COMMENTS*

      + Implementation-wise, the format should have these properties:
        - *a JSON superset*,
          that is, all valid JSON should be valid and should result in the same
          in-memory data that a JSON parser would have produced.

        - *be deterministic;* the format is flexible, but it is not heuristic.
          It should be clear what's invalid and invalid files should generate
          errors.

        - *require minimal look-ahead;*
          should be able to tokenize the file by looking at only the *next three
          characters* --
          right now, the only reason to look at three is to find "//" comments;
          otherwise you can parse looking at two.

  - /HOCON/ is *significantly harder* to _specify_ and to _parse_ than /JSON/.

    Think of it as moving the work from the person maintaining +the+
    (=FIXME=???) config file to the computer program.

* Definitions
* Syntax
** Unchanged from JSON
** Comments
** Omit root braces
** Key-value separator
** Commas
** Whitespace
** Duplicate keys and object merging
** Unquoted strings
** Multi-line strings
** Value concatenation
*** String value concatenation
*** Array and object concatenation
*** Note: Concatenation with whitespace and substitutions
*** Note: Arrays without commas or newlines
    
** Path expressions
** Paths as keys
** Substitutions
*** Self-Referential Substitutions
*** The ~+=~ field separator
*** Examples of Self-Referential Substitutions
    
** Includes
*** Include syntax
*** Include semantics: merging
*** Include semantics: substitution
*** Include semantics: missing files and required files
*** Include semantics: file formats and extensions
*** Include semantics: locating resources
    
** Conversion of numerically-indexed objects to arrays
   
* MIME Type
* API Recommendations
** Automatic type conversions
** Units format
** Duration format
** Size in bytes format
** Config object merging and file merging
** Java properties mapping
** Conventional configuration files for JVM apps
** Conventional override by system properties
** Substitution fallback to environment variables
** hyphen-separated vs. camelCase
   
* Note on Java properties similarity
* Note on Windows and case sensitivity of environment variables
