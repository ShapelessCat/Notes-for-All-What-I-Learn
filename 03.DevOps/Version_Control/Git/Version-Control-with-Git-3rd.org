#+TITLE: Version Control with Git
#+SUBTITLE: Powerful Tools and Techniques for Collaborative Software Development
#+AUTHOR: Prem Kumar Ponuthorai & Jon Loeliger
#+VERSION: 3rd, 2023
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - xi
* Part I. Thinking in Git
* 1. Introduction to Git - 3
** Git Components - 3
** Git Characteristics - 5
** The Git Command Line - 6
** Quick Introduction to Using Git - 9
*** Preparing to Work with Git - 9
*** Working with a Local Repository - 10
*** Working with a Shared Repository - 19
*** Configuration Files - 20

** Summary - 24

* 2. Foundational Concepts - 25
** Repositories - 25
*** Git Object Store - 26
*** Index - 28
*** Content-Addressable Database - 29
*** Git Tracks Content - 29
*** Pathname Versus Content - 31
*** Packfiles - 32

** Visualizing the Git Object Store - 33
** Git Internals: Concepts at Work - 36
*** Inside the .git Directory - 36
*** Blob Objects and Hashes - 38
*** Tree Object and Files - 39
*** A Note on Git’s Use of SHA1 - 41
*** Tree Hierarchies - 42
*** Commit Objects - 43
*** Tag Objects - 46

** Summary - 47

* Part II. Fundamentals of Git
* 3. Branches - 55
** Motivation for Using Branches in Git - 56
** Branching Guidelines - 56
*** Branch Names - 57
*** Dos and Don’ts in Branch Names - 57

** Managing Branches - 58
*** Working in Branches - 59
*** Creating Branches - 61
*** Listing Branch Names - 63
*** Viewing Branches and Their Commits - 63
*** Switching (Checking Out) Branches - 66
*** Merging Changes into a Different Branch - 70
*** Creating and Checking Out a New Branch - 72
*** Detached HEAD - 74
*** Deleting Branches - 76

** Summary - 78

* 4. Commits - 79
** Commits: Recorded Units of Change - 80
** Atomic Changesets - 80
** Identifying Commits - 81
*** Absolute Commit Names - 82
*** Refs and Symrefs - 83
*** Relative Commit Names - 85

** Commit History - 87
*** Viewing Old Commits - 88
*** Commit Graphs - 90
*** Commit Ranges - 96

** Summary - 101

* 5. File Management and the Index - 103
** Importance of the Index - 103
** File Classifications in Git - 105
** Using git add - 107
** Notes on Using git commit - 111
*** Using git commit --all - 111
*** Writing Commit Log Messages - 113

** Using git rm - 113
** Using git mv - 116
** A Note on Tracking Renames - 117
** The .gitignore File - 118
** Summary - 121

* 6. Merges - 123
** Merge: A Technical View - 123
** Merge Examples - 124
*** Preparing for a Merge - 124
*** Merging Two Branches - 125
*** A Merge with a Conflict - 127

** Working with Merge Conflicts - 130
*** Locating Conflicted Files - 131
*** Inspecting Conflicts - 132
*** How Git Keeps Track of Conflicts - 138
*** Finishing Up a Conflict Resolution - 140
*** Aborting or Restarting a Merge - 141

** Merge Strategies - 142
*** Degenerate Merges - 145
*** Normal Merges - 148
*** Specialty Merges - 150
*** Applying Merge Strategies - 151
*** Merge Drivers - 152

** How Git Thinks About Merges - 153
*** Merges and Git’s Object Model - 153
*** Squash Merges - 154
*** Why Not Just Merge Each Change One by One? - 155

** Summary - 156

* 7. Diffs - 157
** Forms of the git diff Command - 159
** Simple git diff Example - 163
** Understanding the git diff Output - 166
** git diff and Commit Ranges - 168
** git diff with Path Limiting - 171
** How Git Derives diffs - 173
** Summary - 174
* Part III. Intermediate Skills
* 8. Finding Commits - 177
** Using git bisect - 177
** Using git blame - 183
** Using Pickaxe - 184
** Summary - 185

* 9. Altering Commits - 187
** Philosophy of Altering Commit History - 188
** Caution About Altering History - 189
** Using git revert - 191
** Changing the HEAD Commit - 192
** Using git reset - 194
** Using git cherry-pick - 203
** reset, revert, and checkout - 205
** Rebasing Commits - 206
*** Using git rebase -i - 209
*** rebase Versus merge - 213

** Summary - 219

* 10. The Stash and the Reflog - 221
** The Stash - 221
*** Use Case: Interrupted Workflow - 222
*** Use Case: Updating Local Work in Progress with Upstream Changes - 227
*** Use Case: Converting Stashed Changes Into a Branch - 230

** The Reflog - 232
** Summary - 237

* 11. Remote Repositories - 239
** Part I: Repository Concepts - 240
*** Bare and Development Repositories - 240
*** Repository Clones - 242
*** Remotes - 243
*** Tracking Branches - 244
*** Referencing Other Repositories - 246
*** Referring to Remote Repositories - 246
*** The refspec - 248

** Part II: Example Using Remote Repositories - 251
*** Creating an Authoritative Repository - 252
*** Make Your Own Origin Remote - 253
*** Developing in Your Repository - 256
*** Pushing Your Changes - 256
*** Adding a New Developer - 258
*** Getting Repository Updates - 260

** Part III: Remote Repository Development Cycle in Pictures - 265
*** Cloning a Repository - 266
*** Alternate Histories - 267
*** Non-Fast-Forward Pushes - 268
*** Fetching the Alternate History - 269
*** Merging Histories - 270
*** Merge Conflicts - 271
*** Pushing a Merged History - 271

** Part IV: Remote Configuration - 272
*** Using git remote - 273
*** Using git config - 274
*** Using Manual Editing - 275

** Part V: Working with Tracking Branches - 275
*** Creating Tracking Branches - 276
*** Ahead and Behind - 279

** Adding and Deleting Remote Branches - 280
** Bare Repositories and git push - 282
** Summary - 283

* 12. Repository Management - 285
** Publishing Repositories - 286
*** Repositories with Controlled Access - 287
*** Repositories with Anonymous Read Access - 288
*** Repositories with Anonymous Write Access - 292

** Repository Publishing Advice - 292
** Repository Structure - 293
*** Shared Repository Structure - 294
*** Distributed Repository Structure - 294

** Living with Distributed Development - 295
*** Changing Public History - 295
*** Separate Commit and Publish Steps - 296
*** No One True History - 297

** Knowing Your Place - 298
*** Upstream and Downstream Flows - 299
*** The Maintainer and Developer Roles - 299
*** Maintainer–Developer Interaction - 300
*** Role Duality - 301

** Working with Multiple Repositories - 303
*** Your Own Workspace - 303
*** Where to Start Your Repository - 304
*** Converting to a Different Upstream Repository - 305
*** Using Multiple Upstream Repositories - 306
*** Forking Projects - 308

** Summary - 311
* Part IV. Advanced Skills
* 13. Patches - 315
** Why Use Patches? - 316
** Generating Patches - 317
** Patches and Topological Sorts - 325
** Mailing Patches - 326
** Applying Patches - 330
** Bad Patches - 337
** Patching Versus Merging - 338
** Summary - 338

* 14. Hooks - 339
** Types of Hooks - 339
** A Note on Using Hooks - 340
** Installing Hooks - 342
*** Example Hooks - 342
*** Creating Your First Hook - 344

** Available Hooks - 346
*** Commit-Related Hooks - 346
*** Patch-Related Hooks - 347
*** Push-Related Hooks - 348
*** Other Local Repository Hooks - 349

** To Hook or Not - 350
** Summary - 350

* 15. Submodules - 351
** Gitlinks - 352
** Submodules - 354
*** Why Submodules? 355
*** Working with Submodules - 355

** Submodules and Credential Reuse - 364
** Git Subtrees - 364
*** Adding a Subproject - 365
*** Pulling Subproject Updates - 367
*** Changing the Subproject from Within the Superproject - 367

** Git Submodule and Subtree Visual Comparison - 368
** Summary - 370

* 16. Advanced Manipulations - 371
** Interactive Hunk Staging - 371
** Loving git rev-list - 381
*** Date-Based Checkout - 382
*** Retrieve an Old Version of a File - 384

** Recovering a Lost Commit - 386
*** The git fsck Command - 387
*** Reconnecting a Lost Commit - 391

** Using git filter-repo - 391
*** Examples Using git filter-repo - 392

** Summary - 399
* Part V. Tips and Tricks
* 17. Tips, Tricks, and Techniques - 403
** Interactive Rebase with a Dirty Working Directory - 403
** Garbage Collection - 404
** Tips for Recovering Commits - 407
** Recovering from an Upstream Rebase - 407
** Quick Overview of Changes - 409
** Cleaning Up - 410
** Using git-grep to Search a Repository - 411
** Updating and Deleting refs - 413
** Following Files That Moved - 414
** Have You Been Here Before? - 415
** Migrating to Git - 416
*** Migrating from a Git Version Control System - 416
*** Migrating from a Non-Git Version Control System - 420
*** A Note on Working with Large Repositories - 425

** Git LFS - 426
*** Repository Before Git LFS and After Git LFS - 427
*** Installing Git LFS - 430
*** Tracking Large Objects with Git LFS - 431
*** Useful Git LFS Techniques - 434
*** Converting Existing Repositories to Use Git LFS - 436

** Summary - 438

* 18. Git and GitHub - 439
** About GitHub - 439
** Types of GitHub Accounts - 440
** GitHub in the Git Ecosystem - 444
** Hosting a Repository in GitHub - 447
*** Repository View - 450
*** Code - 453
*** Issues - 456
*** Pull Requests - 459

** The GitHub Flow - 471
** Resolving Merge Conflicts in GitHub - 474
** Development Workflows - 482
** Integrating with GitHub - 485
** Summary - 488

* A. History of Git - 489
* B. Installing Git - 497
* Index - 501
