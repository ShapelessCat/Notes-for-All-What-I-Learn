#+TITLE: Matlab - A Practical Introduction to Programming and Problem Solving
#+YEAR: 2017
#+STARTUP: overview
#+STARTUP: entitiespretty

* PREFACE - xi
* ACKNOWLEDGMENTS - xxi
* PART 1 Introduction to Programming Using MATLAB
** TODO CHAPTER 1 Introduction to MATLAB - 3
*** TODO 1.1 Getting into MATLAB - 4
    - The following commands can serve as an introduction to MATLAB and allow
      you to get help:
      + ~demo~ will bring up MATLAB Examples in the Help Browser, which has
        examples of some of the features of MATLAB
        =TODO=

      + ~help~ will explain any function; help help will explain how help works

      + ~lookfor~ searches through the help for a specific word or phrase
        (Note: this can take a _LONG_ time)
        =TODO=

      + ~doc~ will bring up a documentation page in the Help Browser
        =TODO=

    - To exit from MATLAB, either type ~quit~ or ~exit~ at the prompt.

*** TODO 1.2 The MATLAB Desktop Environment - 5
*** DONE 1.3 Variables and Assignment Statements - 6
    CLOSED: [2017-10-29 Sun 17:24]
**** 1.3.1 Initializing, Incrementing, and Decrementing - 8
**** 1.3.2 Variable Names - 8
     - ~namelengthmax~ tells the limit of identifier names, any extra characters
       are truncated.

     - Although underscore characters are valid in a name, their use can cause
       problems with some programs that interact with MATLAB, so some
       programmers use mixed case instead ( e.g., ~partWeights~ instead of
       ~part_weights~).

     - /reserved word (keyword)/ cannot be used as variable names.

     - built-in functions names can be used as variable names, but should NOT.

     - ~who~ shows variables that have been defined in this Command Window, just
       their names.

     - ~whos~ like ~who~ more info

     - ~clear~ clears out all variables so they no longer exist

     - ~clear variable1 variable2 ...~ clears out multiple variables.

     - If only calculation no assignment, the result is automatically saved into
       the ~ans~ variable.

**** 1.3.3 Types
     - floating point types: ~single~ and ~double~

     - signed integer types: ~int8~, ~int16~, ~int32~, and ~int64~

     - unsigned integer types: ~uint8~, ~uint16~, ~uint32~, and ~uint64~

     - ~char~

     - ~logical~ type values can be ~true~ or ~false~.

     - The function ~class~ can be used to check the type of any variable.

*** DONE 1.4 Numerical Expressions - 11
    CLOSED: [2017-10-29 Sun 17:50]
**** 1.4.1 The Format Command and Ellipsis - 11
     - By default (~format short~), decimal points with four decimal places will
       be displayed.

       ~format long~ display 15 decimal places.

     - ~format loose~ and ~format compact~ control the spacing between the MATLAB
       command or expression and the result.

     - /continuation operator (ellipsis)/: ~...~
       For example,
       #+BEGIN_SRC octave
         3 + 55 - 62 + 4 - 5...
                             + 22 - 1
       #+END_SRC
**** 1.4.2 Operators
     - ~\~ :: the right operand divides the left operand.
              For example: ~25/100~ is ~4~.

***** 1.4.2.1 Operator Precedence Rules

**** 1.4.3 Built-in Functions and Help
     - ~help <topics>~
       For example (the first two works in Matlab, but NOT in Octave):
       + ~help elfun~
       + ~help ops~
       + ~help sin~

     - All of the operators have a functional form.
       ~2+5~ can be written as ~plus(2, 5)~

**** 1.4.4 Constants
     - ~pi~
     - ~i~ and ~j~ are imaginary part unit of complex numbers.
     - ~inf~
     - ~NaN~

**** 1.4.5 Random Numbers
     - Call ~rand~ to generate a random number in the _open interval_ (0, 1).

     - ~rng~ is used to set the /random seed/.
       For example,
       + ~rng('shuffle')~:  uses the current date and time that are returned from
         the built-in ~clock~ function to set the seed, so the seed will always
         be different.

       + ~rng(intseed)~: An integer can also be passed to be the seed.

       + ~rng('default')~: The ~'default'~ option will set the seed to the
         default value used when MATLAB starts up.

       + ~rng~ (no argument): return the current state of the random number
         generator
         #+BEGIN_SRC octave
           >> state_rng = rng; % gets state

           >> randone = rand
           randone =
               0.1270

           >> rng(state_rng); % restores the state

           >> randtwo = rand % same as randone
           randtwo =
               0.1270
         #+END_SRC

     - The random number generator is initialized when MATLAB starts, which
       generates what is called the /global stream/ of random numbers. All of the
       random functions get their values from this stream. =TODO= =???=

     - ~rand * (high - low) + low~ generates random numbers in ~(low, high)~

     - ~randn~ is used to generate _normally distributed random real numbers_.

***** 1.4.5.1 Generating Random Integers
      - ~randi(imax)~ generates random integer numbers in ~[1, imax]~
      - ~randi(imax)~ generates random integer numbers in ~[imin, imax]~

*** TODO 1.5 Characters and Strings - 18
*** DONE 1.6 Relational Expressions - 19
    CLOSED: [2017-10-29 Sun 18:27]
    - ~relational expressions~, ~Boolean expressions~, or ~logical expressions~
      are considered the same concept in MATLAB.

    - Characters are compared using their ASCII equivalent values in the
      character encoding.

    - ~||~, ~&&~, and ~~~

    - MATLAB considers the result of any ~Boolean expression~ as a ~logical~ type
      value.
      #+BEGIN_SRC octave
        >> class(1)
        double

        >> 3 < 5
        ans =
              1

        >> class(ans)
        logical
      #+END_SRC

    - The built-in ~true~ and ~false~ are displayed as ~0~ and ~1~, respectively.
      However, they are typed ~logical~, rather than ~double~, though they can be
      used to do arithmetic operation.

    - ~==~ is the equality operator

    - ~~=~ is the inequality operator

    - The ~xor~ function. For example: ~xor(3 < 5, 'a' > 'c')~

*** TODO 1.7 Type Ranges and Type Casting - 23
*** TODO 1.8 Built-in Numerical Functions - 26
*** Summary - 28
**** Common Pitfalls - 28
**** Programming Style Guidelines - 29

*** Exercises
    1. ...
    2. ...
    3. ...
    4. ...
    5. =TODO= =???=
    6. ~format rat~ to show the result in fraction.
** TODO CHAPTER 2 Vectors and Matrices - 35
*** DONE 2.1 Vectors and Matrices - 36
    CLOSED: [2017-10-29 Sun 23:36]
**** DONE 2.1.1 Creating Row Vectors
     CLOSED: [2017-10-29 Sun 22:22]
     Syntax:
     ~v = [1 2 3 4]~ or ~v = [1, 2, 3, 4]~

***** 2.1.1.2 The Colon Operator and linspace Function
      - Colon operator
        #+BEGIN_SRC octave
          vec = 2:6
          % vec = 2 3 4 5 6
  
          nv = 1:2:9
          % nv = 1 3 5 7 9
        #+END_SRC

      - ~linspace(x, y, n)~ creates a vector with ~n~ values in the inclusive
        range of ~x~ to ~y~.
        For example, the result of ~linspace(3, 15, 5)~ is ~[3, 6, 9, 12, 15]~

        If ~n~ is ommitted, the default is 100 points.

      - ~logspace(x, y, n)~ creates a logarithmically spaced vector with ~n~ values
        in the inclusive range from ~10^x~ to ~10^y~.
        For example, the result of ~logspace(1, 4, 4)~ is ~[10, 100, 1000, 10000]~.

      - Concatenate vectors:
        #+BEGIN_SRC octave
          nv = [1, 3, 5, 7, 9]
          ls = [3, 6, 9, 12, 15]

          newvec = [nv ls]
          % newvec = 1 3 5 7 9 3 6 9 12 15
        #+END_SRC
        
***** 2.1.1.2 Referring to and Modifying Elements
      - In MATLAB, the indices start at 1.
        For example, the value of ~newvec(3)~, which is
        pronounced "newvec sub 3", is ~5~.

      - Slice: the value of ~newvec(4:6)~ is ~[7, 9, 3]~.
        It is inclusive, including the element at the second index.

      - Pick discrete elements:
        the value of ~newvec([1, 10, 5])~ (~newvec([1 10 5])~) is ~[1, 15, 9]~.

        Here the vector ~[1, 10, 5]~ is called an /index vector/.

      - Change certain element: ~b(2) = 11~. The assignment returns the result
        vector value (=From Jian= BAD idea).

      - Extend a vector by assign a value to a non-exist index.

        If there is a gap between this index and the exist last index, 0's are
        filled (=From Jian= NOT a useful feature -- inefficient and error-prone).
        #+BEGIN_SRC octave
          rv = [3, 55, 11]
          % rv = 3 55 11

          rv(4) = 2
          % rv = 3 55 11 2

          rv(6) = 13
          % rv = 3 55 11 2 0 13
        #+END_SRC

**** DONE 2.1.2 Creating Column vectors
     CLOSED: [2017-10-29 Sun 23:09]
     #+BEGIN_SRC octave
       >> c = [1; 2; 3; 4]
       % c =
       %     1
       %     2
       %     3
       %     4

       >> r = 1:3;
       >> k = r';
       % k =
       %     1
       %     2
       %     3
     #+END_SRC

     - ~;~ is used to end a row

     - ~'~ is used to do /transpose/.

**** DONE 2.1.3 creating matrix variables =IMPORTANT=
     CLOSED: [2017-10-29 Sun 23:20]
     - Syntax
       #+BEGIN_SRC octave
         mat = [4 3 1; 2 5 6];
         % mat =
         %     4 3 1
         %     2 5 6

         %% -----------
         %% Use <Enter>
         %% -----------
         newmat = [2 6 88
                   33 5 2];
       #+END_SRC

     - Create random element matrix:
       #+BEGIN_SRC octave
         %% -------------
         %% Square matrix
         %% -------------
         >> rand(2)
         % ans =
         %     0.2311  0.4860
         %     0.6068  0.8913


         %% -------------
         %% rectangular matrix
         %% -------------
         >> rand(1, 3)
         % ans =
         %      0.7621 0.4565 0.0185


         %% --------------------------
         %% Square matrix of integers
         %% --------------------------
         >> randi([5, 10], 2)
         % ans =
         %      8 10
         %      9  5


         %% --------------------------
         %% Square matrix of integers
         %% --------------------------
         >> randi([10, 30], 2, 3)
         % ans =
         %      21 10 13
         %      19 17 26
       #+END_SRC

     - Special matrices:
       #+BEGIN_SRC octave
         >> zeros(3)
         % ans =
         %       0 0 0
         %       0 0 0
         %       0 0 0

         >> ones(3)
         % ans =
         %       1 1 1
         %       1 1 1
         %       1 1 1
       #+END_SRC

***** 2.1.3.1 referring to and modifying matrix elements
      #+BEGIN_SRC octave
        >> mat = [2:4; 3:5]
        % mat =
        %       2 3 4
        %       3 4 5

        >> mat(2, 3)
        % ans =
        %    5

        >> mat(1, :)
        % ans =
        %     2 3 4

        >> mat(:, 2)
        % ans =
        %     3
        %     4
      #+END_SRC

      - /subscripted indexing/ (above)

      - If a single index is used, MATLAB /unwinds/ the matrix column by column.
        #+BEGIN_SRC octave
          >> intmat = [100 77; 2814]
          % intmat=
          %    100 77
          %     28 14

          >> intmat (1)
          % ans=
          %     100

          >> intmat (2)
          % ans=
          %     28

          >> intmat (3)
          % ans=
          %     77

          >> intmat (4)
          % ans=
          %     14
        #+END_SRC

        + This is called /linear indexing/.
          /subscripted indexing/, rather than /linear indexing/, is preferred.

        + /linear indexing/ implies the way MATLAB used to save the data in
          memory is in /column major order/, or /columnwise/.

      - Batch assignment (the assigned vector must be in correct length):
        ~mat(2, :) = 5:7~

        The only exception: when you use a scalar in the RHS, all the elements
        indexed in the LHS are assigned its value.

      - Insert a column or row:
        #+BEGIN_SRC octave
          >> mat = [2 11 4
                    5 6 7];

          %% Insert a column
          >> mat(:, 4) = [9 2]'
          % mat =
          %       2 11 4 9
          %       5  6 7 2

          %% Insert a row (ommited row are inserted 0's)
          >> mat(4, :) = 2:2:8
          % mat =
          %       2 11 4 9
          %       5  6 7 2
          %       0  0 0 0
          %       2  4 6 8
        #+END_SRC

**** TODO 2.1.4 Dimensions
     - ~length~ returns the number of elements in a vector.

       ~length~ returns either the number of rows or the number of columns,
       whichever is _LARGEST_.

     - ~size~ returns the number of rows and columns in a vector or matrix.

     - ~[r, c] = size(mat)~

     - Sometimes you may require ~zeros(size(mat))~.

     - ~numel(mat)~ returns the number of elements in ~mat~.

     - The expression ~end~ can only be used as an index.
       + For vector, it is used to index the last element.
       + For matrix, it is ued to index the last row or column. For example:
       #+BEGIN_SRC octave
         >>mat= [1 : 3; 4:6]'
         % mat =
         %       1 4
         %       2 5
         %       3 6


         >> mat (end , 1)
         % ans =
         %       3

         >> mat (2, end)
         % ans =
         %       5
       #+END_SRC

***** TODO 2.1.4.1 changing dimensions

**** TODO 2.1.5 empty vectors
**** TODO 2.1.6 three-dimensional matrices

*** 2.2 vectors and matrices as function arguments - 52
*** 2.3 scalar and array operations on vectors and matrices - 56
*** 2.4 logical vectors - 59
**** 2.4.1 relational expressions with vectors and matrices - 59
**** 2.4.2 logical built-in functions - 52

*** 2.5 matrix multiplication - 64
**** 2.5.1 matrix multiplication for vectors
*** summary - 67
**** common pitfalls - 67
**** programming style guidelines - 68
*** exercises
** todo chapter 3 introduction to matlab programming - 75
*** 3.1 algorithms - 76
*** 3.2 matlab scripts - 77
**** 3.2.1 documentation - 79

*** 3.3 input and output - 81
**** 3.3.1 input function - 81
**** 3.3.2 output statements: ~disp~ and ~fprintf~ - 83
***** 3.3.2.1 printing vectors and matrices - 87

*** 3.4 scripts with input and output - 88
*** 3.5 scripts to produce and customize simple plots - 89
**** 3.5.1 the plot function - 90
***** 3.5.1.1 customizing a plot: color, line types, marker types - 92
**** 3.5.2 simple related plot functions - 93

*** 3.6 introduction to file input/output (load and save) - 96
**** 3.6.1 writing data to a file
**** 3.6.2 appending data to a data file
**** 3.6.3 reading from a file
***** 3.6.3.1 example: load from a file and plot the data

*** 3.7 user-defined functions that return a single value - 101
**** 3.7.1 function definitions
**** 3.7.2 calling a function
**** 3.7.3 calling a user-defined function from a script
***** 3.7.3.1 simple programs

**** 3.7.4 passing multiple arguments
**** 3.7.5 functions with local variables - 109
**** 3.7.6 introduction to scope - 110

*** 3.8 commands and functions - 110
*** summary - 111
**** common pitfalls - 111
**** programming style guidelines - 111

*** exercises
** chapter 4 selection statements - 119
*** 4.1 the if statement - 119
*** 4.2 the if-else statement - 123
*** 4.3 nested if-else statements - 125
*** 4.4 the switch statement - 131
*** 4.5 the "is" functions in matlab - 134
*** summary - 137
*** common pitfalls - 137
*** programming style guidelines - 138

** chapter 5 loop statements and vectorizing code - 145
*** 5.1 the for loop - 146
*** 5.2 nested for loops - 153
*** 5.3 while loops - 160
*** 5.4 loops with vectors and matrices; vectorizing - 171
*** 5.5 timing - 181
*** summary - 183
*** common pitfalls - 183
*** programming style guidelines - 183

** chapter 6 matlab programs - 193
*** 6.1 more types of user-defined functions - 193
*** 6.2 matlab program organization - 202
*** 6.3 application: menu-driven modular program - 207
*** 6.4 variable scope - 214
*** 6.5 debugging techniques - 219
*** 6.6 live scripts, code cells, and publishing code - 225
*** summary - 228
*** common pitfalls - 228
*** programming style guidelines - 228

** chapter 7 string manipulation - 237
*** 7.1 creating string variables - 237
*** 7.2 operations on strings - 240
*** 7.3 the "is" functions for strings - 255
*** 7.4 converting between string and number types - 256
*** summary - 259
*** common pitfalls - 259
*** programming style guidelines - 259

** todo chapter 8 data structures - 267
*** 8.1 cell arrays - 268
**** 8.1.1 creating cell arrays - 264
**** 8.1.2 referring to and displaying cell array elements and attributes - 269
**** 8.1.3 storing strings in cell arrays - 272

*** 8.2 structures - 274
**** 8.2.1 creating and modifying structure variables - 274
**** 8.2.2 passing structures to functions - 277
**** 8.2.3 related structure functions - 278
**** 8.2.4 vectors of structures - 279
**** 8.2.5 nested structures - 287
**** 8.2.6 vectors of nested structures - 289

*** 8.3 advanced data structures - 291
**** 8.3.1 categorical arrays - 291
**** 8.3.2 tables - 292

*** 8.4 sorting - 293
**** 8.4.1 sorting vectors of structures - 296
**** 8.4.2 sorting strings - 299

*** 8.5 index vectors - 301
**** 8.5.1 indexing into vectors of structures - 303

*** summary - 304
*** common pitfalls - 304
*** programming style guidelines - 305
*** exercises - 305

* part 2 advanced topics for problem solving with matlab
** chapter 9 advanced file input and output- - 315
*** 9.1 using mat-files for variables - 316
*** 9.2 writing and reading spreadsheet files - 317
*** 9.3 lower-level file 1/0 functions - 319
*** summary - 333
*** common pitfalls - 333
*** programming style guidelines - 333

** chapter 10 advanced functions - 341
*** 10.1 variable numbers of arguments - 341
*** 10.2 nested functions - 348
*** 10.3 anonymous functions and function handles - 349
*** 10.4 uses of function handles - 351
*** 10.5 recursive functions - 355
*** summary - 360
*** common pitfalls - 360
*** programming style guidelines - 360

** chapter 11 introduction to object-oriented programming and graphics - 365
*** 11.1 object-oriented programming - 365
*** 11.2 using objects with graphics and plot properties - 366
*** 11.3 user-defined classes and objects - 376
*** summary - 403
*** common pitfalls - 403
*** programming style guidelines - 404

** chapter 12 advanced plotting techniques - 407
*** 12.1 plot functions and customizing plots - 408
*** 12.2 3d plots - 418
*** 12.3 core graphics objects - 424
*** 12.4 plot applications - 431
*** 12.5 saving and printing plots - 434
*** summary - 437
*** common pitfalls - 437
*** programming style guidelines - 437

** chapter 13 sights and sounds - 443
*** 13.1 image processing - 443
*** 13.2 introduction to guls - 456
*** 13.3 guide and app designer - 475
*** 13.4 sound files - 488
*** summary - 491
*** common pitfalls - 491
*** programming style guidelines - 491

** chapter 14 advanced mathematics - 503
*** 14.1 statistical functions - 504
*** 14.2 set operations - 510
*** 14.3 fitting curves to data - 514
*** 14.4 complex numbers - 518
*** 14.5 matrix solutions to systems of linear algebraic equations - 526
*** 14.6 symbolic mathematics - 538
*** 14.7 calculus: integration and differentiation - 544
*** summary - 550
*** common pitfalls - 550
*** programming style guidelines - 550

* appendix i - 557
* appendix ii - 565
* index - 567
