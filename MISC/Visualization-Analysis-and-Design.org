#+TITLE: Visualization Analysis & Design
#+AUTHOR: Tamara Munzner
#+STARTUP: overview
#+STARTUP: entitiespretty

* Chapter 7  Arrange Tables
** 7.1 The Big Picture
** 7.2 Why Arrange?
** 7.3 Arrange by Keys and Values
** 7.4 Express: Quantitative Values
** 7.5 Separate, Order, and Align: Categorical Regions
*** 7.5.1 List Alignment: One Key
*** 7.5.2 Matrix Alignment: Two Keys
*** 7.5.3 Volumetric Grid: Three Keys
*** 7.5.4 Recursive Subdivision: Multiple Keys

** 7.6 Spatial Axis Orientation
*** 7.6.1 Rectilinear Layouts
*** 7.6.2 Parallel Layouts
*** 7.6.3 Radial Layouts

** 7.7 Spatial Layout Density
*** 7.7.1 Dense
*** 7.7.2 Space-Filling

** 7.8 Further Reading

* Chapter 11 Manipulate View
  =243 ~ 261=
** 11.1  The Big Picture
   - The design choices for how to manipulate a view:
     1. to change anything about it,
     2. to select items or attributes within it, and
     3. to navigate to a different viewpoint.

   - The camera metaphor also motivates the idea that attributes
     are assigned to spatial dimensions, leading to
     1. the /slice/ idiom of _extracting a single slice from the view volume_ and
     2. the /cut/ idiom of _separating the volume into two parts_ with a plane
        and _eliminating everything on one side of it_.
     3. The /project/ idiom _reduces the number of dimensions_ using one of many
        possible transformations.

** 11.2  Why Change?
   - Datasets are often _sufficiently large and complex that_ showing everything
     _at once in a single static view_ would lead to _overwhelming_ visual
     clutter.

   - There are _FIVE_ major options (not mutually exclusive, can be combined) for
     handling complexity: =TODO=
     1. a view that changes over time is one of them.
     2. deriving new data as discussed in Chapter 3. =TODO=
     3. faceting the data by partitioning it into multiple juxtaposed views or
        superimposed layers in Chapter 12, =TODO=
     4. reducing the amount of data to show within a view in Chapter 13, and =TODO=
     5. embedding focus and context information together within a single view in
        Chapter 14. =TODO=

   - _Breakthrough_ of vis (from a paper to a computer display): the possibility
     of iteractivity. Obviously, all interactive indioms involve a view that
     changes over time.

** 11.3  Change View over Time
   - The possibilities for how the view changes can be based on any of the other
     design choices of how to construct an idiom:
     * change the encoding,
     * change the arrangement,

     * change the order: /Reordering/ (or called /sorting/), is a powerful choice
       for finding patterns in a dataset by interactively changing the attribute
       that is  order the data.
         _The power of reordering_ lies in the privileged status of spatial posi-
       tion as the highest ranked visual channel.
          Reordering data spatially allows us to invoke the pattern-finding parts
       of our visual system to _quickly check whether the new configuration con-
       veys new information_.

     * change the viewpoint,
     * change which attributes are filtered,
     * change the aggregation level,
     * and so on.

   - Example: /Animated Transitions/ (antonym: /jump cut/)
     A series of frames (d3.js is one of them) is generated to smoothly transi-
     tion from one state to another.
     * Limitation: It's most useful when the amount of change is limited, because
       people cannot track everything that occurs if many items change in
       different ways all over the frame.

   - 

** 11.4  Select Elements
   - Allowing users to select one or more elements of interest in a vis is a
     fundamental action that _supports nearly every interactive idiom_.

   - The output of a selection operation is often the input to a subsequent
     operation.
     In particular, the change choice is usually dependent on a previous select
     result.

*** 11.4.1  Selection Design Choices
    - Itâ€™s much more _rare_ for hardware to support multiple levels of proximity,
      such as /nearby/ as an _intermediate_ state between /hover/ and /distant/.
    - 
*** 11.4.2  Highlighting =TODO=
*** 11.4.3 Selection Outcomes

** 11.5  Navigate: Changing Viewpoint
*** 11.5.1  Geometric Zooming
*** 11.5.2  Semantic Zooming
*** 11.5.3  Constrained Navigation

** 11.6  Navigate: Reducing Attributes
*** 11.6.1  Slice
*** 11.6.2  Cut
*** 11.6.3  Project

** 11.7  Further Reading

* Chapter 12 Facet into Multiple Views
  =295 ~ 265=
** 12.1 The Big Picture
** 12.2 Why Facet?
** 12.3 Juxtapose and Coordinate Views
*** 12.3.1 Share Encoding: Same/Different
*** 12.3.2 Share Data: All, Subset, None
*** 12.3.3 Share Navigation: Synchronize
*** 12.3.4 Combinations
*** 12.3.5 Juxtapose Views

** 12.4 Partition into Views
*** 12.4.1 Regions, Glyphs, and Views
*** 12.4.2 List Alignments
*** 12.4.3 Matrix Alignments
*** 12.4.4 Recursive Subdivision

** 12.5 Superimpose Layers
*** 12.5.1 Visually Distinguishable Layers
*** 12.5.2 Static Layers
*** 12.5.3 Dynamic Layers

** 12.6 Further Reading

* Chapter 13 Reduce Items and Attributes

* Chapter 14 Embed: Focus+Context


- clustering !!!
- Structured & unstructured Grids
- Ray casting
- transfer functions
- direct vs indeirect visualization
- matching cubes
