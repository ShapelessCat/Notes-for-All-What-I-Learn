#+TITLE: Head First Design Patterns
#+SUBTITLE: Building Extensible & Maintainable Object-Oriented Software
#+AUTHOR: Eric Freeman & Elisabeth Robson with Kathy Sierra & Bert Bates
#+VERSION: 2nd, 2021
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Intro - xxv
** Who is this book for? - xxvi
** We know what you’re thinking. - xxvii
** And we know what your brain is thinking. - xxvii
** We think of a “Head First” reader as a learner. - xxviii
** Metacognition: thinking about thinking - xxix
** Here’s what WE did - xxx
** Here’s what YOU can do to bend your brain into submission - xxxi
** Read Me - xxxii
** Tech Reviewers - xxxiv
** Acknowledgments - xxxv

* 1 Welcome to Design Patterns: intro to Design Patterns - 1
** It started with a simple SimUDuck app - 2
** But now we need the ducks to FLY - 3
** But something went horribly wrong… - 4
** Joe thinks about inheritance… - 5
** How about an interface? - 6
** What would you do if you were Joe? - 7
** The one constant in software development - 8
** Zeroing in on the problem… - 9
** Separating what changes from what stays the same - 10
** Designing the Duck Behaviors - 11
** Implementing the Duck Behaviors - 13
** Integrating the Duck Behavior - 15
** Testing the Duck code - 18
** Setting behavior dynamically - 20
** The Big Picture on encapsulated behaviors - 22
** HAS-A can be better than IS-A - 23
** Speaking of Design Patterns… - 24
** Overheard at the local diner… - 26
** Overheard in the next cubicle… - 27
** The power of a shared pattern vocabulary - 28
** How do I use Design Patterns? - 29
** Tools for your Design Toolbox - 32

* 2 Keeping your Objects in the Know: the Observer Pattern - 37
** The Weather Monitoring application overview - 39
** Meet the Observer Pattern - 44
** Publishers + Subscribers = Observer Pattern - 45
** The Observer Pattern defined - 51
** The Power of Loose Coupling - 54
** Designing the Weather Station - 57
** Implementing the Weather Station - 58
** Power up the Weather Station - 61
** Looking for the Observer Pattern in the Wild - 65
** Coding the life-changing application - 66
** Meanwhile, back at Weather-O-Rama - 69
** Test Drive the new code - 71
** Tools for your Design Toolbox - 72
** Design Principle Challenge - 73

* 3 Decorating Objects: the Decorator Pattern - 79
** Welcome to Starbuzz Coffee - 80
** The Open-Closed Principle - 86
** Meet the Decorator Pattern - 88
** Constructing a drink order with Decorators - 89
** The Decorator Pattern defined - 91
** Decorating our Beverages - 92
** Writing the Starbuzz code - 95
** Coding beverages - 96
** Coding condiments - 97
** Serving some coffees - 98
** Real-World Decorators: Java I/O - 100
** Decorating the java.io classes - 101
** Writing your own Java I/O Decorator - 102
** Test out your new Java I/O Decorator - 103
** Tools for your Design Toolbox - 105

* 4 Baking with OO Goodness: the Factory Pattern - 109
** Identifying the aspects that vary - 112
** Encapsulating object creation - 114
** Building a simple pizza factory - 115
** The Simple Factory defined - 117
** A framework for the pizza store - 120
** Allowing the subclasses to decide - 121
** Declaring a factory method - 125
** It’s finally time to meet the Factory Method Pattern - 131
** View Creators and Products in Parallel - 132
** Factory Method Pattern defined - 134
** Looking at object dependencies - 138
** The Dependency Inversion Principle - 139
** Applying the Principle - 140
** Families of ingredients… - 145
** Building the ingredient factories - 146
** Reworking the pizzas… - 149
** Revisiting our pizza stores - 152
** What have we done? - 153
** Abstract Factory Pattern defined - 156
** Factory Method and Abstract Factory compared - 160
** Tools for your Design Toolbox - 162

* 5 One-of-a-Kind Objects: the Singleton Pattern - 169
** Dissecting the classic Singleton Pattern implementation - 173
** The Chocolate Factory - 175
** Singleton Pattern defined - 177
** Houston, we have a problem - 178
** Dealing with multithreading - 180
** Can we improve multithreading? - 181
** Meanwhile, back at the Chocolate Factory… - 183
** Tools for your Design Toolbox - 186

* 6 Encapsulating Invocation: the Command Pattern - 191
** Home Automation or Bust - 192
** Taking a look at the vendor classes - 194
** A brief introduction to the Command Pattern - 197
** From the Diner to the Command Pattern - 201
** Our first command object - 203
** Using the command object - 204
** Assigning Commands to slots - 209
** Implementing the Remote Control - 210
** Implementing the Commands - 211
** Putting the Remote Control through its paces - 212
** Time to write that documentation… - 215
** What are we doing? - 217
** Time to QA that Undo button! - 220
** Using state to implement Undo - 221
** Adding Undo to the Ceiling Fan commands - 222
** Every remote needs a Party Mode! - 225
** Using a macro command - 226
** More uses of the Command Pattern: queuing requests - 229
** More uses of the Command Pattern: logging requests - 230
** Command Pattern in the Real World - 231
** Tools for your Design Toolbox - 233

* 7 Being Adaptive: the Adapter and Facade Patterns - 237
** Adapters all around us - 238
** Object-oriented adapters - 239
** If it walks like a duck and quacks like a duck, then it must might be a duck turkey wrapped with a duck adapter… - 240
** Test drive the adapter - 242
** The Adapter Pattern explained - 243
** Adapter Pattern defined - 245
** Object and class adapters - 246
** Real-world adapters - 250
** Adapting an Enumeration to an Iterator - 251
** Home Sweet Home Theater - 257
** Watching a movie (the hard way) - 258
** Lights, Camera, Facade! - 260
** Constructing your home theater facade - 263
** Implementing the simplified interface - 264
** Time to watch a movie (the easy way) - 265
** Facade Pattern defined - 266
** The Principle of Least Knowledge - 267
** How NOT to Win Friends and Influence Objects - 268
** The Facade Pattern and the Principle of Least Knowledge - 271
** Tools for your Design Toolbox - 272

* 8 Encapsulating Algorithms: theTemplate Method Pattern - 277
** It’s time for some more caffeine - 278
** Whipping up some coffee and tea classes (in Java) - 279
** Let’s abstract that Coffee and Tea - 282
** Taking the design further… - 283
** Abstracting prepareRecipe() - 284
** What have we done? - 287
** Meet the Template Method - 288
** What did the Template Method get us? - 290
** Template Method Pattern defined - 291
** Hooked on Template Method… - 294
** Using the hook - 295
** The Hollywood Principle and Template Method - 299
** Template Methods in the Wild - 301
** Sorting with Template Method - 302
** We’ve got some ducks to sort… - 303
** What is compareTo()? - 303
** Comparing Ducks and Ducks - 304
** Let’s sort some Ducks - 305
** The making of the sorting duck machine - 306
** Swingin’ with Frames - 308
** Custom Lists with AbstractList - 309
** Tools for your Design Toolbox - 313

* 9 Well-Managed Collections: the Iterator and Composite Patterns - 317
** Breaking News: Objectville Diner and Objectville Pancake House Merge - 318
** Check out the Menu Items - 319
** Implementing the spec: our first attempt - 323
** Can we encapsulate the iteration? - 325
** Meet the Iterator Pattern - 327
** Adding an Iterator to DinerMenu - 328
** Reworking the DinerMenu with Iterator - 329
** Fixing up the Waitress code - 330
** Testing our code - 331
** Reviewing our current design… - 333
** Cleaning things up with java.util.Iterator - 335
** Iterator Pattern defined - 338
** The Iterator Pattern Structure - 339
** The Single Responsibility Principle - 340
** Meet Java’s Iterable interface - 343
** Java’s enhanced for loop - 344
** Taking a look at the Café Menu - 347
** Iterators and Collections - 353
** Is the Waitress ready for prime time? - 355
** The Composite Pattern defined - 360
** Designing Menus with Composite - 363
** Implementing MenuComponent - 364
** Implementing the MenuItem - 365
** Implementing the Composite Menu - 366
** Now for the test drive… - 369
** Tools for your Design Toolbox - 376

* 10 The State of Things: the State Pattern - 381
** Java Breakers - 382
** State machines 101 - 384
** Writing the code - 386
** In-house testing - 388
** You knew it was coming…a change request! - 390
** The messy STATE of things… - 392
** The new design - 394
** Defining the State interfaces and classes - 395
** Reworking the Gumball Machine - 398
** Now, let’s look at the complete GumballMachine class… - 399
** Implementing more states - 400
** The State Pattern defined - 406
** We still need to finish the Gumball 1 in 10 game - 409
** Finishing the game - 410
** Demo for the CEO of Mighty Gumball, Inc. - 411
** Sanity check… - 413
** We almost forgot! - 416
** Tools for your Design Toolbox - 419

* 11 Controlling Object Access: the Proxy Pattern - 425
** Coding the Monitor - 427
** Testing the Monitor - 428
** Remote methods 101 - 433
** Getting the GumballMachine ready to be a remote service - 446
** Registering with the RMI registry… - 448
** The Proxy Pattern defined - 455
** Get ready for the Virtual Proxy - 457
** Designing the Album Cover Virtual Proxy - 459
** Writing the Image Proxy - 460
** Using the Java API’s Proxy to create a protection proxy - 469
** Geeky Matchmaking in Objectville - 470
** The Person implementation - 471
** Five-minute drama: protecting subjects - 473
** Big Picture: creating a Dynamic Proxy for the Person - 474
** The Proxy Zoo - 482
** Tools for your Design Toolbox - 485
** The code for the Album Cover Viewer - 489

* 12 Patterns of Patterns: compound patterns - 493
** Working together - 494
** Duck reunion - 495
** What did we do? - 517
** A bird’s duck’s-eye view: the class diagram - 518
** The King of Compound Patterns - 520
** Meet Model-View-Controller - 523
** A closer look… - 524
** Understanding MVC as a set of Patterns - 526
** Using MVC to control the beat… - 528
** Building the pieces - 531
** Now let’s have a look at the concrete BeatModel class - 532
** The View - 533
** Implementing the View - 534
** Now for the Controller - 536
** Putting it all together… - 538
** Exploring Strategy - 539
** Adapting the Model - 540
** And now for a test run… - 542
** Tools for your Design Toolbox - 545

* 13 Patterns in the Real World: better living with patterns - 563
** Design Pattern defined - 565
** Looking more closely at the Design Pattern definition - 567
** May the force be with you - 568
** So you wanna be a Design Patterns writer - 573
** Organizing Design Patterns - 575
** Thinking in Patterns - 580
** Your Mind on Patterns - 583
** Don’t forget the power of the shared vocabulary - 585
** Cruisin’ Objectville with the Gang of Four - 587
** Your journey has just begun… - 588
** The Patterns Zoo - 590
** Annihilating evil with Anti-Patterns - 592
** Tools for your Design Toolbox - 594
** Leaving Objectville - 595

* 14 Appendix: Leftover Patterns - 597
** Bridge - 598
** Builder - 600
** Chain of Responsibility - 602
** Flyweight - 604
** Interpreter - 606
** Mediator - 608
** Memento - 610
** Prototype - 612
** Visitor - 614
