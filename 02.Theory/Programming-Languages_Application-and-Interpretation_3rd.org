#+TITLE: Programming Languages: Application and Interpretation
#+VERSION: v3.2.2, 2023-02-26
#+AUTHOR: Shriram Krishnamurthi (Brown University)
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface
** Why Study Programming Languages? The Target Audience
** Why a Third Edition
** Structuring Our Study
** Equipment for Learning
** The Language(s) of the Book

* Acknowledgments Readers
** Everyone Else

* ••••• Learning SMoL •••••
* Teach Yourself SMoL
* ••••• Evaluation •••••
* Evaluation on Paper
** Evaluators
** Terminology
** Simulating an Interpreter by Hand Substitution

* Representing Arithmetic
** Representing Programs
** Abstract Syntax
** Representing Abstract Syntax

* Evaluating Arithmetic
** Defining the Evaluator
** Testing the Evaluator
** Some Subtler Tests
** Conclusion

* Parsing: From Source to ASTs The Problem
** S-Expressions
** Primus Inter Parsers

* Evaluating Conditionals
** Extending the AST
** Extending the Calculator
** The Design Space of Conditionals
** Using Truthy-Falsy Values
** Implementing Conditionals
** Adding Booleans
** The Value Datatype
** Updating the Evaluator

* Evaluating Local Binding
** A Syntax for Local Binding
** The Meaning of Local Binding
** Static Scoping
** An Evaluator for Local Binding
** Caching Substitution

* Evaluating Functions
** Functions in the Language
** Extending the Representation
** Evaluating Functions
** Extending Values
** Stepping Back
** Extending Tests
** Return to Static Scope
** A Subtle Test

* ••••• Syntactic Sugar •••••
* How SMoL Becomes Large
** Redundancy in Languages
** Desugaring
** Macros By Example
** A New Conditional
** Local Binding
** Binding More Locals
** Multi-Armed Conditionals

* More on Macros
** A Definitional Convenience
** Name Capture
** A Truthy/Falsy Idiom
** A Macro Definition Peril
** Back to Hygiene Generalizing Macros

* ••••• Objects •••••
* A Standard Model of Objects
** What is an Object?
** The “Object” Pattern Constructors
** The “Class” Pattern
** State
** Private Members
** A Refined “Class” Pattern
** Static Members
** A Re-Refined “Class” Pattern
** Objects with Self Reference
*** Self-Reference Using Mutation
*** Self-Reference Without Mutation
** Dynamic Dispatch

* What Else do Objects Have?
** Member Name Design Space
** What (Goes In) Else?
** A Java Excursion
** Extending Classes
** Extending Prototypes
** Multiple Inheritance
** Class Extensions: Mixins and Traits

* ••••• Types •••••
* Introduction to Types
** A Standard Model of Types
** A Concise Notation

* Growing Types: Division, Conditionals
** Handling Division
** Another Perspective on Types
** From Axioms and Rules to Judgments
** Judgments and Errors
** Typing Conditionals
** Where Types Diverge from Evaluation

* Growing Types: Typing Functions
** Typing Function Applications
** Typing Function Definition
** Typing Variables
** Back to Typing Function Definitions
** More Divergence Between Types and Evaluation
** Assume-Guarantee Reasoning
** Recursion and Infinite Loops
** Typing Recursion

* Safety and Soundness
** Revisiting the Basic Calculator
** Making Memory Explicit (Unsafely)
** Recovering Safety
** What Price Safety?
** Soundness
** Generic Printing
** The Representation of Numbers

* Type Inference
** Unannotated Programs and Types
** Imagining a Solution
** Unique Variable Names
** More Informal Examples
** Algorithmic Details

* Algebraic Datatypes
** Generated Bindings
** Static Type Safety
** Pattern-Matching and Type-Checking
** Algebraic Datatypes and Space

* Union Types and Retrofitted Types
** You Get a Type! And You Get a Type! And You Get a Type!
** Union Types
** If-Splitting
** Introducing Union Types
** How Many Unions?
** Union Types and Space
** If-Splitting with Control Flow
** If-Splitting with Control Flow and State
** The Price of Retrofitting
** Types and Tags

* Nominal Types, Structural Types, and Subtyping
** Algebraic Datatypes Encoded With Nominal Types
** Nominal Types
** Structural Types
** Nominal Subtyping Subtyping

* Gradual Typing
** From Scripts to Programs
** Micro Versus Macro
** Typed Racket at Work

* ••••• Non-Standard Models •••••
* Relations
** A Language Genealogy Encoding Type Rules

* Generators
** A Canonical Example
** Translating to SMoL
** A Richer Example

* Laziness
** Evaluation Strategies
** Why Lazy Evaluation
** Strictness Points
** Evaluating Without Substitution
** Laziness Via Closures: Beyond Numbers
** Tracing Laziness
** Laziness and Side-Effects
** Caching Results
** Space Consumption
** Laziness in Eagerness

* Control on the Web
** Server-Side Programming
*** Recording Contexts
*** Simulating in the Stacker
** Client-Side Termination
** Abstracting the Problem
*** Using Closures
*** Using Racket

** Yielding on a Web Server
** Interaction with State
** Web Interactions
** Returning to the Counters
** Mapping between Web and Programming Language Features
** Readings

* Reactivity
** GUIs through Callbacks
** Reactivity
** How Evaluation Works
*** Dataflow Graphs
*** Rewriting Application
*** Non-Linear Graphs
*** Avoiding Glitches

** Other Time-Varying Values
** Even More Time-Varying Values
** Returning to Our Timer
*** Elapsed Time Without Resetting
*** Adding Resets

* ••••• What’s Next? •••••
