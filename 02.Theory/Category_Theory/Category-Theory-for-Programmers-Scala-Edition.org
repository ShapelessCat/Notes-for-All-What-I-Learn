#+TITLE: Category Theory for Programmers
#+SUBTITLE: Scala Edition - Contains code snippets in Haskell and Scala
#+AUTHOR: Bartosz Milewski, (compiled and edited by) Igal Tabachnik
#+VERSION: v1.3.0-0-g6bb0bc0 (August 12, 2019) ---> v1.4.0-rc1-0-g0e79320 (February 14, 2020)
#+STARTUP: overview
#+STARTUP: entitiespretty

* DONE A note from the editor - ix
  CLOSED: [2019-05-30 Thu 11:33]
  - This version of book use LaTeX macro to load different code snippets from
    external files, while _leaving the original text intact_ -- this means
    *when you see "in Haskell" in the text, you should mentally append the words
    "and Scala".*

  - The Scala code is provided by Typelevel.

  - Some Scala snippets make use the *Kind Projector* _compiler plugin_, to support
    nicer syntax for /partially-applied types/.
    + footnote 2: https://github.com/non/kind-projector

* TODO Preface - xi
* TODO Part One - 3
** DONE 1 Category: The Essence of Composition - 3
   CLOSED: [2019-04-05 Fri 13:43]
   - category :: /objects/ and /arrows/ that _go between them_.

   - The essense of a /category/ is *composition*.
     The essence of *composition* is a /category/.

   - *Arrows compose*
     For instance, if you have
     + an /arrow/ from /object/ _A_ to object _B_
       and
     + another /arrow/ from /object/ _B_ to /object/ _C_

     then there *must be* an /arrow/ ‚Äî their /composition/ ‚Äî that goes from _A_
     to _C_.

*** DONE 1.1 Arrows as Functions - 3
    CLOSED: [2019-05-31 Fri 13:52]
    - /arrows/ are also called /morphisms/.

    - Read (Haskell code) ~g . f~ (or ~g ‚ó¶ f~) as "g after f".

    - Composition:
      + Haskell code
        #+begin_src haskell
          f :: A -> B
          g :: B -> C
          g . f
        #+end_src

      + Scala code
        #+begin_src scala
          val f: A => B
          val g: B => C
          g compose f
        #+end_src

*** DONE 1.2 Properties of Composition - 5
    CLOSED: [2019-05-31 Fri 14:06]
    - There are two extremely important properties that the composition in any category
      must satisfy.
      1. /Composition/ is *associative*.
         + Haskell: ~h . (g . f)~ \equiv{} ~(h . g) . f~ \equiv{} ~h . g. f~

         + Scala: ~h compose (g compose f)~ \equiv{} ~(h compose g) compose f~ \equiv{} ~h compose g compose f~

      2. For every /object/ _A_ there is an /arrow/ which is a *unit of composition*.
         This /arrow/ loops from the /object/ to itself.
         + Haskell
           * ~f . id~ \equiv{} ~f~
           * ~id . f~ \equiv{} ~f~

         + Scala:
           * ~f compose identity[A]~ \equiv{} ~f~
           * ~identity[B] _ compose f~ \equiv{} ~f~

    - Neutral values like _zero_ or _id_ are extremely useful when working with
      /symbolic variables/.
        *So the /identity function/ becomes very handy as an argument to, or a
      return from, a /higher-order function/.*

      + /Higher order functions/ are what make symbolic manipulation of functions
        possible. _/Higher order functions/ are the *algebra of functions*._

*** TODO 1.3 Composition is the Essence of Programming - 7
    - TODO NOTE

    - The moment you have to dig into the implementation of the object in order
      to understand how to compose it with other objects,
      you've lost the advantages of your programming paradigm.

*** TODO 1.4 Challenges - 8
    1. DONE
    2. TODO
    3. TODO
    4. TODO
    5. TODO
    6. TODO

** DONE 2 Types and Functions - 11
   CLOSED: [2019-06-01 Sat 00:15]
   _The /category/ of /types/ and /functions/_ plays an important role in programming,
   so let's talk about
   - what /types/ are
     and
   - why we need them.

*** DONE 2.1 Who Needs Types? - 11
    CLOSED: [2019-05-31 Fri 23:30]
    So the question is, do we want to make monkeys happy, or do we want to
    produce correct programs?

*** DONE 2.2 Types Are About Composability - 12
    CLOSED: [2019-05-31 Fri 23:30]
    - /Category theory/ is about *composing* /arrows/.
      However, the /composition/ can happen ONLY when the /target object/ of one
      /arrow/ *matches* the /source object/ of the NEXT /arrow/.

      _The stronger the type system of the language, the better this match can be
      described and mechanically verified._

    - TODO NOTE

    - TODO NOTE

    - _/Testing/ is a *poor* substitute for /proof/._

*** TODO 2.3 What Are Types? - 13
    - The simplest intuition for /types/ is that they are _sets of values_.
      Since /sets/ can be _finite or infinite_, the number of values of a type
      can be _finite or infinite_.

    - ~Integer~ in Haskell is a /infinite set/, and it can be used to do _arbitrary
      precision_ arithmetic. This is like ~BigInt~ in other languages, including
      Scala and Java.

      The machine type of integer is ~Int~, which is /finite set/.

    - TODO NOTE

    - Partial function :: /functions/ that MAY return /bottom/

    - Total functions :: /functions/ that return _valid results_ for *every*
         possible argument.

    - /Set/ and /Hask/
      TODO NOTE ???

*** TODO 2.4 Why Do We Need a Mathematical Model? - 15
*** TODO 2.5 Pure and Dirty Functions - 16
*** TODO 2.6 Examples of Types - 17
*** TODO 2.7 Challenges - 20

** DONE 3 Categories Great and Small - 21
   CLOSED: [2020-06-16 Tue 02:01]
   _Categoreis come in all shapes and sizes and often pop up in unexpected places._
     We can get real appreciation for /categories/ by studying a variety of
   examples. We'll start with something really simple.

*** DONE 3.1 No Objects - 21
    CLOSED: [2020-04-29 Wed 16:42]
    - Empty Category :: _zero objects_ and, consequently, _zero morphisms_.

    - /Empty category/ is most TRIVIAL /category/.

    - =from Jian=
      In math, trivial things are often important -- they can be critical parts
      of a important system!

    - Not like /set/, there is a /category/ that includes *ALL* /categories/.
      It, of course, includes this /empty category/.

*** DONE 3.2 Simple Graphs - 21
    CLOSED: [2020-06-13 Sat 17:50]
    - _You can *build* /categories/ just by connecting objects with arrows._
        You can imagine STARTING WITH any /directed graph/ and making it into a
      /category/ by simply adding more /arrows/.
      1. Add an /identity arrow/ at each node.
      2. For any two /arrows/ such that the end of one coincides with the beginning
         of the other (in other words, any two /composable arrows/), *add* a new
         /arrow/ to serve as their /composition/.
         + Every time you add a new /arrow/, you have to also consider its
           /composition/ with any other /arrow/ (except for the /identity arrows/)
           and itself.
           *You usually end up with infinitely many /arrows/, but that's okay.*

    - Another way of looking at this process is that you're creating a category,
      which has an object for every node in the graph, and all possible chains
      of composable graph edges as /morphisms/. (You may even consider /identity
      morphisms/ as special cases of chains of length zero.)

    - Such a /category/ is called a /free category/ generated by a given graph.
      It's an example of a /free construction/, a process of completing a given
      structure by extending it with a minimum number of items to satisfy its
      laws (here, the laws of a category).
      + We'll see more examples of it in the future.

*** DONE 3.3 Orders - 22
    CLOSED: [2020-06-15 Mon 03:48]
    And now for something completely different!
    - A /category/ where a /morphism/ is a relation between /objects/:
      the relation of being _less than or equal_.
      + Let's check if it indeed is a /category/.
        * Q :: Do we have /identity morphisms/?
        * A :: Every object is less than or equal to itself: check!

        * Q :: Do we have composition?
        * A :: If ùëé <= ùëè and ùëè <= ùëê then ùëé <= ùëê: check!

        * Q & A :: Is composition associative? Check!

      + A set with a relation like this is called a /preorder/,
        so a /preorder/ *IS* indeed a /category/:

    - Partial Order :: Add an additional condition to /preorder/:
      if ùëé <= ùëè and ùëè <= ùëé then ùëé must be the same as ùëè.

    - Total Order (or called Linear Order) :: Impose the condition to /partial
      order/ that *any two* /objects/ are in a relation with each other.

    - Thin :: At most one morphism going from *any* /object/ a to *any* /object/ b.

    - /Thin/ is used to *characterize* /categories/.

    - A /preorder/ is a /thin category/.

    - Homset :: A set of morphisms from object _a_ to object _b_ in a /category/ _C_.
      + It is written as C(a, b) (or, sometimes Hom_C(a, b)).

    - Every /hom-set/ in a /preorder/ is either _empty_ or a _singleton_.
      That includes the _hom-set ùêÇ(ùëé, ùëé),_ the set of /morphisms/ from ùëé to ùëé,
      which must be a /singleton/, containing ONLY the identity, in any /preorder/.

    - You may, however, have cycles in a /preorder/.
      Cycles are forbidden in a /partial order/.

    - /Sorting algorithms/ can only work correctly on /total orders/.

    - /Partial orders/ can be "sorted" using /topological sort/.

*** DONE 3.4 Monoid as Set - 22
    CLOSED: [2020-06-16 Tue 00:21]
    - Typeclass:
      + Haskell code
        #+begin_src haskell
          class Monoid m where
            mempty :: m
            mappend :: m -> m -> m
        #+end_src

      + Scala code
        #+begin_src scala
          trait SemiGroup[T] {
            def (x: T) combine (y: T): T
          }

          trait Monoid[T] extends SemiGroup[T] {
            def unit: T
          }
        #+end_src

    - Instances:
      + Haskell code
        #+begin_src haskell
          instance Monoid String where
            mempty = ""
            mappend = (++)
        #+end_src

      + Scala code
        #+begin_src scala
          // Given objects can be defined in the companion object of `Monoid`
          given Monoid[String] {
            def (x: String) combine (y: String): String = x.concat(y)
            def unit: String = ""
          }

          given Monoid[Int] {
            def (x: Int) combine (y: Int): Int = x + y
            def unit: Int = 0
          }
        #+end_src

    - Extensional equality :: =todo=

    - Point :: the values of arguments are sometimes called /points/ (as in: the
               value of ~f~ at point ~x~)
      + Point-wise :: =TODO=
      + Point-free :: =TODO=

*** TODO 3.5 Monoid as Category - 25
*** TODO 3.6 Challenges - 27

** DONE 4 Kleisli Categories - 29
   CLOSED: [2020-06-17 Wed 01:23]
   You've seen how to model types and pure functions as a category.
   Now let's have a look at the way to model /side effects, or non-pure functions/.

   - Example:
     Functions that log or trace their execution.
     Something that, in an /imperative language/, whould likely be implemented by
     _mutating_ some /global state/.
     + Use the way of encoding the log message accumulator in to the /return types/
       and the /parameter types/.

     + Summary:
       1. We can find a way mentioned in the last entry that can make the whole
          program use /pure functions/.

       2. _However_, it's a nightmare of repetitive, error prone code. We need
          *abstraction* -- abstract /function composition/ itself.

       3. Since /composition/ is the essence of /category theory/, let's analyze
          the problem from the categorical point of view before wring more code.

*** TODO 4.1 The Writer Category - 32
*** TODO 4.2 Writer in Haskell - 34
*** TODO 4.3 Kleisli Categories - 36
*** TODO 4.4 Challenge - 37

** TODO 5 Products and Coproducts - 39
*** 5.1 Initial Object - 39
*** 5.2 Terminal Object - 41
*** 5.3 Duality - 42
*** 5.4 Isomorphisms - 42
*** 5.5 Products - 44
*** 5.6 Coproduct - 49
*** 5.7 Asymmetry - 51
*** 5.8 Challenges - 53
*** 5.9 Bibliography - 54

** TODO 6 Simple Algebraic Data Types - 55
*** 6.1 Product Types - 55
*** 6.2 Records - 59
*** 6.3 Sum Types - 61
*** 6.4 Algebra of Types - 64
*** 6.5 Challenges - 67

** TODO 7 Functors - 69
*** 7.1 Functors in Programming - 71
**** 7.1.1 The Maybe Functor - 71
**** 7.1.2 Equational Reasoning - 73
**** 7.1.3 Optional - 75
**** 7.1.4 Typeclasses - 76
**** 7.1.5 Functor in C++ - 77
**** 7.1.6 The List Functor - 78
**** 7.1.7 The Reader Functor - 80

*** 7.2 Functors as Containers - 81
*** 7.3 Functor Composition - 84
*** 7.4 Challenges - 86

** TODO 8 Functoriality - 87
*** 8.1 Bifunctors - 87
*** 8.2 Product and Coproduct Bifunctors - 89
*** 8.3 Functorial Algebraic Data Types - 91
*** 8.4 Functors in C++ - 94
*** 8.5 The Writer Functor - 96
*** 8.6 Covariant and Contravariant Functors - 98
*** 8.7 Profunctors - 100
*** 8.8 The Hom-Functor - 102
*** 8.9 Challenges - 102

** TODO 9 Function Types - 105
*** 9.1 Universal Construction - 106
*** 9.2 Currying - 109
*** 9.3 Exponentials - 112
*** 9.4 Cartesian Closed Categories - 113
*** 9.5 Exponentials and Algebraic Data Types - 114
**** 9.5.1 Zeroth Power - 114
**** 9.5.2 Powers of One - 114
**** 9.5.3 First Power - 115
**** 9.5.4 Exponentials of Sums - 115
**** 9.5.5 Exponentials of Exponentials - 115
**** 9.5.6 Exponentials over Products - 116

*** 9.6 Curry-Howard Isomorphism - 116
*** 9.7 Bibliography - 118

** TODO 10 Natural Transformations - 119
*** 10.1 Polymorphic Functions - 122
*** 10.2 Beyond Naturality - 127
*** 10.3 Functor Category - 129
*** 10.4 2-Categories - 131
*** 10.5 Conclusion - 135
*** 10.6 Challenges - 135

* Part Two - 139
** 11 Declarative Programming - 139
** 12 Limits and Colimits - 145
*** 12.1 Limit as a Natural Isomorphism - 149
*** 12.2 Examples of Limits - 152
*** 12.3 Colimits - 157
*** 12.4 Continuity - 158
*** 12.5 Challenges - 160

** 13 Free Monoids - 161
*** 13.1 Free Monoid in Haskell - 162
*** 13.2 Free Monoid Universal Construction - 163
*** 13.3 Challenges - 166

** 14 Representable Functors - 169
*** 14.1 The Hom Functor - 170
*** 14.2 Representable Functors - 172
*** 14.3 Challenges - 177
*** 14.4 Bibliography - 177

** 15 The Yoneda Lemma - 179
*** 15.1 Yoneda in Haskell - 183
*** 15.2 Co-Yoneda - 185
*** 15.3 Challenges - 186
*** 15.4 Bibliography - 186

** 16 Yoneda Embedding - 187
*** 16.1 The Embedding - 188
*** 16.2 Application to Haskell - 189
*** 16.3 Preorder Example - 190
*** 16.4 Naturality - 191
*** 16.5 Challenges - 192

* Part Three - 195
** 17 It's All About Morphisms - 195
*** 17.1 Functors - 195
*** 17.2 Commuting Diagrams - 195
*** 17.3 Natural Transformations - 196
*** 17.4 Natural Isomorphisms - 197
*** 17.5 Hom-Sets - 198
*** 17.6 Hom-Set Isomorphisms - 198
*** 17.7 Asymmetry of Hom-Sets - 199
*** 17.8 Challenges - 199

** 18 Adjunctions - 201
*** 18.1 Adjunction and Unit/Counit Pair - 201
*** 18.2 Adjunctions and Hom-Sets - 206
*** 18.3 Product from Adjunction - 209
*** 18.4 Exponential from Adjunction - 212
*** 18.5 Challenges - 213

** 19 Free/Forgetful Adjunctions - 215
*** 19.1 Some Intuitions - 217
*** 19.2 Challenges - 219

** 20 Monads: Programmer's Definition - 221
*** 20.1 The Kleisli Category - 222
*** 20.2 Fish Anatomy - 225
*** 20.3 The do Notation - 227

** 21 Monads and Effects - 233
*** 21.1 The Problem - 233
*** 21.2 The Solution - 234
**** 21.2.1 Partiality - 234
**** 21.2.2 Nondeterminism - 235
**** 21.2.3 Read-Only State - 237
**** 21.2.4 Write-Only State - 239
**** 21.2.5 State - 240
**** 21.2.6 Exceptions - 241
**** 21.2.7 Continuations - 242
**** 21.2.8 Interactive Input - 244
**** 21.2.9 Interactive Output - 246

*** 21.3 Conclusion - 247

** 22 Monads Categorically - 249
*** 22.1 Monoidal Categories - 252
*** 22.2 Monoid in a Monoidal Category - 257
*** 22.3 Monads as Monoids - 258
*** 22.4 Monads from Adjunctions - 260

** 23 Comonads - 263
*** 23.1 Programming with Comonads - 264
*** 23.2 The Product Comonad - 264
*** 23.3 Dissecting the Composition - 266
*** 23.4 The Stream Comonad - 268
*** 23.5 Comonad Categorically - 270
*** 23.6 The Store Comonad - 272
*** 23.7 Challenges - 275

** 24 F-Algebras - 277
*** 24.1 Recursion - 280
*** 24.2 Category of F-Algebras - 282
*** 24.3 Natural Numbers - 284
*** 24.4 Catamorphisms - 285
*** 24.5 Folds - 287
*** 24.6 Coalgebras - 288
*** 24.7 Challenges - 291

** 25 Algebras for Monads - 293
*** 25.1 T-algebras - 295
*** 25.2 The Kleisli Category - 297
*** 25.3 Coalgebras for Comonads - 299
*** 25.4 Lenses - 299
*** 25.5 Challenges - 302

** 26 Ends and Coends - 303
*** 26.1 Dinatural Transformations - 304
*** 26.2 Ends - 305
*** 26.3 Ends as Equalizers - 308
*** 26.4 Natural Transformations as Ends - 310
*** 26.5 Coends - 311
*** 26.6 Ninja Yoneda Lemma - 314
*** 26.7 Profunctor Composition - 315

** 27 Kan Extensions - 317
*** 27.1 Right Kan Extension - 319
*** 27.2 Kan Extension as Adjunction - 320
*** 27.3 Left Kan Extension - 322
*** 27.4 Kan Extensions as Ends - 324
*** 27.5 Kan Extensions in Haskell - 326
*** 27.6 Free Functor - 329

** 28 Enriched Categories - 333
*** 28.1 Why Monoidal Category? - 334
*** 28.2 Monoidal Category - 334
*** 28.3 Enriched Category - 336
*** 28.4 Preorders - 337
*** 28.5 Metric Spaces - 338
*** 28.6 Enriched Functors - 339
*** 28.7 Self Enrichment - 340
*** 28.8 Relation to ùüê-Categories - 341

** 29 Topoi - 343
*** 29.1 Subobject Classifier - 344
*** 29.2 Topos - 347
*** 29.3 Topoi and Logic - 347
*** 29.4 Challenges - 348

** 30 Lawvere Theories - 349
*** 30.1 Universal Algebra - 349
*** 30.2 Lawvere Theories - 350
*** 30.3 Models of Lawvere Theories - 353
*** 30.4 The Theory of Monoids - 354
*** 30.5 Lawvere Theories and Monads - 355
*** 30.6 Monads as Coends - 357
*** 30.7 Lawvere Theory of Side Effects - 359
*** 30.8 Challenges - 360
*** 30.9 Further Reading - 361

** 31 Monads, Monoids, and Categories - 363
*** 31.1 Bicategories - 363
*** 31.2 Monads - 367
*** 31.3 Challenges - 370
*** 31.4 Bibliography - 370

* Appendices - 371
* Index - 371
* Acknowledgments - 373
* Colophon - 374
* Copyleft notice - 375
