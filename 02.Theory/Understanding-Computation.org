#+TITLE: Understanding Computation
#+SUBTITLE: From Simple Machines to Impossible Programs
#+VERSION: 2013
#+AUTHOR: Tom Stuart
#+STARTUP: overview
#+STARTUP: entitiespretty

* Preface - vii
* 1. Just Enough Ruby - 1
** Interactive Ruby Shell - 1
** Values - 2
*** Basic Data - 2
*** Data Structures - 3
*** Procs - 3

** Control Flow - 4
** Objects and Methods - 5
** Classes and Modules - 6
** Miscellaneous Features - 7
*** Local Variables and Assignment - 7
*** String Interpolation - 8
*** Inspecting Objects - 8
*** Printing Strings - 8
*** Variadic Methods - 9
*** Blocks - 9
*** Enumerable - 10
*** Struct - 11
*** Monkey Patching - 12
*** Defining Constants - 13
*** Removing Constants - 13

* Part I. Programs and Machines
* 2. The Meaning of Programs - 17
** The Meaning of “Meaning” - 18
** Syntax - 19
** Operational Semantics - 20
*** Small-Step Semantics - 21
*** Big-Step Semantics - 42

** Denotational Semantics - 48
*** Expressions - 49
*** Statements - 52
*** Applications - 54

** Formal Semantics in Practice - 55
*** Formality - 55
*** Finding Meaning - 56
*** Alternatives - 57

** Implementing Parsers - 58

* 3. The Simplest Computers - 63
** Deterministic Finite Automata - 63
*** States, Rules, and Input - 63
*** Output - 64
*** Determinism - 66
*** Simulation - 66

** Nondeterministic Finite Automata - 69
*** Nondeterminism - 70
*** Free Moves - 76

** Regular Expressions - 79
*** Syntax - 80
*** Semantics - 83
*** Parsing - 92

** Equivalence - 94

* 4. Just Add Power - 105
** Deterministic Pushdown Automata - 108
*** Storage - 108
*** Rules - 110
*** Determinism - 111
*** Simulation - 112

** Nondeterministic Pushdown Automata - 118
*** Simulation - 122
*** Nonequivalence - 125

** Parsing with Pushdown Automata - 125
*** Lexical Analysis - 126
*** Syntactic Analysis - 128
*** Practicalities - 132

** How Much Power? - 133

* 5. The Ultimate Machine - 135
** Deterministic Turing Machines - 135
*** Storage - 136
*** Rules - 138
*** Determinism - 141
*** Simulation - 141

** Nondeterministic Turing Machines - 147
** Maximum Power - 148
*** Internal Storage - 148
*** Subroutines - 151
*** Multiple Tapes - 153
*** Multidimensional Tape - 154

** General-Purpose Machines - 154
*** Encoding - 156
*** Simulation - 157

* Part II. Computation and Computability
* 6. Programming with Nothing - 161
** Impersonating the Lambda Calculus - 162
*** Working with Procs - 163
*** The Problem - 164
*** Numbers - 166
*** Booleans - 169
*** Predicates - 172
*** Pairs - 173
*** Numeric Operations - 174
*** Lists - 180
*** Strings - 184
*** The Solution - 186
*** Advanced Programming Techniques - 191

** Implementing the Lambda Calculus - 197
*** Syntax - 197
*** Semantics - 199
*** Parsing - 204

* 7. Universality Is Everywhere - 207
** Lambda Calculus - 207
** Partial Recursive Functions - 210
** SKI Combinator Calculus - 215
** Iota - 224
** Tag Systems - 227
** Cyclic Tag Systems - 235
** Conway's Game of Life - 245
** Rule 110 - 247
** Wolfram's 2,3 Turing Machine - 251
* 8. Impossible Programs - 253
** The Facts of Life - 254
*** Universal Systems Can Perform Algorithms - 254
*** Programs Can Stand In for Turing Machines - 257
*** Code Is Data - 258
*** Universal Systems Can Loop Forever - 259
*** Programs Can Refer to Themselves - 264

** Decidability - 269
** The Halting Problem - 271
*** Building a Halting Checker - 271
*** It'll Never Work - 274

** Other Undecidable Problems - 277
** Depressing Implications - 280
** Why Does This Happen? - 282
** Coping with Uncomputability - 283

* 9. Programming in Toyland - 285
** Abstract Interpretation - 286
*** Route Planning - 286
*** Abstraction: Multiplying Signs - 287
*** Safety and Approximation: Adding Signs - 290

** Static Semantics - 295
*** Implementation - 296
*** Benefits and Limitations - 303

** Applications - 305

* Afterword - 307
* Index - 309









