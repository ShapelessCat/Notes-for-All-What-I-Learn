#+TITLE: Software Design for Flexibility
#+SUBTITLE: How to Avoid Programming Yourself into a Corner
#+AUTHOR: Chris Hanson, Gerald Jay Sussman
#+VERSION: 2021
#+STARTUP: entitiespretty
#+STARTUP: indent
#+STARTUP: overview

* Forward
* Preface
* Acknowledgements
* 1. Flexibility in Nature and in Design
** 1.1 Architecture of computation
** 1.2 Smart parts for flexibility
** 1.3 Redundancy and degeneracy
** 1.4 Exploratory behavior
** 1.5 The cost of flexibility

* 2. Domain-Specific Languages
** 2.1 Combinators
*** 2.1.1 Funciton combinators
**** Arity
**** Exercise 2.1: Arity repair
**** Exercise 2.2: Arity extension
**** Multiple values
**** Exercise 2.3: A quickie
**** A small library
    
*** 2.1.2 Combinators and body plans
**** Exercise 2.4: As compositions?
**** Exercise 2.5: Useful combinators
    
** 2.2 Regular expressions
*** 2.2.1 A regular expression combinator language
*** 2.2.2 Implementation of the translator
**** The moral of this story
**** Exercise 2.6: Adding * and + to regular expressions
**** Exercise 2.7: A bug, one bad joke, two tweaks, and a revelation
**** Exercise 2.8: Too much nesting
**** Exercise 2.9: Back-references
**** Exercise 2.10: Standards?
   
** 2.3 Wrappers
*** 2.3.1 Specialization wrappers
*** 2.3.2 Implementing specializers
*** 2.3.3 Adapters
**** Exercise 2.11: Implementing unit conversions
   
** 2.4 Abstracting a domain
*** 2.4.1 A monolithic implementation
**** A checkers domain model
**** A checkers referee
**** Critique
     
*** 2.4.2 Factoring out the domain
**** A domain model
**** An executive
**** Rules of checkers
**** Critique
**** Exercise 2.12: A bit of chess
**** Exercise 2.13: More chess
**** Exercise 2.14: An advanced project
     
** 2.5 Summary
   
* TODO 3. Variations on an Arithmetic Theme
* TODO 4. Pattern Matching
* TODO 5. Evaluation
* TODO 6. Layering
* TODO 7. Propagation
* TODO 8. Epilogue
* TODO A. Appendix: Supporting Software
* TODO B. Appendix: Scheme
* TODO References
* Index
* TODO List of Exercises
